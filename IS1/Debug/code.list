
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001952c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa8  080196e0  080196e0  000296e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a688  0801a688  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  0801a688  0801a688  0002a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a690  0801a690  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a690  0801a690  0002a690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a694  0801a694  0002a694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0801a698  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031e4  20000358  0801a9f0  00030358  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000353c  0801a9f0  0003353c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d3dc  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007191  00000000  00000000  0006d764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023a8  00000000  00000000  000748f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002108  00000000  00000000  00076ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f2dc  00000000  00000000  00078da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032d35  00000000  00000000  000a8084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6458  00000000  00000000  000dadb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d1211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000adfc  00000000  00000000  001d1264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000358 	.word	0x20000358
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080196c4 	.word	0x080196c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000035c 	.word	0x2000035c
 80001ec:	080196c4 	.word	0x080196c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <AT30TS74_InitStruct>:
*/

#include "AT30TS74.h"

void AT30TS74_InitStruct(struct sAT30TS74* s, I2C_HandleTypeDef* interface, uint8_t add)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	4613      	mov	r3, r2
 8001018:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  s->Address = 0b1001000 | add;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001020:	b2da      	uxtb	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	701a      	strb	r2, [r3, #0]
  s->Interface = interface;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	605a      	str	r2, [r3, #4]
  s->Temperature = 0;
 800102c:	68f9      	ldr	r1, [r7, #12]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
  s->Configured = false;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  for (i=0;i<64;i++)
 8001042:	2300      	movs	r3, #0
 8001044:	75fb      	strb	r3, [r7, #23]
 8001046:	e008      	b.n	800105a <AT30TS74_InitStruct+0x4e>
    s->Data[i] = 0;
 8001048:	7dfa      	ldrb	r2, [r7, #23]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3204      	adds	r2, #4
 800104e:	2100      	movs	r1, #0
 8001050:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (i=0;i<64;i++)
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	3301      	adds	r3, #1
 8001058:	75fb      	strb	r3, [r7, #23]
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	2b3f      	cmp	r3, #63	; 0x3f
 800105e:	d9f3      	bls.n	8001048 <AT30TS74_InitStruct+0x3c>
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <AT30TS74_Configure>:

void AT30TS74_Configure(struct sAT30TS74* s)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
  uint8_t buffer [3] = {0};
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <AT30TS74_Configure+0x58>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	81bb      	strh	r3, [r7, #12]
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
  buffer[0] = 1; // configuration register
 8001082:	2301      	movs	r3, #1
 8001084:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0b01100000;
 8001086:	2360      	movs	r3, #96	; 0x60
 8001088:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 3, 10);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6858      	ldr	r0, [r3, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b299      	uxth	r1, r3
 8001098:	f107 020c 	add.w	r2, r7, #12
 800109c:	230a      	movs	r3, #10
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2303      	movs	r3, #3
 80010a2:	f005 f929 	bl	80062f8 <HAL_I2C_Master_Transmit>
  s->Configured = true;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  s->Index = 0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  s->Samples = 4;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2204      	movs	r2, #4
 80010ba:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	080196e0 	.word	0x080196e0
 80010cc:	00000000 	.word	0x00000000

080010d0 <AT30TS74_GetTemperature>:


void AT30TS74_GetTemperature(struct sAT30TS74* s)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t u;
  double t = 0;
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  uint8_t buffer[2] = {0};
 80010e4:	2300      	movs	r3, #0
 80010e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef res;
  HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 1, 10);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6858      	ldr	r0, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	b299      	uxth	r1, r3
 80010f6:	f107 0208 	add.w	r2, r7, #8
 80010fa:	230a      	movs	r3, #10
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	f005 f8fa 	bl	80062f8 <HAL_I2C_Master_Transmit>
  res = HAL_I2C_Master_Receive(s->Interface, ((s->Address) << 1), buffer, 2, 10);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6858      	ldr	r0, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	b299      	uxth	r1, r3
 8001112:	f107 0208 	add.w	r2, r7, #8
 8001116:	230a      	movs	r3, #10
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2302      	movs	r3, #2
 800111c:	f005 f9ea 	bl	80064f4 <HAL_I2C_Master_Receive>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
  if (res == HAL_OK)
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d15f      	bne.n	80011ea <AT30TS74_GetTemperature+0x11a>
  {
    s->Data[s->Index] = (buffer[0] << 8) | buffer[1];
 800112a:	7a3b      	ldrb	r3, [r7, #8]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b219      	sxth	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800113e:	461a      	mov	r2, r3
 8001140:	b289      	uxth	r1, r1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3204      	adds	r2, #4
 8001146:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    s->Index = (s->Index + 1) % (s->Samples);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001150:	3301      	adds	r3, #1
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	f892 2092 	ldrb.w	r2, [r2, #146]	; 0x92
 8001158:	fb93 f1f2 	sdiv	r1, r3, r2
 800115c:	fb02 f201 	mul.w	r2, r2, r1
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	b2da      	uxtb	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    for (i=0;i<(s->Samples); i++)
 800116a:	2300      	movs	r3, #0
 800116c:	77fb      	strb	r3, [r7, #31]
 800116e:	e024      	b.n	80011ba <AT30TS74_GetTemperature+0xea>
    {
      u = *(&(s->Data[i]));
 8001170:	7ffa      	ldrb	r2, [r7, #31]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3204      	adds	r2, #4
 8001176:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800117a:	81bb      	strh	r3, [r7, #12]
      t += ((double) u) * 0.0625 / 16;
 800117c:	89bb      	ldrh	r3, [r7, #12]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9d0 	bl	8000524 <__aeabi_ui2d>
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <AT30TS74_GetTemperature+0x148>)
 800118a:	f7ff fa45 	bl	8000618 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <AT30TS74_GetTemperature+0x14c>)
 800119c:	f7ff fb66 	bl	800086c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011a8:	f7ff f880 	bl	80002ac <__adddf3>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (i=0;i<(s->Samples); i++)
 80011b4:	7ffb      	ldrb	r3, [r7, #31]
 80011b6:	3301      	adds	r3, #1
 80011b8:	77fb      	strb	r3, [r7, #31]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80011c0:	7ffa      	ldrb	r2, [r7, #31]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3d4      	bcc.n	8001170 <AT30TS74_GetTemperature+0xa0>
    }
    s->Temperature = t / s->Samples;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9b9 	bl	8000544 <__aeabi_i2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011da:	f7ff fb47 	bl	800086c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
  else
  {
    s->Temperature = 99;
    printf("Could not read AT30 at address %d\n",s->Address);
  }
}
 80011e8:	e00b      	b.n	8001202 <AT30TS74_GetTemperature+0x132>
    s->Temperature = 99;
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	a308      	add	r3, pc, #32	; (adr r3, 8001210 <AT30TS74_GetTemperature+0x140>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    printf("Could not read AT30 at address %d\n",s->Address);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <AT30TS74_GetTemperature+0x150>)
 80011fe:	f013 fb55 	bl	80148ac <iprintf>
}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	00000000 	.word	0x00000000
 8001214:	4058c000 	.word	0x4058c000
 8001218:	3fb00000 	.word	0x3fb00000
 800121c:	40300000 	.word	0x40300000
 8001220:	080196e4 	.word	0x080196e4

08001224 <InitGPSFrame>:
#include <stdlib.h>
#include <math.h>
#include "funcs.h"

void InitGPSFrame(struct sGPSFrame* gps)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
//  gps->TimeStr = 0;
//  gps->DateStr = 0;
//  gps->LongStr = 0;
//  gps->LatStr = 0;
  gps->RMCTimeStr[0] = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
  gps->GGATimeStr[0] = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
  gps->DateStr[0] = 0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
  gps->LongStr[0] = 0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
  gps->LatStr[0] = 0;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
  gps->AltStr[0] = 0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  gps->NS='n';
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	226e      	movs	r2, #110	; 0x6e
 8001260:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
  gps->EW='n';
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	226e      	movs	r2, #110	; 0x6e
 8001268:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
  gps->Time = 0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  gps->Date = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  gps->Longitude = 0;
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
  gps->Latitude = 0;
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
  gps->Fixed = false;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  gps->Ticks = 0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
  gps->Status = 0;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  gps->Altitude = 0;
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
  gps->NumSats = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
  gps->DateTimeStr[0] = 0;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <ProcessGPSFrame>:



uint8_t ProcessGPSFrame(struct sGPSFrame* gps)
{
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	b0e7      	sub	sp, #412	; 0x19c
 80012e0:	af06      	add	r7, sp, #24
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	6018      	str	r0, [r3, #0]
  double val, deg, min;
  int i;
  char* RMCFields[20];
  char* GGAFields[20];
  uint8_t rs[90] = {0};
 80012e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	3304      	adds	r3, #4
 80012f0:	2256      	movs	r2, #86	; 0x56
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f012 fc57 	bl	8013ba8 <memset>
  uint8_t gs[90] = {0};
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	3304      	adds	r3, #4
 8001304:	2256      	movs	r2, #86	; 0x56
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f012 fc4d 	bl	8013ba8 <memset>
  strncpy((char*) rs, gps->RMCSentence, 90);
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	6819      	ldr	r1, [r3, #0]
 8001312:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001316:	225a      	movs	r2, #90	; 0x5a
 8001318:	4618      	mov	r0, r3
 800131a:	f013 fbce 	bl	8014aba <strncpy>
  strncpy((char*) gs, gps->GGASentence, 90);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f103 015a 	add.w	r1, r3, #90	; 0x5a
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	225a      	movs	r2, #90	; 0x5a
 800132c:	4618      	mov	r0, r3
 800132e:	f013 fbc4 	bl	8014aba <strncpy>

  parse_comma_delimited_str((char*) rs, RMCFields, 20);
 8001332:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8001336:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800133a:	2214      	movs	r2, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f001 fbb9 	bl	8002ab4 <parse_comma_delimited_str>
  parse_comma_delimited_str((char*) gs, GGAFields, 20);
 8001342:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	2214      	movs	r2, #20
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fbb1 	bl	8002ab4 <parse_comma_delimited_str>
  if (strncmp(RMCFields[1], GGAFields[1], 6) != 0)  // if header does not match
 8001352:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001356:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800135a:	2206      	movs	r2, #6
 800135c:	4618      	mov	r0, r3
 800135e:	f013 fb9a 	bl	8014a96 <strncmp>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <ProcessGPSFrame+0x90>
    return 1;
 8001368:	2301      	movs	r3, #1
 800136a:	e1d8      	b.n	800171e <ProcessGPSFrame+0x442>
   *  14   = Diff. reference station ID#
   *  15   = Checksum
   */


  gps->Status = 0;
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2200      	movs	r2, #0
 8001372:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  if (GGAFields[6] > 0)
 8001376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <ProcessGPSFrame+0xac>
    gps->Fixed = true;
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

  strncpy(gps->RMCTimeStr, RMCFields[1], 20);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	33b4      	adds	r3, #180	; 0xb4
 800138e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001392:	2214      	movs	r2, #20
 8001394:	4618      	mov	r0, r3
 8001396:	f013 fb90 	bl	8014aba <strncpy>
  strncpy(gps->GGATimeStr, GGAFields[1], 20);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	33c8      	adds	r3, #200	; 0xc8
 80013a0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80013a4:	2214      	movs	r2, #20
 80013a6:	4618      	mov	r0, r3
 80013a8:	f013 fb87 	bl	8014aba <strncpy>
  strncpy(gps->DateStr,    RMCFields[9], 20);
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	33dd      	adds	r3, #221	; 0xdd
 80013b2:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80013b6:	2214      	movs	r2, #20
 80013b8:	4618      	mov	r0, r3
 80013ba:	f013 fb7e 	bl	8014aba <strncpy>
  strncpy(gps->LongStr,    RMCFields[5], 20);
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	33f1      	adds	r3, #241	; 0xf1
 80013c4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80013c8:	2214      	movs	r2, #20
 80013ca:	4618      	mov	r0, r3
 80013cc:	f013 fb75 	bl	8014aba <strncpy>
  strncpy(gps->LatStr,     RMCFields[3], 20);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f203 1305 	addw	r3, r3, #261	; 0x105
 80013d8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80013dc:	2214      	movs	r2, #20
 80013de:	4618      	mov	r0, r3
 80013e0:	f013 fb6b 	bl	8014aba <strncpy>
  strncpy(gps->AltStr,     GGAFields[9], 20);
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f203 1319 	addw	r3, r3, #281	; 0x119
 80013ec:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80013f0:	2214      	movs	r2, #20
 80013f2:	4618      	mov	r0, r3
 80013f4:	f013 fb61 	bl	8014aba <strncpy>

  gps->NS = RMCFields[4][0];
 80013f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
  gps->EW = RMCFields[6][0];
 8001406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
  gps->Time = strtol(gps->RMCTimeStr, NULL, 10);
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	33b4      	adds	r3, #180	; 0xb4
 800141a:	220a      	movs	r2, #10
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f014 fa6a 	bl	80158f8 <strtol>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  gps->Date = strtol(gps->DateStr, NULL, 10);
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	33dd      	adds	r3, #221	; 0xdd
 8001436:	220a      	movs	r2, #10
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f014 fa5c 	bl	80158f8 <strtol>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

  val = strtof(gps->LatStr, NULL) / 100;
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f203 1305 	addw	r3, r3, #261	; 0x105
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f014 f96e 	bl	8015738 <strtof>
 800145c:	eef0 7a40 	vmov.f32	s15, s0
 8001460:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001728 <ProcessGPSFrame+0x44c>
 8001464:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001468:	ee16 0a90 	vmov	r0, s13
 800146c:	f7ff f87c 	bl	8000568 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
  deg = floor(val);
 8001478:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 800147c:	f017 f8f8 	bl	8018670 <floor>
 8001480:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
  min = (val-deg) * 100;
 8001484:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8001488:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800148c:	f7fe ff0c 	bl	80002a8 <__aeabi_dsub>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4ba3      	ldr	r3, [pc, #652]	; (800172c <ProcessGPSFrame+0x450>)
 800149e:	f7ff f8bb 	bl	8000618 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  if (gps->NS == 'N')
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80014b2:	2b4e      	cmp	r3, #78	; 0x4e
 80014b4:	d109      	bne.n	80014ca <ProcessGPSFrame+0x1ee>
    gps->Status |= (1<<24);
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80014be:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  gps->Latitude = deg + min/60;
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b98      	ldr	r3, [pc, #608]	; (8001730 <ProcessGPSFrame+0x454>)
 80014d0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80014d4:	f7ff f9ca 	bl	800086c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80014e4:	f7fe fee2 	bl	80002ac <__adddf3>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	1d39      	adds	r1, r7, #4
 80014ee:	6809      	ldr	r1, [r1, #0]
 80014f0:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148

  val = strtof(gps->LongStr, NULL) / 100;
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	33f1      	adds	r3, #241	; 0xf1
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f014 f91b 	bl	8015738 <strtof>
 8001502:	eef0 7a40 	vmov.f32	s15, s0
 8001506:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001728 <ProcessGPSFrame+0x44c>
 800150a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800150e:	ee16 0a90 	vmov	r0, s13
 8001512:	f7ff f829 	bl	8000568 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
  deg = floor(val);
 800151e:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 8001522:	f017 f8a5 	bl	8018670 <floor>
 8001526:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
  min = (val-deg) * 100;
 800152a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800152e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001532:	f7fe feb9 	bl	80002a8 <__aeabi_dsub>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4b7a      	ldr	r3, [pc, #488]	; (800172c <ProcessGPSFrame+0x450>)
 8001544:	f7ff f868 	bl	8000618 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  if (gps->EW == 'E')
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8001558:	2b45      	cmp	r3, #69	; 0x45
 800155a:	d109      	bne.n	8001570 <ProcessGPSFrame+0x294>
    gps->Status |= (1<<25);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001564:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  gps->Longitude = deg + min/60;
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <ProcessGPSFrame+0x454>)
 8001576:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800157a:	f7ff f977 	bl	800086c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800158a:	f7fe fe8f 	bl	80002ac <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	1d39      	adds	r1, r7, #4
 8001594:	6809      	ldr	r1, [r1, #0]
 8001596:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140

  val = strtof(gps->AltStr, NULL);
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f203 1319 	addw	r3, r3, #281	; 0x119
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f014 f8c7 	bl	8015738 <strtof>
 80015aa:	ee10 3a10 	vmov	r3, s0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffda 	bl	8000568 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
  gps->Altitude = val;
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80015c4:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

  gps->NumSats = strtol(GGAFields[7], NULL, 10);
 80015c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80015cc:	220a      	movs	r2, #10
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f014 f991 	bl	80158f8 <strtol>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159

  i = strtol(GGAFields[6], NULL, 10);
 80015e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80015e6:	220a      	movs	r2, #10
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f014 f984 	bl	80158f8 <strtol>
 80015f0:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
 80015f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d832      	bhi.n	8001662 <ProcessGPSFrame+0x386>
 80015fc:	a201      	add	r2, pc, #4	; (adr r2, 8001604 <ProcessGPSFrame+0x328>)
 80015fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001602:	bf00      	nop
 8001604:	08001663 	.word	0x08001663
 8001608:	08001621 	.word	0x08001621
 800160c:	08001637 	.word	0x08001637
 8001610:	08001663 	.word	0x08001663
 8001614:	08001663 	.word	0x08001663
 8001618:	08001663 	.word	0x08001663
 800161c:	0800164d 	.word	0x0800164d
  switch (i)
  {
    case 0:
      break;
    case 1:
      gps->Status |= (1<<26);
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001628:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
      break;
 8001634:	e015      	b.n	8001662 <ProcessGPSFrame+0x386>
    case 2:
      gps->Status |= (1<<27);
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800163e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
      break;
 800164a:	e00a      	b.n	8001662 <ProcessGPSFrame+0x386>
    case 6:
      gps->Status |= (1<<28);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
      break;
 8001660:	bf00      	nop
  }

  gps->Ticks = 0;
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
//  snprintf(gps->DateTimeStr, 100, "20%02lu-%02lu-%02lu %02lu:%02lu:%02lu",
  snprintf(gps->DateTimeStr, 100, "20%02lu%02lu%02lu %02lu%02lu%02lu",
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f503 7cb0 	add.w	ip, r3, #352	; 0x160
      (gps->Date) % 100, (gps->Date/100) % 100, (gps->Date/10000),
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
  snprintf(gps->DateTimeStr, 100, "20%02lu%02lu%02lu %02lu%02lu%02lu",
 800167c:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <ProcessGPSFrame+0x458>)
 800167e:	fba2 1203 	umull	r1, r2, r2, r3
 8001682:	0950      	lsrs	r0, r2, #5
 8001684:	2264      	movs	r2, #100	; 0x64
 8001686:	fb02 f200 	mul.w	r2, r2, r0
 800168a:	1a98      	subs	r0, r3, r2
      (gps->Date) % 100, (gps->Date/100) % 100, (gps->Date/10000),
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <ProcessGPSFrame+0x458>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	095a      	lsrs	r2, r3, #5
  snprintf(gps->DateTimeStr, 100, "20%02lu%02lu%02lu %02lu%02lu%02lu",
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <ProcessGPSFrame+0x458>)
 800169e:	fba3 1302 	umull	r1, r3, r3, r2
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2164      	movs	r1, #100	; 0x64
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	1ad3      	subs	r3, r2, r3
      (gps->Date) % 100, (gps->Date/100) % 100, (gps->Date/10000),
 80016ac:	1d3a      	adds	r2, r7, #4
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
  snprintf(gps->DateTimeStr, 100, "20%02lu%02lu%02lu %02lu%02lu%02lu",
 80016b4:	4920      	ldr	r1, [pc, #128]	; (8001738 <ProcessGPSFrame+0x45c>)
 80016b6:	fba1 1202 	umull	r1, r2, r1, r2
 80016ba:	0b55      	lsrs	r5, r2, #13
      (gps->Time/10000), (gps->Time/100) % 100, (gps->Time) % 100);
 80016bc:	1d3a      	adds	r2, r7, #4
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
  snprintf(gps->DateTimeStr, 100, "20%02lu%02lu%02lu %02lu%02lu%02lu",
 80016c4:	491c      	ldr	r1, [pc, #112]	; (8001738 <ProcessGPSFrame+0x45c>)
 80016c6:	fba1 1202 	umull	r1, r2, r1, r2
 80016ca:	0b56      	lsrs	r6, r2, #13
      (gps->Time/10000), (gps->Time/100) % 100, (gps->Time) % 100);
 80016cc:	1d3a      	adds	r2, r7, #4
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
 80016d4:	4917      	ldr	r1, [pc, #92]	; (8001734 <ProcessGPSFrame+0x458>)
 80016d6:	fba1 1202 	umull	r1, r2, r1, r2
 80016da:	0951      	lsrs	r1, r2, #5
  snprintf(gps->DateTimeStr, 100, "20%02lu%02lu%02lu %02lu%02lu%02lu",
 80016dc:	4a15      	ldr	r2, [pc, #84]	; (8001734 <ProcessGPSFrame+0x458>)
 80016de:	fba2 4201 	umull	r4, r2, r2, r1
 80016e2:	0952      	lsrs	r2, r2, #5
 80016e4:	2464      	movs	r4, #100	; 0x64
 80016e6:	fb04 f202 	mul.w	r2, r4, r2
 80016ea:	1a8a      	subs	r2, r1, r2
      (gps->Time/10000), (gps->Time/100) % 100, (gps->Time) % 100);
 80016ec:	1d39      	adds	r1, r7, #4
 80016ee:	6809      	ldr	r1, [r1, #0]
 80016f0:	f8d1 4134 	ldr.w	r4, [r1, #308]	; 0x134
  snprintf(gps->DateTimeStr, 100, "20%02lu%02lu%02lu %02lu%02lu%02lu",
 80016f4:	490f      	ldr	r1, [pc, #60]	; (8001734 <ProcessGPSFrame+0x458>)
 80016f6:	fba1 e104 	umull	lr, r1, r1, r4
 80016fa:	0949      	lsrs	r1, r1, #5
 80016fc:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8001700:	fb0e f101 	mul.w	r1, lr, r1
 8001704:	1a61      	subs	r1, r4, r1
 8001706:	9104      	str	r1, [sp, #16]
 8001708:	9203      	str	r2, [sp, #12]
 800170a:	9602      	str	r6, [sp, #8]
 800170c:	9501      	str	r5, [sp, #4]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4603      	mov	r3, r0
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <ProcessGPSFrame+0x460>)
 8001714:	2164      	movs	r1, #100	; 0x64
 8001716:	4660      	mov	r0, ip
 8001718:	f013 f95c 	bl	80149d4 <sniprintf>
  return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8001724:	46bd      	mov	sp, r7
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001728:	42c80000 	.word	0x42c80000
 800172c:	40590000 	.word	0x40590000
 8001730:	404e0000 	.word	0x404e0000
 8001734:	51eb851f 	.word	0x51eb851f
 8001738:	d1b71759 	.word	0xd1b71759
 800173c:	08019708 	.word	0x08019708

08001740 <HR_Execute>:
 */



uint8_t HR_Execute(struct sState *state, struct sHR4000 *HR, struct sSpectra *Spectra, struct sGPSFrame *gps)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09e      	sub	sp, #120	; 0x78
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  uint8_t buffer[100];
  if (HR->Delay)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	895b      	ldrh	r3, [r3, #10]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HR_Execute+0x26>
  {
    HR->Delay--;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	895b      	ldrh	r3, [r3, #10]
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	815a      	strh	r2, [r3, #10]
    return 0;
 8001762:	2300      	movs	r3, #0
 8001764:	e18d      	b.n	8001a82 <HR_Execute+0x342>
  }
  if (HR->State < 5)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	7c9b      	ldrb	r3, [r3, #18]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d802      	bhi.n	8001774 <HR_Execute+0x34>
    HR->GetSpectra = false;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2200      	movs	r2, #0
 8001772:	739a      	strb	r2, [r3, #14]

  if ((HR->State > 5) && (HR->NextIntegrationTime_ms != HR->IntegrationTime_ms))
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	7c9b      	ldrb	r3, [r3, #18]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d908      	bls.n	800178e <HR_Execute+0x4e>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	88da      	ldrh	r2, [r3, #6]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	889b      	ldrh	r3, [r3, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	d002      	beq.n	800178e <HR_Execute+0x4e>
    HR->State = 5;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2205      	movs	r2, #5
 800178c:	749a      	strb	r2, [r3, #18]

  switch (HR->State)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	7c9b      	ldrb	r3, [r3, #18]
 8001792:	2b07      	cmp	r3, #7
 8001794:	f200 8164 	bhi.w	8001a60 <HR_Execute+0x320>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HR_Execute+0x60>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017c1 	.word	0x080017c1
 80017a4:	0800180d 	.word	0x0800180d
 80017a8:	08001845 	.word	0x08001845
 80017ac:	08001881 	.word	0x08001881
 80017b0:	080018bd 	.word	0x080018bd
 80017b4:	080018f5 	.word	0x080018f5
 80017b8:	0800193f 	.word	0x0800193f
 80017bc:	080019ab 	.word	0x080019ab
  {
    case 0:
      HAL_UART_Receive(HR->UART, buffer, 20, 1);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	f107 0110 	add.w	r1, r7, #16
 80017c8:	2301      	movs	r3, #1
 80017ca:	2214      	movs	r2, #20
 80017cc:	f009 fa03 	bl	800abd6 <HAL_UART_Receive>
      printf("Case 0.\n");
 80017d0:	48a7      	ldr	r0, [pc, #668]	; (8001a70 <HR_Execute+0x330>)
 80017d2:	f013 f8f1 	bl	80149b8 <puts>
      if (HR_SetBinaryMode(HR->UART))
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fa2e 	bl	8001c3c <HR_SetBinaryMode>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d008      	beq.n	80017f8 <HR_Execute+0xb8>
      {
        HR->Delay = 300;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ec:	815a      	strh	r2, [r3, #10]
        HR->State = 0;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2200      	movs	r2, #0
 80017f2:	749a      	strb	r2, [r3, #18]
        return 1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e144      	b.n	8001a82 <HR_Execute+0x342>
      }
      else
      {
        HR->Delay = 20;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2214      	movs	r2, #20
 80017fc:	815a      	strh	r2, [r3, #10]
        HR->State++;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	7c9b      	ldrb	r3, [r3, #18]
 8001802:	3301      	adds	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	749a      	strb	r2, [r3, #18]
      }
      break;
 800180a:	e139      	b.n	8001a80 <HR_Execute+0x340>
    case 1:
      if (HR_SetTriggerMode(HR->UART, 1))
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fb54 	bl	8001ec0 <HR_SetTriggerMode>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <HR_Execute+0xf0>
      {
        HR->Delay = 300;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001824:	815a      	strh	r2, [r3, #10]
        HR->State = 0;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2200      	movs	r2, #0
 800182a:	749a      	strb	r2, [r3, #18]
        return 1;
 800182c:	2301      	movs	r3, #1
 800182e:	e128      	b.n	8001a82 <HR_Execute+0x342>
      }
      else
      {
        HR->Delay = 20;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2214      	movs	r2, #20
 8001834:	815a      	strh	r2, [r3, #10]
        HR->State++;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	7c9b      	ldrb	r3, [r3, #18]
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	749a      	strb	r2, [r3, #18]
      }
      break;
 8001842:	e11d      	b.n	8001a80 <HR_Execute+0x340>
    case 2:
      if (HR_SetSmoothing(HR->UART, HR->Smoothing))
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	7a5b      	ldrb	r3, [r3, #9]
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f000 fb0a 	bl	8001e68 <HR_SetSmoothing>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HR_Execute+0x12c>
      {
        HR->Delay = 300;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001860:	815a      	strh	r2, [r3, #10]
        HR->State = 0;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2200      	movs	r2, #0
 8001866:	749a      	strb	r2, [r3, #18]
        return 1;
 8001868:	2301      	movs	r3, #1
 800186a:	e10a      	b.n	8001a82 <HR_Execute+0x342>
      }
      else
      {
        HR->Delay = 20;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2214      	movs	r2, #20
 8001870:	815a      	strh	r2, [r3, #10]
        HR->State++;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	7c9b      	ldrb	r3, [r3, #18]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	749a      	strb	r2, [r3, #18]
      }
      break;
 800187e:	e0ff      	b.n	8001a80 <HR_Execute+0x340>
    case 3:
      if (HR_SetSumming(HR->UART, HR->Summing))
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	7a1b      	ldrb	r3, [r3, #8]
 8001888:	4619      	mov	r1, r3
 800188a:	4610      	mov	r0, r2
 800188c:	f000 fab4 	bl	8001df8 <HR_SetSumming>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <HR_Execute+0x168>
      {
        HR->Delay = 300;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800189c:	815a      	strh	r2, [r3, #10]
        HR->State = 0;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2200      	movs	r2, #0
 80018a2:	749a      	strb	r2, [r3, #18]
        return 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0ec      	b.n	8001a82 <HR_Execute+0x342>
      }
      else
      {
        HR->Delay = 20;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2214      	movs	r2, #20
 80018ac:	815a      	strh	r2, [r3, #10]
        HR->State++;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	7c9b      	ldrb	r3, [r3, #18]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	749a      	strb	r2, [r3, #18]
      }
      break;
 80018ba:	e0e1      	b.n	8001a80 <HR_Execute+0x340>
    case 4:
      if (HR_SetTriggerMode(HR->UART, 0))
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fafc 	bl	8001ec0 <HR_SetTriggerMode>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <HR_Execute+0x1a0>
      {
        HR->Delay = 300;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018d4:	815a      	strh	r2, [r3, #10]
        HR->State = 0;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2200      	movs	r2, #0
 80018da:	749a      	strb	r2, [r3, #18]
        return 1;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0d0      	b.n	8001a82 <HR_Execute+0x342>
      }
      else
      {
        HR->Delay = 20;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2214      	movs	r2, #20
 80018e4:	815a      	strh	r2, [r3, #10]
        HR->State++;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	7c9b      	ldrb	r3, [r3, #18]
 80018ea:	3301      	adds	r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	749a      	strb	r2, [r3, #18]
      }
      break;
 80018f2:	e0c5      	b.n	8001a80 <HR_Execute+0x340>
    case 5:
      HR->IntegrationTime_ms = HR->NextIntegrationTime_ms;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	88da      	ldrh	r2, [r3, #6]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	809a      	strh	r2, [r3, #4]
      if (HR_SetIntegrationTime(HR->UART, HR->IntegrationTime_ms))
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	889b      	ldrh	r3, [r3, #4]
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f000 fa44 	bl	8001d94 <HR_SetIntegrationTime>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d008      	beq.n	8001924 <HR_Execute+0x1e4>
      {
        HR->Delay = 300;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001918:	815a      	strh	r2, [r3, #10]
        HR->State = 0;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2200      	movs	r2, #0
 800191e:	749a      	strb	r2, [r3, #18]
        return 1;
 8001920:	2301      	movs	r3, #1
 8001922:	e0ae      	b.n	8001a82 <HR_Execute+0x342>
      }
      HR->GetSpectra = true;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2201      	movs	r2, #1
 8001928:	739a      	strb	r2, [r3, #14]
      HR->DiscardNextSpectra = true;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2201      	movs	r2, #1
 800192e:	735a      	strb	r2, [r3, #13]
      HR->State++;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	7c9b      	ldrb	r3, [r3, #18]
 8001934:	3301      	adds	r3, #1
 8001936:	b2da      	uxtb	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	749a      	strb	r2, [r3, #18]
      break;
 800193c:	e0a0      	b.n	8001a80 <HR_Execute+0x340>
    case 6:
      if (HR->GetSpectra == false)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	7b9b      	ldrb	r3, [r3, #14]
 8001942:	f083 0301 	eor.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HR_Execute+0x210>
        return 0;
 800194c:	2300      	movs	r3, #0
 800194e:	e098      	b.n	8001a82 <HR_Execute+0x342>
      HAL_StatusTypeDef result;
      if (HR_TriggerSpectra(HR->UART))
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fadf 	bl	8001f18 <HR_TriggerSpectra>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HR_Execute+0x232>
      {
        HR->Delay = 300;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001966:	815a      	strh	r2, [r3, #10]
        HR->State = 0;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2200      	movs	r2, #0
 800196c:	749a      	strb	r2, [r3, #18]
        return 1;
 800196e:	2301      	movs	r3, #1
 8001970:	e087      	b.n	8001a82 <HR_Execute+0x342>
      }
      HR->DataReady = false;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2200      	movs	r2, #0
 8001976:	73da      	strb	r2, [r3, #15]
      result =  HAL_UART_Receive_IT(HR->UART, Spectra->RawData, HRDATASIZE);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3309      	adds	r3, #9
 8001980:	f641 72de 	movw	r2, #8158	; 0x1fde
 8001984:	4619      	mov	r1, r3
 8001986:	f009 f9c8 	bl	800ad1a <HAL_UART_Receive_IT>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      HR->ElapsedTime = 0;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2200      	movs	r2, #0
 8001994:	821a      	strh	r2, [r3, #16]
      HR->State++;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	7c9b      	ldrb	r3, [r3, #18]
 800199a:	3301      	adds	r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	749a      	strb	r2, [r3, #18]
      HR->GetSpectra = false;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2200      	movs	r2, #0
 80019a6:	739a      	strb	r2, [r3, #14]
      break;
 80019a8:	e06a      	b.n	8001a80 <HR_Execute+0x340>
    case 7:
      if ((HR->DataReady == false) && (HR->ElapsedTime < 100)) // elapsed time is units of 0.1 s  or maybe not
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	7bdb      	ldrb	r3, [r3, #15]
 80019ae:	f083 0301 	eor.w	r3, r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00e      	beq.n	80019d6 <HR_Execute+0x296>
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	8a1b      	ldrh	r3, [r3, #16]
 80019bc:	2b63      	cmp	r3, #99	; 0x63
 80019be:	d80a      	bhi.n	80019d6 <HR_Execute+0x296>
      {
        HR->Delay = 10;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	220a      	movs	r2, #10
 80019c4:	815a      	strh	r2, [r3, #10]
        HR->ElapsedTime++;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	8a1b      	ldrh	r3, [r3, #16]
 80019ca:	3301      	adds	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	821a      	strh	r2, [r3, #16]
        return 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e055      	b.n	8001a82 <HR_Execute+0x342>
      }
      if (HR->ElapsedTime >= 1000)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	8a1b      	ldrh	r3, [r3, #16]
 80019da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019de:	d310      	bcc.n	8001a02 <HR_Execute+0x2c2>
      {
        printf("Calling AbortReceive.\n");
 80019e0:	4824      	ldr	r0, [pc, #144]	; (8001a74 <HR_Execute+0x334>)
 80019e2:	f012 ffe9 	bl	80149b8 <puts>
        HAL_UART_AbortReceive_IT(HR->UART);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f009 f9c6 	bl	800ad7c <HAL_UART_AbortReceive_IT>
        HR->Delay = 300;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019f6:	815a      	strh	r2, [r3, #10]
        HR->State = 0;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2200      	movs	r2, #0
 80019fc:	749a      	strb	r2, [r3, #18]
        return 1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e03f      	b.n	8001a82 <HR_Execute+0x342>
      }

      HR->DataReady = false;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2200      	movs	r2, #0
 8001a06:	73da      	strb	r2, [r3, #15]
      HR->State = 6;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	749a      	strb	r2, [r3, #18]
      if (HR->DiscardNextSpectra)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	7b5b      	ldrb	r3, [r3, #13]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <HR_Execute+0x2ec>
      {
        printf("Discarding spectra.\n");
 8001a16:	4818      	ldr	r0, [pc, #96]	; (8001a78 <HR_Execute+0x338>)
 8001a18:	f012 ffce 	bl	80149b8 <puts>
        HR->DiscardNextSpectra = false;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	735a      	strb	r2, [r3, #13]
        HR->Delay = 100;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2264      	movs	r2, #100	; 0x64
 8001a26:	815a      	strh	r2, [r3, #10]
        return 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e02a      	b.n	8001a82 <HR_Execute+0x342>
      }
      if (HR_ValidateData(HR, Spectra))
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	68b8      	ldr	r0, [r7, #8]
 8001a30:	f000 f82e 	bl	8001a90 <HR_ValidateData>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HR_Execute+0x2fe>
        return 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e021      	b.n	8001a82 <HR_Execute+0x342>
      Spectra->ReadyToSave = true;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001a44:	3317      	adds	r3, #23
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
      printf("Spectra ready to save.\n");
 8001a4a:	480c      	ldr	r0, [pc, #48]	; (8001a7c <HR_Execute+0x33c>)
 8001a4c:	f012 ffb4 	bl	80149b8 <puts>
      HR->Delay = 1000; // wait 10 seconds before taking another spectra
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a56:	815a      	strh	r2, [r3, #10]
      HR->State = 0; // Mitch wanted us to be tolerant of power-cycling.
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	749a      	strb	r2, [r3, #18]
      break;
 8001a5e:	e00f      	b.n	8001a80 <HR_Execute+0x340>
    default:
      HR->State = 0;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2200      	movs	r2, #0
 8001a64:	749a      	strb	r2, [r3, #18]
      HR->Delay = 100;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2264      	movs	r2, #100	; 0x64
 8001a6a:	815a      	strh	r2, [r3, #10]
      return 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e008      	b.n	8001a82 <HR_Execute+0x342>
 8001a70:	0801972c 	.word	0x0801972c
 8001a74:	08019734 	.word	0x08019734
 8001a78:	0801974c 	.word	0x0801974c
 8001a7c:	08019760 	.word	0x08019760
      break;
  }
  return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3778      	adds	r7, #120	; 0x78
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	0000      	movs	r0, r0
	...

08001a90 <HR_ValidateData>:

uint8_t HR_ValidateData(struct sHR4000 *HR, struct sSpectra *Spectra)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < 14; i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
 8001a9e:	e00e      	b.n	8001abe <HR_ValidateData+0x2e>
    (Spectra->DataHeader)[i] = (Spectra->RawData)[i];
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	7a51      	ldrb	r1, [r2, #9]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ab2:	3309      	adds	r3, #9
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 14; i++)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	3301      	adds	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b0d      	cmp	r3, #13
 8001ac2:	d9ed      	bls.n	8001aa0 <HR_ValidateData+0x10>
   WORDs if pixel mode not 0, indicates parameters passed to the Pixel Mode command (P)
   (D)WORDs spectral data – see Data Size Flag for variable size
   WORD 0xFFFD – end of spectrum
   */

  if (((Spectra->RawData[0] << 8) | Spectra->RawData[1]) != 0xffff)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	7a5b      	ldrb	r3, [r3, #9]
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	7a92      	ldrb	r2, [r2, #10]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d004      	beq.n	8001ae2 <HR_ValidateData+0x52>
  {
    printf("Invalid data start.\n");
 8001ad8:	483b      	ldr	r0, [pc, #236]	; (8001bc8 <HR_ValidateData+0x138>)
 8001ada:	f012 ff6d 	bl	80149b8 <puts>
    return 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e068      	b.n	8001bb4 <HR_ValidateData+0x124>
  }
  else
    printf("Valid data start.\n");
 8001ae2:	483a      	ldr	r0, [pc, #232]	; (8001bcc <HR_ValidateData+0x13c>)
 8001ae4:	f012 ff68 	bl	80149b8 <puts>

  if (((Spectra->RawData[3] << 8) | Spectra->RawData[4]) == 0)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	7b1b      	ldrb	r3, [r3, #12]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	7b52      	ldrb	r2, [r2, #13]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d103      	bne.n	8001b00 <HR_ValidateData+0x70>
    Spectra->DataSize = 16;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2210      	movs	r2, #16
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	e010      	b.n	8001b22 <HR_ValidateData+0x92>
  else if (((Spectra->RawData[3] << 8) | Spectra->RawData[4]) == 1)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	7b1b      	ldrb	r3, [r3, #12]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	7b52      	ldrb	r2, [r2, #13]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d103      	bne.n	8001b18 <HR_ValidateData+0x88>
    Spectra->DataSize = 32;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2220      	movs	r2, #32
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e004      	b.n	8001b22 <HR_ValidateData+0x92>
  else
  {
    printf("Invalid data size.\n");
 8001b18:	482d      	ldr	r0, [pc, #180]	; (8001bd0 <HR_ValidateData+0x140>)
 8001b1a:	f012 ff4d 	bl	80149b8 <puts>
    return 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e048      	b.n	8001bb4 <HR_ValidateData+0x124>
  }

  Spectra->NumberofScans = (uint8_t) ((Spectra->RawData[6] << 8) | Spectra->RawData[7]);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7bdb      	ldrb	r3, [r3, #15]
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	7c1b      	ldrb	r3, [r3, #16]
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	705a      	strb	r2, [r3, #1]

  // datasheet claims format is LSW(MSB LSB) MSW(MSB LSB) but format is really MSW(MSB LSB) LSW(MSB LSB)
  Spectra->IntegrationTime_us = (Spectra->RawData[8] << 24) | (Spectra->RawData[9] << 16) | (Spectra->RawData[10] << 8) | Spectra->RawData[11];
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	7c5b      	ldrb	r3, [r3, #17]
 8001b3e:	061a      	lsls	r2, r3, #24
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	7c9b      	ldrb	r3, [r3, #18]
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	431a      	orrs	r2, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	7cdb      	ldrb	r3, [r3, #19]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	7d12      	ldrb	r2, [r2, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	461a      	mov	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	605a      	str	r2, [r3, #4]

  printf("Spectra received, scan count %u, integration time %lu us, data size %u.\n", Spectra->NumberofScans,
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	785b      	ldrb	r3, [r3, #1]
 8001b60:	4619      	mov	r1, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
      Spectra->IntegrationTime_us, Spectra->DataSize);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	781b      	ldrb	r3, [r3, #0]
  printf("Spectra received, scan count %u, integration time %lu us, data size %u.\n", Spectra->NumberofScans,
 8001b6a:	481a      	ldr	r0, [pc, #104]	; (8001bd4 <HR_ValidateData+0x144>)
 8001b6c:	f012 fe9e 	bl	80148ac <iprintf>
  if (HR_AnalyzeSpectra(Spectra))
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f000 f9f1 	bl	8001f58 <HR_AnalyzeSpectra>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HR_ValidateData+0x114>
    if (AUTO_ADJUST_INTEGRATION_TIME)
      HR->NextIntegrationTime_ms  = 0.8 * HR->IntegrationTime_ms;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	889b      	ldrh	r3, [r3, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcdf 	bl	8000544 <__aeabi_i2d>
 8001b86:	a30e      	add	r3, pc, #56	; (adr r3, 8001bc0 <HR_ValidateData+0x130>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fd44 	bl	8000618 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f816 	bl	8000bc8 <__aeabi_d2uiz>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	80da      	strh	r2, [r3, #6]
  // minimum integration time is a little less than 4 ms.
  if (HR->NextIntegrationTime_ms < 4)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	88db      	ldrh	r3, [r3, #6]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d802      	bhi.n	8001bb2 <HR_ValidateData+0x122>
    HR->NextIntegrationTime_ms = 4;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	80da      	strh	r2, [r3, #6]
  return 0;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	9999999a 	.word	0x9999999a
 8001bc4:	3fe99999 	.word	0x3fe99999
 8001bc8:	08019778 	.word	0x08019778
 8001bcc:	0801978c 	.word	0x0801978c
 8001bd0:	080197a0 	.word	0x080197a0
 8001bd4:	080197b4 	.word	0x080197b4

08001bd8 <HR_InitStruct>:

// "In binary mode alldata, except where noted, passes as 16-bit unsigned integers (WORDs)
// with the MSB followed by the LSB."

void HR_InitStruct(struct sHR4000 *HR4000)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HR4000->UART = &huart1;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HR_InitStruct+0x60>)
 8001be4:	601a      	str	r2, [r3, #0]
  HR4000->IntegrationTime_ms = 150;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2296      	movs	r2, #150	; 0x96
 8001bea:	809a      	strh	r2, [r3, #4]
  HR4000->NextIntegrationTime_ms = 300;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bf2:	80da      	strh	r2, [r3, #6]
  HR4000->Summing = 1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	721a      	strb	r2, [r3, #8]
  HR4000->Smoothing = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	725a      	strb	r2, [r3, #9]
  HR4000->Delay = 500; // wait before trying to talk to the spectrometer
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c06:	815a      	strh	r2, [r3, #10]
  HR4000->Checksum = false;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	731a      	strb	r2, [r3, #12]
  HR4000->DiscardNextSpectra = true;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	735a      	strb	r2, [r3, #13]
  HR4000->ElapsedTime = 0;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	821a      	strh	r2, [r3, #16]
  HR4000->State = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	749a      	strb	r2, [r3, #18]
  HR4000->GetSpectra = false;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	739a      	strb	r2, [r3, #14]
  HR4000->DataReady = false;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	73da      	strb	r2, [r3, #15]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	20000ba4 	.word	0x20000ba4

08001c3c <HR_SetBinaryMode>:
  while (result)
    result = !(HAL_UART_Receive(huart, buffer, 20, 3));
}

uint8_t HR_SetBinaryMode(UART_HandleTypeDef *huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint8_t resp[2];
  uint8_t command[2] = { 0 };
 8001c44:	2300      	movs	r3, #0
 8001c46:	813b      	strh	r3, [r7, #8]
  command[0] = 'b';
 8001c48:	2362      	movs	r3, #98	; 0x62
 8001c4a:	723b      	strb	r3, [r7, #8]
  command[1] = 'B';
 8001c4c:	2342      	movs	r3, #66	; 0x42
 8001c4e:	727b      	strb	r3, [r7, #9]
  if (vdebug) printf("Setting binary mode.");
 8001c50:	4821      	ldr	r0, [pc, #132]	; (8001cd8 <HR_SetBinaryMode+0x9c>)
 8001c52:	f012 fe2b 	bl	80148ac <iprintf>

  HAL_StatusTypeDef result;
  result = HAL_UART_Transmit(huart, command, 2, 10);
 8001c56:	f107 0108 	add.w	r1, r7, #8
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f008 ff27 	bl	800aab2 <HAL_UART_Transmit>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
  if (result != 0)
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HR_SetBinaryMode+0x3a>
    return 40 + result;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3328      	adds	r3, #40	; 0x28
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	e02c      	b.n	8001cd0 <HR_SetBinaryMode+0x94>
  result = HAL_UART_Receive(huart, resp, 2, 10); // was 100
 8001c76:	f107 010c 	add.w	r1, r7, #12
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f008 ffa9 	bl	800abd6 <HAL_UART_Receive>
 8001c84:	4603      	mov	r3, r0
 8001c86:	73fb      	strb	r3, [r7, #15]
  if (result != 0)
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HR_SetBinaryMode+0x66>
  {
    if (result == HAL_TIMEOUT)
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d106      	bne.n	8001ca2 <HR_SetBinaryMode+0x66>
    {
      if (vdebug) printf(" - TIMEOUT.\n");
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <HR_SetBinaryMode+0xa0>)
 8001c96:	f012 fe8f 	bl	80149b8 <puts>
      return 80 + result;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	3350      	adds	r3, #80	; 0x50
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	e016      	b.n	8001cd0 <HR_SetBinaryMode+0x94>
    }
  }
  if ((resp[1] == 2) || (resp[1] == 6))
 8001ca2:	7b7b      	ldrb	r3, [r7, #13]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d002      	beq.n	8001cae <HR_SetBinaryMode+0x72>
 8001ca8:	7b7b      	ldrb	r3, [r7, #13]
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d104      	bne.n	8001cb8 <HR_SetBinaryMode+0x7c>
  {
    if (vdebug) printf(" - ACK.\n");
 8001cae:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <HR_SetBinaryMode+0xa4>)
 8001cb0:	f012 fe82 	bl	80149b8 <puts>
    return 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e00b      	b.n	8001cd0 <HR_SetBinaryMode+0x94>
  }
  if ((resp[1] == 3) || (resp[1] == 21))
 8001cb8:	7b7b      	ldrb	r3, [r7, #13]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d002      	beq.n	8001cc4 <HR_SetBinaryMode+0x88>
 8001cbe:	7b7b      	ldrb	r3, [r7, #13]
 8001cc0:	2b15      	cmp	r3, #21
 8001cc2:	d104      	bne.n	8001cce <HR_SetBinaryMode+0x92>
  {
    if (vdebug) printf(" - NACK.\n");
 8001cc4:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <HR_SetBinaryMode+0xa8>)
 8001cc6:	f012 fe77 	bl	80149b8 <puts>
    return 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HR_SetBinaryMode+0x94>
  }
  return 1; // shouldn't reach this
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	0801981c 	.word	0x0801981c
 8001cdc:	08019834 	.word	0x08019834
 8001ce0:	08019840 	.word	0x08019840
 8001ce4:	08019848 	.word	0x08019848

08001ce8 <HR_SendCommand>:

uint8_t HR_SendCommand(UART_HandleTypeDef *huart, uint8_t *command, size_t length, uint16_t wait_time)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	807b      	strh	r3, [r7, #2]
  uint8_t resp = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75bb      	strb	r3, [r7, #22]
  HAL_StatusTypeDef result;
  if (length < 1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HR_SendCommand+0x1c>
    return 9;
 8001d00:	2309      	movs	r3, #9
 8001d02:	e03c      	b.n	8001d7e <HR_SendCommand+0x96>
  result = HAL_UART_Transmit(huart, command, length, 10);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	230a      	movs	r3, #10
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f008 fed0 	bl	800aab2 <HAL_UART_Transmit>
 8001d12:	4603      	mov	r3, r0
 8001d14:	75fb      	strb	r3, [r7, #23]
  if (result != 0)
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HR_SendCommand+0x3c>
    return 40 + result;
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	3328      	adds	r3, #40	; 0x28
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e02c      	b.n	8001d7e <HR_SendCommand+0x96>
  result = HAL_UART_Receive(huart, &resp, 1, wait_time);
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	f107 0116 	add.w	r1, r7, #22
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f008 ff52 	bl	800abd6 <HAL_UART_Receive>
 8001d32:	4603      	mov	r3, r0
 8001d34:	75fb      	strb	r3, [r7, #23]
  if (result != 0)
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HR_SendCommand+0x68>
  {
    if (result == HAL_TIMEOUT)
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d106      	bne.n	8001d50 <HR_SendCommand+0x68>
    {
      if (vdebug) printf(" - TIMEOUT.\n");
 8001d42:	4811      	ldr	r0, [pc, #68]	; (8001d88 <HR_SendCommand+0xa0>)
 8001d44:	f012 fe38 	bl	80149b8 <puts>
      return 80 + result;
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	3350      	adds	r3, #80	; 0x50
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e016      	b.n	8001d7e <HR_SendCommand+0x96>
    }
  }
  if ((resp == 2) || (resp == 6))
 8001d50:	7dbb      	ldrb	r3, [r7, #22]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d002      	beq.n	8001d5c <HR_SendCommand+0x74>
 8001d56:	7dbb      	ldrb	r3, [r7, #22]
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	d104      	bne.n	8001d66 <HR_SendCommand+0x7e>
  {
    if (vdebug) printf(" - ACK.\n");
 8001d5c:	480b      	ldr	r0, [pc, #44]	; (8001d8c <HR_SendCommand+0xa4>)
 8001d5e:	f012 fe2b 	bl	80149b8 <puts>
    return 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e00b      	b.n	8001d7e <HR_SendCommand+0x96>
  }
  if ((resp == 3) || (resp == 21))
 8001d66:	7dbb      	ldrb	r3, [r7, #22]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d002      	beq.n	8001d72 <HR_SendCommand+0x8a>
 8001d6c:	7dbb      	ldrb	r3, [r7, #22]
 8001d6e:	2b15      	cmp	r3, #21
 8001d70:	d104      	bne.n	8001d7c <HR_SendCommand+0x94>
  {
    if (vdebug) printf(" - NACK.\n");
 8001d72:	4807      	ldr	r0, [pc, #28]	; (8001d90 <HR_SendCommand+0xa8>)
 8001d74:	f012 fe20 	bl	80149b8 <puts>
    return 1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HR_SendCommand+0x96>
  }
  return 1; // shouldn't reach this
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	08019834 	.word	0x08019834
 8001d8c:	08019840 	.word	0x08019840
 8001d90:	08019848 	.word	0x08019848

08001d94 <HR_SetIntegrationTime>:

uint8_t HR_SetIntegrationTime(UART_HandleTypeDef *huart, uint16_t time_ms)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
  if (time_ms > 65000)
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HR_SetIntegrationTime+0x1a>
    return 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e01c      	b.n	8001de8 <HR_SetIntegrationTime+0x54>
  uint8_t command[3] = { 0 };
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HR_SetIntegrationTime+0x5c>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	81bb      	strh	r3, [r7, #12]
 8001db4:	2300      	movs	r3, #0
 8001db6:	73bb      	strb	r3, [r7, #14]

  command[0] = 'I';
 8001db8:	2349      	movs	r3, #73	; 0x49
 8001dba:	733b      	strb	r3, [r7, #12]
  command[1] = (time_ms >> 8) & 0xff;
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	737b      	strb	r3, [r7, #13]
  command[2] = time_ms & 0xff;
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	73bb      	strb	r3, [r7, #14]
  if (vdebug) printf("Setting integration time to %u.", time_ms);
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4808      	ldr	r0, [pc, #32]	; (8001df4 <HR_SetIntegrationTime+0x60>)
 8001dd2:	f012 fd6b 	bl	80148ac <iprintf>
  return HR_SendCommand(huart, command, 3, 65000);
 8001dd6:	f107 010c 	add.w	r1, r7, #12
 8001dda:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8001dde:	2203      	movs	r2, #3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff81 	bl	8001ce8 <HR_SendCommand>
 8001de6:	4603      	mov	r3, r0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	08019874 	.word	0x08019874
 8001df4:	08019854 	.word	0x08019854

08001df8 <HR_SetSumming>:

uint8_t HR_SetSumming(UART_HandleTypeDef *huart, uint8_t count)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  if ((count < 1) | (count > 4))
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf8c      	ite	hi
 8001e16:	2301      	movhi	r3, #1
 8001e18:	2300      	movls	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HR_SetSumming+0x30>
    return 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e017      	b.n	8001e58 <HR_SetSumming+0x60>
  uint8_t command[3] = { 0 };
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HR_SetSumming+0x68>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	81bb      	strh	r3, [r7, #12]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73bb      	strb	r3, [r7, #14]
  command[0] = 'A';
 8001e32:	2341      	movs	r3, #65	; 0x41
 8001e34:	733b      	strb	r3, [r7, #12]
  command[1] = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	737b      	strb	r3, [r7, #13]
  command[2] = count;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	73bb      	strb	r3, [r7, #14]
  if (vdebug) printf("Setting scan summation to %u.", count);
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4808      	ldr	r0, [pc, #32]	; (8001e64 <HR_SetSumming+0x6c>)
 8001e44:	f012 fd32 	bl	80148ac <iprintf>
  return HR_SendCommand(huart, command, 3, 10);
 8001e48:	f107 010c 	add.w	r1, r7, #12
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	2203      	movs	r2, #3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff49 	bl	8001ce8 <HR_SendCommand>
 8001e56:	4603      	mov	r3, r0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	08019874 	.word	0x08019874
 8001e64:	08019878 	.word	0x08019878

08001e68 <HR_SetSmoothing>:

uint8_t HR_SetSmoothing(UART_HandleTypeDef *huart, uint8_t count)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  if (count > 15)
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	d901      	bls.n	8001e7e <HR_SetSmoothing+0x16>
    return 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e017      	b.n	8001eae <HR_SetSmoothing+0x46>
  uint8_t command[3] = { 0 };
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HR_SetSmoothing+0x50>)
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	81bb      	strh	r3, [r7, #12]
 8001e84:	2300      	movs	r3, #0
 8001e86:	73bb      	strb	r3, [r7, #14]
  command[0] = 'B';
 8001e88:	2342      	movs	r3, #66	; 0x42
 8001e8a:	733b      	strb	r3, [r7, #12]
  command[1] = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	737b      	strb	r3, [r7, #13]
  command[2] = count;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	73bb      	strb	r3, [r7, #14]
  if (vdebug) printf("Setting smoothing to %u.", count);
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	4619      	mov	r1, r3
 8001e98:	4808      	ldr	r0, [pc, #32]	; (8001ebc <HR_SetSmoothing+0x54>)
 8001e9a:	f012 fd07 	bl	80148ac <iprintf>
  return HR_SendCommand(huart, command, 3, 10);
 8001e9e:	f107 010c 	add.w	r1, r7, #12
 8001ea2:	230a      	movs	r3, #10
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ff1e 	bl	8001ce8 <HR_SendCommand>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	08019874 	.word	0x08019874
 8001ebc:	08019898 	.word	0x08019898

08001ec0 <HR_SetTriggerMode>:
  if (vdebug) printf("Clearing HR4000 memory.");
  return HR_SendCommand(huart, command, 1, 10);
}

uint8_t HR_SetTriggerMode(UART_HandleTypeDef *huart, uint8_t mode)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
  if (mode > 3)
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d901      	bls.n	8001ed6 <HR_SetTriggerMode+0x16>
    return 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e017      	b.n	8001f06 <HR_SetTriggerMode+0x46>
  uint8_t command[3] = { 0 };
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HR_SetTriggerMode+0x50>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	81bb      	strh	r3, [r7, #12]
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]
  command[0] = 'T';
 8001ee0:	2354      	movs	r3, #84	; 0x54
 8001ee2:	733b      	strb	r3, [r7, #12]
  command[1] = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	737b      	strb	r3, [r7, #13]
  command[2] = mode;
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	73bb      	strb	r3, [r7, #14]
  if (vdebug) printf("Setting trigger mode to %u.", mode);
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <HR_SetTriggerMode+0x54>)
 8001ef2:	f012 fcdb 	bl	80148ac <iprintf>
  return HR_SendCommand(huart, command, 3, 10);
 8001ef6:	f107 010c 	add.w	r1, r7, #12
 8001efa:	230a      	movs	r3, #10
 8001efc:	2203      	movs	r2, #3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fef2 	bl	8001ce8 <HR_SendCommand>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	08019874 	.word	0x08019874
 8001f14:	080198cc 	.word	0x080198cc

08001f18 <HR_TriggerSpectra>:

uint8_t HR_TriggerSpectra(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint8_t buffer[20];
  HAL_UART_Receive(huart, buffer, 20, 1);
 8001f20:	f107 010c 	add.w	r1, r7, #12
 8001f24:	2301      	movs	r3, #1
 8001f26:	2214      	movs	r2, #20
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f008 fe54 	bl	800abd6 <HAL_UART_Receive>

  uint8_t command[1] = { 0 };
 8001f2e:	2300      	movs	r3, #0
 8001f30:	723b      	strb	r3, [r7, #8]
  command[0] = 'S';
 8001f32:	2353      	movs	r3, #83	; 0x53
 8001f34:	723b      	strb	r3, [r7, #8]
  if (vdebug) printf("Requesting spectra.");
 8001f36:	4807      	ldr	r0, [pc, #28]	; (8001f54 <HR_TriggerSpectra+0x3c>)
 8001f38:	f012 fcb8 	bl	80148ac <iprintf>
  return HR_SendCommand(huart, command, 1, 10);
 8001f3c:	f107 0108 	add.w	r1, r7, #8
 8001f40:	230a      	movs	r3, #10
 8001f42:	2201      	movs	r2, #1
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fecf 	bl	8001ce8 <HR_SendCommand>
 8001f4a:	4603      	mov	r3, r0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	080198e8 	.word	0x080198e8

08001f58 <HR_AnalyzeSpectra>:
  return HR_SendCommand(huart, command, 3, 10);
}


uint8_t HR_AnalyzeSpectra(struct sSpectra *spectra)
{
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t dsum = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  uint16_t i, j, d, points;
  uint32_t dmax = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  uint32_t dmin = 0xffffffff;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	613b      	str	r3, [r7, #16]

  uint16_t brightcount = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	81fb      	strh	r3, [r7, #14]

  j = sizeof spectra->RawData / sizeof spectra->RawData[0];
 8001f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f76:	81bb      	strh	r3, [r7, #12]
  j = j - (j%2);
 8001f78:	89bb      	ldrh	r3, [r7, #12]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	81bb      	strh	r3, [r7, #12]

  points = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	833b      	strh	r3, [r7, #24]

  for (i=14;i<j;i+=2)
 8001f84:	230e      	movs	r3, #14
 8001f86:	837b      	strh	r3, [r7, #26]
 8001f88:	e031      	b.n	8001fee <HR_AnalyzeSpectra+0x96>
  {
    d = (spectra->RawData[i] << 8) | (spectra->RawData[i+1]);
 8001f8a:	8b7b      	ldrh	r3, [r7, #26]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	7a5b      	ldrb	r3, [r3, #9]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	8b7b      	ldrh	r3, [r7, #26]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	440b      	add	r3, r1
 8001f9e:	7a5b      	ldrb	r3, [r3, #9]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	817b      	strh	r3, [r7, #10]
    if (d == 0)
 8001fa8:	897b      	ldrh	r3, [r7, #10]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01b      	beq.n	8001fe6 <HR_AnalyzeSpectra+0x8e>
      continue;
    points++;
 8001fae:	8b3b      	ldrh	r3, [r7, #24]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	833b      	strh	r3, [r7, #24]
    dsum += d;
 8001fb4:	897b      	ldrh	r3, [r7, #10]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	61fb      	str	r3, [r7, #28]
    if (d < dmin)
 8001fbc:	897b      	ldrh	r3, [r7, #10]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d901      	bls.n	8001fc8 <HR_AnalyzeSpectra+0x70>
      dmin = d;
 8001fc4:	897b      	ldrh	r3, [r7, #10]
 8001fc6:	613b      	str	r3, [r7, #16]
    if (d > dmax)
 8001fc8:	897b      	ldrh	r3, [r7, #10]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d201      	bcs.n	8001fd4 <HR_AnalyzeSpectra+0x7c>
      dmax = d;
 8001fd0:	897b      	ldrh	r3, [r7, #10]
 8001fd2:	617b      	str	r3, [r7, #20]
    if (d > UPPER_BRIGHTNESS_LEVEL)
 8001fd4:	897b      	ldrh	r3, [r7, #10]
 8001fd6:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d904      	bls.n	8001fe8 <HR_AnalyzeSpectra+0x90>
      brightcount++;
 8001fde:	89fb      	ldrh	r3, [r7, #14]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	81fb      	strh	r3, [r7, #14]
 8001fe4:	e000      	b.n	8001fe8 <HR_AnalyzeSpectra+0x90>
      continue;
 8001fe6:	bf00      	nop
  for (i=14;i<j;i+=2)
 8001fe8:	8b7b      	ldrh	r3, [r7, #26]
 8001fea:	3302      	adds	r3, #2
 8001fec:	837b      	strh	r3, [r7, #26]
 8001fee:	8b7a      	ldrh	r2, [r7, #26]
 8001ff0:	89bb      	ldrh	r3, [r7, #12]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3c9      	bcc.n	8001f8a <HR_AnalyzeSpectra+0x32>
  }
  printf("Spectra min %lu, max %lu, avg %lu.\n", dmin, dmax, dsum/points);
 8001ff6:	8b3b      	ldrh	r3, [r7, #24]
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	6939      	ldr	r1, [r7, #16]
 8002002:	4813      	ldr	r0, [pc, #76]	; (8002050 <HR_AnalyzeSpectra+0xf8>)
 8002004:	f012 fc52 	bl	80148ac <iprintf>

  if (brightcount > (points*PERCENT_HOT_PIXELS))
 8002008:	89fb      	ldrh	r3, [r7, #14]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa9a 	bl	8000544 <__aeabi_i2d>
 8002010:	4604      	mov	r4, r0
 8002012:	460d      	mov	r5, r1
 8002014:	8b3b      	ldrh	r3, [r7, #24]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa94 	bl	8000544 <__aeabi_i2d>
 800201c:	a30a      	add	r3, pc, #40	; (adr r3, 8002048 <HR_AnalyzeSpectra+0xf0>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe faf9 	bl	8000618 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4620      	mov	r0, r4
 800202c:	4629      	mov	r1, r5
 800202e:	f7fe fd83 	bl	8000b38 <__aeabi_dcmpgt>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HR_AnalyzeSpectra+0xe4>
    return 1;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <HR_AnalyzeSpectra+0xe6>
  return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bdb0      	pop	{r4, r5, r7, pc}
 8002046:	bf00      	nop
 8002048:	9999999a 	.word	0x9999999a
 800204c:	3fb99999 	.word	0x3fb99999
 8002050:	080198fc 	.word	0x080198fc

08002054 <InitRegisters>:
#include "defs.h"
#include "GPS.h"
#include "MS5607.h"

void InitRegisters(uint32_t* reg, uint32_t* backreg)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  int i;
  for (i=0; i<256; i++)
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e00e      	b.n	8002082 <InitRegisters+0x2e>
  {
    reg[i] = 0;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    backreg[i] = 0;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
  for (i=0; i<256; i++)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3301      	adds	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2bff      	cmp	r3, #255	; 0xff
 8002086:	dded      	ble.n	8002064 <InitRegisters+0x10>
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <ProcessI2CCommand>:

  *usebackupreg = false;
}

void ProcessI2CCommand(uint8_t* packet, struct sState* state)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  uint32_t val = (packet[1] << 24) | (packet[2] << 16) | (packet[3] << 8) | packet[4];
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3301      	adds	r3, #1
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	061a      	lsls	r2, r3, #24
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3302      	adds	r3, #2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3303      	adds	r3, #3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	4313      	orrs	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	3204      	adds	r2, #4
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  if (packet[0] == 0x81)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b81      	cmp	r3, #129	; 0x81
 80020cc:	d102      	bne.n	80020d4 <ProcessI2CCommand+0x3e>
    state->TemperatureTarget[0] = val;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]
  if (packet[0] == 0x82)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b82      	cmp	r3, #130	; 0x82
 80020da:	d102      	bne.n	80020e2 <ProcessI2CCommand+0x4c>
    state->TemperatureTarget[1] = val;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	605a      	str	r2, [r3, #4]
  if (packet[0] == 0x83)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b83      	cmp	r3, #131	; 0x83
 80020e8:	d102      	bne.n	80020f0 <ProcessI2CCommand+0x5a>
    state->TemperatureTarget[2] = val;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]
  if (packet[0] == 0x84)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b84      	cmp	r3, #132	; 0x84
 80020f6:	d102      	bne.n	80020fe <ProcessI2CCommand+0x68>
    state->TemperatureTarget[3] = val;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	60da      	str	r2, [r3, #12]
  if (packet[0] == 0x85)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b85      	cmp	r3, #133	; 0x85
 8002104:	d102      	bne.n	800210c <ProcessI2CCommand+0x76>
    state->TemperatureTarget[4] = val;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if (packet[0] == 0x86)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b86      	cmp	r3, #134	; 0x86
 8002112:	d102      	bne.n	800211a <ProcessI2CCommand+0x84>
    state->TemperatureTarget[5] = val;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	615a      	str	r2, [r3, #20]
  if (packet[0] == 0xff)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2bff      	cmp	r3, #255	; 0xff
 8002120:	d102      	bne.n	8002128 <ProcessI2CCommand+0x92>
    state->TestBuffer = val;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <MS5607_StartConversion>:

#include "MS5607.h"
#include <math.h>

void MS5607_StartConversion(I2C_HandleTypeDef* i2c, bool temp)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af02      	add	r7, sp, #8
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	70fb      	strb	r3, [r7, #3]
  uint8_t outbuffer[1] = {0};
 8002140:	2300      	movs	r3, #0
 8002142:	733b      	strb	r3, [r7, #12]
  outbuffer[0] = 0x40 | (temp << 4);
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	b25b      	sxtb	r3, r3
 800214a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800214e:	b25b      	sxtb	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(i2c, MS5607_ADDR << 1, outbuffer, 1, 100);
 8002154:	f107 020c 	add.w	r2, r7, #12
 8002158:	2364      	movs	r3, #100	; 0x64
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2301      	movs	r3, #1
 800215e:	21ee      	movs	r1, #238	; 0xee
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f004 f8c9 	bl	80062f8 <HAL_I2C_Master_Transmit>
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <MS5607_ReadADC>:

uint32_t MS5607_ReadADC(I2C_HandleTypeDef* i2c)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af02      	add	r7, sp, #8
 8002174:	6078      	str	r0, [r7, #4]
  uint8_t outbuffer[1] = {0};
 8002176:	2300      	movs	r3, #0
 8002178:	733b      	strb	r3, [r7, #12]
  uint8_t inbuffer[4] = {0};
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  outbuffer[0] = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(i2c, MS5607_ADDR << 1, outbuffer, 1, 100);
 8002182:	f107 020c 	add.w	r2, r7, #12
 8002186:	2364      	movs	r3, #100	; 0x64
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	21ee      	movs	r1, #238	; 0xee
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f004 f8b2 	bl	80062f8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(i2c,  MS5607_ADDR << 1, inbuffer, 3, 100);
 8002194:	f107 0208 	add.w	r2, r7, #8
 8002198:	2364      	movs	r3, #100	; 0x64
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2303      	movs	r3, #3
 800219e:	21ee      	movs	r1, #238	; 0xee
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f004 f9a7 	bl	80064f4 <HAL_I2C_Master_Receive>
  return ((inbuffer[0] << 16) | (inbuffer[1] << 8) | inbuffer[2]);
 80021a6:	7a3b      	ldrb	r3, [r7, #8]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	7a7b      	ldrb	r3, [r7, #9]
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	4313      	orrs	r3, r2
 80021b0:	7aba      	ldrb	r2, [r7, #10]
 80021b2:	4313      	orrs	r3, r2
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <MS5607_ReadCoeff>:

uint16_t MS5607_ReadCoeff(I2C_HandleTypeDef* i2c, uint8_t coeff_number)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  uint8_t outbuffer[1] = {0};
 80021c8:	2300      	movs	r3, #0
 80021ca:	733b      	strb	r3, [r7, #12]
  uint8_t inbuffer[2] = {0};
 80021cc:	2300      	movs	r3, #0
 80021ce:	813b      	strh	r3, [r7, #8]
  outbuffer[0] = 0xa0 | (coeff_number << 1); // read coefficient
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(i2c, MS5607_ADDR << 1, outbuffer, 1, 100);
 80021e0:	f107 020c 	add.w	r2, r7, #12
 80021e4:	2364      	movs	r3, #100	; 0x64
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	21ee      	movs	r1, #238	; 0xee
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f004 f883 	bl	80062f8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(i2c,  MS5607_ADDR << 1, inbuffer, 2, 100);
 80021f2:	f107 0208 	add.w	r2, r7, #8
 80021f6:	2364      	movs	r3, #100	; 0x64
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2302      	movs	r3, #2
 80021fc:	21ee      	movs	r1, #238	; 0xee
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f004 f978 	bl	80064f4 <HAL_I2C_Master_Receive>
  return ((inbuffer[0] << 8) | inbuffer[1]);
 8002204:	7a3b      	ldrb	r3, [r7, #8]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	7a7b      	ldrb	r3, [r7, #9]
 800220c:	b21b      	sxth	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	b21b      	sxth	r3, r3
 8002212:	b29b      	uxth	r3, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <MS5607_GetCoefficients>:

void MS5607_GetCoefficients(I2C_HandleTypeDef* i2c, struct sMS5607* ms)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  int i;
  for (i=1;i<7;i++)
 8002226:	2301      	movs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e00e      	b.n	800224a <MS5607_GetCoefficients+0x2e>
    ms->C[i] = MS5607_ReadCoeff(i2c, i);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffc2 	bl	80021bc <MS5607_ReadCoeff>
 8002238:	4603      	mov	r3, r0
 800223a:	4619      	mov	r1, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (i=1;i<7;i++)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b06      	cmp	r3, #6
 800224e:	dded      	ble.n	800222c <MS5607_GetCoefficients+0x10>
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	0000      	movs	r0, r0
 800225c:	0000      	movs	r0, r0
	...

08002260 <MS5607_CalculatePressure>:

void MS5607_CalculatePressure(struct sMS5607* ms, int32_t* temp, int32_t* pressure)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b094      	sub	sp, #80	; 0x50
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  double dT, TEMP, OFF, SENS, P, T2, SENS2, OFF2;
  T2 = 0;
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  SENS2 = 0;
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  OFF2 = 0;
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  dT = ms->D[2] - ms->C[5] * pow(2,8);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f945 	bl	8000524 <__aeabi_ui2d>
 800229a:	4604      	mov	r4, r0
 800229c:	460d      	mov	r5, r1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	895b      	ldrh	r3, [r3, #10]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f94e 	bl	8000544 <__aeabi_i2d>
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	4bc8      	ldr	r3, [pc, #800]	; (80025d0 <MS5607_CalculatePressure+0x370>)
 80022ae:	f7fe f9b3 	bl	8000618 <__aeabi_dmul>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4620      	mov	r0, r4
 80022b8:	4629      	mov	r1, r5
 80022ba:	f7fd fff5 	bl	80002a8 <__aeabi_dsub>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  TEMP = 2000 + dT * ms->C[6]/pow(2,23);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	899b      	ldrh	r3, [r3, #12]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f93a 	bl	8000544 <__aeabi_i2d>
 80022d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022d4:	f7fe f9a0 	bl	8000618 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	4bbb      	ldr	r3, [pc, #748]	; (80025d4 <MS5607_CalculatePressure+0x374>)
 80022e6:	f7fe fac1 	bl	800086c <__aeabi_ddiv>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	4bb8      	ldr	r3, [pc, #736]	; (80025d8 <MS5607_CalculatePressure+0x378>)
 80022f8:	f7fd ffd8 	bl	80002ac <__adddf3>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  if (TEMP < 2000)
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	4bb3      	ldr	r3, [pc, #716]	; (80025d8 <MS5607_CalculatePressure+0x378>)
 800230a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800230e:	f7fe fbf5 	bl	8000afc <__aeabi_dcmplt>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d054      	beq.n	80023c2 <MS5607_CalculatePressure+0x162>
  {
    T2 = pow(dT,2)/pow(2,31);
 8002318:	ed9f 1ba7 	vldr	d1, [pc, #668]	; 80025b8 <MS5607_CalculatePressure+0x358>
 800231c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8002320:	f016 fa26 	bl	8018770 <pow>
 8002324:	ec51 0b10 	vmov	r0, r1, d0
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	4bab      	ldr	r3, [pc, #684]	; (80025dc <MS5607_CalculatePressure+0x37c>)
 800232e:	f7fe fa9d 	bl	800086c <__aeabi_ddiv>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    OFF2 = 61 * pow(TEMP - 2000,2)/pow(2,4);
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	4ba6      	ldr	r3, [pc, #664]	; (80025d8 <MS5607_CalculatePressure+0x378>)
 8002340:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002344:	f7fd ffb0 	bl	80002a8 <__aeabi_dsub>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	ec43 2b17 	vmov	d7, r2, r3
 8002350:	ed9f 1b99 	vldr	d1, [pc, #612]	; 80025b8 <MS5607_CalculatePressure+0x358>
 8002354:	eeb0 0a47 	vmov.f32	s0, s14
 8002358:	eef0 0a67 	vmov.f32	s1, s15
 800235c:	f016 fa08 	bl	8018770 <pow>
 8002360:	ec51 0b10 	vmov	r0, r1, d0
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b9d      	ldr	r3, [pc, #628]	; (80025e0 <MS5607_CalculatePressure+0x380>)
 800236a:	f7fe f955 	bl	8000618 <__aeabi_dmul>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	4b9a      	ldr	r3, [pc, #616]	; (80025e4 <MS5607_CalculatePressure+0x384>)
 800237c:	f7fe fa76 	bl	800086c <__aeabi_ddiv>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    SENS2 = 2 * pow(TEMP-2000,2);
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b92      	ldr	r3, [pc, #584]	; (80025d8 <MS5607_CalculatePressure+0x378>)
 800238e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002392:	f7fd ff89 	bl	80002a8 <__aeabi_dsub>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	ec43 2b17 	vmov	d7, r2, r3
 800239e:	ed9f 1b86 	vldr	d1, [pc, #536]	; 80025b8 <MS5607_CalculatePressure+0x358>
 80023a2:	eeb0 0a47 	vmov.f32	s0, s14
 80023a6:	eef0 0a67 	vmov.f32	s1, s15
 80023aa:	f016 f9e1 	bl	8018770 <pow>
 80023ae:	ec51 0b10 	vmov	r0, r1, d0
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	f7fd ff79 	bl	80002ac <__adddf3>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }
  if (TEMP < -1500)
 80023c2:	a37f      	add	r3, pc, #508	; (adr r3, 80025c0 <MS5607_CalculatePressure+0x360>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023cc:	f7fe fb96 	bl	8000afc <__aeabi_dcmplt>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d047      	beq.n	8002466 <MS5607_CalculatePressure+0x206>
  {
    OFF2 = OFF2 + 15 * pow(TEMP + 1500,2);
 80023d6:	a37c      	add	r3, pc, #496	; (adr r3, 80025c8 <MS5607_CalculatePressure+0x368>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023e0:	f7fd ff64 	bl	80002ac <__adddf3>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	ec43 2b17 	vmov	d7, r2, r3
 80023ec:	ed9f 1b72 	vldr	d1, [pc, #456]	; 80025b8 <MS5607_CalculatePressure+0x358>
 80023f0:	eeb0 0a47 	vmov.f32	s0, s14
 80023f4:	eef0 0a67 	vmov.f32	s1, s15
 80023f8:	f016 f9ba 	bl	8018770 <pow>
 80023fc:	ec51 0b10 	vmov	r0, r1, d0
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	4b78      	ldr	r3, [pc, #480]	; (80025e8 <MS5607_CalculatePressure+0x388>)
 8002406:	f7fe f907 	bl	8000618 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002412:	f7fd ff4b 	bl	80002ac <__adddf3>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    SENS2 = SENS2 + 8 * pow(TEMP + 1500,2);
 800241e:	a36a      	add	r3, pc, #424	; (adr r3, 80025c8 <MS5607_CalculatePressure+0x368>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002428:	f7fd ff40 	bl	80002ac <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	ec43 2b17 	vmov	d7, r2, r3
 8002434:	ed9f 1b60 	vldr	d1, [pc, #384]	; 80025b8 <MS5607_CalculatePressure+0x358>
 8002438:	eeb0 0a47 	vmov.f32	s0, s14
 800243c:	eef0 0a67 	vmov.f32	s1, s15
 8002440:	f016 f996 	bl	8018770 <pow>
 8002444:	ec51 0b10 	vmov	r0, r1, d0
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b67      	ldr	r3, [pc, #412]	; (80025ec <MS5607_CalculatePressure+0x38c>)
 800244e:	f7fe f8e3 	bl	8000618 <__aeabi_dmul>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800245a:	f7fd ff27 	bl	80002ac <__adddf3>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  TEMP -= T2;
 8002466:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800246a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800246e:	f7fd ff1b 	bl	80002a8 <__aeabi_dsub>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  OFF = ms->C[2]*pow(2,17)+(ms->C[4]*dT)/pow(2,6);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	889b      	ldrh	r3, [r3, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f860 	bl	8000544 <__aeabi_i2d>
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800248c:	f7fe f8c4 	bl	8000618 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4614      	mov	r4, r2
 8002496:	461d      	mov	r5, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	891b      	ldrh	r3, [r3, #8]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f851 	bl	8000544 <__aeabi_i2d>
 80024a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024a6:	f7fe f8b7 	bl	8000618 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <MS5607_CalculatePressure+0x390>)
 80024b8:	f7fe f9d8 	bl	800086c <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4620      	mov	r0, r4
 80024c2:	4629      	mov	r1, r5
 80024c4:	f7fd fef2 	bl	80002ac <__adddf3>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
  OFF -= OFF2;
 80024d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024d8:	f7fd fee6 	bl	80002a8 <__aeabi_dsub>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  SENS = ms->C[1]*pow(2,16)+(ms->C[3]*dT)/pow(2,7);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	885b      	ldrh	r3, [r3, #2]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f82b 	bl	8000544 <__aeabi_i2d>
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <MS5607_CalculatePressure+0x394>)
 80024f4:	f7fe f890 	bl	8000618 <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4614      	mov	r4, r2
 80024fe:	461d      	mov	r5, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	88db      	ldrh	r3, [r3, #6]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f81d 	bl	8000544 <__aeabi_i2d>
 800250a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800250e:	f7fe f883 	bl	8000618 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <MS5607_CalculatePressure+0x398>)
 8002520:	f7fe f9a4 	bl	800086c <__aeabi_ddiv>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4620      	mov	r0, r4
 800252a:	4629      	mov	r1, r5
 800252c:	f7fd febe 	bl	80002ac <__adddf3>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	e9c7 2306 	strd	r2, r3, [r7, #24]
  SENS -= SENS2;
 8002538:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800253c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002540:	f7fd feb2 	bl	80002a8 <__aeabi_dsub>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	e9c7 2306 	strd	r2, r3, [r7, #24]
  P = (ms->D[1]*SENS/pow(2,21) - OFF) / pow(2,15);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fd ffe7 	bl	8000524 <__aeabi_ui2d>
 8002556:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800255a:	f7fe f85d 	bl	8000618 <__aeabi_dmul>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <MS5607_CalculatePressure+0x39c>)
 800256c:	f7fe f97e 	bl	800086c <__aeabi_ddiv>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800257c:	f7fd fe94 	bl	80002a8 <__aeabi_dsub>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <MS5607_CalculatePressure+0x3a0>)
 800258e:	f7fe f96d 	bl	800086c <__aeabi_ddiv>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	e9c7 2304 	strd	r2, r3, [r7, #16]
  *temp = TEMP;
 800259a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800259e:	f7fe faeb 	bl	8000b78 <__aeabi_d2iz>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	601a      	str	r2, [r3, #0]
  *pressure = P;
 80025a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ac:	f7fe fae4 	bl	8000b78 <__aeabi_d2iz>
 80025b0:	4602      	mov	r2, r0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e025      	b.n	8002604 <MS5607_CalculatePressure+0x3a4>
 80025b8:	00000000 	.word	0x00000000
 80025bc:	40000000 	.word	0x40000000
 80025c0:	00000000 	.word	0x00000000
 80025c4:	c0977000 	.word	0xc0977000
 80025c8:	00000000 	.word	0x00000000
 80025cc:	40977000 	.word	0x40977000
 80025d0:	40700000 	.word	0x40700000
 80025d4:	41600000 	.word	0x41600000
 80025d8:	409f4000 	.word	0x409f4000
 80025dc:	41e00000 	.word	0x41e00000
 80025e0:	404e8000 	.word	0x404e8000
 80025e4:	40300000 	.word	0x40300000
 80025e8:	402e0000 	.word	0x402e0000
 80025ec:	40200000 	.word	0x40200000
 80025f0:	40500000 	.word	0x40500000
 80025f4:	40f00000 	.word	0x40f00000
 80025f8:	40600000 	.word	0x40600000
 80025fc:	41400000 	.word	0x41400000
 8002600:	40e00000 	.word	0x40e00000
}
 8002604:	bf00      	nop
 8002606:	3750      	adds	r7, #80	; 0x50
 8002608:	46bd      	mov	sp, r7
 800260a:	bdb0      	pop	{r4, r5, r7, pc}

0800260c <InitMS5607>:

void InitMS5607(struct sMS5607* ms)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  ms->D[0]=0;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  ms->D[1]=0;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	615a      	str	r2, [r3, #20]
  ms->D[2]=0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  ms->C[0]=0;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	801a      	strh	r2, [r3, #0]
  ms->C[1]=0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	805a      	strh	r2, [r3, #2]
  ms->C[2]=0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	809a      	strh	r2, [r3, #4]
  ms->C[3]=0;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	80da      	strh	r2, [r3, #6]
  ms->C[4]=0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	811a      	strh	r2, [r3, #8]
  ms->C[5]=0;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	815a      	strh	r2, [r3, #10]
  ms->C[6]=0;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	819a      	strh	r2, [r3, #12]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <PID_InitStruct>:
*/

#include "pid.h"

void PID_InitStruct(struct sPID* s)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->Kp=0.0f;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	605a      	str	r2, [r3, #4]
  s->Ki=0.0f;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  s->Kd=0.0f;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
  s->MaxI=0.0f;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  s->DeltaT = 0.0f;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  s->TargetP = 0.0f;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
  s->IntegratorCount = 0;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  for (i=0;i<POSITIONHISTORY;i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	e00b      	b.n	80026bc <PID_InitStruct+0x60>
    s->LastP[i]=0.0f;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
  for (i=0;i<POSITIONHISTORY;i++)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	3301      	adds	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b3b      	cmp	r3, #59	; 0x3b
 80026c0:	d9f0      	bls.n	80026a4 <PID_InitStruct+0x48>
}
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <PID_SavePoint>:

void PID_SavePoint(struct sPID* s, float p)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	ed87 0a00 	vstr	s0, [r7]
//  memmove((void*) *(s->LastP[1]),(void*) *(s->LastP[0]), sizeof(s->LastP)*(POSITIONHISTORY-1));
  uint8_t i;
  for (i=(POSITIONHISTORY-1); i>0; i--)
 80026dc:	233b      	movs	r3, #59	; 0x3b
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e011      	b.n	8002706 <PID_SavePoint+0x36>
    s->LastP[i] = s->LastP[i-1];
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	3204      	adds	r2, #4
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	440a      	add	r2, r1
 80026f0:	3204      	adds	r2, #4
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3304      	adds	r3, #4
 80026fe:	601a      	str	r2, [r3, #0]
  for (i=(POSITIONHISTORY-1); i>0; i--)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	3b01      	subs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ea      	bne.n	80026e2 <PID_SavePoint+0x12>
  s->LastP[0] = p;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	615a      	str	r2, [r3, #20]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <PID_SumError>:

float PID_SumError(struct sPID* s)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  s->IntegratorCount++;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800272c:	3301      	adds	r3, #1
 800272e:	b2da      	uxtb	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  if (s->IntegratorCount < POSITIONHISTORY)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800273c:	2b3b      	cmp	r3, #59	; 0x3b
 800273e:	d802      	bhi.n	8002746 <PID_SumError+0x28>
    return 0;
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e04c      	b.n	80027e0 <PID_SumError+0xc2>
  else
    s->IntegratorCount = POSITIONHISTORY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	223c      	movs	r2, #60	; 0x3c
 800274a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  float err = 0;
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  uint8_t i;
  for (i=0; i<POSITIONHISTORY; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	72fb      	strb	r3, [r7, #11]
 8002758:	e015      	b.n	8002786 <PID_SumError+0x68>
    err += (s->TargetP - s->LastP[i]);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	ed93 7a00 	vldr	s14, [r3]
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002774:	ed97 7a03 	vldr	s14, [r7, #12]
 8002778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277c:	edc7 7a03 	vstr	s15, [r7, #12]
  for (i=0; i<POSITIONHISTORY; i++)
 8002780:	7afb      	ldrb	r3, [r7, #11]
 8002782:	3301      	adds	r3, #1
 8002784:	72fb      	strb	r3, [r7, #11]
 8002786:	7afb      	ldrb	r3, [r7, #11]
 8002788:	2b3b      	cmp	r3, #59	; 0x3b
 800278a:	d9e6      	bls.n	800275a <PID_SumError+0x3c>
  err *= (s->Ki);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002792:	ed97 7a03 	vldr	s14, [r7, #12]
 8002796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279a:	edc7 7a03 	vstr	s15, [r7, #12]
  if ((-err) > s->MaxI)
 800279e:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a2:	eeb1 7a67 	vneg.f32	s14, s15
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80027ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	dd06      	ble.n	80027c4 <PID_SumError+0xa6>
    err = -(s->MaxI);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80027bc:	eef1 7a67 	vneg.f32	s15, s15
 80027c0:	edc7 7a03 	vstr	s15, [r7, #12]
  if (err > s->MaxI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80027ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80027ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	dd02      	ble.n	80027de <PID_SumError+0xc0>
    err = s->MaxI;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	60fb      	str	r3, [r7, #12]
  return err;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	ee07 3a90 	vmov	s15, r3
}
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <PID_Velocity>:

// we may want to improve this later
float PID_Velocity(struct sPID* s)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  uint8_t periods = 4;
 80027fa:	2304      	movs	r3, #4
 80027fc:	73fb      	strb	r3, [r7, #15]
  return (s->LastP[0]-s->LastP[periods])/(s->DeltaT*periods);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	ed93 7a05 	vldr	s14, [r3, #20]
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	3304      	adds	r3, #4
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3304      	adds	r3, #4
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	edd3 6a41 	vldr	s13, [r3, #260]	; 0x104
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002830:	eef0 7a66 	vmov.f32	s15, s13
}
 8002834:	eeb0 0a67 	vmov.f32	s0, s15
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <PID_Effort>:

// calculate the error and return a value between 0 and 1
float PID_Effort(struct sPID* s, float p)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	ed87 0a00 	vstr	s0, [r7]
  if (s->TargetP == 0)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	edd3 7a00 	vldr	s15, [r3]
 8002856:	eef5 7a40 	vcmp.f32	s15, #0.0
 800285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285e:	d102      	bne.n	8002866 <PID_Effort+0x22>
    return 0;
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e050      	b.n	8002908 <PID_Effort+0xc4>
  if (s->DeltaT == 0)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 800286c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	d102      	bne.n	800287c <PID_Effort+0x38>
    return 0;
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e045      	b.n	8002908 <PID_Effort+0xc4>
  float Ep, Ed, Ei, Effort;
  Ep = (s->TargetP - p) * (s->Kp);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	ed93 7a00 	vldr	s14, [r3]
 8002882:	edd7 7a00 	vldr	s15, [r7]
 8002886:	ee37 7a67 	vsub.f32	s14, s14, s15
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002894:	edc7 7a05 	vstr	s15, [r7, #20]
  Ed = (0 - PID_Velocity(s)) * (s->Kd);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ffaa 	bl	80027f2 <PID_Velocity>
 800289e:	eef0 7a40 	vmov.f32	s15, s0
 80028a2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002918 <PID_Effort+0xd4>
 80028a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80028b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b4:	edc7 7a04 	vstr	s15, [r7, #16]
  Ei = PID_SumError(s);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff30 	bl	800271e <PID_SumError>
 80028be:	ed87 0a03 	vstr	s0, [r7, #12]
  Effort = Ep+Ed+Ei;
 80028c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80028c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80028d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d6:	edc7 7a02 	vstr	s15, [r7, #8]
//  printf("t %7.3f Ep %7.3f  Ed %7.3f  Ei %7.3f  E %6.3f\n", p, Ep, Ed, Ei, Effort);
  if (Effort > 1)
 80028da:	edd7 7a02 	vldr	s15, [r7, #8]
 80028de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	dd02      	ble.n	80028f2 <PID_Effort+0xae>
    return 1;
 80028ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028f0:	e00a      	b.n	8002908 <PID_Effort+0xc4>
  if (Effort < 0)
 80028f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fe:	d502      	bpl.n	8002906 <PID_Effort+0xc2>
    return 0;
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e000      	b.n	8002908 <PID_Effort+0xc4>
  return Effort;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	ee07 3a90 	vmov	s15, r3
}
 800290c:	eeb0 0a67 	vmov.f32	s0, s15
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	00000000 	.word	0x00000000

0800291c <GetMilliseconds>:

extern volatile uint64_t ElapsedSeconds;
extern volatile uint16_t ClockTick;

uint64_t GetMilliseconds(void)
{
 800291c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002920:	b087      	sub	sp, #28
 8002922:	af00      	add	r7, sp, #0
  uint64_t s1=0;
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  uint64_t s2=1;
 8002930:	f04f 0201 	mov.w	r2, #1
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9c7 2302 	strd	r2, r3, [r7, #8]
  uint16_t t1=0;
 800293c:	2300      	movs	r3, #0
 800293e:	80fb      	strh	r3, [r7, #6]
  uint16_t t2=1;
 8002940:	2301      	movs	r3, #1
 8002942:	80bb      	strh	r3, [r7, #4]

  while (s1 != s2)
 8002944:	e009      	b.n	800295a <GetMilliseconds+0x3e>
  {
    s1=ElapsedSeconds;
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <GetMilliseconds+0xe4>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s2=ElapsedSeconds;
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <GetMilliseconds+0xe4>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	e9c7 2302 	strd	r2, r3, [r7, #8]
  while (s1 != s2)
 800295a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800295e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002962:	4299      	cmp	r1, r3
 8002964:	bf08      	it	eq
 8002966:	4290      	cmpeq	r0, r2
 8002968:	d1ed      	bne.n	8002946 <GetMilliseconds+0x2a>
  }
  while (t1 != t2)
 800296a:	e005      	b.n	8002978 <GetMilliseconds+0x5c>
  {
    t1=ClockTick;
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <GetMilliseconds+0xe8>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	80fb      	strh	r3, [r7, #6]
    t2=ClockTick;
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <GetMilliseconds+0xe8>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	80bb      	strh	r3, [r7, #4]
  while (t1 != t2)
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	88bb      	ldrh	r3, [r7, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d1f5      	bne.n	800296c <GetMilliseconds+0x50>
  }
  return s1*1000+t1*10;
 8002980:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	f04f 0500 	mov.w	r5, #0
 8002990:	015d      	lsls	r5, r3, #5
 8002992:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002996:	0154      	lsls	r4, r2, #5
 8002998:	4622      	mov	r2, r4
 800299a:	462b      	mov	r3, r5
 800299c:	1a12      	subs	r2, r2, r0
 800299e:	eb63 0301 	sbc.w	r3, r3, r1
 80029a2:	f04f 0400 	mov.w	r4, #0
 80029a6:	f04f 0500 	mov.w	r5, #0
 80029aa:	009d      	lsls	r5, r3, #2
 80029ac:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80029b0:	0094      	lsls	r4, r2, #2
 80029b2:	4622      	mov	r2, r4
 80029b4:	462b      	mov	r3, r5
 80029b6:	1812      	adds	r2, r2, r0
 80029b8:	eb41 0303 	adc.w	r3, r1, r3
 80029bc:	f04f 0000 	mov.w	r0, #0
 80029c0:	f04f 0100 	mov.w	r1, #0
 80029c4:	00d9      	lsls	r1, r3, #3
 80029c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029ca:	00d0      	lsls	r0, r2, #3
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	88fa      	ldrh	r2, [r7, #6]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	461a      	mov	r2, r3
 80029e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80029e4:	eb10 0802 	adds.w	r8, r0, r2
 80029e8:	eb41 0903 	adc.w	r9, r1, r3
 80029ec:	4642      	mov	r2, r8
 80029ee:	464b      	mov	r3, r9
}
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000388 	.word	0x20000388
 8002a04:	20000380 	.word	0x20000380

08002a08 <InitState>:

void InitState(struct sState* state)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  int i;
  state->TestBuffer = 525600;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <InitState+0x58>)
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28

  for (i=0;i<6; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e00d      	b.n	8002a38 <InitState+0x30>
  {
    state->TemperatureTarget[i] = 233000;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4910      	ldr	r1, [pc, #64]	; (8002a64 <InitState+0x5c>)
 8002a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    state->HeaterControllerMode[i] = true;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3320      	adds	r3, #32
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
  for (i=0;i<6; i++)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3301      	adds	r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	ddee      	ble.n	8002a1c <InitState+0x14>
  }
  state->MSPressure = 0;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  state->MSTemperature = 0;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  state->SpectraCount = 0;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	00080520 	.word	0x00080520
 8002a64:	00038e28 	.word	0x00038e28

08002a68 <SetHeater>:

void SetHeater(int heater, bool state)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  if (state)
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <SetHeater+0x2a>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 >> heater, GPIO_PIN_SET);
 8002a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	fa42 f303 	asr.w	r3, r2, r3
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2201      	movs	r2, #1
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <SetHeater+0x48>)
 8002a8c:	f003 fad6 	bl	800603c <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 >> heater, GPIO_PIN_RESET);
}
 8002a90:	e00a      	b.n	8002aa8 <SetHeater+0x40>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 >> heater, GPIO_PIN_RESET);
 8002a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	fa42 f303 	asr.w	r3, r2, r3
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4803      	ldr	r0, [pc, #12]	; (8002ab0 <SetHeater+0x48>)
 8002aa4:	f003 faca 	bl	800603c <HAL_GPIO_WritePin>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <parse_comma_delimited_str>:

// found this online
int parse_comma_delimited_str(char *string, char **fields, int max_fields)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
   int i = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
   fields[i++] = string;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	617a      	str	r2, [r7, #20]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	4413      	add	r3, r2
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	601a      	str	r2, [r3, #0]
   while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
 8002ad4:	e00d      	b.n	8002af2 <parse_comma_delimited_str+0x3e>
      *string = '\0';
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
      fields[i++] = ++string;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	617a      	str	r2, [r7, #20]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	4413      	add	r3, r2
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	601a      	str	r2, [r3, #0]
   while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	da07      	bge.n	8002b0a <parse_comma_delimited_str+0x56>
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f011 ffbd 	bl	8014a7c <strchr>
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e5      	bne.n	8002ad6 <parse_comma_delimited_str+0x22>
   }
   return --i;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <InitDWTTimer>:
    HAL_Delay(1);
  }
}

void InitDWTTimer(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <InitDWTTimer+0x2c>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <InitDWTTimer+0x2c>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <InitDWTTimer+0x30>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <InitDWTTimer+0x30>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <InitDWTTimer+0x30>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6013      	str	r3, [r2, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000edf0 	.word	0xe000edf0
 8002b4c:	e0001000 	.word	0xe0001000

08002b50 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002b58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b5c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002b68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b6c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002b70:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00b      	beq.n	8002b90 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002b78:	e000      	b.n	8002b7c <ITM_SendChar+0x2c>
    {
      __NOP();
 8002b7a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002b7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f9      	beq.n	8002b7a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002b86:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002b90:	687b      	ldr	r3, [r7, #4]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba4:	f5ad 5d34 	sub.w	sp, sp, #11520	; 0x2d00
 8002ba8:	b081      	sub	sp, #4
 8002baa:	af0a      	add	r7, sp, #40	; 0x28
  int i, j;

  uint8_t buffer[250];
  uint64_t t;

  bool Booting = true;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f507 5233 	add.w	r2, r7, #11456	; 0x2cc0
 8002bb2:	f102 0217 	add.w	r2, r2, #23
 8002bb6:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bb8:	f002 f854 	bl	8004c64 <HAL_Init>

  /* USER CODE BEGIN Init */

  InitState(&State);
 8002bbc:	f507 532f 	add.w	r3, r7, #11200	; 0x2bc0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff21 	bl	8002a08 <InitState>
  InitGPSFrame(&GPSFrame);
 8002bc6:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002bca:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fb28 	bl	8001224 <InitGPSFrame>
  InitMS5607(&MS5607);
 8002bd4:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002bd8:	f103 031c 	add.w	r3, r3, #28
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fd15 	bl	800260c <InitMS5607>
  InitRegisters(Registers, BackupRegisters);
 8002be2:	4975      	ldr	r1, [pc, #468]	; (8002db8 <main+0x218>)
 8002be4:	4875      	ldr	r0, [pc, #468]	; (8002dbc <main+0x21c>)
 8002be6:	f7ff fa35 	bl	8002054 <InitRegisters>
  PID_InitStruct(&PID_1);
 8002bea:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002bee:	3b14      	subs	r3, #20
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fd33 	bl	800265c <PID_InitStruct>
  PID_InitStruct(&PID_2);
 8002bf6:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8002bfa:	3b20      	subs	r3, #32
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fd2d 	bl	800265c <PID_InitStruct>
  PID_InitStruct(&PID_3);
 8002c02:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002c06:	3b2c      	subs	r3, #44	; 0x2c
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fd27 	bl	800265c <PID_InitStruct>
  PID_InitStruct(&PID_4);
 8002c0e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002c12:	3b38      	subs	r3, #56	; 0x38
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fd21 	bl	800265c <PID_InitStruct>
  PID_InitStruct(&PID_5);
 8002c1a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002c1e:	3b04      	subs	r3, #4
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fd1b 	bl	800265c <PID_InitStruct>
  PID_InitStruct(&PID_6);
 8002c26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c2a:	3b10      	subs	r3, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fd15 	bl	800265c <PID_InitStruct>
  {
    TMP117_InitStruct(&TMP117_1, &hi2c2, 0);
    TMP117_InitStruct(&TMP117_2, &hi2c2, 1);
  }

  AT30TS74_InitStruct(&AT30TS74_1, &hi2c2, 3);
 8002c32:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002c36:	3b30      	subs	r3, #48	; 0x30
 8002c38:	2203      	movs	r2, #3
 8002c3a:	4961      	ldr	r1, [pc, #388]	; (8002dc0 <main+0x220>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe f9e5 	bl	800100c <AT30TS74_InitStruct>
  AT30TS74_InitStruct(&AT30TS74_2, &hi2c2, 7);
 8002c42:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8002c46:	3b08      	subs	r3, #8
 8002c48:	2207      	movs	r2, #7
 8002c4a:	495d      	ldr	r1, [pc, #372]	; (8002dc0 <main+0x220>)
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f9dd 	bl	800100c <AT30TS74_InitStruct>
//  AT30TS74_InitStruct(&AT30TS74_3, &hi2c2, 6);
//  AT30TS74_InitStruct(&AT30TS74_4, &hi2c2, 1);

  HR_InitStruct(&HR4000);
 8002c52:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002c56:	f103 0308 	add.w	r3, r3, #8
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe ffbc 	bl	8001bd8 <HR_InitStruct>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c60:	f000 fbe2 	bl	8003428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c64:	f000 fe32 	bl	80038cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002c68:	f000 fe08 	bl	800387c <MX_DMA_Init>
  MX_ADC1_Init();
 8002c6c:	f000 fc46 	bl	80034fc <MX_ADC1_Init>
  MX_I2C1_Init();
 8002c70:	f000 fc96 	bl	80035a0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002c74:	f000 fcd4 	bl	8003620 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002c78:	f000 fd12 	bl	80036a0 <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 8002c7c:	f000 fdd4 	bl	8003828 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002c80:	f00b f8f6 	bl	800de70 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002c84:	f010 fa3e 	bl	8013104 <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8002c88:	f000 fd80 	bl	800378c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8002c8c:	f000 fda2 	bl	80037d4 <MX_USART1_UART_Init>
  MX_TIM13_Init();
 8002c90:	f000 fd58 	bl	8003744 <MX_TIM13_Init>
  MX_SPI1_Init();
 8002c94:	f000 fd24 	bl	80036e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  printf("-- REBOOT --\n");
 8002c98:	484a      	ldr	r0, [pc, #296]	; (8002dc4 <main+0x224>)
 8002c9a:	f011 fe8d 	bl	80149b8 <puts>
  InitDWTTimer(); // system clock timer for creating us delays for onewire
 8002c9e:	f7ff ff3d 	bl	8002b1c <InitDWTTimer>

  j = sizeof Spectra.RawData / sizeof Spectra.RawData[0];
 8002ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ca6:	f507 5233 	add.w	r2, r7, #11456	; 0x2cc0
 8002caa:	f102 020c 	add.w	r2, r2, #12
 8002cae:	6013      	str	r3, [r2, #0]
  for (i=0;i<j;i++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f507 5233 	add.w	r2, r7, #11456	; 0x2cc0
 8002cb6:	f102 0210 	add.w	r2, r2, #16
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e016      	b.n	8002cec <main+0x14c>
    Spectra.RawData[i]=0;  // zero the spectra data memory
 8002cbe:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8002cc2:	3b28      	subs	r3, #40	; 0x28
 8002cc4:	f507 5233 	add.w	r2, r7, #11456	; 0x2cc0
 8002cc8:	f102 0210 	add.w	r2, r2, #16
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	3309      	adds	r3, #9
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
  for (i=0;i<j;i++)
 8002cd6:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002cda:	f103 0310 	add.w	r3, r3, #16
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f507 5233 	add.w	r2, r7, #11456	; 0x2cc0
 8002ce6:	f102 0210 	add.w	r2, r2, #16
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002cf0:	f103 0310 	add.w	r3, r3, #16
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002cfa:	f103 030c 	add.w	r3, r3, #12
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbdc      	blt.n	8002cbe <main+0x11e>

// we keep track of the heater dwell, instead of the duty cycle, because it speeds up math in the heater PWM interrupt
// these default to a duty cycle of 0

  Heaters.HeaterDwell[0]=(100-00)/2;
 8002d04:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <main+0x228>)
 8002d06:	2232      	movs	r2, #50	; 0x32
 8002d08:	701a      	strb	r2, [r3, #0]
  Heaters.HeaterDwell[1]=(100-00)/2;
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <main+0x228>)
 8002d0c:	2232      	movs	r2, #50	; 0x32
 8002d0e:	705a      	strb	r2, [r3, #1]
  Heaters.HeaterDwell[2]=(100-00)/2;
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <main+0x228>)
 8002d12:	2232      	movs	r2, #50	; 0x32
 8002d14:	709a      	strb	r2, [r3, #2]
  Heaters.HeaterDwell[3]=(100-00)/2;
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <main+0x228>)
 8002d18:	2232      	movs	r2, #50	; 0x32
 8002d1a:	70da      	strb	r2, [r3, #3]
  Heaters.HeaterDwell[4]=(100-00)/2;
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <main+0x228>)
 8002d1e:	2232      	movs	r2, #50	; 0x32
 8002d20:	711a      	strb	r2, [r3, #4]
  Heaters.HeaterDwell[5]=(100-00)/2;
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <main+0x228>)
 8002d24:	2232      	movs	r2, #50	; 0x32
 8002d26:	715a      	strb	r2, [r3, #5]

// I don't remember the numbers that led to this being 2/2, probably something to do with the clock frequency
// this tells the PID code how long between updates
  PID_5.DeltaT = 2.0f/2.0f;
 8002d28:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002d2c:	3b04      	subs	r3, #4
 8002d2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d32:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  PID_6.DeltaT = 2.0f/2.0f;
 8002d36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d3a:	3b10      	subs	r3, #16
 8002d3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  // these are the target temperatures for heater controllers 5 and 6.
  PID_5.TargetP = 27.0f;
 8002d44:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002d48:	3b04      	subs	r3, #4
 8002d4a:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <main+0x22c>)
 8002d4c:	601a      	str	r2, [r3, #0]
  PID_6.TargetP = 27.0f;
 8002d4e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d52:	3b10      	subs	r3, #16
 8002d54:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <main+0x22c>)
 8002d56:	601a      	str	r2, [r3, #0]

  // heaters are configured with a gain of three. With a gain of three, a temperature difference between
  // the set point and the measured temperature of 0.1 C will result in 30% duty cycle.

  PID_5.Kp = 3.0f;
 8002d58:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002d5c:	3b04      	subs	r3, #4
 8002d5e:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <main+0x230>)
 8002d60:	605a      	str	r2, [r3, #4]
  PID_6.Kp = 3.0f;
 8002d62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d66:	3b10      	subs	r3, #16
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <main+0x230>)
 8002d6a:	605a      	str	r2, [r3, #4]

  // default configuration values for the HR4000

  HR4000.NextIntegrationTime_ms = 100;
 8002d6c:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002d70:	f103 0308 	add.w	r3, r3, #8
 8002d74:	2264      	movs	r2, #100	; 0x64
 8002d76:	80da      	strh	r2, [r3, #6]
  HR4000.Smoothing = 0;
 8002d78:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002d7c:	f103 0308 	add.w	r3, r3, #8
 8002d80:	2200      	movs	r2, #0
 8002d82:	725a      	strb	r2, [r3, #9]
  HR4000.Summing = 1;
 8002d84:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002d88:	f103 0308 	add.w	r3, r3, #8
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	721a      	strb	r2, [r3, #8]
  HR4000.Checksum = false;
 8002d90:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002d94:	f103 0308 	add.w	r3, r3, #8
 8002d98:	2200      	movs	r2, #0
 8002d9a:	731a      	strb	r2, [r3, #12]

  // we want to force configuring the integration time, so we set the NextIntegrationTime_ms to be different
  // from the current integration time. This is left over from before we forced a reset to state 0 in the
  // HR4000 state machine.

  HR4000.IntegrationTime_ms = HR4000.NextIntegrationTime_ms + 1;
 8002d9c:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002da0:	f103 0308 	add.w	r3, r3, #8
 8002da4:	88db      	ldrh	r3, [r3, #6]
 8002da6:	3301      	adds	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002dae:	f103 0308 	add.w	r3, r3, #8
 8002db2:	809a      	strh	r2, [r3, #4]

  if (USESD)
  {
    while (SDFS_Mount())
 8002db4:	e015      	b.n	8002de2 <main+0x242>
 8002db6:	bf00      	nop
 8002db8:	200011b4 	.word	0x200011b4
 8002dbc:	20000c48 	.word	0x20000c48
 8002dc0:	20000ac0 	.word	0x20000ac0
 8002dc4:	08019920 	.word	0x08019920
 8002dc8:	20001120 	.word	0x20001120
 8002dcc:	41d80000 	.word	0x41d80000
 8002dd0:	40400000 	.word	0x40400000
    {
      printf("Could not mount SDFS. Sleeping for 3s and trying again.\n");
 8002dd4:	48d5      	ldr	r0, [pc, #852]	; (800312c <main+0x58c>)
 8002dd6:	f011 fdef 	bl	80149b8 <puts>
      HAL_Delay(3000);
 8002dda:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002dde:	f001 ffb3 	bl	8004d48 <HAL_Delay>
    while (SDFS_Mount())
 8002de2:	f001 f857 	bl	8003e94 <SDFS_Mount>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f3      	bne.n	8002dd4 <main+0x234>
    }
  }

  HAL_UART_Receive_IT(&huart2, &GPSUART.ByteBuffer,1);
 8002dec:	2201      	movs	r2, #1
 8002dee:	49d0      	ldr	r1, [pc, #832]	; (8003130 <main+0x590>)
 8002df0:	48d0      	ldr	r0, [pc, #832]	; (8003134 <main+0x594>)
 8002df2:	f007 ff92 	bl	800ad1a <HAL_UART_Receive_IT>
  HAL_I2C_Slave_Receive_IT(&hi2c1, I2C1_Input_Buffer, 5);
 8002df6:	2205      	movs	r2, #5
 8002df8:	49cf      	ldr	r1, [pc, #828]	; (8003138 <main+0x598>)
 8002dfa:	48d0      	ldr	r0, [pc, #832]	; (800313c <main+0x59c>)
 8002dfc:	f003 fda0 	bl	8006940 <HAL_I2C_Slave_Receive_IT>
  // we need the coefficients programmed into the MS5607 to interpret the data
  MS5607_GetCoefficients(&hi2c2, &MS5607);
 8002e00:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002e04:	f103 031c 	add.w	r3, r3, #28
 8002e08:	4619      	mov	r1, r3
 8002e0a:	48cd      	ldr	r0, [pc, #820]	; (8003140 <main+0x5a0>)
 8002e0c:	f7ff fa06 	bl	800221c <MS5607_GetCoefficients>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100); // give the devices a moment to compose themselves
 8002e10:	2064      	movs	r0, #100	; 0x64
 8002e12:	f001 ff99 	bl	8004d48 <HAL_Delay>

  // Timers must be started after all structs are initialized!
  HAL_TIM_Base_Start_IT(&htim13); // Heater Timer
 8002e16:	48cb      	ldr	r0, [pc, #812]	; (8003144 <main+0x5a4>)
 8002e18:	f007 fbaa 	bl	800a570 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14); // start our timer last
 8002e1c:	48ca      	ldr	r0, [pc, #808]	; (8003148 <main+0x5a8>)
 8002e1e:	f007 fba7 	bl	800a570 <HAL_TIM_Base_Start_IT>

  while (1)
  {
    if (DoUserUpdate)
 8002e22:	4bca      	ldr	r3, [pc, #808]	; (800314c <main+0x5ac>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d011      	beq.n	8002e50 <main+0x2b0>
    {
      DoUserUpdate = false;
 8002e2c:	4bc7      	ldr	r3, [pc, #796]	; (800314c <main+0x5ac>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
      printf("Booting %d, GPS fix %d\n",Booting, GPSFrame.Fixed);
 8002e32:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002e36:	f103 0317 	add.w	r3, r3, #23
 8002e3a:	7819      	ldrb	r1, [r3, #0]
 8002e3c:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002e40:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002e44:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002e48:	461a      	mov	r2, r3
 8002e4a:	48c1      	ldr	r0, [pc, #772]	; (8003150 <main+0x5b0>)
 8002e4c:	f011 fd2e 	bl	80148ac <iprintf>
    }

    if (Booting)
 8002e50:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002e54:	f103 0317 	add.w	r3, r3, #23
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00f      	beq.n	8002e7e <main+0x2de>
    {
      if (USESD)
        SDFS_SetupFS(&State, &GPSFrame);
 8002e5e:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8002e62:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002e66:	f507 532f 	add.w	r3, r7, #11200	; 0x2bc0
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 ffbd 	bl	8003dec <SDFS_SetupFS>
      Booting = false;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f507 5233 	add.w	r2, r7, #11456	; 0x2cc0
 8002e78:	f102 0217 	add.w	r2, r2, #23
 8002e7c:	7013      	strb	r3, [r2, #0]
    }

    // keep a single directory from becoming too full. FATFS does not handle large directories well.
    if (USESD & (State.CreatedFiles >= 250))
 8002e7e:	f507 532f 	add.w	r3, r7, #11200	; 0x2bc0
 8002e82:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8002e86:	2bf9      	cmp	r3, #249	; 0xf9
 8002e88:	d904      	bls.n	8002e94 <main+0x2f4>
      SDFS_IncrementDirectory(&State);
 8002e8a:	f507 532f 	add.w	r3, r7, #11200	; 0x2bc0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 ffd6 	bl	8003e40 <SDFS_IncrementDirectory>

    // This is a semaphore which is only set in the interrupt and only cleared in the main program
    // to notify us when data is ready to be written.

    if (HRDataReady)
 8002e94:	4baf      	ldr	r3, [pc, #700]	; (8003154 <main+0x5b4>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <main+0x310>
    {
      HRDataReady = false;
 8002e9e:	4bad      	ldr	r3, [pc, #692]	; (8003154 <main+0x5b4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
      HR4000.DataReady = true;
 8002ea4:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8002ea8:	f103 0308 	add.w	r3, r3, #8
 8002eac:	2201      	movs	r2, #1
 8002eae:	73da      	strb	r2, [r3, #15]
    }

    if (DoSampleAT30TS74 && (!Booting))
 8002eb0:	4ba9      	ldr	r3, [pc, #676]	; (8003158 <main+0x5b8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 817e 	beq.w	80031b8 <main+0x618>
 8002ebc:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002ec0:	f103 0317 	add.w	r3, r3, #23
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	f083 0301 	eor.w	r3, r3, #1
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 8173 	beq.w	80031b8 <main+0x618>
    {
      DoSampleAT30TS74 = false;
 8002ed2:	4ba1      	ldr	r3, [pc, #644]	; (8003158 <main+0x5b8>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
      if (AT30TS74_1.Configured)
 8002ed8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002edc:	3b30      	subs	r3, #48	; 0x30
 8002ede:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 815c 	beq.w	80031a0 <main+0x600>
      {
        AT30TS74_GetTemperature(&AT30TS74_1);
 8002ee8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002eec:	3b30      	subs	r3, #48	; 0x30
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe f8ee 	bl	80010d0 <AT30TS74_GetTemperature>
        AT30TS74_GetTemperature(&AT30TS74_2);
 8002ef4:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8002ef8:	3b08      	subs	r3, #8
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe f8e8 	bl	80010d0 <AT30TS74_GetTemperature>
        t = GetMilliseconds();
 8002f00:	f7ff fd0c 	bl	800291c <GetMilliseconds>
 8002f04:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002f08:	e9c3 0100 	strd	r0, r1, [r3]
        printf("%ld.%03d - %.2f %.2f    %.0f %.0f \n",
            (uint32_t) (t/1000), (uint16_t) (t%1000),
 8002f0c:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	f7fd fec4 	bl	8000ca8 <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
        printf("%ld.%03d - %.2f %.2f    %.0f %.0f \n",
 8002f24:	4616      	mov	r6, r2
            (uint32_t) (t/1000), (uint16_t) (t%1000),
 8002f26:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	f7fd feb7 	bl	8000ca8 <__aeabi_uldivmod>
 8002f3a:	b293      	uxth	r3, r2
        printf("%ld.%03d - %.2f %.2f    %.0f %.0f \n",
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002f42:	3b30      	subs	r3, #48	; 0x30
 8002f44:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8002f48:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8002f4c:	3b08      	subs	r3, #8
 8002f4e:	e9d3 8922 	ldrd	r8, r9, [r3, #136]	; 0x88
            AT30TS74_1.Temperature,
            AT30TS74_2.Temperature,
            (float)(100 - 2 * Heaters.HeaterDwell[4]),
 8002f52:	4b82      	ldr	r3, [pc, #520]	; (800315c <main+0x5bc>)
 8002f54:	791b      	ldrb	r3, [r3, #4]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        printf("%ld.%03d - %.2f %.2f    %.0f %.0f \n",
 8002f66:	ee17 0a90 	vmov	r0, s15
 8002f6a:	f7fd fafd 	bl	8000568 <__aeabi_f2d>
 8002f6e:	4682      	mov	sl, r0
 8002f70:	468b      	mov	fp, r1
            (float)(100 - 2 * Heaters.HeaterDwell[5]));
 8002f72:	4b7a      	ldr	r3, [pc, #488]	; (800315c <main+0x5bc>)
 8002f74:	795b      	ldrb	r3, [r3, #5]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        printf("%ld.%03d - %.2f %.2f    %.0f %.0f \n",
 8002f86:	ee17 0a90 	vmov	r0, s15
 8002f8a:	f7fd faed 	bl	8000568 <__aeabi_f2d>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f96:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002f9a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002f9e:	e9cd 4500 	strd	r4, r5, [sp]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	486e      	ldr	r0, [pc, #440]	; (8003160 <main+0x5c0>)
 8002fa8:	f011 fc80 	bl	80148ac <iprintf>

        if (USESD & LOGAT30TS74)
        {
          t = GetMilliseconds();
 8002fac:	f7ff fcb6 	bl	800291c <GetMilliseconds>
 8002fb0:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002fb4:	e9c3 0100 	strd	r0, r1, [r3]
          snprintf((char*) buffer, 200, "%ld.%03d - %.2f %.2f    %.0f %.0f \n",
            (uint32_t) (t/1000), (uint16_t) (t%1000),
 8002fb8:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 8002fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	f7fd fe6e 	bl	8000ca8 <__aeabi_uldivmod>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
          snprintf((char*) buffer, 200, "%ld.%03d - %.2f %.2f    %.0f %.0f \n",
 8002fd0:	607a      	str	r2, [r7, #4]
            (uint32_t) (t/1000), (uint16_t) (t%1000),
 8002fd2:	f507 5233 	add.w	r2, r7, #11456	; 0x2cc0
 8002fd6:	e9d2 0100 	ldrd	r0, r1, [r2]
 8002fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	f7fd fe61 	bl	8000ca8 <__aeabi_uldivmod>
 8002fe6:	b293      	uxth	r3, r2
          snprintf((char*) buffer, 200, "%ld.%03d - %.2f %.2f    %.0f %.0f \n",
 8002fe8:	461e      	mov	r6, r3
 8002fea:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002fee:	3b30      	subs	r3, #48	; 0x30
 8002ff0:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8002ff4:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8002ff8:	3b08      	subs	r3, #8
 8002ffa:	e9d3 8922 	ldrd	r8, r9, [r3, #136]	; 0x88
            AT30TS74_1.Temperature,
            AT30TS74_2.Temperature,
            (float)(100 - 2 * Heaters.HeaterDwell[4]),
 8002ffe:	4b57      	ldr	r3, [pc, #348]	; (800315c <main+0x5bc>)
 8003000:	791b      	ldrb	r3, [r3, #4]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          snprintf((char*) buffer, 200, "%ld.%03d - %.2f %.2f    %.0f %.0f \n",
 8003012:	ee17 0a90 	vmov	r0, s15
 8003016:	f7fd faa7 	bl	8000568 <__aeabi_f2d>
 800301a:	4682      	mov	sl, r0
 800301c:	468b      	mov	fp, r1
            (float)(100 - 2 * Heaters.HeaterDwell[5]));
 800301e:	4b4f      	ldr	r3, [pc, #316]	; (800315c <main+0x5bc>)
 8003020:	795b      	ldrb	r3, [r3, #5]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          snprintf((char*) buffer, 200, "%ld.%03d - %.2f %.2f    %.0f %.0f \n",
 8003032:	ee17 0a90 	vmov	r0, s15
 8003036:	f7fd fa97 	bl	8000568 <__aeabi_f2d>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	f107 0018 	add.w	r0, r7, #24
 8003042:	380c      	subs	r0, #12
 8003044:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003048:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800304c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003050:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003054:	9600      	str	r6, [sp, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a41      	ldr	r2, [pc, #260]	; (8003160 <main+0x5c0>)
 800305a:	21c8      	movs	r1, #200	; 0xc8
 800305c:	f011 fcba 	bl	80149d4 <sniprintf>
          SDFS_WriteString(&State, buffer, "AT30TS74.txt");
 8003060:	f107 0318 	add.w	r3, r7, #24
 8003064:	3b0c      	subs	r3, #12
 8003066:	f507 502f 	add.w	r0, r7, #11200	; 0x2bc0
 800306a:	4a3e      	ldr	r2, [pc, #248]	; (8003164 <main+0x5c4>)
 800306c:	4619      	mov	r1, r3
 800306e:	f000 ff73 	bl	8003f58 <SDFS_WriteString>

          // we should have PID_Effort handle PID_SavePoint but I'm afraid to change anything now
          // so we leave it for flight

          // this code runs the PID calculations and sets the heater dwell length
          PID_SavePoint(&PID_5, AT30TS74_1.Temperature);
 8003072:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8003076:	3b30      	subs	r3, #48	; 0x30
 8003078:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f7fd fdc2 	bl	8000c08 <__aeabi_d2f>
 8003084:	4602      	mov	r2, r0
 8003086:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800308a:	3b04      	subs	r3, #4
 800308c:	ee00 2a10 	vmov	s0, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fb1d 	bl	80026d0 <PID_SavePoint>
          Heaters.HeaterDwell[4] = 100 * (1-PID_Effort(&PID_5, AT30TS74_1.Temperature))/2;
 8003096:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800309a:	3b30      	subs	r3, #48	; 0x30
 800309c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fdb0 	bl	8000c08 <__aeabi_d2f>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80030ae:	3b04      	subs	r3, #4
 80030b0:	ee00 2a10 	vmov	s0, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fbc5 	bl	8002844 <PID_Effort>
 80030ba:	eef0 7a40 	vmov.f32	s15, s0
 80030be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003168 <main+0x5c8>
 80030ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030da:	edc7 7a01 	vstr	s15, [r7, #4]
 80030de:	793b      	ldrb	r3, [r7, #4]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b1e      	ldr	r3, [pc, #120]	; (800315c <main+0x5bc>)
 80030e4:	711a      	strb	r2, [r3, #4]
          PID_SavePoint(&PID_6, AT30TS74_2.Temperature);
 80030e6:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 80030ea:	3b08      	subs	r3, #8
 80030ec:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7fd fd88 	bl	8000c08 <__aeabi_d2f>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80030fe:	3b10      	subs	r3, #16
 8003100:	ee00 2a10 	vmov	s0, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fae3 	bl	80026d0 <PID_SavePoint>
          Heaters.HeaterDwell[5] = 100 * (1-PID_Effort(&PID_6, AT30TS74_2.Temperature))/2;
 800310a:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800310e:	3b08      	subs	r3, #8
 8003110:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f7fd fd76 	bl	8000c08 <__aeabi_d2f>
 800311c:	4602      	mov	r2, r0
 800311e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003122:	3b10      	subs	r3, #16
 8003124:	ee00 2a10 	vmov	s0, r2
 8003128:	e020      	b.n	800316c <main+0x5cc>
 800312a:	bf00      	nop
 800312c:	08019930 	.word	0x08019930
 8003130:	20000391 	.word	0x20000391
 8003134:	20001128 	.word	0x20001128
 8003138:	20000588 	.word	0x20000588
 800313c:	20000a6c 	.word	0x20000a6c
 8003140:	20000ac0 	.word	0x20000ac0
 8003144:	20000b5c 	.word	0x20000b5c
 8003148:	2000116c 	.word	0x2000116c
 800314c:	2000037b 	.word	0x2000037b
 8003150:	08019968 	.word	0x08019968
 8003154:	20000378 	.word	0x20000378
 8003158:	2000037a 	.word	0x2000037a
 800315c:	20001120 	.word	0x20001120
 8003160:	08019980 	.word	0x08019980
 8003164:	080199a4 	.word	0x080199a4
 8003168:	42c80000 	.word	0x42c80000
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fb69 	bl	8002844 <PID_Effort>
 8003172:	eef0 7a40 	vmov.f32	s15, s0
 8003176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800317a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8003168 <main+0x5c8>
 8003182:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003186:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800318a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800318e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003192:	edc7 7a01 	vstr	s15, [r7, #4]
 8003196:	793b      	ldrb	r3, [r7, #4]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b97      	ldr	r3, [pc, #604]	; (80033f8 <main+0x858>)
 800319c:	715a      	strb	r2, [r3, #5]
 800319e:	e00b      	b.n	80031b8 <main+0x618>
        }
      }
      else
      {
        AT30TS74_Configure(&AT30TS74_1);
 80031a0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80031a4:	3b30      	subs	r3, #48	; 0x30
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd ff62 	bl	8001070 <AT30TS74_Configure>
        AT30TS74_Configure(&AT30TS74_2);
 80031ac:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 80031b0:	3b08      	subs	r3, #8
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd ff5c 	bl	8001070 <AT30TS74_Configure>
        TMP117_Configure(&TMP117_2);
      }
    }

    // This is left over from before we reset the state back to 0 after getting a spectra
    if (DoGetSpectra && USEHR4000 && (!Booting))
 80031b8:	4b90      	ldr	r3, [pc, #576]	; (80033fc <main+0x85c>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <main+0x648>
 80031c2:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 80031c6:	f103 0317 	add.w	r3, r3, #23
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f083 0301 	eor.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <main+0x648>
    {
      DoGetSpectra = false;
 80031d6:	4b89      	ldr	r3, [pc, #548]	; (80033fc <main+0x85c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
      HR4000.GetSpectra = true;
 80031dc:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80031e0:	f103 0308 	add.w	r3, r3, #8
 80031e4:	2201      	movs	r2, #1
 80031e6:	739a      	strb	r2, [r3, #14]
    }

    if (DoHR4000 && USEHR4000 && (!Booting))
 80031e8:	4b85      	ldr	r3, [pc, #532]	; (8003400 <main+0x860>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d03a      	beq.n	8003268 <main+0x6c8>
 80031f2:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 80031f6:	f103 0317 	add.w	r3, r3, #23
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f083 0301 	eor.w	r3, r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d030      	beq.n	8003268 <main+0x6c8>
    {
      DoHR4000 = false;
 8003206:	4b7e      	ldr	r3, [pc, #504]	; (8003400 <main+0x860>)
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
      HR_Execute(&State, &HR4000, &Spectra, &GPSFrame);
 800320c:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8003210:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8003214:	f607 12d8 	addw	r2, r7, #2520	; 0x9d8
 8003218:	3a28      	subs	r2, #40	; 0x28
 800321a:	f507 5127 	add.w	r1, r7, #10688	; 0x29c0
 800321e:	f101 0108 	add.w	r1, r1, #8
 8003222:	f507 502f 	add.w	r0, r7, #11200	; 0x2bc0
 8003226:	f7fe fa8b 	bl	8001740 <HR_Execute>
      if (USESD & Spectra.ReadyToSave)
 800322a:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 800322e:	3b28      	subs	r3, #40	; 0x28
 8003230:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003234:	3317      	adds	r3, #23
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <main+0x6c8>
      {
        Spectra.ReadyToSave = false;
 8003240:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8003244:	3b28      	subs	r3, #40	; 0x28
 8003246:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800324a:	3317      	adds	r3, #23
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
        SDFS_WriteSpectraBinary(&State, &Spectra, &GPSFrame);
 8003250:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8003254:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8003258:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 800325c:	3b28      	subs	r3, #40	; 0x28
 800325e:	f507 502f 	add.w	r0, r7, #11200	; 0x2bc0
 8003262:	4619      	mov	r1, r3
 8003264:	f001 f820 	bl	80042a8 <SDFS_WriteSpectraBinary>
      }
    }

    // we want this before processing a GPS sentence
    if (DoGPSTick)
 8003268:	4b66      	ldr	r3, [pc, #408]	; (8003404 <main+0x864>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00f      	beq.n	8003292 <main+0x6f2>
    {
      DoGPSTick = false;
 8003272:	4b64      	ldr	r3, [pc, #400]	; (8003404 <main+0x864>)
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
      GPSFrame.Ticks += 1;
 8003278:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 800327c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8003280:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 800328a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800328e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    }

    if (DoPressureSensor && (!Booting))
 8003292:	4b5d      	ldr	r3, [pc, #372]	; (8003408 <main+0x868>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d04e      	beq.n	800333a <main+0x79a>
 800329c:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 80032a0:	f103 0317 	add.w	r3, r3, #23
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	f083 0301 	eor.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d044      	beq.n	800333a <main+0x79a>
    {
      DoPressureSensor = false;
 80032b0:	4b55      	ldr	r3, [pc, #340]	; (8003408 <main+0x868>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
      switch (PressureSensorState)
 80032b6:	4b55      	ldr	r3, [pc, #340]	; (800340c <main+0x86c>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d019      	beq.n	80032f4 <main+0x754>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	dc3b      	bgt.n	800333c <main+0x79c>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <main+0x72e>
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d005      	beq.n	80032d8 <main+0x738>
 80032cc:	e036      	b.n	800333c <main+0x79c>
      {
        case 0:
          MS5607_StartConversion(&hi2c2, false);
 80032ce:	2100      	movs	r1, #0
 80032d0:	484f      	ldr	r0, [pc, #316]	; (8003410 <main+0x870>)
 80032d2:	f7fe ff2f 	bl	8002134 <MS5607_StartConversion>
          break;
 80032d6:	e031      	b.n	800333c <main+0x79c>
        case 1:
          MS5607.D[1] = MS5607_ReadADC(&hi2c2);
 80032d8:	484d      	ldr	r0, [pc, #308]	; (8003410 <main+0x870>)
 80032da:	f7fe ff48 	bl	800216e <MS5607_ReadADC>
 80032de:	4602      	mov	r2, r0
 80032e0:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80032e4:	f103 031c 	add.w	r3, r3, #28
 80032e8:	615a      	str	r2, [r3, #20]
          MS5607_StartConversion(&hi2c2, true);
 80032ea:	2101      	movs	r1, #1
 80032ec:	4848      	ldr	r0, [pc, #288]	; (8003410 <main+0x870>)
 80032ee:	f7fe ff21 	bl	8002134 <MS5607_StartConversion>
          break;
 80032f2:	e023      	b.n	800333c <main+0x79c>
        case 2:
          MS5607.D[2] = MS5607_ReadADC(&hi2c2);
 80032f4:	4846      	ldr	r0, [pc, #280]	; (8003410 <main+0x870>)
 80032f6:	f7fe ff3a 	bl	800216e <MS5607_ReadADC>
 80032fa:	4602      	mov	r2, r0
 80032fc:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8003300:	f103 031c 	add.w	r3, r3, #28
 8003304:	619a      	str	r2, [r3, #24]
          MS5607_CalculatePressure(&MS5607, &(State.MSTemperature), &(State.MSPressure));
 8003306:	f507 532f 	add.w	r3, r7, #11200	; 0x2bc0
 800330a:	f103 0218 	add.w	r2, r3, #24
 800330e:	f507 532f 	add.w	r3, r7, #11200	; 0x2bc0
 8003312:	f103 011c 	add.w	r1, r3, #28
 8003316:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 800331a:	f103 031c 	add.w	r3, r3, #28
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe ff9e 	bl	8002260 <MS5607_CalculatePressure>
//          printf("Temperature: %.2f, Pressure: %.2f\n", (double) State.MSTemperature/100, (double) State.MSPressure/100);
          if (USESD & LOGENVIRO)
            SDFS_WriteEnvironmental(&State, &GPSFrame);
 8003324:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8003328:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800332c:	f507 532f 	add.w	r3, r7, #11200	; 0x2bc0
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fe70 	bl	8004018 <SDFS_WriteEnvironmental>
          break;
 8003338:	e000      	b.n	800333c <main+0x79c>
      }
    }
 800333a:	bf00      	nop

    if (GPSUART.ReadySentence[0] != 0)
 800333c:	4b35      	ldr	r3, [pc, #212]	; (8003414 <main+0x874>)
 800333e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003342:	2b00      	cmp	r3, #0
 8003344:	d04b      	beq.n	80033de <main+0x83e>
    {
      if ((strncmp((char*) GPSUART.ReadySentence, "$GNRMC", 5) == 0) ||
 8003346:	2205      	movs	r2, #5
 8003348:	4933      	ldr	r1, [pc, #204]	; (8003418 <main+0x878>)
 800334a:	4834      	ldr	r0, [pc, #208]	; (800341c <main+0x87c>)
 800334c:	f011 fba3 	bl	8014a96 <strncmp>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <main+0x7c6>
          (strncmp((char*) GPSUART.ReadySentence, "$GNGGA", 5) == 0))  // if header matches
 8003356:	2205      	movs	r2, #5
 8003358:	4931      	ldr	r1, [pc, #196]	; (8003420 <main+0x880>)
 800335a:	4830      	ldr	r0, [pc, #192]	; (800341c <main+0x87c>)
 800335c:	f011 fb9b 	bl	8014a96 <strncmp>
 8003360:	4603      	mov	r3, r0
      if ((strncmp((char*) GPSUART.ReadySentence, "$GNRMC", 5) == 0) ||
 8003362:	2b00      	cmp	r3, #0
 8003364:	d137      	bne.n	80033d6 <main+0x836>
      {
        if (strncmp((char*) GPSUART.ReadySentence, "$GNRMC", 5) == 0)  // if header matches
 8003366:	2205      	movs	r2, #5
 8003368:	492b      	ldr	r1, [pc, #172]	; (8003418 <main+0x878>)
 800336a:	482c      	ldr	r0, [pc, #176]	; (800341c <main+0x87c>)
 800336c:	f011 fb93 	bl	8014a96 <strncmp>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <main+0x7ea>
          strncpy(GPSFrame.RMCSentence, (char*) GPSUART.ReadySentence, 90);
 8003376:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 800337a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800337e:	225a      	movs	r2, #90	; 0x5a
 8003380:	4926      	ldr	r1, [pc, #152]	; (800341c <main+0x87c>)
 8003382:	4618      	mov	r0, r3
 8003384:	f011 fb99 	bl	8014aba <strncpy>
 8003388:	e011      	b.n	80033ae <main+0x80e>
        else if (strncmp((char*) GPSUART.ReadySentence, "$GNGGA", 5) == 0)  // if header matches
 800338a:	2205      	movs	r2, #5
 800338c:	4924      	ldr	r1, [pc, #144]	; (8003420 <main+0x880>)
 800338e:	4823      	ldr	r0, [pc, #140]	; (800341c <main+0x87c>)
 8003390:	f011 fb81 	bl	8014a96 <strncmp>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <main+0x80e>
          strncpy(GPSFrame.GGASentence, (char*) GPSUART.ReadySentence, 90);
 800339a:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 800339e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80033a2:	335a      	adds	r3, #90	; 0x5a
 80033a4:	225a      	movs	r2, #90	; 0x5a
 80033a6:	491d      	ldr	r1, [pc, #116]	; (800341c <main+0x87c>)
 80033a8:	4618      	mov	r0, r3
 80033aa:	f011 fb86 	bl	8014aba <strncpy>
        if (!ProcessGPSFrame(&GPSFrame))
 80033ae:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80033b2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd ff90 	bl	80012dc <ProcessGPSFrame>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <main+0x836>
        {
//          printf("Time: %ld   Date: %ld   Lat: %f   Long: %f \n", GPSFrame.Time, GPSFrame.Date, GPSFrame.Latitude, GPSFrame.Longitude);
//          printf("GPS Time: %ld\n", GPSFrame.Time);
          if (USESD & LOGCOORDS)
            SDFS_WriteCoords(&State, &GPSFrame);
 80033c2:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 80033c6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80033ca:	f507 532f 	add.w	r3, r7, #11200	; 0x2bc0
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fee7 	bl	80041a4 <SDFS_WriteCoords>
        }
      }
      GPSUART.ReadySentence[0] = 0; // flag that we've processed this sentence.
 80033d6:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <main+0x874>)
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    }


    if (I2C1_Command_Buffer[0] != 0)
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <main+0x884>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f43f ad1d 	beq.w	8002e22 <main+0x282>
      ProcessI2CCommand(I2C1_Command_Buffer, &State);
 80033e8:	f507 532f 	add.w	r3, r7, #11200	; 0x2bc0
 80033ec:	4619      	mov	r1, r3
 80033ee:	480d      	ldr	r0, [pc, #52]	; (8003424 <main+0x884>)
 80033f0:	f7fe fe51 	bl	8002096 <ProcessI2CCommand>
    if (DoUserUpdate)
 80033f4:	e515      	b.n	8002e22 <main+0x282>
 80033f6:	bf00      	nop
 80033f8:	20001120 	.word	0x20001120
 80033fc:	20000377 	.word	0x20000377
 8003400:	20000376 	.word	0x20000376
 8003404:	20000375 	.word	0x20000375
 8003408:	20000374 	.word	0x20000374
 800340c:	2000037e 	.word	0x2000037e
 8003410:	20000ac0 	.word	0x20000ac0
 8003414:	20000390 	.word	0x20000390
 8003418:	080199b4 	.word	0x080199b4
 800341c:	2000048c 	.word	0x2000048c
 8003420:	080199bc 	.word	0x080199bc
 8003424:	20000594 	.word	0x20000594

08003428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b094      	sub	sp, #80	; 0x50
 800342c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800342e:	f107 0320 	add.w	r3, r7, #32
 8003432:	2230      	movs	r2, #48	; 0x30
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f010 fbb6 	bl	8013ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <SystemClock_Config+0xcc>)
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <SystemClock_Config+0xcc>)
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345a:	6413      	str	r3, [r2, #64]	; 0x40
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <SystemClock_Config+0xcc>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003468:	2300      	movs	r3, #0
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <SystemClock_Config+0xd0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <SystemClock_Config+0xd0>)
 8003472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <SystemClock_Config+0xd0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003484:	2301      	movs	r3, #1
 8003486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800348e:	2302      	movs	r3, #2
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003492:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003498:	2304      	movs	r3, #4
 800349a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800349c:	2390      	movs	r3, #144	; 0x90
 800349e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034a0:	2302      	movs	r3, #2
 80034a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80034a4:	2306      	movs	r3, #6
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a8:	f107 0320 	add.w	r3, r7, #32
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 ffe3 	bl	8008478 <HAL_RCC_OscConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034b8:	f000 fc3e 	bl	8003d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034bc:	230f      	movs	r3, #15
 80034be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034c0:	2302      	movs	r3, #2
 80034c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80034d4:	f107 030c 	add.w	r3, r7, #12
 80034d8:	2104      	movs	r1, #4
 80034da:	4618      	mov	r0, r3
 80034dc:	f005 fa44 	bl	8008968 <HAL_RCC_ClockConfig>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80034e6:	f000 fc27 	bl	8003d38 <Error_Handler>
  }
}
 80034ea:	bf00      	nop
 80034ec:	3750      	adds	r7, #80	; 0x50
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40007000 	.word	0x40007000

080034fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003502:	463b      	mov	r3, r7
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800350e:	4b21      	ldr	r3, [pc, #132]	; (8003594 <MX_ADC1_Init+0x98>)
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <MX_ADC1_Init+0x9c>)
 8003512:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <MX_ADC1_Init+0x98>)
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <MX_ADC1_Init+0x98>)
 800351c:	2200      	movs	r2, #0
 800351e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003520:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <MX_ADC1_Init+0x98>)
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <MX_ADC1_Init+0x98>)
 8003528:	2200      	movs	r2, #0
 800352a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <MX_ADC1_Init+0x98>)
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003534:	4b17      	ldr	r3, [pc, #92]	; (8003594 <MX_ADC1_Init+0x98>)
 8003536:	2200      	movs	r2, #0
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800353a:	4b16      	ldr	r3, [pc, #88]	; (8003594 <MX_ADC1_Init+0x98>)
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <MX_ADC1_Init+0xa0>)
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003540:	4b14      	ldr	r3, [pc, #80]	; (8003594 <MX_ADC1_Init+0x98>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <MX_ADC1_Init+0x98>)
 8003548:	2201      	movs	r2, #1
 800354a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <MX_ADC1_Init+0x98>)
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <MX_ADC1_Init+0x98>)
 8003556:	2201      	movs	r2, #1
 8003558:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800355a:	480e      	ldr	r0, [pc, #56]	; (8003594 <MX_ADC1_Init+0x98>)
 800355c:	f001 fc18 	bl	8004d90 <HAL_ADC_Init>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003566:	f000 fbe7 	bl	8003d38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800356a:	2304      	movs	r3, #4
 800356c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800356e:	2301      	movs	r3, #1
 8003570:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003576:	463b      	mov	r3, r7
 8003578:	4619      	mov	r1, r3
 800357a:	4806      	ldr	r0, [pc, #24]	; (8003594 <MX_ADC1_Init+0x98>)
 800357c:	f001 fc4c 	bl	8004e18 <HAL_ADC_ConfigChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003586:	f000 fbd7 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000b14 	.word	0x20000b14
 8003598:	40012000 	.word	0x40012000
 800359c:	0f000001 	.word	0x0f000001

080035a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <MX_I2C1_Init+0x74>)
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <MX_I2C1_Init+0x78>)
 80035a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80035aa:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <MX_I2C1_Init+0x74>)
 80035ac:	4a1b      	ldr	r2, [pc, #108]	; (800361c <MX_I2C1_Init+0x7c>)
 80035ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035b0:	4b18      	ldr	r3, [pc, #96]	; (8003614 <MX_I2C1_Init+0x74>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 70;
 80035b6:	4b17      	ldr	r3, [pc, #92]	; (8003614 <MX_I2C1_Init+0x74>)
 80035b8:	2246      	movs	r2, #70	; 0x46
 80035ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <MX_I2C1_Init+0x74>)
 80035be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <MX_I2C1_Init+0x74>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <MX_I2C1_Init+0x74>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035d0:	4b10      	ldr	r3, [pc, #64]	; (8003614 <MX_I2C1_Init+0x74>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <MX_I2C1_Init+0x74>)
 80035d8:	2200      	movs	r2, #0
 80035da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035dc:	480d      	ldr	r0, [pc, #52]	; (8003614 <MX_I2C1_Init+0x74>)
 80035de:	f002 fd47 	bl	8006070 <HAL_I2C_Init>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035e8:	f000 fba6 	bl	8003d38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035ec:	2100      	movs	r1, #0
 80035ee:	4809      	ldr	r0, [pc, #36]	; (8003614 <MX_I2C1_Init+0x74>)
 80035f0:	f003 fd43 	bl	800707a <HAL_I2CEx_ConfigAnalogFilter>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80035fa:	f000 fb9d 	bl	8003d38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80035fe:	2100      	movs	r1, #0
 8003600:	4804      	ldr	r0, [pc, #16]	; (8003614 <MX_I2C1_Init+0x74>)
 8003602:	f003 fd76 	bl	80070f2 <HAL_I2CEx_ConfigDigitalFilter>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800360c:	f000 fb94 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000a6c 	.word	0x20000a6c
 8003618:	40005400 	.word	0x40005400
 800361c:	00061a80 	.word	0x00061a80

08003620 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <MX_I2C2_Init+0x74>)
 8003626:	4a1c      	ldr	r2, [pc, #112]	; (8003698 <MX_I2C2_Init+0x78>)
 8003628:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <MX_I2C2_Init+0x74>)
 800362c:	4a1b      	ldr	r2, [pc, #108]	; (800369c <MX_I2C2_Init+0x7c>)
 800362e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <MX_I2C2_Init+0x74>)
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <MX_I2C2_Init+0x74>)
 8003638:	2200      	movs	r2, #0
 800363a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800363c:	4b15      	ldr	r3, [pc, #84]	; (8003694 <MX_I2C2_Init+0x74>)
 800363e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003642:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <MX_I2C2_Init+0x74>)
 8003646:	2200      	movs	r2, #0
 8003648:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <MX_I2C2_Init+0x74>)
 800364c:	2200      	movs	r2, #0
 800364e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <MX_I2C2_Init+0x74>)
 8003652:	2200      	movs	r2, #0
 8003654:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003656:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <MX_I2C2_Init+0x74>)
 8003658:	2200      	movs	r2, #0
 800365a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800365c:	480d      	ldr	r0, [pc, #52]	; (8003694 <MX_I2C2_Init+0x74>)
 800365e:	f002 fd07 	bl	8006070 <HAL_I2C_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003668:	f000 fb66 	bl	8003d38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800366c:	2100      	movs	r1, #0
 800366e:	4809      	ldr	r0, [pc, #36]	; (8003694 <MX_I2C2_Init+0x74>)
 8003670:	f003 fd03 	bl	800707a <HAL_I2CEx_ConfigAnalogFilter>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800367a:	f000 fb5d 	bl	8003d38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800367e:	2100      	movs	r1, #0
 8003680:	4804      	ldr	r0, [pc, #16]	; (8003694 <MX_I2C2_Init+0x74>)
 8003682:	f003 fd36 	bl	80070f2 <HAL_I2CEx_ConfigDigitalFilter>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800368c:	f000 fb54 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003690:	bf00      	nop
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000ac0 	.word	0x20000ac0
 8003698:	40005800 	.word	0x40005800
 800369c:	00061a80 	.word	0x00061a80

080036a0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <MX_SDIO_SD_Init+0x38>)
 80036a6:	4a0d      	ldr	r2, [pc, #52]	; (80036dc <MX_SDIO_SD_Init+0x3c>)
 80036a8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <MX_SDIO_SD_Init+0x38>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <MX_SDIO_SD_Init+0x38>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <MX_SDIO_SD_Init+0x38>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <MX_SDIO_SD_Init+0x38>)
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <MX_SDIO_SD_Init+0x38>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <MX_SDIO_SD_Init+0x38>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	20001044 	.word	0x20001044
 80036dc:	40012c00 	.word	0x40012c00

080036e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <MX_SPI1_Init+0x5c>)
 80036e6:	4a16      	ldr	r2, [pc, #88]	; (8003740 <MX_SPI1_Init+0x60>)
 80036e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <MX_SPI1_Init+0x5c>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <MX_SPI1_Init+0x5c>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036f6:	4b11      	ldr	r3, [pc, #68]	; (800373c <MX_SPI1_Init+0x5c>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <MX_SPI1_Init+0x5c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <MX_SPI1_Init+0x5c>)
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <MX_SPI1_Init+0x5c>)
 800370a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800370e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <MX_SPI1_Init+0x5c>)
 8003712:	2200      	movs	r2, #0
 8003714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <MX_SPI1_Init+0x5c>)
 8003718:	2200      	movs	r2, #0
 800371a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <MX_SPI1_Init+0x5c>)
 800371e:	2200      	movs	r2, #0
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <MX_SPI1_Init+0x5c>)
 8003724:	220a      	movs	r2, #10
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003728:	4804      	ldr	r0, [pc, #16]	; (800373c <MX_SPI1_Init+0x5c>)
 800372a:	f006 fe48 	bl	800a3be <HAL_SPI_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8003734:	f000 fb00 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003738:	bf00      	nop
 800373a:	bd80      	pop	{r7, pc}
 800373c:	200010c8 	.word	0x200010c8
 8003740:	40013000 	.word	0x40013000

08003744 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <MX_TIM13_Init+0x40>)
 800374a:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <MX_TIM13_Init+0x44>)
 800374c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 3000;
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <MX_TIM13_Init+0x40>)
 8003750:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003754:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <MX_TIM13_Init+0x40>)
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 6;
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <MX_TIM13_Init+0x40>)
 800375e:	2206      	movs	r2, #6
 8003760:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <MX_TIM13_Init+0x40>)
 8003764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003768:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <MX_TIM13_Init+0x40>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003770:	4804      	ldr	r0, [pc, #16]	; (8003784 <MX_TIM13_Init+0x40>)
 8003772:	f006 fead 	bl	800a4d0 <HAL_TIM_Base_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800377c:	f000 fadc 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000b5c 	.word	0x20000b5c
 8003788:	40001c00 	.word	0x40001c00

0800378c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <MX_TIM14_Init+0x40>)
 8003792:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <MX_TIM14_Init+0x44>)
 8003794:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 720;
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <MX_TIM14_Init+0x40>)
 8003798:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800379c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <MX_TIM14_Init+0x40>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <MX_TIM14_Init+0x40>)
 80037a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037aa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ac:	4b07      	ldr	r3, [pc, #28]	; (80037cc <MX_TIM14_Init+0x40>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <MX_TIM14_Init+0x40>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80037b8:	4804      	ldr	r0, [pc, #16]	; (80037cc <MX_TIM14_Init+0x40>)
 80037ba:	f006 fe89 	bl	800a4d0 <HAL_TIM_Base_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80037c4:	f000 fab8 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	2000116c 	.word	0x2000116c
 80037d0:	40002000 	.word	0x40002000

080037d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <MX_USART1_UART_Init+0x4c>)
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <MX_USART1_UART_Init+0x50>)
 80037dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <MX_USART1_UART_Init+0x4c>)
 80037e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <MX_USART1_UART_Init+0x4c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <MX_USART1_UART_Init+0x4c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <MX_USART1_UART_Init+0x4c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <MX_USART1_UART_Init+0x4c>)
 80037fa:	220c      	movs	r2, #12
 80037fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <MX_USART1_UART_Init+0x4c>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <MX_USART1_UART_Init+0x4c>)
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800380a:	4805      	ldr	r0, [pc, #20]	; (8003820 <MX_USART1_UART_Init+0x4c>)
 800380c:	f007 f904 	bl	800aa18 <HAL_UART_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003816:	f000 fa8f 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000ba4 	.word	0x20000ba4
 8003824:	40011000 	.word	0x40011000

08003828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <MX_USART2_UART_Init+0x4c>)
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <MX_USART2_UART_Init+0x50>)
 8003830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <MX_USART2_UART_Init+0x4c>)
 8003834:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <MX_USART2_UART_Init+0x4c>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <MX_USART2_UART_Init+0x4c>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <MX_USART2_UART_Init+0x4c>)
 8003848:	2200      	movs	r2, #0
 800384a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <MX_USART2_UART_Init+0x4c>)
 800384e:	220c      	movs	r2, #12
 8003850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <MX_USART2_UART_Init+0x4c>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <MX_USART2_UART_Init+0x4c>)
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800385e:	4805      	ldr	r0, [pc, #20]	; (8003874 <MX_USART2_UART_Init+0x4c>)
 8003860:	f007 f8da 	bl	800aa18 <HAL_UART_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800386a:	f000 fa65 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20001128 	.word	0x20001128
 8003878:	40004400 	.word	0x40004400

0800387c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <MX_DMA_Init+0x4c>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <MX_DMA_Init+0x4c>)
 800388c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <MX_DMA_Init+0x4c>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	2100      	movs	r1, #0
 80038a2:	203b      	movs	r0, #59	; 0x3b
 80038a4:	f001 fdc1 	bl	800542a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80038a8:	203b      	movs	r0, #59	; 0x3b
 80038aa:	f001 fdda 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2100      	movs	r1, #0
 80038b2:	2045      	movs	r0, #69	; 0x45
 80038b4:	f001 fdb9 	bl	800542a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80038b8:	2045      	movs	r0, #69	; 0x45
 80038ba:	f001 fdd2 	bl	8005462 <HAL_NVIC_EnableIRQ>

}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800

080038cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	; 0x30
 80038d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d2:	f107 031c 	add.w	r3, r7, #28
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	4b45      	ldr	r3, [pc, #276]	; (80039fc <MX_GPIO_Init+0x130>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4a44      	ldr	r2, [pc, #272]	; (80039fc <MX_GPIO_Init+0x130>)
 80038ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
 80038f2:	4b42      	ldr	r3, [pc, #264]	; (80039fc <MX_GPIO_Init+0x130>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <MX_GPIO_Init+0x130>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a3d      	ldr	r2, [pc, #244]	; (80039fc <MX_GPIO_Init+0x130>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <MX_GPIO_Init+0x130>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <MX_GPIO_Init+0x130>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a36      	ldr	r2, [pc, #216]	; (80039fc <MX_GPIO_Init+0x130>)
 8003924:	f043 0310 	orr.w	r3, r3, #16
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <MX_GPIO_Init+0x130>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b30      	ldr	r3, [pc, #192]	; (80039fc <MX_GPIO_Init+0x130>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <MX_GPIO_Init+0x130>)
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <MX_GPIO_Init+0x130>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <MX_GPIO_Init+0x130>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a28      	ldr	r2, [pc, #160]	; (80039fc <MX_GPIO_Init+0x130>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <MX_GPIO_Init+0x130>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <MX_GPIO_Init+0x130>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a21      	ldr	r2, [pc, #132]	; (80039fc <MX_GPIO_Init+0x130>)
 8003978:	f043 0308 	orr.w	r3, r3, #8
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b1f      	ldr	r3, [pc, #124]	; (80039fc <MX_GPIO_Init+0x130>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800398a:	2200      	movs	r2, #0
 800398c:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8003990:	481b      	ldr	r0, [pc, #108]	; (8003a00 <MX_GPIO_Init+0x134>)
 8003992:	f002 fb53 	bl	800603c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8003996:	2200      	movs	r2, #0
 8003998:	2110      	movs	r1, #16
 800399a:	481a      	ldr	r0, [pc, #104]	; (8003a04 <MX_GPIO_Init+0x138>)
 800399c:	f002 fb4e 	bl	800603c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80039a0:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80039a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a6:	2301      	movs	r3, #1
 80039a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ae:	2300      	movs	r3, #0
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039b2:	f107 031c 	add.w	r3, r7, #28
 80039b6:	4619      	mov	r1, r3
 80039b8:	4811      	ldr	r0, [pc, #68]	; (8003a00 <MX_GPIO_Init+0x134>)
 80039ba:	f002 f97b 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039be:	2308      	movs	r3, #8
 80039c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039c2:	2300      	movs	r3, #0
 80039c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039c6:	2301      	movs	r3, #1
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039ca:	f107 031c 	add.w	r3, r7, #28
 80039ce:	4619      	mov	r1, r3
 80039d0:	480c      	ldr	r0, [pc, #48]	; (8003a04 <MX_GPIO_Init+0x138>)
 80039d2:	f002 f96f 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039d6:	2310      	movs	r3, #16
 80039d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039da:	2301      	movs	r3, #1
 80039dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	4805      	ldr	r0, [pc, #20]	; (8003a04 <MX_GPIO_Init+0x138>)
 80039ee:	f002 f961 	bl	8005cb4 <HAL_GPIO_Init>

}
 80039f2:	bf00      	nop
 80039f4:	3730      	adds	r7, #48	; 0x30
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40020c00 	.word	0x40020c00

08003a08 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  int i, res;
  for (i=0;i<2050; i++)
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	e00d      	b.n	8003a36 <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	4619      	mov	r1, r3
 8003a20:	68b8      	ldr	r0, [r7, #8]
 8003a22:	f00f fc2d 	bl	8013280 <CDC_Transmit_FS>
 8003a26:	4603      	mov	r3, r0
 8003a28:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <_write+0x3a>
  for (i=0;i<2050; i++)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	3301      	adds	r3, #1
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f640 0201 	movw	r2, #2049	; 0x801
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	ddec      	ble.n	8003a1a <_write+0x12>
 8003a40:	e000      	b.n	8003a44 <_write+0x3c>
      break;
 8003a42:	bf00      	nop
  }
  for (int i = 0; i < len; i++)
 8003a44:	2300      	movs	r3, #0
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e009      	b.n	8003a5e <_write+0x56>
    ITM_SendChar((*ptr++));              // debugger out
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	60ba      	str	r2, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff f87c 	bl	8002b50 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	dbf1      	blt.n	8003a4a <_write+0x42>
  return len;
 8003a66:	687b      	ldr	r3, [r7, #4]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if (htim->Instance == htim13.Instance)  // deal with the software PWM
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b6d      	ldr	r3, [pc, #436]	; (8003c34 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d13a      	bne.n	8003afa <HAL_TIM_PeriodElapsedCallback+0x8a>
  {
    HeaterTick = (HeaterTick + 1) % 100;
 8003a84:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	4a6b      	ldr	r2, [pc, #428]	; (8003c3c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8003a92:	1151      	asrs	r1, r2, #5
 8003a94:	17da      	asrs	r2, r3, #31
 8003a96:	1a8a      	subs	r2, r1, r2
 8003a98:	2164      	movs	r1, #100	; 0x64
 8003a9a:	fb01 f202 	mul.w	r2, r1, r2
 8003a9e:	1a9a      	subs	r2, r3, r2
 8003aa0:	b292      	uxth	r2, r2
 8003aa2:	4b65      	ldr	r3, [pc, #404]	; (8003c38 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003aa4:	801a      	strh	r2, [r3, #0]
    for (i=0;i<6;i++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	e023      	b.n	8003af4 <HAL_TIM_PeriodElapsedCallback+0x84>
    {
      if ((HeaterTick > Heaters.HeaterDwell[i])
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	4a64      	ldr	r2, [pc, #400]	; (8003c40 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003ab0:	5cd3      	ldrb	r3, [r2, r3]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d211      	bcs.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x74>
        && (HeaterTick < (100 - Heaters.HeaterDwell[i])))
 8003ac0:	4b5d      	ldr	r3, [pc, #372]	; (8003c38 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	4a5d      	ldr	r2, [pc, #372]	; (8003c40 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003acc:	5cd3      	ldrb	r3, [r2, r3]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003ad4:	4299      	cmp	r1, r3
 8003ad6:	da05      	bge.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x74>
        SetHeater(i, true);
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe ffc3 	bl	8002a68 <SetHeater>
 8003ae2:	e004      	b.n	8003aee <HAL_TIM_PeriodElapsedCallback+0x7e>
      else
        SetHeater(i, false);
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe ffbd 	bl	8002a68 <SetHeater>
    for (i=0;i<6;i++)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	3301      	adds	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d9d8      	bls.n	8003aac <HAL_TIM_PeriodElapsedCallback+0x3c>
    }
  }

  if (htim->Instance == htim14.Instance)  // this is our 10 ms processing tick
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	f040 8092 	bne.w	8003c2c <HAL_TIM_PeriodElapsedCallback+0x1bc>
  {
    ClockTick = (ClockTick + 1) % 100;
 8003b08:	4b4f      	ldr	r3, [pc, #316]	; (8003c48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	4a4a      	ldr	r2, [pc, #296]	; (8003c3c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003b12:	fb82 1203 	smull	r1, r2, r2, r3
 8003b16:	1151      	asrs	r1, r2, #5
 8003b18:	17da      	asrs	r2, r3, #31
 8003b1a:	1a8a      	subs	r2, r1, r2
 8003b1c:	2164      	movs	r1, #100	; 0x64
 8003b1e:	fb01 f202 	mul.w	r2, r1, r2
 8003b22:	1a9a      	subs	r2, r3, r2
 8003b24:	b292      	uxth	r2, r2
 8003b26:	4b48      	ldr	r3, [pc, #288]	; (8003c48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003b28:	801a      	strh	r2, [r3, #0]
    // this should be after the ClockTick increment
    if (ClockTick == 0)
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <HAL_TIM_PeriodElapsedCallback+0xf2>
    {
      ElapsedSeconds++;
 8003b34:	4b45      	ldr	r3, [pc, #276]	; (8003c4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	1c54      	adds	r4, r2, #1
 8003b3c:	f143 0500 	adc.w	r5, r3, #0
 8003b40:	4b42      	ldr	r3, [pc, #264]	; (8003c4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003b42:	e9c3 4500 	strd	r4, r5, [r3]
      if (ElapsedSeconds%10 == 0)
 8003b46:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b4c:	f04f 020a 	mov.w	r2, #10
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	f7fd f8a8 	bl	8000ca8 <__aeabi_uldivmod>
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	d102      	bne.n	8003b62 <HAL_TIM_PeriodElapsedCallback+0xf2>
        DoUserUpdate = true;
 8003b5c:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
    }

    if ((ElapsedSeconds > 20) && ((ElapsedSeconds%5)==0) && (ClockTick == 0))
 8003b62:	4b3a      	ldr	r3, [pc, #232]	; (8003c4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf08      	it	eq
 8003b6c:	2a15      	cmpeq	r2, #21
 8003b6e:	d312      	bcc.n	8003b96 <HAL_TIM_PeriodElapsedCallback+0x126>
 8003b70:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b76:	f04f 0205 	mov.w	r2, #5
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	f7fd f893 	bl	8000ca8 <__aeabi_uldivmod>
 8003b82:	4313      	orrs	r3, r2
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_PeriodElapsedCallback+0x126>
 8003b86:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <HAL_TIM_PeriodElapsedCallback+0x126>
      DoGetSpectra = true;
 8003b90:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]

    DoGPSTick = true;
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	701a      	strb	r2, [r3, #0]
    DoHR4000 = true;
 8003b9c:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]

    Ticks_TMP117++;
 8003ba2:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003bae:	701a      	strb	r2, [r3, #0]
    Ticks_AT30TS74++;
 8003bb0:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003bbc:	701a      	strb	r2, [r3, #0]

    if (Ticks_TMP117 >= 13)
 8003bbe:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	d905      	bls.n	8003bd4 <HAL_TIM_PeriodElapsedCallback+0x164>
    {
      Ticks_TMP117 = 0;
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
      DoSampleTMP117 = true;
 8003bce:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
    }

    if (Ticks_AT30TS74 >=100)
 8003bd4:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b63      	cmp	r3, #99	; 0x63
 8003bdc:	d905      	bls.n	8003bea <HAL_TIM_PeriodElapsedCallback+0x17a>
    {
      Ticks_AT30TS74 = 0;
 8003bde:	4b21      	ldr	r3, [pc, #132]	; (8003c64 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]
      DoSampleAT30TS74 = true;
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
    }

    if (ClockTick == 20)
 8003bea:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b14      	cmp	r3, #20
 8003bf2:	d105      	bne.n	8003c00 <HAL_TIM_PeriodElapsedCallback+0x190>
    {
      DoPressureSensor = true;
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	701a      	strb	r2, [r3, #0]
      PressureSensorState = 0;
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
    }
    if (ClockTick == 22)
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b16      	cmp	r3, #22
 8003c08:	d105      	bne.n	8003c16 <HAL_TIM_PeriodElapsedCallback+0x1a6>
    {
      DoPressureSensor = true;
 8003c0a:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	701a      	strb	r2, [r3, #0]
      PressureSensorState = 1;
 8003c10:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
    }
    if (ClockTick == 24)
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b18      	cmp	r3, #24
 8003c1e:	d105      	bne.n	8003c2c <HAL_TIM_PeriodElapsedCallback+0x1bc>
    {
      DoPressureSensor = true;
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
      PressureSensorState = 2;
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003c28:	2202      	movs	r2, #2
 8003c2a:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bdb0      	pop	{r4, r5, r7, pc}
 8003c34:	20000b5c 	.word	0x20000b5c
 8003c38:	20000382 	.word	0x20000382
 8003c3c:	51eb851f 	.word	0x51eb851f
 8003c40:	20001120 	.word	0x20001120
 8003c44:	2000116c 	.word	0x2000116c
 8003c48:	20000380 	.word	0x20000380
 8003c4c:	20000388 	.word	0x20000388
 8003c50:	2000037b 	.word	0x2000037b
 8003c54:	20000377 	.word	0x20000377
 8003c58:	20000375 	.word	0x20000375
 8003c5c:	20000376 	.word	0x20000376
 8003c60:	2000037c 	.word	0x2000037c
 8003c64:	2000037d 	.word	0x2000037d
 8003c68:	20000379 	.word	0x20000379
 8003c6c:	2000037a 	.word	0x2000037a
 8003c70:	20000374 	.word	0x20000374
 8003c74:	2000037e 	.word	0x2000037e

08003c78 <HAL_UART_RxCpltCallback>:
  }
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) // GPS
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <HAL_UART_RxCpltCallback+0xa0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d139      	bne.n	8003cfe <HAL_UART_RxCpltCallback+0x86>
  {
    if ((GPSUART.ByteBuffer != 0) && (GPSUART.ByteBuffer != '\r')) // ignore carriage returns
 8003c8a:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d030      	beq.n	8003cf4 <HAL_UART_RxCpltCallback+0x7c>
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b0d      	cmp	r3, #13
 8003c98:	d02c      	beq.n	8003cf4 <HAL_UART_RxCpltCallback+0x7c>
    {
      if (GPSUART.ByteBuffer == '\n')
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	2b0a      	cmp	r3, #10
 8003ca0:	d115      	bne.n	8003cce <HAL_UART_RxCpltCallback+0x56>
      {
        GPSUART.ReceiveBuffer[GPSUART.Index++] = 0;
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	b2d1      	uxtb	r1, r2
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003cac:	7011      	strb	r1, [r2, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003cb2:	4413      	add	r3, r2
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	709a      	strb	r2, [r3, #2]
        memcpy(GPSUART.ReadySentence, GPSUART.ReceiveBuffer, GPSUART.Index);
 8003cb8:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4918      	ldr	r1, [pc, #96]	; (8003d20 <HAL_UART_RxCpltCallback+0xa8>)
 8003cc0:	4818      	ldr	r0, [pc, #96]	; (8003d24 <HAL_UART_RxCpltCallback+0xac>)
 8003cc2:	f00f ff63 	bl	8013b8c <memcpy>
        GPSUART.Index = 0;
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e012      	b.n	8003cf4 <HAL_UART_RxCpltCallback+0x7c>
      }
      else
      {
        GPSUART.ReceiveBuffer[GPSUART.Index++] = GPSUART.ByteBuffer;
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	b2d1      	uxtb	r1, r2
 8003cd6:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003cd8:	7011      	strb	r1, [r2, #0]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003cde:	785a      	ldrb	r2, [r3, #1]
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003ce2:	440b      	add	r3, r1
 8003ce4:	709a      	strb	r2, [r3, #2]
        if (GPSUART.Index >= 90) // we have junk in our buffer
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b59      	cmp	r3, #89	; 0x59
 8003cec:	d902      	bls.n	8003cf4 <HAL_UART_RxCpltCallback+0x7c>
          GPSUART.Index = 0;
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_UART_RxCpltCallback+0xa4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
      }
    }
    HAL_UART_Receive_IT(&huart2, &GPSUART.ByteBuffer,1);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	490c      	ldr	r1, [pc, #48]	; (8003d28 <HAL_UART_RxCpltCallback+0xb0>)
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <HAL_UART_RxCpltCallback+0xb4>)
 8003cfa:	f007 f80e 	bl	800ad1a <HAL_UART_Receive_IT>
  }
  if (huart->Instance == USART1) // HR4000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <HAL_UART_RxCpltCallback+0xb8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d102      	bne.n	8003d0e <HAL_UART_RxCpltCallback+0x96>
  {
    HRDataReady = true;
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_UART_RxCpltCallback+0xbc>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
  }


}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40004400 	.word	0x40004400
 8003d1c:	20000390 	.word	0x20000390
 8003d20:	20000392 	.word	0x20000392
 8003d24:	2000048c 	.word	0x2000048c
 8003d28:	20000391 	.word	0x20000391
 8003d2c:	20001128 	.word	0x20001128
 8003d30:	40011000 	.word	0x40011000
 8003d34:	20000378 	.word	0x20000378

08003d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d3c:	b672      	cpsid	i
}
 8003d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d40:	e7fe      	b.n	8003d40 <Error_Handler+0x8>
	...

08003d44 <SDFS_FindNewDirectory>:
#include "defs.h"

FATFS FS;

void SDFS_FindNewDirectory(struct sState *state)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint16_t num;
  for (num=0; num<10000; num++)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	81fb      	strh	r3, [r7, #14]
 8003d50:	e012      	b.n	8003d78 <SDFS_FindNewDirectory+0x34>
  {
    snprintf(state->RootPath, 50, "%05i", num);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8003d58:	89fb      	ldrh	r3, [r7, #14]
 8003d5a:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <SDFS_FindNewDirectory+0x4c>)
 8003d5c:	2132      	movs	r1, #50	; 0x32
 8003d5e:	f010 fe39 	bl	80149d4 <sniprintf>
    if (!(SDFS_MakeDir(state->RootPath)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	332c      	adds	r3, #44	; 0x2c
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f814 	bl	8003d94 <SDFS_MakeDir>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <SDFS_FindNewDirectory+0x40>
  for (num=0; num<10000; num++)
 8003d72:	89fb      	ldrh	r3, [r7, #14]
 8003d74:	3301      	adds	r3, #1
 8003d76:	81fb      	strh	r3, [r7, #14]
 8003d78:	89fb      	ldrh	r3, [r7, #14]
 8003d7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d9e7      	bls.n	8003d52 <SDFS_FindNewDirectory+0xe>
      break;
  }
}
 8003d82:	e000      	b.n	8003d86 <SDFS_FindNewDirectory+0x42>
      break;
 8003d84:	bf00      	nop
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	080199c4 	.word	0x080199c4

08003d94 <SDFS_MakeDir>:

uint8_t SDFS_MakeDir(char path[])
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  FRESULT fres;

  printf("Attempting to create path %s", path);
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	480f      	ldr	r0, [pc, #60]	; (8003ddc <SDFS_MakeDir+0x48>)
 8003da0:	f010 fd84 	bl	80148ac <iprintf>
  fres = f_mkdir(path);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f00e ff83 	bl	8012cb0 <f_mkdir>
 8003daa:	4603      	mov	r3, r0
 8003dac:	73fb      	strb	r3, [r7, #15]

  if (fres == FR_OK)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <SDFS_MakeDir+0x2a>
  {
    printf(" - success.\n");
 8003db4:	480a      	ldr	r0, [pc, #40]	; (8003de0 <SDFS_MakeDir+0x4c>)
 8003db6:	f010 fdff 	bl	80149b8 <puts>
    return 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e00a      	b.n	8003dd4 <SDFS_MakeDir+0x40>
  }
  if (fres == FR_EXIST)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d103      	bne.n	8003dcc <SDFS_MakeDir+0x38>
    printf(" - already exists.\n");
 8003dc4:	4807      	ldr	r0, [pc, #28]	; (8003de4 <SDFS_MakeDir+0x50>)
 8003dc6:	f010 fdf7 	bl	80149b8 <puts>
 8003dca:	e002      	b.n	8003dd2 <SDFS_MakeDir+0x3e>
  else
    printf(" - error.\n");
 8003dcc:	4806      	ldr	r0, [pc, #24]	; (8003de8 <SDFS_MakeDir+0x54>)
 8003dce:	f010 fdf3 	bl	80149b8 <puts>
  return 1;
 8003dd2:	2301      	movs	r3, #1
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	080199cc 	.word	0x080199cc
 8003de0:	080199ec 	.word	0x080199ec
 8003de4:	080199f8 	.word	0x080199f8
 8003de8:	08019a0c 	.word	0x08019a0c

08003dec <SDFS_SetupFS>:

void SDFS_SetupFS(struct sState *state, struct sGPSFrame *gps)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  state->CreatedFiles = 0;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
  state->SubDirectory = 0;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4

  SDFS_FindNewDirectory(state);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ff9c 	bl	8003d44 <SDFS_FindNewDirectory>
//  snprintf(state->RootPath, 50, "20%02lu%02lu%02lu",
//        (gps->Date) % 100, (gps->Date/100) % 100, (gps->Date/10000));
  //  SDFS_MakeDir(state->RootPath);

  snprintf(state->SpectraPath, 100, "%s/%u",
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f103 0090 	add.w	r0, r3, #144	; 0x90
        state->RootPath, state->SubDirectory);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
  snprintf(state->SpectraPath, 100, "%s/%u",
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <SDFS_SetupFS+0x50>)
 8003e24:	2164      	movs	r1, #100	; 0x64
 8003e26:	f010 fdd5 	bl	80149d4 <sniprintf>

  SDFS_MakeDir(state->SpectraPath);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3390      	adds	r3, #144	; 0x90
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff ffb0 	bl	8003d94 <SDFS_MakeDir>
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	08019a18 	.word	0x08019a18

08003e40 <SDFS_IncrementDirectory>:

void SDFS_IncrementDirectory(struct sState *state)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	6078      	str	r0, [r7, #4]
  state->CreatedFiles = 0;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
  state->SubDirectory++;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8003e56:	3301      	adds	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4

  snprintf(state->SpectraPath, 100, "%s/%u",
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f103 0090 	add.w	r0, r3, #144	; 0x90
        state->RootPath, state->SubDirectory);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
  snprintf(state->SpectraPath, 100, "%s/%u",
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	4a06      	ldr	r2, [pc, #24]	; (8003e90 <SDFS_IncrementDirectory+0x50>)
 8003e78:	2164      	movs	r1, #100	; 0x64
 8003e7a:	f010 fdab 	bl	80149d4 <sniprintf>

  SDFS_MakeDir(state->SpectraPath);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3390      	adds	r3, #144	; 0x90
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff ff86 	bl	8003d94 <SDFS_MakeDir>
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	08019a18 	.word	0x08019a18

08003e94 <SDFS_Mount>:
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // power on SD card
  HAL_Delay(100);
}

uint8_t SDFS_Mount()
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
  FATFS *pfs;
  FRESULT fres;
  uint32_t fre_clust, fre_sect, tot_sect;

  pfs = &FS;
 8003e9a:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <SDFS_Mount+0xa4>)
 8003e9c:	60bb      	str	r3, [r7, #8]

  if (!BSP_PlatformIsDetected())
 8003e9e:	f00a f8a9 	bl	800dff4 <BSP_PlatformIsDetected>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <SDFS_Mount+0x1e>
  {
    printf("No card detected, aborting SD mount.\n");
 8003ea8:	4824      	ldr	r0, [pc, #144]	; (8003f3c <SDFS_Mount+0xa8>)
 8003eaa:	f010 fd85 	bl	80149b8 <puts>
    return 1;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e03d      	b.n	8003f2e <SDFS_Mount+0x9a>
  }
  printf("SD card Detected.\n");
 8003eb2:	4823      	ldr	r0, [pc, #140]	; (8003f40 <SDFS_Mount+0xac>)
 8003eb4:	f010 fd80 	bl	80149b8 <puts>

  if ((fres = f_mount(&FS, "0:", 1)) != FR_OK)  // mount fs
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4922      	ldr	r1, [pc, #136]	; (8003f44 <SDFS_Mount+0xb0>)
 8003ebc:	481e      	ldr	r0, [pc, #120]	; (8003f38 <SDFS_Mount+0xa4>)
 8003ebe:	f00e f813 	bl	8011ee8 <f_mount>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	75fb      	strb	r3, [r7, #23]
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <SDFS_Mount+0x42>
  {
    printf("Failed to mount the filesystem.\n");
 8003ecc:	481e      	ldr	r0, [pc, #120]	; (8003f48 <SDFS_Mount+0xb4>)
 8003ece:	f010 fd73 	bl	80149b8 <puts>
    return 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e02b      	b.n	8003f2e <SDFS_Mount+0x9a>
  }
  printf("Filesystem mounted successfully.\n");
 8003ed6:	481d      	ldr	r0, [pc, #116]	; (8003f4c <SDFS_Mount+0xb8>)
 8003ed8:	f010 fd6e 	bl	80149b8 <puts>

  fres = f_getfree("0:", &fre_clust, &pfs); // get free cluster count
 8003edc:	f107 0208 	add.w	r2, r7, #8
 8003ee0:	1d3b      	adds	r3, r7, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4817      	ldr	r0, [pc, #92]	; (8003f44 <SDFS_Mount+0xb0>)
 8003ee6:	f00e fe2e 	bl	8012b46 <f_getfree>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]
  if (fres)
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <SDFS_Mount+0x6a>
  {
    printf("Failed to read free space.\n");
 8003ef4:	4816      	ldr	r0, [pc, #88]	; (8003f50 <SDFS_Mount+0xbc>)
 8003ef6:	f010 fd5f 	bl	80149b8 <puts>
    return 0; // this technically shouldn't prevent us from using the fs, although it may indicate more inssues
 8003efa:	2300      	movs	r3, #0
 8003efc:	e017      	b.n	8003f2e <SDFS_Mount+0x9a>
  }
  tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	3b02      	subs	r3, #2
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	8952      	ldrh	r2, [r2, #10]
 8003f08:	fb02 f303 	mul.w	r3, r2, r3
 8003f0c:	613b      	str	r3, [r7, #16]
  fre_sect = fre_clust * pfs->csize;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	895b      	ldrh	r3, [r3, #10]
 8003f12:	461a      	mov	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	fb03 f302 	mul.w	r3, r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  printf("Filesystem mounted with %lu KiB free out of %lu KiB available.\n", fre_sect / 2, tot_sect / 2);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	0859      	lsrs	r1, r3, #1
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	461a      	mov	r2, r3
 8003f26:	480b      	ldr	r0, [pc, #44]	; (8003f54 <SDFS_Mount+0xc0>)
 8003f28:	f010 fcc0 	bl	80148ac <iprintf>
  return 0;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	200015b0 	.word	0x200015b0
 8003f3c:	08019a20 	.word	0x08019a20
 8003f40:	08019a48 	.word	0x08019a48
 8003f44:	08019a5c 	.word	0x08019a5c
 8003f48:	08019a60 	.word	0x08019a60
 8003f4c:	08019a80 	.word	0x08019a80
 8003f50:	08019aa4 	.word	0x08019aa4
 8003f54:	08019ac0 	.word	0x08019ac0

08003f58 <SDFS_WriteString>:
  printf("Completed writing %s\n", fqpn);
  return 0;
}

uint8_t SDFS_WriteString(struct sState *state, uint8_t* buffer, char* filename)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8003f5e:	af02      	add	r7, sp, #8
 8003f60:	f107 030c 	add.w	r3, r7, #12
 8003f64:	6018      	str	r0, [r3, #0]
 8003f66:	f107 0308 	add.w	r3, r7, #8
 8003f6a:	6019      	str	r1, [r3, #0]
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	601a      	str	r2, [r3, #0]
  char fqpn[100];
  FRESULT fres;
  FIL fil;
  unsigned int bytesWritten;

  snprintf(fqpn, 100, "%s/%s", state->RootPath, filename);
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003f7a:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	4a22      	ldr	r2, [pc, #136]	; (8004010 <SDFS_WriteString+0xb8>)
 8003f88:	2164      	movs	r1, #100	; 0x64
 8003f8a:	f010 fd23 	bl	80149d4 <sniprintf>

  if ((fres = f_open(&fil, fqpn, FA_OPEN_ALWAYS | FA_READ | FA_WRITE)) != FR_OK) //////////
 8003f8e:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8003f92:	f107 0318 	add.w	r3, r7, #24
 8003f96:	2213      	movs	r2, #19
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f00d ffeb 	bl	8011f74 <f_open>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
 8003fa4:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <SDFS_WriteString+0x64>
  {
    printf("Unable to open/create filename %s, aborting.\n", fqpn);
 8003fac:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4818      	ldr	r0, [pc, #96]	; (8004014 <SDFS_WriteString+0xbc>)
 8003fb4:	f010 fc7a 	bl	80148ac <iprintf>
    return 1;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e023      	b.n	8004004 <SDFS_WriteString+0xac>
  }

  fres = f_lseek(&fil, f_size(&fil));
 8003fbc:	f107 0318 	add.w	r3, r7, #24
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	f107 0318 	add.w	r3, r7, #24
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f00e fbb3 	bl	8012734 <f_lseek>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af

  fres = f_write(&fil, buffer, strlen((char*) buffer), &bytesWritten);
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	f7fc f909 	bl	80001f0 <strlen>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	f107 0314 	add.w	r3, r7, #20
 8003fe4:	f107 0108 	add.w	r1, r7, #8
 8003fe8:	f107 0018 	add.w	r0, r7, #24
 8003fec:	6809      	ldr	r1, [r1, #0]
 8003fee:	f00e f981 	bl	80122f4 <f_write>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af

  f_close(&fil);
 8003ff8:	f107 0318 	add.w	r3, r7, #24
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f00e fb6f 	bl	80126e0 <f_close>
  return 0;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	f507 772c 	add.w	r7, r7, #688	; 0x2b0
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	08019bac 	.word	0x08019bac
 8004014:	08019bb4 	.word	0x08019bb4

08004018 <SDFS_WriteEnvironmental>:

uint8_t SDFS_WriteEnvironmental(struct sState *state, struct sGPSFrame *gps)
{
 8004018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401a:	f5ad 7d6d 	sub.w	sp, sp, #948	; 0x3b4
 800401e:	af0a      	add	r7, sp, #40	; 0x28
 8004020:	f107 031c 	add.w	r3, r7, #28
 8004024:	6018      	str	r0, [r3, #0]
 8004026:	f107 0318 	add.w	r3, r7, #24
 800402a:	6019      	str	r1, [r3, #0]
  if (gps->Date == 0)
 800402c:	f107 0318 	add.w	r3, r7, #24
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <SDFS_WriteEnvironmental+0x26>
    return 0;
 800403a:	2300      	movs	r3, #0
 800403c:	e0a5      	b.n	800418a <SDFS_WriteEnvironmental+0x172>
  FRESULT fres;
  FIL fil;
  char buffer[200];
  unsigned int bytesWritten;

  snprintf(fqpn, 100, "%s/enviro.txt", state->RootPath);
 800403e:	f107 031c 	add.w	r3, r7, #28
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	332c      	adds	r3, #44	; 0x2c
 8004046:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800404a:	4a52      	ldr	r2, [pc, #328]	; (8004194 <SDFS_WriteEnvironmental+0x17c>)
 800404c:	2164      	movs	r1, #100	; 0x64
 800404e:	f010 fcc1 	bl	80149d4 <sniprintf>

  if ((fres = f_open(&fil, fqpn, FA_OPEN_ALWAYS | FA_READ | FA_WRITE)) != FR_OK) //////////
 8004052:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8004056:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800405a:	2213      	movs	r2, #19
 800405c:	4618      	mov	r0, r3
 800405e:	f00d ff89 	bl	8011f74 <f_open>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
 8004068:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <SDFS_WriteEnvironmental+0x68>
  {
    printf("Unable to open/create filename %s, aborting.\n", fqpn);
 8004070:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8004074:	4619      	mov	r1, r3
 8004076:	4848      	ldr	r0, [pc, #288]	; (8004198 <SDFS_WriteEnvironmental+0x180>)
 8004078:	f010 fc18 	bl	80148ac <iprintf>
    return 1;
 800407c:	2301      	movs	r3, #1
 800407e:	e084      	b.n	800418a <SDFS_WriteEnvironmental+0x172>
  }

  fres = f_lseek(&fil, f_size(&fil));
 8004080:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f00e fb51 	bl	8012734 <f_lseek>
 8004092:	4603      	mov	r3, r0
 8004094:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387

  snprintf(buffer, 200, "%s - Temp: %7.2f   Pres: %8.2f  Heater Duty: %3d %3d %3d %3d %3d %3d\n",
      gps->DateTimeStr,
 8004098:	f107 0318 	add.w	r3, r7, #24
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f503 76b0 	add.w	r6, r3, #352	; 0x160
      ((double) state->MSTemperature)/100, ((double) state->MSPressure)/100,
 80040a2:	f107 031c 	add.w	r3, r7, #28
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fa4a 	bl	8000544 <__aeabi_i2d>
  snprintf(buffer, 200, "%s - Temp: %7.2f   Pres: %8.2f  Heater Duty: %3d %3d %3d %3d %3d %3d\n",
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	4b39      	ldr	r3, [pc, #228]	; (800419c <SDFS_WriteEnvironmental+0x184>)
 80040b6:	f7fc fbd9 	bl	800086c <__aeabi_ddiv>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4614      	mov	r4, r2
 80040c0:	461d      	mov	r5, r3
      ((double) state->MSTemperature)/100, ((double) state->MSPressure)/100,
 80040c2:	f107 031c 	add.w	r3, r7, #28
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa3a 	bl	8000544 <__aeabi_i2d>
  snprintf(buffer, 200, "%s - Temp: %7.2f   Pres: %8.2f  Heater Duty: %3d %3d %3d %3d %3d %3d\n",
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	4b31      	ldr	r3, [pc, #196]	; (800419c <SDFS_WriteEnvironmental+0x184>)
 80040d6:	f7fc fbc9 	bl	800086c <__aeabi_ddiv>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
      state->Heaters->HeaterDwell[0], state->Heaters->HeaterDwell[1], state->Heaters->HeaterDwell[2],
 80040de:	f107 011c 	add.w	r1, r7, #28
 80040e2:	6809      	ldr	r1, [r1, #0]
 80040e4:	f8d1 10f8 	ldr.w	r1, [r1, #248]	; 0xf8
 80040e8:	7809      	ldrb	r1, [r1, #0]
  snprintf(buffer, 200, "%s - Temp: %7.2f   Pres: %8.2f  Heater Duty: %3d %3d %3d %3d %3d %3d\n",
 80040ea:	6179      	str	r1, [r7, #20]
      state->Heaters->HeaterDwell[0], state->Heaters->HeaterDwell[1], state->Heaters->HeaterDwell[2],
 80040ec:	f107 011c 	add.w	r1, r7, #28
 80040f0:	6809      	ldr	r1, [r1, #0]
 80040f2:	f8d1 10f8 	ldr.w	r1, [r1, #248]	; 0xf8
 80040f6:	7849      	ldrb	r1, [r1, #1]
  snprintf(buffer, 200, "%s - Temp: %7.2f   Pres: %8.2f  Heater Duty: %3d %3d %3d %3d %3d %3d\n",
 80040f8:	6139      	str	r1, [r7, #16]
      state->Heaters->HeaterDwell[0], state->Heaters->HeaterDwell[1], state->Heaters->HeaterDwell[2],
 80040fa:	f107 011c 	add.w	r1, r7, #28
 80040fe:	6809      	ldr	r1, [r1, #0]
 8004100:	f8d1 10f8 	ldr.w	r1, [r1, #248]	; 0xf8
 8004104:	7889      	ldrb	r1, [r1, #2]
  snprintf(buffer, 200, "%s - Temp: %7.2f   Pres: %8.2f  Heater Duty: %3d %3d %3d %3d %3d %3d\n",
 8004106:	60f9      	str	r1, [r7, #12]
      state->Heaters->HeaterDwell[3], state->Heaters->HeaterDwell[4], state->Heaters->HeaterDwell[5]);
 8004108:	f107 011c 	add.w	r1, r7, #28
 800410c:	6809      	ldr	r1, [r1, #0]
 800410e:	f8d1 10f8 	ldr.w	r1, [r1, #248]	; 0xf8
 8004112:	78c9      	ldrb	r1, [r1, #3]
  snprintf(buffer, 200, "%s - Temp: %7.2f   Pres: %8.2f  Heater Duty: %3d %3d %3d %3d %3d %3d\n",
 8004114:	60b9      	str	r1, [r7, #8]
      state->Heaters->HeaterDwell[3], state->Heaters->HeaterDwell[4], state->Heaters->HeaterDwell[5]);
 8004116:	f107 011c 	add.w	r1, r7, #28
 800411a:	6809      	ldr	r1, [r1, #0]
 800411c:	f8d1 10f8 	ldr.w	r1, [r1, #248]	; 0xf8
 8004120:	7909      	ldrb	r1, [r1, #4]
  snprintf(buffer, 200, "%s - Temp: %7.2f   Pres: %8.2f  Heater Duty: %3d %3d %3d %3d %3d %3d\n",
 8004122:	6079      	str	r1, [r7, #4]
      state->Heaters->HeaterDwell[3], state->Heaters->HeaterDwell[4], state->Heaters->HeaterDwell[5]);
 8004124:	f107 011c 	add.w	r1, r7, #28
 8004128:	6809      	ldr	r1, [r1, #0]
 800412a:	f8d1 10f8 	ldr.w	r1, [r1, #248]	; 0xf8
 800412e:	7949      	ldrb	r1, [r1, #5]
  snprintf(buffer, 200, "%s - Temp: %7.2f   Pres: %8.2f  Heater Duty: %3d %3d %3d %3d %3d %3d\n",
 8004130:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004134:	9109      	str	r1, [sp, #36]	; 0x24
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	9108      	str	r1, [sp, #32]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	9107      	str	r1, [sp, #28]
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	9106      	str	r1, [sp, #24]
 8004142:	6939      	ldr	r1, [r7, #16]
 8004144:	9105      	str	r1, [sp, #20]
 8004146:	6979      	ldr	r1, [r7, #20]
 8004148:	9104      	str	r1, [sp, #16]
 800414a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800414e:	e9cd 4500 	strd	r4, r5, [sp]
 8004152:	4633      	mov	r3, r6
 8004154:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <SDFS_WriteEnvironmental+0x188>)
 8004156:	21c8      	movs	r1, #200	; 0xc8
 8004158:	f010 fc3c 	bl	80149d4 <sniprintf>

  fres = f_write(&fil, buffer, strlen(buffer), &bytesWritten);
 800415c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc f845 	bl	80001f0 <strlen>
 8004166:	4602      	mov	r2, r0
 8004168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004170:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8004174:	f00e f8be 	bl	80122f4 <f_write>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387

  f_close(&fil);
 800417e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004182:	4618      	mov	r0, r3
 8004184:	f00e faac 	bl	80126e0 <f_close>
//  printf("Completed writing %s\n", fqpn);
  return 0;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	f507 7763 	add.w	r7, r7, #908	; 0x38c
 8004190:	46bd      	mov	sp, r7
 8004192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004194:	08019be4 	.word	0x08019be4
 8004198:	08019bb4 	.word	0x08019bb4
 800419c:	40590000 	.word	0x40590000
 80041a0:	08019bf4 	.word	0x08019bf4

080041a4 <SDFS_WriteCoords>:


uint8_t SDFS_WriteCoords(struct sState *state, struct sGPSFrame *gps)
{
 80041a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041a6:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 80041aa:	af08      	add	r7, sp, #32
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	6018      	str	r0, [r3, #0]
 80041b0:	463b      	mov	r3, r7
 80041b2:	6019      	str	r1, [r3, #0]
  if (gps->Date == 0)
 80041b4:	463b      	mov	r3, r7
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <SDFS_WriteCoords+0x20>
    return 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e065      	b.n	8004290 <SDFS_WriteCoords+0xec>
  FRESULT fres;
  FIL fil;
  char buffer[200];
  unsigned int bytesWritten;

  snprintf(fqpn, 200, "%s/coords.txt", state->RootPath);
 80041c4:	1d3b      	adds	r3, r7, #4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	332c      	adds	r3, #44	; 0x2c
 80041ca:	f507 7041 	add.w	r0, r7, #772	; 0x304
 80041ce:	4a33      	ldr	r2, [pc, #204]	; (800429c <SDFS_WriteCoords+0xf8>)
 80041d0:	21c8      	movs	r1, #200	; 0xc8
 80041d2:	f010 fbff 	bl	80149d4 <sniprintf>

  if ((fres = f_open(&fil, fqpn, FA_OPEN_ALWAYS | FA_READ | FA_WRITE)) != FR_OK) //////////
 80041d6:	f507 7141 	add.w	r1, r7, #772	; 0x304
 80041da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041de:	2213      	movs	r2, #19
 80041e0:	4618      	mov	r0, r3
 80041e2:	f00d fec7 	bl	8011f74 <f_open>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
 80041ec:	f897 33cf 	ldrb.w	r3, [r7, #975]	; 0x3cf
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <SDFS_WriteCoords+0x60>
  {
    printf("Unable to open/create filename %s, aborting.\n", fqpn);
 80041f4:	f507 7341 	add.w	r3, r7, #772	; 0x304
 80041f8:	4619      	mov	r1, r3
 80041fa:	4829      	ldr	r0, [pc, #164]	; (80042a0 <SDFS_WriteCoords+0xfc>)
 80041fc:	f010 fb56 	bl	80148ac <iprintf>
    return 1;
 8004200:	2301      	movs	r3, #1
 8004202:	e045      	b.n	8004290 <SDFS_WriteCoords+0xec>
  }

  fres = f_lseek(&fil, f_size(&fil));
 8004204:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f00e fa8f 	bl	8012734 <f_lseek>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf

  snprintf(buffer, 200, "%s - Lat: %10.6f   Long: %10.6f   Alt: %7.1f  Sats: %02d\n",
      gps->DateTimeStr, gps->Latitude, gps->Longitude, gps->Altitude, gps->NumSats);
 800421c:	463b      	mov	r3, r7
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f503 7cb0 	add.w	ip, r3, #352	; 0x160
  snprintf(buffer, 200, "%s - Lat: %10.6f   Long: %10.6f   Alt: %7.1f  Sats: %02d\n",
 8004224:	463b      	mov	r3, r7
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800422c:	4639      	mov	r1, r7
 800422e:	6809      	ldr	r1, [r1, #0]
 8004230:	e9d1 0150 	ldrd	r0, r1, [r1, #320]	; 0x140
 8004234:	463c      	mov	r4, r7
 8004236:	6824      	ldr	r4, [r4, #0]
 8004238:	e9d4 4554 	ldrd	r4, r5, [r4, #336]	; 0x150
      gps->DateTimeStr, gps->Latitude, gps->Longitude, gps->Altitude, gps->NumSats);
 800423c:	463e      	mov	r6, r7
 800423e:	6836      	ldr	r6, [r6, #0]
 8004240:	f896 6159 	ldrb.w	r6, [r6, #345]	; 0x159
  snprintf(buffer, 200, "%s - Lat: %10.6f   Long: %10.6f   Alt: %7.1f  Sats: %02d\n",
 8004244:	f107 0e0c 	add.w	lr, r7, #12
 8004248:	9606      	str	r6, [sp, #24]
 800424a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800424e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004252:	e9cd 2300 	strd	r2, r3, [sp]
 8004256:	4663      	mov	r3, ip
 8004258:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <SDFS_WriteCoords+0x100>)
 800425a:	21c8      	movs	r1, #200	; 0xc8
 800425c:	4670      	mov	r0, lr
 800425e:	f010 fbb9 	bl	80149d4 <sniprintf>

  fres = f_write(&fil, buffer, strlen(buffer), &bytesWritten);
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	4618      	mov	r0, r3
 8004268:	f7fb ffc2 	bl	80001f0 <strlen>
 800426c:	4602      	mov	r2, r0
 800426e:	f107 0308 	add.w	r3, r7, #8
 8004272:	f107 010c 	add.w	r1, r7, #12
 8004276:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 800427a:	f00e f83b 	bl	80122f4 <f_write>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf

  f_close(&fil);
 8004284:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004288:	4618      	mov	r0, r3
 800428a:	f00e fa29 	bl	80126e0 <f_close>
//  printf("Completed writing %s\n", fqpn);
  return 0;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	f507 7775 	add.w	r7, r7, #980	; 0x3d4
 8004296:	46bd      	mov	sp, r7
 8004298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800429a:	bf00      	nop
 800429c:	08019c3c 	.word	0x08019c3c
 80042a0:	08019bb4 	.word	0x08019bb4
 80042a4:	08019c4c 	.word	0x08019c4c

080042a8 <SDFS_WriteSpectraBinary>:


uint8_t SDFS_WriteSpectraBinary(struct sState *state, struct sSpectra *spectra, struct sGPSFrame *gps)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 80042ae:	af02      	add	r7, sp, #8
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	6018      	str	r0, [r3, #0]
 80042b6:	f107 0308 	add.w	r3, r7, #8
 80042ba:	6019      	str	r1, [r3, #0]
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	601a      	str	r2, [r3, #0]
  FRESULT fres;
  FIL fil;
  unsigned int bytesWritten;

//  snprintf(fqpn, 100, "%s/%s.txt", state->SpectraPath, gps->DateTimeStr);
  snprintf(fqpn, 100, "%s/n%05lud-%s.txt", state->SpectraPath, (state->SpectraCount)++, gps->DateTimeStr);
 80042c0:	f107 030c 	add.w	r3, r7, #12
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80042ca:	f107 030c 	add.w	r3, r7, #12
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	b290      	uxth	r0, r2
 80042d8:	f107 020c 	add.w	r2, r7, #12
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	f8a2 00fc 	strh.w	r0, [r2, #252]	; 0xfc
 80042e2:	461a      	mov	r2, r3
 80042e4:	1d3b      	adds	r3, r7, #4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80042ec:	f507 7011 	add.w	r0, r7, #580	; 0x244
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	9200      	str	r2, [sp, #0]
 80042f4:	460b      	mov	r3, r1
 80042f6:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <SDFS_WriteSpectraBinary+0x104>)
 80042f8:	2164      	movs	r1, #100	; 0x64
 80042fa:	f010 fb6b 	bl	80149d4 <sniprintf>

  if ((fres = f_open(&fil, fqpn, FA_OPEN_ALWAYS | FA_READ | FA_WRITE)) != FR_OK)
 80042fe:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8004302:	f107 0314 	add.w	r3, r7, #20
 8004306:	2213      	movs	r2, #19
 8004308:	4618      	mov	r0, r3
 800430a:	f00d fe33 	bl	8011f74 <f_open>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 330d 	strb.w	r3, [r7, #781]	; 0x30d
 8004314:	f897 330d 	ldrb.w	r3, [r7, #781]	; 0x30d
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <SDFS_WriteSpectraBinary+0x84>
  {
    printf("Unable to create filename %s, aborting.\n", fqpn);
 800431c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8004320:	4619      	mov	r1, r3
 8004322:	4823      	ldr	r0, [pc, #140]	; (80043b0 <SDFS_WriteSpectraBinary+0x108>)
 8004324:	f010 fac2 	bl	80148ac <iprintf>
    return 1;
 8004328:	2301      	movs	r3, #1
 800432a:	e039      	b.n	80043a0 <SDFS_WriteSpectraBinary+0xf8>
  }

  for (i=0;i<8192;i+=512)
 800432c:	2300      	movs	r3, #0
 800432e:	f8a7 330e 	strh.w	r3, [r7, #782]	; 0x30e
 8004332:	e018      	b.n	8004366 <SDFS_WriteSpectraBinary+0xbe>
    fres = f_write(&fil, &(spectra->RawData[i]), 512, &bytesWritten);
 8004334:	f8b7 330e 	ldrh.w	r3, [r7, #782]	; 0x30e
 8004338:	f107 0208 	add.w	r2, r7, #8
 800433c:	3308      	adds	r3, #8
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	4413      	add	r3, r2
 8004342:	1c59      	adds	r1, r3, #1
 8004344:	f107 0310 	add.w	r3, r7, #16
 8004348:	f107 0014 	add.w	r0, r7, #20
 800434c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004350:	f00d ffd0 	bl	80122f4 <f_write>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 330d 	strb.w	r3, [r7, #781]	; 0x30d
  for (i=0;i<8192;i+=512)
 800435a:	f8b7 330e 	ldrh.w	r3, [r7, #782]	; 0x30e
 800435e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004362:	f8a7 330e 	strh.w	r3, [r7, #782]	; 0x30e
 8004366:	f8b7 330e 	ldrh.w	r3, [r7, #782]	; 0x30e
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436e:	d3e1      	bcc.n	8004334 <SDFS_WriteSpectraBinary+0x8c>

  f_close(&fil);
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	4618      	mov	r0, r3
 8004376:	f00e f9b3 	bl	80126e0 <f_close>
  printf("Completed writing %s\n", fqpn);
 800437a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800437e:	4619      	mov	r1, r3
 8004380:	480c      	ldr	r0, [pc, #48]	; (80043b4 <SDFS_WriteSpectraBinary+0x10c>)
 8004382:	f010 fa93 	bl	80148ac <iprintf>
  state->CreatedFiles++;
 8004386:	f107 030c 	add.w	r3, r7, #12
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8004390:	3301      	adds	r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	f107 030c 	add.w	r3, r7, #12
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6

  return 0;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	f507 7744 	add.w	r7, r7, #784	; 0x310
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	08019b00 	.word	0x08019b00
 80043b0:	08019b14 	.word	0x08019b14
 80043b4:	08019b94 	.word	0x08019b94

080043b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_MspInit+0x4c>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	4a0f      	ldr	r2, [pc, #60]	; (8004404 <HAL_MspInit+0x4c>)
 80043c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043cc:	6453      	str	r3, [r2, #68]	; 0x44
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_MspInit+0x4c>)
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_MspInit+0x4c>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a08      	ldr	r2, [pc, #32]	; (8004404 <HAL_MspInit+0x4c>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_MspInit+0x4c>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800

08004408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <HAL_ADC_MspInit+0x7c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d127      	bne.n	800447a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	4b16      	ldr	r3, [pc, #88]	; (8004488 <HAL_ADC_MspInit+0x80>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	4a15      	ldr	r2, [pc, #84]	; (8004488 <HAL_ADC_MspInit+0x80>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004438:	6453      	str	r3, [r2, #68]	; 0x44
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <HAL_ADC_MspInit+0x80>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_ADC_MspInit+0x80>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a0e      	ldr	r2, [pc, #56]	; (8004488 <HAL_ADC_MspInit+0x80>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6313      	str	r3, [r2, #48]	; 0x30
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <HAL_ADC_MspInit+0x80>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004462:	2310      	movs	r3, #16
 8004464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004466:	2303      	movs	r3, #3
 8004468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446e:	f107 0314 	add.w	r3, r7, #20
 8004472:	4619      	mov	r1, r3
 8004474:	4805      	ldr	r0, [pc, #20]	; (800448c <HAL_ADC_MspInit+0x84>)
 8004476:	f001 fc1d 	bl	8005cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800447a:	bf00      	nop
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40012000 	.word	0x40012000
 8004488:	40023800 	.word	0x40023800
 800448c:	40020000 	.word	0x40020000

08004490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 031c 	add.w	r3, r7, #28
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a32      	ldr	r2, [pc, #200]	; (8004578 <HAL_I2C_MspInit+0xe8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d12c      	bne.n	800450c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	4b31      	ldr	r3, [pc, #196]	; (800457c <HAL_I2C_MspInit+0xec>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a30      	ldr	r2, [pc, #192]	; (800457c <HAL_I2C_MspInit+0xec>)
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
 80044c2:	4b2e      	ldr	r3, [pc, #184]	; (800457c <HAL_I2C_MspInit+0xec>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044ce:	23c0      	movs	r3, #192	; 0xc0
 80044d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044d2:	2312      	movs	r3, #18
 80044d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044d6:	2301      	movs	r3, #1
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044da:	2303      	movs	r3, #3
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044de:	2304      	movs	r3, #4
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e2:	f107 031c 	add.w	r3, r7, #28
 80044e6:	4619      	mov	r1, r3
 80044e8:	4825      	ldr	r0, [pc, #148]	; (8004580 <HAL_I2C_MspInit+0xf0>)
 80044ea:	f001 fbe3 	bl	8005cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	4b22      	ldr	r3, [pc, #136]	; (800457c <HAL_I2C_MspInit+0xec>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	4a21      	ldr	r2, [pc, #132]	; (800457c <HAL_I2C_MspInit+0xec>)
 80044f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044fc:	6413      	str	r3, [r2, #64]	; 0x40
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <HAL_I2C_MspInit+0xec>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800450a:	e031      	b.n	8004570 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <HAL_I2C_MspInit+0xf4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d12c      	bne.n	8004570 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_I2C_MspInit+0xec>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_I2C_MspInit+0xec>)
 8004520:	f043 0302 	orr.w	r3, r3, #2
 8004524:	6313      	str	r3, [r2, #48]	; 0x30
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <HAL_I2C_MspInit+0xec>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004532:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004538:	2312      	movs	r3, #18
 800453a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800453c:	2301      	movs	r3, #1
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004540:	2303      	movs	r3, #3
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004544:	2304      	movs	r3, #4
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	4619      	mov	r1, r3
 800454e:	480c      	ldr	r0, [pc, #48]	; (8004580 <HAL_I2C_MspInit+0xf0>)
 8004550:	f001 fbb0 	bl	8005cb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	4b08      	ldr	r3, [pc, #32]	; (800457c <HAL_I2C_MspInit+0xec>)
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	4a07      	ldr	r2, [pc, #28]	; (800457c <HAL_I2C_MspInit+0xec>)
 800455e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004562:	6413      	str	r3, [r2, #64]	; 0x40
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_I2C_MspInit+0xec>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
}
 8004570:	bf00      	nop
 8004572:	3730      	adds	r7, #48	; 0x30
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40005400 	.word	0x40005400
 800457c:	40023800 	.word	0x40023800
 8004580:	40020400 	.word	0x40020400
 8004584:	40005800 	.word	0x40005800

08004588 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a68      	ldr	r2, [pc, #416]	; (8004748 <HAL_SD_MspInit+0x1c0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	f040 80c9 	bne.w	800473e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80045ac:	2300      	movs	r3, #0
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	4b66      	ldr	r3, [pc, #408]	; (800474c <HAL_SD_MspInit+0x1c4>)
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	4a65      	ldr	r2, [pc, #404]	; (800474c <HAL_SD_MspInit+0x1c4>)
 80045b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045ba:	6453      	str	r3, [r2, #68]	; 0x44
 80045bc:	4b63      	ldr	r3, [pc, #396]	; (800474c <HAL_SD_MspInit+0x1c4>)
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	4b5f      	ldr	r3, [pc, #380]	; (800474c <HAL_SD_MspInit+0x1c4>)
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	4a5e      	ldr	r2, [pc, #376]	; (800474c <HAL_SD_MspInit+0x1c4>)
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	6313      	str	r3, [r2, #48]	; 0x30
 80045d8:	4b5c      	ldr	r3, [pc, #368]	; (800474c <HAL_SD_MspInit+0x1c4>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	4b58      	ldr	r3, [pc, #352]	; (800474c <HAL_SD_MspInit+0x1c4>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	4a57      	ldr	r2, [pc, #348]	; (800474c <HAL_SD_MspInit+0x1c4>)
 80045ee:	f043 0308 	orr.w	r3, r3, #8
 80045f2:	6313      	str	r3, [r2, #48]	; 0x30
 80045f4:	4b55      	ldr	r3, [pc, #340]	; (800474c <HAL_SD_MspInit+0x1c4>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004600:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004604:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004606:	2302      	movs	r3, #2
 8004608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460e:	2303      	movs	r3, #3
 8004610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004612:	230c      	movs	r3, #12
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004616:	f107 0314 	add.w	r3, r7, #20
 800461a:	4619      	mov	r1, r3
 800461c:	484c      	ldr	r0, [pc, #304]	; (8004750 <HAL_SD_MspInit+0x1c8>)
 800461e:	f001 fb49 	bl	8005cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004622:	2304      	movs	r3, #4
 8004624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004626:	2302      	movs	r3, #2
 8004628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462e:	2303      	movs	r3, #3
 8004630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004632:	230c      	movs	r3, #12
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004636:	f107 0314 	add.w	r3, r7, #20
 800463a:	4619      	mov	r1, r3
 800463c:	4845      	ldr	r0, [pc, #276]	; (8004754 <HAL_SD_MspInit+0x1cc>)
 800463e:	f001 fb39 	bl	8005cb4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004642:	4b45      	ldr	r3, [pc, #276]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 8004644:	4a45      	ldr	r2, [pc, #276]	; (800475c <HAL_SD_MspInit+0x1d4>)
 8004646:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 800464a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800464e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004650:	4b41      	ldr	r3, [pc, #260]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004656:	4b40      	ldr	r3, [pc, #256]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 8004658:	2200      	movs	r2, #0
 800465a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800465c:	4b3e      	ldr	r3, [pc, #248]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 800465e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004662:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004664:	4b3c      	ldr	r3, [pc, #240]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 8004666:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800466a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800466c:	4b3a      	ldr	r3, [pc, #232]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 800466e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004672:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004674:	4b38      	ldr	r3, [pc, #224]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 8004676:	2220      	movs	r2, #32
 8004678:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800467a:	4b37      	ldr	r3, [pc, #220]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 800467c:	2200      	movs	r2, #0
 800467e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004680:	4b35      	ldr	r3, [pc, #212]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 8004682:	2204      	movs	r2, #4
 8004684:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004686:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 8004688:	2203      	movs	r2, #3
 800468a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800468c:	4b32      	ldr	r3, [pc, #200]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 800468e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004694:	4b30      	ldr	r3, [pc, #192]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 8004696:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800469c:	482e      	ldr	r0, [pc, #184]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 800469e:	f000 fefb 	bl	8005498 <HAL_DMA_Init>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80046a8:	f7ff fb46 	bl	8003d38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
 80046b2:	4a29      	ldr	r2, [pc, #164]	; (8004758 <HAL_SD_MspInit+0x1d0>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046ba:	4a2a      	ldr	r2, [pc, #168]	; (8004764 <HAL_SD_MspInit+0x1dc>)
 80046bc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046c4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046c6:	4b26      	ldr	r3, [pc, #152]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046c8:	2240      	movs	r2, #64	; 0x40
 80046ca:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046d2:	4b23      	ldr	r3, [pc, #140]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046d8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80046da:	4b21      	ldr	r3, [pc, #132]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046e0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046e8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80046ea:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046ec:	2220      	movs	r2, #32
 80046ee:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046f8:	2204      	movs	r2, #4
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80046fc:	4b18      	ldr	r3, [pc, #96]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 80046fe:	2203      	movs	r2, #3
 8004700:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 8004704:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004708:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 800470c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004712:	4813      	ldr	r0, [pc, #76]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 8004714:	f000 fec0 	bl	8005498 <HAL_DMA_Init>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800471e:	f7ff fb0b 	bl	8003d38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 8004726:	63da      	str	r2, [r3, #60]	; 0x3c
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <HAL_SD_MspInit+0x1d8>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800472e:	2200      	movs	r2, #0
 8004730:	2100      	movs	r1, #0
 8004732:	2031      	movs	r0, #49	; 0x31
 8004734:	f000 fe79 	bl	800542a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004738:	2031      	movs	r0, #49	; 0x31
 800473a:	f000 fe92 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800473e:	bf00      	nop
 8004740:	3728      	adds	r7, #40	; 0x28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40023800 	.word	0x40023800
 8004750:	40020800 	.word	0x40020800
 8004754:	40020c00 	.word	0x40020c00
 8004758:	20000a0c 	.word	0x20000a0c
 800475c:	40026458 	.word	0x40026458
 8004760:	20000be8 	.word	0x20000be8
 8004764:	400264a0 	.word	0x400264a0

08004768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004770:	f107 0314 	add.w	r3, r7, #20
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	605a      	str	r2, [r3, #4]
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	60da      	str	r2, [r3, #12]
 800477e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a19      	ldr	r2, [pc, #100]	; (80047ec <HAL_SPI_MspInit+0x84>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d12b      	bne.n	80047e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <HAL_SPI_MspInit+0x88>)
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <HAL_SPI_MspInit+0x88>)
 8004794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004798:	6453      	str	r3, [r2, #68]	; 0x44
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <HAL_SPI_MspInit+0x88>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_SPI_MspInit+0x88>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a10      	ldr	r2, [pc, #64]	; (80047f0 <HAL_SPI_MspInit+0x88>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
 80047b6:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <HAL_SPI_MspInit+0x88>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80047c2:	23e0      	movs	r3, #224	; 0xe0
 80047c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c6:	2302      	movs	r3, #2
 80047c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ce:	2303      	movs	r3, #3
 80047d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047d2:	2305      	movs	r3, #5
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d6:	f107 0314 	add.w	r3, r7, #20
 80047da:	4619      	mov	r1, r3
 80047dc:	4805      	ldr	r0, [pc, #20]	; (80047f4 <HAL_SPI_MspInit+0x8c>)
 80047de:	f001 fa69 	bl	8005cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80047e2:	bf00      	nop
 80047e4:	3728      	adds	r7, #40	; 0x28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40013000 	.word	0x40013000
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40020000 	.word	0x40020000

080047f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1c      	ldr	r2, [pc, #112]	; (8004878 <HAL_TIM_Base_MspInit+0x80>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d116      	bne.n	8004838 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	4b1b      	ldr	r3, [pc, #108]	; (800487c <HAL_TIM_Base_MspInit+0x84>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	4a1a      	ldr	r2, [pc, #104]	; (800487c <HAL_TIM_Base_MspInit+0x84>)
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	6413      	str	r3, [r2, #64]	; 0x40
 800481a:	4b18      	ldr	r3, [pc, #96]	; (800487c <HAL_TIM_Base_MspInit+0x84>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	202c      	movs	r0, #44	; 0x2c
 800482c:	f000 fdfd 	bl	800542a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004830:	202c      	movs	r0, #44	; 0x2c
 8004832:	f000 fe16 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004836:	e01a      	b.n	800486e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a10      	ldr	r2, [pc, #64]	; (8004880 <HAL_TIM_Base_MspInit+0x88>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d115      	bne.n	800486e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	4b0d      	ldr	r3, [pc, #52]	; (800487c <HAL_TIM_Base_MspInit+0x84>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4a0c      	ldr	r2, [pc, #48]	; (800487c <HAL_TIM_Base_MspInit+0x84>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	6413      	str	r3, [r2, #64]	; 0x40
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <HAL_TIM_Base_MspInit+0x84>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800485e:	2200      	movs	r2, #0
 8004860:	2100      	movs	r1, #0
 8004862:	202d      	movs	r0, #45	; 0x2d
 8004864:	f000 fde1 	bl	800542a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004868:	202d      	movs	r0, #45	; 0x2d
 800486a:	f000 fdfa 	bl	8005462 <HAL_NVIC_EnableIRQ>
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40001c00 	.word	0x40001c00
 800487c:	40023800 	.word	0x40023800
 8004880:	40002000 	.word	0x40002000

08004884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	; 0x30
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488c:	f107 031c 	add.w	r3, r7, #28
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	60da      	str	r2, [r3, #12]
 800489a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a3a      	ldr	r2, [pc, #232]	; (800498c <HAL_UART_MspInit+0x108>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d135      	bne.n	8004912 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	4b39      	ldr	r3, [pc, #228]	; (8004990 <HAL_UART_MspInit+0x10c>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	4a38      	ldr	r2, [pc, #224]	; (8004990 <HAL_UART_MspInit+0x10c>)
 80048b0:	f043 0310 	orr.w	r3, r3, #16
 80048b4:	6453      	str	r3, [r2, #68]	; 0x44
 80048b6:	4b36      	ldr	r3, [pc, #216]	; (8004990 <HAL_UART_MspInit+0x10c>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	4b32      	ldr	r3, [pc, #200]	; (8004990 <HAL_UART_MspInit+0x10c>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a31      	ldr	r2, [pc, #196]	; (8004990 <HAL_UART_MspInit+0x10c>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	6313      	str	r3, [r2, #48]	; 0x30
 80048d2:	4b2f      	ldr	r3, [pc, #188]	; (8004990 <HAL_UART_MspInit+0x10c>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80048de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80048e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e4:	2302      	movs	r3, #2
 80048e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ec:	2303      	movs	r3, #3
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048f0:	2307      	movs	r3, #7
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f4:	f107 031c 	add.w	r3, r7, #28
 80048f8:	4619      	mov	r1, r3
 80048fa:	4826      	ldr	r0, [pc, #152]	; (8004994 <HAL_UART_MspInit+0x110>)
 80048fc:	f001 f9da 	bl	8005cb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004900:	2200      	movs	r2, #0
 8004902:	2100      	movs	r1, #0
 8004904:	2025      	movs	r0, #37	; 0x25
 8004906:	f000 fd90 	bl	800542a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800490a:	2025      	movs	r0, #37	; 0x25
 800490c:	f000 fda9 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004910:	e038      	b.n	8004984 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a20      	ldr	r2, [pc, #128]	; (8004998 <HAL_UART_MspInit+0x114>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d133      	bne.n	8004984 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_UART_MspInit+0x10c>)
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	4a1a      	ldr	r2, [pc, #104]	; (8004990 <HAL_UART_MspInit+0x10c>)
 8004926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492a:	6413      	str	r3, [r2, #64]	; 0x40
 800492c:	4b18      	ldr	r3, [pc, #96]	; (8004990 <HAL_UART_MspInit+0x10c>)
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	4b14      	ldr	r3, [pc, #80]	; (8004990 <HAL_UART_MspInit+0x10c>)
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	4a13      	ldr	r2, [pc, #76]	; (8004990 <HAL_UART_MspInit+0x10c>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	6313      	str	r3, [r2, #48]	; 0x30
 8004948:	4b11      	ldr	r3, [pc, #68]	; (8004990 <HAL_UART_MspInit+0x10c>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004954:	230c      	movs	r3, #12
 8004956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004958:	2302      	movs	r3, #2
 800495a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004960:	2303      	movs	r3, #3
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004964:	2307      	movs	r3, #7
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004968:	f107 031c 	add.w	r3, r7, #28
 800496c:	4619      	mov	r1, r3
 800496e:	4809      	ldr	r0, [pc, #36]	; (8004994 <HAL_UART_MspInit+0x110>)
 8004970:	f001 f9a0 	bl	8005cb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004974:	2200      	movs	r2, #0
 8004976:	2100      	movs	r1, #0
 8004978:	2026      	movs	r0, #38	; 0x26
 800497a:	f000 fd56 	bl	800542a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800497e:	2026      	movs	r0, #38	; 0x26
 8004980:	f000 fd6f 	bl	8005462 <HAL_NVIC_EnableIRQ>
}
 8004984:	bf00      	nop
 8004986:	3730      	adds	r7, #48	; 0x30
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40011000 	.word	0x40011000
 8004990:	40023800 	.word	0x40023800
 8004994:	40020000 	.word	0x40020000
 8004998:	40004400 	.word	0x40004400

0800499c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049a0:	e7fe      	b.n	80049a0 <NMI_Handler+0x4>

080049a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049a2:	b480      	push	{r7}
 80049a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049a6:	e7fe      	b.n	80049a6 <HardFault_Handler+0x4>

080049a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049ac:	e7fe      	b.n	80049ac <MemManage_Handler+0x4>

080049ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049ae:	b480      	push	{r7}
 80049b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049b2:	e7fe      	b.n	80049b2 <BusFault_Handler+0x4>

080049b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b8:	e7fe      	b.n	80049b8 <UsageFault_Handler+0x4>

080049ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e8:	f000 f98e 	bl	8004d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049ec:	bf00      	nop
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049f4:	4802      	ldr	r0, [pc, #8]	; (8004a00 <USART1_IRQHandler+0x10>)
 80049f6:	f006 fa73 	bl	800aee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000ba4 	.word	0x20000ba4

08004a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a08:	4802      	ldr	r0, [pc, #8]	; (8004a14 <USART2_IRQHandler+0x10>)
 8004a0a:	f006 fa69 	bl	800aee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20001128 	.word	0x20001128

08004a18 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004a1c:	4802      	ldr	r0, [pc, #8]	; (8004a28 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004a1e:	f005 fe17 	bl	800a650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000b5c 	.word	0x20000b5c

08004a2c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004a30:	4802      	ldr	r0, [pc, #8]	; (8004a3c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004a32:	f005 fe0d 	bl	800a650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	2000116c 	.word	0x2000116c

08004a40 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <SDIO_IRQHandler+0x10>)
 8004a46:	f004 fc01 	bl	800924c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20001044 	.word	0x20001044

08004a54 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004a58:	4802      	ldr	r0, [pc, #8]	; (8004a64 <DMA2_Stream3_IRQHandler+0x10>)
 8004a5a:	f000 feb5 	bl	80057c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000a0c 	.word	0x20000a0c

08004a68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <OTG_FS_IRQHandler+0x10>)
 8004a6e:	f002 fccf 	bl	8007410 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20003124 	.word	0x20003124

08004a7c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <DMA2_Stream6_IRQHandler+0x10>)
 8004a82:	f000 fea1 	bl	80057c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000be8 	.word	0x20000be8

08004a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
	return 1;
 8004a94:	2301      	movs	r3, #1
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <_kill>:

int _kill(int pid, int sig)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004aaa:	f00f f845 	bl	8013b38 <__errno>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2216      	movs	r2, #22
 8004ab2:	601a      	str	r2, [r3, #0]
	return -1;
 8004ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <_exit>:

void _exit (int status)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff ffe7 	bl	8004aa0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ad2:	e7fe      	b.n	8004ad2 <_exit+0x12>

08004ad4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e00a      	b.n	8004afc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ae6:	f3af 8000 	nop.w
 8004aea:	4601      	mov	r1, r0
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	60ba      	str	r2, [r7, #8]
 8004af2:	b2ca      	uxtb	r2, r1
 8004af4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	3301      	adds	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	dbf0      	blt.n	8004ae6 <_read+0x12>
	}

return len;
 8004b04:	687b      	ldr	r3, [r7, #4]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <_close>:
	}
	return len;
}

int _close(int file)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
	return -1;
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b36:	605a      	str	r2, [r3, #4]
	return 0;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <_isatty>:

int _isatty(int file)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
	return 1;
 8004b4e:	2301      	movs	r3, #1
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
	return 0;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <_sbrk+0x5c>)
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <_sbrk+0x60>)
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b8c:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <_sbrk+0x64>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b94:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <_sbrk+0x64>)
 8004b96:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <_sbrk+0x68>)
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b9a:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <_sbrk+0x64>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d207      	bcs.n	8004bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ba8:	f00e ffc6 	bl	8013b38 <__errno>
 8004bac:	4603      	mov	r3, r0
 8004bae:	220c      	movs	r2, #12
 8004bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	e009      	b.n	8004bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <_sbrk+0x64>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <_sbrk+0x64>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	4a05      	ldr	r2, [pc, #20]	; (8004bdc <_sbrk+0x64>)
 8004bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20030000 	.word	0x20030000
 8004bd8:	00000400 	.word	0x00000400
 8004bdc:	200005a0 	.word	0x200005a0
 8004be0:	20003540 	.word	0x20003540

08004be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004be8:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <SystemInit+0x28>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	4a07      	ldr	r2, [pc, #28]	; (8004c0c <SystemInit+0x28>)
 8004bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <SystemInit+0x28>)
 8004bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bfe:	609a      	str	r2, [r3, #8]
#endif
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	e000ed00 	.word	0xe000ed00

08004c10 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8004c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c16:	e003      	b.n	8004c20 <LoopCopyDataInit>

08004c18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c1e:	3104      	adds	r1, #4

08004c20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c20:	480b      	ldr	r0, [pc, #44]	; (8004c50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c22:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c28:	d3f6      	bcc.n	8004c18 <CopyDataInit>
  ldr  r2, =_sbss
 8004c2a:	4a0b      	ldr	r2, [pc, #44]	; (8004c58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c2c:	e002      	b.n	8004c34 <LoopFillZerobss>

08004c2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c30:	f842 3b04 	str.w	r3, [r2], #4

08004c34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c38:	d3f9      	bcc.n	8004c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c3a:	f7ff ffd3 	bl	8004be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c3e:	f00e ff81 	bl	8013b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c42:	f7fd ffad 	bl	8002ba0 <main>
  bx  lr    
 8004c46:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8004c48:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004c4c:	0801a698 	.word	0x0801a698
  ldr  r0, =_sdata
 8004c50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c54:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8004c58:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8004c5c:	2000353c 	.word	0x2000353c

08004c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c60:	e7fe      	b.n	8004c60 <ADC_IRQHandler>
	...

08004c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <HAL_Init+0x40>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <HAL_Init+0x40>)
 8004c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_Init+0x40>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <HAL_Init+0x40>)
 8004c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c80:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <HAL_Init+0x40>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <HAL_Init+0x40>)
 8004c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c8c:	2003      	movs	r0, #3
 8004c8e:	f000 fbc1 	bl	8005414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f000 f808 	bl	8004ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c98:	f7ff fb8e 	bl	80043b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023c00 	.word	0x40023c00

08004ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cb0:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <HAL_InitTick+0x54>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <HAL_InitTick+0x58>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fbd9 	bl	800547e <HAL_SYSTICK_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e00e      	b.n	8004cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b0f      	cmp	r3, #15
 8004cda:	d80a      	bhi.n	8004cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	f000 fba1 	bl	800542a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ce8:	4a06      	ldr	r2, [pc, #24]	; (8004d04 <HAL_InitTick+0x5c>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e000      	b.n	8004cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	20000008 	.word	0x20000008
 8004d04:	20000004 	.word	0x20000004

08004d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_IncTick+0x20>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_IncTick+0x24>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4413      	add	r3, r2
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_IncTick+0x24>)
 8004d1a:	6013      	str	r3, [r2, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20000008 	.word	0x20000008
 8004d2c:	200017e4 	.word	0x200017e4

08004d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return uwTick;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <HAL_GetTick+0x14>)
 8004d36:	681b      	ldr	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	200017e4 	.word	0x200017e4

08004d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d50:	f7ff ffee 	bl	8004d30 <HAL_GetTick>
 8004d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d005      	beq.n	8004d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_Delay+0x44>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d6e:	bf00      	nop
 8004d70:	f7ff ffde 	bl	8004d30 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d8f7      	bhi.n	8004d70 <HAL_Delay+0x28>
  {
  }
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000008 	.word	0x20000008

08004d90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e033      	b.n	8004e0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fb2a 	bl	8004408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d118      	bne.n	8004e00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004dd6:	f023 0302 	bic.w	r3, r3, #2
 8004dda:	f043 0202 	orr.w	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f94a 	bl	800507c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f023 0303 	bic.w	r3, r3, #3
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8004dfe:	e001      	b.n	8004e04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x1c>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e113      	b.n	800505c <HAL_ADC_ConfigChannel+0x244>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b09      	cmp	r3, #9
 8004e42:	d925      	bls.n	8004e90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68d9      	ldr	r1, [r3, #12]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	3b1e      	subs	r3, #30
 8004e5a:	2207      	movs	r2, #7
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43da      	mvns	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	400a      	ands	r2, r1
 8004e68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68d9      	ldr	r1, [r3, #12]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4403      	add	r3, r0
 8004e82:	3b1e      	subs	r3, #30
 8004e84:	409a      	lsls	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	e022      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6919      	ldr	r1, [r3, #16]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	4413      	add	r3, r2
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43da      	mvns	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6919      	ldr	r1, [r3, #16]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4403      	add	r3, r0
 8004ecc:	409a      	lsls	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d824      	bhi.n	8004f28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	3b05      	subs	r3, #5
 8004ef0:	221f      	movs	r2, #31
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	400a      	ands	r2, r1
 8004efe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	3b05      	subs	r3, #5
 8004f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	635a      	str	r2, [r3, #52]	; 0x34
 8004f26:	e04c      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	d824      	bhi.n	8004f7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	3b23      	subs	r3, #35	; 0x23
 8004f42:	221f      	movs	r2, #31
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43da      	mvns	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	400a      	ands	r2, r1
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	4618      	mov	r0, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	3b23      	subs	r3, #35	; 0x23
 8004f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
 8004f78:	e023      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	3b41      	subs	r3, #65	; 0x41
 8004f8c:	221f      	movs	r2, #31
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43da      	mvns	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	400a      	ands	r2, r1
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4618      	mov	r0, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3b41      	subs	r3, #65	; 0x41
 8004fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fc2:	4b29      	ldr	r3, [pc, #164]	; (8005068 <HAL_ADC_ConfigChannel+0x250>)
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a28      	ldr	r2, [pc, #160]	; (800506c <HAL_ADC_ConfigChannel+0x254>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d10f      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x1d8>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b12      	cmp	r3, #18
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1d      	ldr	r2, [pc, #116]	; (800506c <HAL_ADC_ConfigChannel+0x254>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d12b      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x23a>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	; (8005070 <HAL_ADC_ConfigChannel+0x258>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <HAL_ADC_ConfigChannel+0x1f4>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b11      	cmp	r3, #17
 800500a:	d122      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a11      	ldr	r2, [pc, #68]	; (8005070 <HAL_ADC_ConfigChannel+0x258>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d111      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800502e:	4b11      	ldr	r3, [pc, #68]	; (8005074 <HAL_ADC_ConfigChannel+0x25c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a11      	ldr	r2, [pc, #68]	; (8005078 <HAL_ADC_ConfigChannel+0x260>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	0c9a      	lsrs	r2, r3, #18
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005044:	e002      	b.n	800504c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	3b01      	subs	r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f9      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40012300 	.word	0x40012300
 800506c:	40012000 	.word	0x40012000
 8005070:	10000012 	.word	0x10000012
 8005074:	20000000 	.word	0x20000000
 8005078:	431bde83 	.word	0x431bde83

0800507c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005084:	4b79      	ldr	r3, [pc, #484]	; (800526c <ADC_Init+0x1f0>)
 8005086:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	431a      	orrs	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	021a      	lsls	r2, r3, #8
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80050d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6899      	ldr	r1, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	4a58      	ldr	r2, [pc, #352]	; (8005270 <ADC_Init+0x1f4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d022      	beq.n	800515a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005122:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6899      	ldr	r1, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6899      	ldr	r1, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	e00f      	b.n	800517a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005178:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0202 	bic.w	r2, r2, #2
 8005188:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6899      	ldr	r1, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7e1b      	ldrb	r3, [r3, #24]
 8005194:	005a      	lsls	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80051c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	3b01      	subs	r3, #1
 80051d4:	035a      	lsls	r2, r3, #13
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	e007      	b.n	80051f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80051fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	3b01      	subs	r3, #1
 800520c:	051a      	lsls	r2, r3, #20
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6899      	ldr	r1, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005232:	025a      	lsls	r2, r3, #9
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6899      	ldr	r1, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	029a      	lsls	r2, r3, #10
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40012300 	.word	0x40012300
 8005270:	0f000001 	.word	0x0f000001

08005274 <__NVIC_SetPriorityGrouping>:
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005290:	4013      	ands	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800529c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052a6:	4a04      	ldr	r2, [pc, #16]	; (80052b8 <__NVIC_SetPriorityGrouping+0x44>)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	60d3      	str	r3, [r2, #12]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <__NVIC_GetPriorityGrouping>:
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052c0:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <__NVIC_GetPriorityGrouping+0x18>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	0a1b      	lsrs	r3, r3, #8
 80052c6:	f003 0307 	and.w	r3, r3, #7
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000ed00 	.word	0xe000ed00

080052d8 <__NVIC_EnableIRQ>:
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	db0b      	blt.n	8005302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	f003 021f 	and.w	r2, r3, #31
 80052f0:	4907      	ldr	r1, [pc, #28]	; (8005310 <__NVIC_EnableIRQ+0x38>)
 80052f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2001      	movs	r0, #1
 80052fa:	fa00 f202 	lsl.w	r2, r0, r2
 80052fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	e000e100 	.word	0xe000e100

08005314 <__NVIC_SetPriority>:
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	6039      	str	r1, [r7, #0]
 800531e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005324:	2b00      	cmp	r3, #0
 8005326:	db0a      	blt.n	800533e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	490c      	ldr	r1, [pc, #48]	; (8005360 <__NVIC_SetPriority+0x4c>)
 800532e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005332:	0112      	lsls	r2, r2, #4
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	440b      	add	r3, r1
 8005338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800533c:	e00a      	b.n	8005354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4908      	ldr	r1, [pc, #32]	; (8005364 <__NVIC_SetPriority+0x50>)
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	3b04      	subs	r3, #4
 800534c:	0112      	lsls	r2, r2, #4
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	440b      	add	r3, r1
 8005352:	761a      	strb	r2, [r3, #24]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000e100 	.word	0xe000e100
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <NVIC_EncodePriority>:
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	; 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f1c3 0307 	rsb	r3, r3, #7
 8005382:	2b04      	cmp	r3, #4
 8005384:	bf28      	it	cs
 8005386:	2304      	movcs	r3, #4
 8005388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3304      	adds	r3, #4
 800538e:	2b06      	cmp	r3, #6
 8005390:	d902      	bls.n	8005398 <NVIC_EncodePriority+0x30>
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	3b03      	subs	r3, #3
 8005396:	e000      	b.n	800539a <NVIC_EncodePriority+0x32>
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800539c:	f04f 32ff 	mov.w	r2, #4294967295
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43da      	mvns	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	401a      	ands	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053b0:	f04f 31ff 	mov.w	r1, #4294967295
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ba:	43d9      	mvns	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c0:	4313      	orrs	r3, r2
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3724      	adds	r7, #36	; 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <SysTick_Config>:
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3b01      	subs	r3, #1
 80053dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053e0:	d301      	bcc.n	80053e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80053e2:	2301      	movs	r3, #1
 80053e4:	e00f      	b.n	8005406 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053e6:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <SysTick_Config+0x40>)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053ee:	210f      	movs	r1, #15
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	f7ff ff8e 	bl	8005314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <SysTick_Config+0x40>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053fe:	4b04      	ldr	r3, [pc, #16]	; (8005410 <SysTick_Config+0x40>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	e000e010 	.word	0xe000e010

08005414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff29 	bl	8005274 <__NVIC_SetPriorityGrouping>
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800542a:	b580      	push	{r7, lr}
 800542c:	b086      	sub	sp, #24
 800542e:	af00      	add	r7, sp, #0
 8005430:	4603      	mov	r3, r0
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
 8005436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800543c:	f7ff ff3e 	bl	80052bc <__NVIC_GetPriorityGrouping>
 8005440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	6978      	ldr	r0, [r7, #20]
 8005448:	f7ff ff8e 	bl	8005368 <NVIC_EncodePriority>
 800544c:	4602      	mov	r2, r0
 800544e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff ff5d 	bl	8005314 <__NVIC_SetPriority>
}
 800545a:	bf00      	nop
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	4603      	mov	r3, r0
 800546a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800546c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff ff31 	bl	80052d8 <__NVIC_EnableIRQ>
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ffa2 	bl	80053d0 <SysTick_Config>
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054a4:	f7ff fc44 	bl	8004d30 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e099      	b.n	80055e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0201 	bic.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054d4:	e00f      	b.n	80054f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054d6:	f7ff fc2b 	bl	8004d30 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b05      	cmp	r3, #5
 80054e2:	d908      	bls.n	80054f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2203      	movs	r2, #3
 80054ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e078      	b.n	80055e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e8      	bne.n	80054d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <HAL_DMA_Init+0x158>)
 8005510:	4013      	ands	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800552e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800553a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2b04      	cmp	r3, #4
 800554e:	d107      	bne.n	8005560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4313      	orrs	r3, r2
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f023 0307 	bic.w	r3, r3, #7
 8005576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b04      	cmp	r3, #4
 8005588:	d117      	bne.n	80055ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00e      	beq.n	80055ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fb0d 	bl	8005bbc <DMA_CheckFifoParam>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2240      	movs	r2, #64	; 0x40
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055b6:	2301      	movs	r3, #1
 80055b8:	e016      	b.n	80055e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fac4 	bl	8005b50 <DMA_CalcBaseAndBitshift>
 80055c8:	4603      	mov	r3, r0
 80055ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d0:	223f      	movs	r2, #63	; 0x3f
 80055d2:	409a      	lsls	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	f010803f 	.word	0xf010803f

080055f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_DMA_Start_IT+0x26>
 8005616:	2302      	movs	r3, #2
 8005618:	e040      	b.n	800569c <HAL_DMA_Start_IT+0xa8>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d12f      	bne.n	800568e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 fa56 	bl	8005af4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564c:	223f      	movs	r2, #63	; 0x3f
 800564e:	409a      	lsls	r2, r3
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0216 	orr.w	r2, r2, #22
 8005662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0208 	orr.w	r2, r2, #8
 800567a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e005      	b.n	800569a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005696:	2302      	movs	r3, #2
 8005698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056b2:	f7ff fb3d 	bl	8004d30 <HAL_GetTick>
 80056b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d008      	beq.n	80056d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2280      	movs	r2, #128	; 0x80
 80056c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e052      	b.n	800577c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0216 	bic.w	r2, r2, #22
 80056e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <HAL_DMA_Abort+0x62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0208 	bic.w	r2, r2, #8
 8005714:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005726:	e013      	b.n	8005750 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005728:	f7ff fb02 	bl	8004d30 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b05      	cmp	r3, #5
 8005734:	d90c      	bls.n	8005750 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2203      	movs	r2, #3
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e015      	b.n	800577c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e4      	bne.n	8005728 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005762:	223f      	movs	r2, #63	; 0x3f
 8005764:	409a      	lsls	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d004      	beq.n	80057a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2280      	movs	r2, #128	; 0x80
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e00c      	b.n	80057bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2205      	movs	r2, #5
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0201 	bic.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057d4:	4b92      	ldr	r3, [pc, #584]	; (8005a20 <HAL_DMA_IRQHandler+0x258>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a92      	ldr	r2, [pc, #584]	; (8005a24 <HAL_DMA_IRQHandler+0x25c>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	0a9b      	lsrs	r3, r3, #10
 80057e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f2:	2208      	movs	r2, #8
 80057f4:	409a      	lsls	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01a      	beq.n	8005834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d013      	beq.n	8005834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0204 	bic.w	r2, r2, #4
 800581a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005820:	2208      	movs	r2, #8
 8005822:	409a      	lsls	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582c:	f043 0201 	orr.w	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005838:	2201      	movs	r2, #1
 800583a:	409a      	lsls	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4013      	ands	r3, r2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d012      	beq.n	800586a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005856:	2201      	movs	r2, #1
 8005858:	409a      	lsls	r2, r3
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005862:	f043 0202 	orr.w	r2, r3, #2
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586e:	2204      	movs	r2, #4
 8005870:	409a      	lsls	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4013      	ands	r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d012      	beq.n	80058a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00b      	beq.n	80058a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	2204      	movs	r2, #4
 800588e:	409a      	lsls	r2, r3
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005898:	f043 0204 	orr.w	r2, r3, #4
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a4:	2210      	movs	r2, #16
 80058a6:	409a      	lsls	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d043      	beq.n	8005938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d03c      	beq.n	8005938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c2:	2210      	movs	r2, #16
 80058c4:	409a      	lsls	r2, r3
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d018      	beq.n	800590a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d024      	beq.n	8005938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
 80058f6:	e01f      	b.n	8005938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
 8005908:	e016      	b.n	8005938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d107      	bne.n	8005928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0208 	bic.w	r2, r2, #8
 8005926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593c:	2220      	movs	r2, #32
 800593e:	409a      	lsls	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4013      	ands	r3, r2
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 808e 	beq.w	8005a66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8086 	beq.w	8005a66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595e:	2220      	movs	r2, #32
 8005960:	409a      	lsls	r2, r3
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b05      	cmp	r3, #5
 8005970:	d136      	bne.n	80059e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0216 	bic.w	r2, r2, #22
 8005980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d103      	bne.n	80059a2 <HAL_DMA_IRQHandler+0x1da>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0208 	bic.w	r2, r2, #8
 80059b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	223f      	movs	r2, #63	; 0x3f
 80059b8:	409a      	lsls	r2, r3
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d07d      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	4798      	blx	r3
        }
        return;
 80059de:	e078      	b.n	8005ad2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01c      	beq.n	8005a28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d108      	bne.n	8005a0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d030      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	4798      	blx	r3
 8005a0c:	e02b      	b.n	8005a66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d027      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
 8005a1e:	e022      	b.n	8005a66 <HAL_DMA_IRQHandler+0x29e>
 8005a20:	20000000 	.word	0x20000000
 8005a24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10f      	bne.n	8005a56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0210 	bic.w	r2, r2, #16
 8005a44:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d032      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d022      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2205      	movs	r2, #5
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	3301      	adds	r3, #1
 8005a96:	60bb      	str	r3, [r7, #8]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d307      	bcc.n	8005aae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f2      	bne.n	8005a92 <HAL_DMA_IRQHandler+0x2ca>
 8005aac:	e000      	b.n	8005ab0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005aae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
 8005ad0:	e000      	b.n	8005ad4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005ad2:	bf00      	nop
    }
  }
}
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop

08005adc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d108      	bne.n	8005b34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b32:	e007      	b.n	8005b44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	3b10      	subs	r3, #16
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <DMA_CalcBaseAndBitshift+0x64>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b6a:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d909      	bls.n	8005b92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	1d1a      	adds	r2, r3, #4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b90:	e007      	b.n	8005ba2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b9a:	f023 0303 	bic.w	r3, r3, #3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	aaaaaaab 	.word	0xaaaaaaab
 8005bb8:	08019d34 	.word	0x08019d34

08005bbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d11f      	bne.n	8005c16 <DMA_CheckFifoParam+0x5a>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d856      	bhi.n	8005c8a <DMA_CheckFifoParam+0xce>
 8005bdc:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <DMA_CheckFifoParam+0x28>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005bf5 	.word	0x08005bf5
 8005be8:	08005c07 	.word	0x08005c07
 8005bec:	08005bf5 	.word	0x08005bf5
 8005bf0:	08005c8b 	.word	0x08005c8b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d046      	beq.n	8005c8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c04:	e043      	b.n	8005c8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c0e:	d140      	bne.n	8005c92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c14:	e03d      	b.n	8005c92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1e:	d121      	bne.n	8005c64 <DMA_CheckFifoParam+0xa8>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d837      	bhi.n	8005c96 <DMA_CheckFifoParam+0xda>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <DMA_CheckFifoParam+0x70>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c3d 	.word	0x08005c3d
 8005c30:	08005c43 	.word	0x08005c43
 8005c34:	08005c3d 	.word	0x08005c3d
 8005c38:	08005c55 	.word	0x08005c55
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c40:	e030      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d025      	beq.n	8005c9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c52:	e022      	b.n	8005c9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c5c:	d11f      	bne.n	8005c9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c62:	e01c      	b.n	8005c9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d903      	bls.n	8005c72 <DMA_CheckFifoParam+0xb6>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d003      	beq.n	8005c78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c70:	e018      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
      break;
 8005c76:	e015      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00e      	beq.n	8005ca2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
      break;
 8005c88:	e00b      	b.n	8005ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8005c8a:	bf00      	nop
 8005c8c:	e00a      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e008      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005c92:	bf00      	nop
 8005c94:	e006      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005c96:	bf00      	nop
 8005c98:	e004      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e002      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c9e:	bf00      	nop
 8005ca0:	e000      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ca2:	bf00      	nop
    }
  } 
  
  return status; 
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b089      	sub	sp, #36	; 0x24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	e177      	b.n	8005fc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	f040 8166 	bne.w	8005fba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d005      	beq.n	8005d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d130      	bne.n	8005d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	2203      	movs	r2, #3
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43db      	mvns	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 0201 	and.w	r2, r3, #1
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d017      	beq.n	8005da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	2203      	movs	r2, #3
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	43db      	mvns	r3, r3
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d123      	bne.n	8005df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	08da      	lsrs	r2, r3, #3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3208      	adds	r2, #8
 8005db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	220f      	movs	r2, #15
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	08da      	lsrs	r2, r3, #3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3208      	adds	r2, #8
 8005df2:	69b9      	ldr	r1, [r7, #24]
 8005df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	2203      	movs	r2, #3
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 0203 	and.w	r2, r3, #3
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80c0 	beq.w	8005fba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	4b66      	ldr	r3, [pc, #408]	; (8005fd8 <HAL_GPIO_Init+0x324>)
 8005e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e42:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <HAL_GPIO_Init+0x324>)
 8005e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e48:	6453      	str	r3, [r2, #68]	; 0x44
 8005e4a:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <HAL_GPIO_Init+0x324>)
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e56:	4a61      	ldr	r2, [pc, #388]	; (8005fdc <HAL_GPIO_Init+0x328>)
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	220f      	movs	r2, #15
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	43db      	mvns	r3, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4013      	ands	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a58      	ldr	r2, [pc, #352]	; (8005fe0 <HAL_GPIO_Init+0x32c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d037      	beq.n	8005ef2 <HAL_GPIO_Init+0x23e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a57      	ldr	r2, [pc, #348]	; (8005fe4 <HAL_GPIO_Init+0x330>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d031      	beq.n	8005eee <HAL_GPIO_Init+0x23a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a56      	ldr	r2, [pc, #344]	; (8005fe8 <HAL_GPIO_Init+0x334>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d02b      	beq.n	8005eea <HAL_GPIO_Init+0x236>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a55      	ldr	r2, [pc, #340]	; (8005fec <HAL_GPIO_Init+0x338>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d025      	beq.n	8005ee6 <HAL_GPIO_Init+0x232>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a54      	ldr	r2, [pc, #336]	; (8005ff0 <HAL_GPIO_Init+0x33c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d01f      	beq.n	8005ee2 <HAL_GPIO_Init+0x22e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a53      	ldr	r2, [pc, #332]	; (8005ff4 <HAL_GPIO_Init+0x340>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d019      	beq.n	8005ede <HAL_GPIO_Init+0x22a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a52      	ldr	r2, [pc, #328]	; (8005ff8 <HAL_GPIO_Init+0x344>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d013      	beq.n	8005eda <HAL_GPIO_Init+0x226>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a51      	ldr	r2, [pc, #324]	; (8005ffc <HAL_GPIO_Init+0x348>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00d      	beq.n	8005ed6 <HAL_GPIO_Init+0x222>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a50      	ldr	r2, [pc, #320]	; (8006000 <HAL_GPIO_Init+0x34c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <HAL_GPIO_Init+0x21e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a4f      	ldr	r2, [pc, #316]	; (8006004 <HAL_GPIO_Init+0x350>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d101      	bne.n	8005ece <HAL_GPIO_Init+0x21a>
 8005eca:	2309      	movs	r3, #9
 8005ecc:	e012      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005ece:	230a      	movs	r3, #10
 8005ed0:	e010      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	e00e      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005ed6:	2307      	movs	r3, #7
 8005ed8:	e00c      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005eda:	2306      	movs	r3, #6
 8005edc:	e00a      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005ede:	2305      	movs	r3, #5
 8005ee0:	e008      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005ee2:	2304      	movs	r3, #4
 8005ee4:	e006      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e004      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e002      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <HAL_GPIO_Init+0x240>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	f002 0203 	and.w	r2, r2, #3
 8005efa:	0092      	lsls	r2, r2, #2
 8005efc:	4093      	lsls	r3, r2
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f04:	4935      	ldr	r1, [pc, #212]	; (8005fdc <HAL_GPIO_Init+0x328>)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	089b      	lsrs	r3, r3, #2
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f12:	4b3d      	ldr	r3, [pc, #244]	; (8006008 <HAL_GPIO_Init+0x354>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f36:	4a34      	ldr	r2, [pc, #208]	; (8006008 <HAL_GPIO_Init+0x354>)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f3c:	4b32      	ldr	r3, [pc, #200]	; (8006008 <HAL_GPIO_Init+0x354>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	43db      	mvns	r3, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f60:	4a29      	ldr	r2, [pc, #164]	; (8006008 <HAL_GPIO_Init+0x354>)
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f66:	4b28      	ldr	r3, [pc, #160]	; (8006008 <HAL_GPIO_Init+0x354>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4013      	ands	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f8a:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <HAL_GPIO_Init+0x354>)
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f90:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <HAL_GPIO_Init+0x354>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fb4:	4a14      	ldr	r2, [pc, #80]	; (8006008 <HAL_GPIO_Init+0x354>)
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	f67f ae84 	bls.w	8005cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	3724      	adds	r7, #36	; 0x24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	40013800 	.word	0x40013800
 8005fe0:	40020000 	.word	0x40020000
 8005fe4:	40020400 	.word	0x40020400
 8005fe8:	40020800 	.word	0x40020800
 8005fec:	40020c00 	.word	0x40020c00
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	40021400 	.word	0x40021400
 8005ff8:	40021800 	.word	0x40021800
 8005ffc:	40021c00 	.word	0x40021c00
 8006000:	40022000 	.word	0x40022000
 8006004:	40022400 	.word	0x40022400
 8006008:	40013c00 	.word	0x40013c00

0800600c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	887b      	ldrh	r3, [r7, #2]
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
 8006028:	e001      	b.n	800602e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800602e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	807b      	strh	r3, [r7, #2]
 8006048:	4613      	mov	r3, r2
 800604a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800604c:	787b      	ldrb	r3, [r7, #1]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006052:	887a      	ldrh	r2, [r7, #2]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006058:	e003      	b.n	8006062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800605a:	887b      	ldrh	r3, [r7, #2]
 800605c:	041a      	lsls	r2, r3, #16
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	619a      	str	r2, [r3, #24]
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e12b      	b.n	80062da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fe f9fa 	bl	8004490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	; 0x24
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0201 	bic.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060d4:	f002 fe1c 	bl	8008d10 <HAL_RCC_GetPCLK1Freq>
 80060d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	4a81      	ldr	r2, [pc, #516]	; (80062e4 <HAL_I2C_Init+0x274>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d807      	bhi.n	80060f4 <HAL_I2C_Init+0x84>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4a80      	ldr	r2, [pc, #512]	; (80062e8 <HAL_I2C_Init+0x278>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bf94      	ite	ls
 80060ec:	2301      	movls	r3, #1
 80060ee:	2300      	movhi	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	e006      	b.n	8006102 <HAL_I2C_Init+0x92>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4a7d      	ldr	r2, [pc, #500]	; (80062ec <HAL_I2C_Init+0x27c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	bf94      	ite	ls
 80060fc:	2301      	movls	r3, #1
 80060fe:	2300      	movhi	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e0e7      	b.n	80062da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4a78      	ldr	r2, [pc, #480]	; (80062f0 <HAL_I2C_Init+0x280>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	0c9b      	lsrs	r3, r3, #18
 8006114:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4a6a      	ldr	r2, [pc, #424]	; (80062e4 <HAL_I2C_Init+0x274>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d802      	bhi.n	8006144 <HAL_I2C_Init+0xd4>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3301      	adds	r3, #1
 8006142:	e009      	b.n	8006158 <HAL_I2C_Init+0xe8>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	4a69      	ldr	r2, [pc, #420]	; (80062f4 <HAL_I2C_Init+0x284>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	099b      	lsrs	r3, r3, #6
 8006156:	3301      	adds	r3, #1
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	430b      	orrs	r3, r1
 800615e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800616a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	495c      	ldr	r1, [pc, #368]	; (80062e4 <HAL_I2C_Init+0x274>)
 8006174:	428b      	cmp	r3, r1
 8006176:	d819      	bhi.n	80061ac <HAL_I2C_Init+0x13c>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1e59      	subs	r1, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	fbb1 f3f3 	udiv	r3, r1, r3
 8006186:	1c59      	adds	r1, r3, #1
 8006188:	f640 73fc 	movw	r3, #4092	; 0xffc
 800618c:	400b      	ands	r3, r1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_I2C_Init+0x138>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	1e59      	subs	r1, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	fbb1 f3f3 	udiv	r3, r1, r3
 80061a0:	3301      	adds	r3, #1
 80061a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a6:	e051      	b.n	800624c <HAL_I2C_Init+0x1dc>
 80061a8:	2304      	movs	r3, #4
 80061aa:	e04f      	b.n	800624c <HAL_I2C_Init+0x1dc>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d111      	bne.n	80061d8 <HAL_I2C_Init+0x168>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	1e58      	subs	r0, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6859      	ldr	r1, [r3, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	440b      	add	r3, r1
 80061c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061c6:	3301      	adds	r3, #1
 80061c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	e012      	b.n	80061fe <HAL_I2C_Init+0x18e>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1e58      	subs	r0, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	0099      	lsls	r1, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ee:	3301      	adds	r3, #1
 80061f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_I2C_Init+0x196>
 8006202:	2301      	movs	r3, #1
 8006204:	e022      	b.n	800624c <HAL_I2C_Init+0x1dc>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10e      	bne.n	800622c <HAL_I2C_Init+0x1bc>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1e58      	subs	r0, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6859      	ldr	r1, [r3, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	440b      	add	r3, r1
 800621c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006220:	3301      	adds	r3, #1
 8006222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	e00f      	b.n	800624c <HAL_I2C_Init+0x1dc>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1e58      	subs	r0, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6859      	ldr	r1, [r3, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	0099      	lsls	r1, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006242:	3301      	adds	r3, #1
 8006244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	6809      	ldr	r1, [r1, #0]
 8006250:	4313      	orrs	r3, r2
 8006252:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69da      	ldr	r2, [r3, #28]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800627a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6911      	ldr	r1, [r2, #16]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68d2      	ldr	r2, [r2, #12]
 8006286:	4311      	orrs	r1, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	430b      	orrs	r3, r1
 800628e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695a      	ldr	r2, [r3, #20]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	000186a0 	.word	0x000186a0
 80062e8:	001e847f 	.word	0x001e847f
 80062ec:	003d08ff 	.word	0x003d08ff
 80062f0:	431bde83 	.word	0x431bde83
 80062f4:	10624dd3 	.word	0x10624dd3

080062f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	607a      	str	r2, [r7, #4]
 8006302:	461a      	mov	r2, r3
 8006304:	460b      	mov	r3, r1
 8006306:	817b      	strh	r3, [r7, #10]
 8006308:	4613      	mov	r3, r2
 800630a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800630c:	f7fe fd10 	bl	8004d30 <HAL_GetTick>
 8006310:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b20      	cmp	r3, #32
 800631c:	f040 80e0 	bne.w	80064e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	2319      	movs	r3, #25
 8006326:	2201      	movs	r2, #1
 8006328:	4970      	ldr	r1, [pc, #448]	; (80064ec <HAL_I2C_Master_Transmit+0x1f4>)
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fcc8 	bl	8006cc0 <I2C_WaitOnFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	e0d3      	b.n	80064e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_I2C_Master_Transmit+0x50>
 8006344:	2302      	movs	r3, #2
 8006346:	e0cc      	b.n	80064e2 <HAL_I2C_Master_Transmit+0x1ea>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b01      	cmp	r3, #1
 800635c:	d007      	beq.n	800636e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0201 	orr.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800637c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2221      	movs	r2, #33	; 0x21
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2210      	movs	r2, #16
 800638a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	893a      	ldrh	r2, [r7, #8]
 800639e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a50      	ldr	r2, [pc, #320]	; (80064f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80063ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063b0:	8979      	ldrh	r1, [r7, #10]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fb32 	bl	8006a20 <I2C_MasterRequestWrite>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e08d      	b.n	80064e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80063dc:	e066      	b.n	80064ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	6a39      	ldr	r1, [r7, #32]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fd42 	bl	8006e6c <I2C_WaitOnTXEFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d107      	bne.n	8006406 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006404:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e06b      	b.n	80064e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b04      	cmp	r3, #4
 8006446:	d11b      	bne.n	8006480 <HAL_I2C_Master_Transmit+0x188>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	d017      	beq.n	8006480 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	6a39      	ldr	r1, [r7, #32]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fd32 	bl	8006eee <I2C_WaitOnBTFFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00d      	beq.n	80064ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	2b04      	cmp	r3, #4
 8006496:	d107      	bne.n	80064a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e01a      	b.n	80064e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d194      	bne.n	80063de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e000      	b.n	80064e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	00100002 	.word	0x00100002
 80064f0:	ffff0000 	.word	0xffff0000

080064f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08c      	sub	sp, #48	; 0x30
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	607a      	str	r2, [r7, #4]
 80064fe:	461a      	mov	r2, r3
 8006500:	460b      	mov	r3, r1
 8006502:	817b      	strh	r3, [r7, #10]
 8006504:	4613      	mov	r3, r2
 8006506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006508:	f7fe fc12 	bl	8004d30 <HAL_GetTick>
 800650c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b20      	cmp	r3, #32
 8006518:	f040 820b 	bne.w	8006932 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	2319      	movs	r3, #25
 8006522:	2201      	movs	r2, #1
 8006524:	497c      	ldr	r1, [pc, #496]	; (8006718 <HAL_I2C_Master_Receive+0x224>)
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fbca 	bl	8006cc0 <I2C_WaitOnFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006532:	2302      	movs	r3, #2
 8006534:	e1fe      	b.n	8006934 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_I2C_Master_Receive+0x50>
 8006540:	2302      	movs	r3, #2
 8006542:	e1f7      	b.n	8006934 <HAL_I2C_Master_Receive+0x440>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b01      	cmp	r3, #1
 8006558:	d007      	beq.n	800656a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0201 	orr.w	r2, r2, #1
 8006568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2222      	movs	r2, #34	; 0x22
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2210      	movs	r2, #16
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	893a      	ldrh	r2, [r7, #8]
 800659a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4a5c      	ldr	r2, [pc, #368]	; (800671c <HAL_I2C_Master_Receive+0x228>)
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80065ac:	8979      	ldrh	r1, [r7, #10]
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fab6 	bl	8006b24 <I2C_MasterRequestRead>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e1b8      	b.n	8006934 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d113      	bne.n	80065f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ca:	2300      	movs	r3, #0
 80065cc:	623b      	str	r3, [r7, #32]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	623b      	str	r3, [r7, #32]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	623b      	str	r3, [r7, #32]
 80065de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e18c      	b.n	800690c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d11b      	bne.n	8006632 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	61fb      	str	r3, [r7, #28]
 800661e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e16c      	b.n	800690c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006636:	2b02      	cmp	r3, #2
 8006638:	d11b      	bne.n	8006672 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006648:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800665a:	2300      	movs	r3, #0
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	e14c      	b.n	800690c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006680:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006698:	e138      	b.n	800690c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669e:	2b03      	cmp	r3, #3
 80066a0:	f200 80f1 	bhi.w	8006886 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d123      	bne.n	80066f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fc5d 	bl	8006f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e139      	b.n	8006934 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066f2:	e10b      	b.n	800690c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d14e      	bne.n	800679a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	2200      	movs	r2, #0
 8006704:	4906      	ldr	r1, [pc, #24]	; (8006720 <HAL_I2C_Master_Receive+0x22c>)
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fada 	bl	8006cc0 <I2C_WaitOnFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d008      	beq.n	8006724 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e10e      	b.n	8006934 <HAL_I2C_Master_Receive+0x440>
 8006716:	bf00      	nop
 8006718:	00100002 	.word	0x00100002
 800671c:	ffff0000 	.word	0xffff0000
 8006720:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006798:	e0b8      	b.n	800690c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	2200      	movs	r2, #0
 80067a2:	4966      	ldr	r1, [pc, #408]	; (800693c <HAL_I2C_Master_Receive+0x448>)
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fa8b 	bl	8006cc0 <I2C_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0bf      	b.n	8006934 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	2200      	movs	r2, #0
 80067fe:	494f      	ldr	r1, [pc, #316]	; (800693c <HAL_I2C_Master_Receive+0x448>)
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 fa5d 	bl	8006cc0 <I2C_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e091      	b.n	8006934 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006884:	e042      	b.n	800690c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fb70 	bl	8006f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e04c      	b.n	8006934 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d118      	bne.n	800690c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	f47f aec2 	bne.w	800669a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006932:	2302      	movs	r3, #2
  }
}
 8006934:	4618      	mov	r0, r3
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	00010004 	.word	0x00010004

08006940 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b20      	cmp	r3, #32
 8006958:	d158      	bne.n	8006a0c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_I2C_Slave_Receive_IT+0x26>
 8006960:	88fb      	ldrh	r3, [r7, #6]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e051      	b.n	8006a0e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_I2C_Slave_Receive_IT+0x38>
 8006974:	2302      	movs	r3, #2
 8006976:	e04a      	b.n	8006a0e <HAL_I2C_Slave_Receive_IT+0xce>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b01      	cmp	r3, #1
 800698c:	d007      	beq.n	800699e <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2222      	movs	r2, #34	; 0x22
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	88fa      	ldrh	r2, [r7, #6]
 80069ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a0f      	ldr	r2, [pc, #60]	; (8006a1c <HAL_I2C_Slave_Receive_IT+0xdc>)
 80069de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069ee:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006a06:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8006a0c:	2302      	movs	r3, #2
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	ffff0000 	.word	0xffff0000

08006a20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af02      	add	r7, sp, #8
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d006      	beq.n	8006a4a <I2C_MasterRequestWrite+0x2a>
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d003      	beq.n	8006a4a <I2C_MasterRequestWrite+0x2a>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a48:	d108      	bne.n	8006a5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e00b      	b.n	8006a74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	2b12      	cmp	r3, #18
 8006a62:	d107      	bne.n	8006a74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f91d 	bl	8006cc0 <I2C_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00d      	beq.n	8006aa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9a:	d103      	bne.n	8006aa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e035      	b.n	8006b14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ab0:	d108      	bne.n	8006ac4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ab2:	897b      	ldrh	r3, [r7, #10]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ac0:	611a      	str	r2, [r3, #16]
 8006ac2:	e01b      	b.n	8006afc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ac4:	897b      	ldrh	r3, [r7, #10]
 8006ac6:	11db      	asrs	r3, r3, #7
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f003 0306 	and.w	r3, r3, #6
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f063 030f 	orn	r3, r3, #15
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	490e      	ldr	r1, [pc, #56]	; (8006b1c <I2C_MasterRequestWrite+0xfc>)
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 f943 	bl	8006d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e010      	b.n	8006b14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006af2:	897b      	ldrh	r3, [r7, #10]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	4907      	ldr	r1, [pc, #28]	; (8006b20 <I2C_MasterRequestWrite+0x100>)
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 f933 	bl	8006d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	00010008 	.word	0x00010008
 8006b20:	00010002 	.word	0x00010002

08006b24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	460b      	mov	r3, r1
 8006b32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d006      	beq.n	8006b5e <I2C_MasterRequestRead+0x3a>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d003      	beq.n	8006b5e <I2C_MasterRequestRead+0x3a>
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b5c:	d108      	bne.n	8006b70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	e00b      	b.n	8006b88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	2b11      	cmp	r3, #17
 8006b76:	d107      	bne.n	8006b88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f893 	bl	8006cc0 <I2C_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bae:	d103      	bne.n	8006bb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e079      	b.n	8006cb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc4:	d108      	bne.n	8006bd8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bc6:	897b      	ldrh	r3, [r7, #10]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	611a      	str	r2, [r3, #16]
 8006bd6:	e05f      	b.n	8006c98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006bd8:	897b      	ldrh	r3, [r7, #10]
 8006bda:	11db      	asrs	r3, r3, #7
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 0306 	and.w	r3, r3, #6
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	f063 030f 	orn	r3, r3, #15
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4930      	ldr	r1, [pc, #192]	; (8006cb8 <I2C_MasterRequestRead+0x194>)
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f8b9 	bl	8006d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e054      	b.n	8006cb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c06:	897b      	ldrh	r3, [r7, #10]
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4929      	ldr	r1, [pc, #164]	; (8006cbc <I2C_MasterRequestRead+0x198>)
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f8a9 	bl	8006d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e044      	b.n	8006cb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f831 	bl	8006cc0 <I2C_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00d      	beq.n	8006c80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c72:	d103      	bne.n	8006c7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e017      	b.n	8006cb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006c80:	897b      	ldrh	r3, [r7, #10]
 8006c82:	11db      	asrs	r3, r3, #7
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	f003 0306 	and.w	r3, r3, #6
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f063 030e 	orn	r3, r3, #14
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4907      	ldr	r1, [pc, #28]	; (8006cbc <I2C_MasterRequestRead+0x198>)
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f865 	bl	8006d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	00010008 	.word	0x00010008
 8006cbc:	00010002 	.word	0x00010002

08006cc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cd0:	e025      	b.n	8006d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d021      	beq.n	8006d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cda:	f7fe f829 	bl	8004d30 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d116      	bne.n	8006d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	f043 0220 	orr.w	r2, r3, #32
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e023      	b.n	8006d66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	0c1b      	lsrs	r3, r3, #16
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d10d      	bne.n	8006d44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	43da      	mvns	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4013      	ands	r3, r2
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bf0c      	ite	eq
 8006d3a:	2301      	moveq	r3, #1
 8006d3c:	2300      	movne	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	e00c      	b.n	8006d5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	43da      	mvns	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bf0c      	ite	eq
 8006d56:	2301      	moveq	r3, #1
 8006d58:	2300      	movne	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	79fb      	ldrb	r3, [r7, #7]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d0b6      	beq.n	8006cd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
 8006d7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d7c:	e051      	b.n	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d8c:	d123      	bne.n	8006dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006da6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f043 0204 	orr.w	r2, r3, #4
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e046      	b.n	8006e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d021      	beq.n	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dde:	f7fd ffa7 	bl	8004d30 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d302      	bcc.n	8006df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d116      	bne.n	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f043 0220 	orr.w	r2, r3, #32
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e020      	b.n	8006e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d10c      	bne.n	8006e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	43da      	mvns	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4013      	ands	r3, r2
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bf14      	ite	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	2300      	moveq	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	e00b      	b.n	8006e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	43da      	mvns	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	4013      	ands	r3, r2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	bf14      	ite	ne
 8006e58:	2301      	movne	r3, #1
 8006e5a:	2300      	moveq	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d18d      	bne.n	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e78:	e02d      	b.n	8006ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 f8ce 	bl	800701c <I2C_IsAcknowledgeFailed>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e02d      	b.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d021      	beq.n	8006ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e92:	f7fd ff4d 	bl	8004d30 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d116      	bne.n	8006ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f043 0220 	orr.w	r2, r3, #32
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e007      	b.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee0:	2b80      	cmp	r3, #128	; 0x80
 8006ee2:	d1ca      	bne.n	8006e7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006efa:	e02d      	b.n	8006f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 f88d 	bl	800701c <I2C_IsAcknowledgeFailed>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e02d      	b.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f12:	d021      	beq.n	8006f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f14:	f7fd ff0c 	bl	8004d30 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d302      	bcc.n	8006f2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d116      	bne.n	8006f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	f043 0220 	orr.w	r2, r3, #32
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e007      	b.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d1ca      	bne.n	8006efc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f7c:	e042      	b.n	8007004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d119      	bne.n	8006fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0210 	mvn.w	r2, #16
 8006f94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e029      	b.n	8007014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc0:	f7fd feb6 	bl	8004d30 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d302      	bcc.n	8006fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d116      	bne.n	8007004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	f043 0220 	orr.w	r2, r3, #32
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e007      	b.n	8007014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d1b5      	bne.n	8006f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800702e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007032:	d11b      	bne.n	800706c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800703c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	f043 0204 	orr.w	r2, r3, #4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e000      	b.n	800706e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b20      	cmp	r3, #32
 800708e:	d129      	bne.n	80070e4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2224      	movs	r2, #36	; 0x24
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0210 	bic.w	r2, r2, #16
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	e000      	b.n	80070e6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80070e4:	2302      	movs	r3, #2
  }
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b20      	cmp	r3, #32
 800710a:	d12a      	bne.n	8007162 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2224      	movs	r2, #36	; 0x24
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0201 	bic.w	r2, r2, #1
 8007122:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800712c:	89fb      	ldrh	r3, [r7, #14]
 800712e:	f023 030f 	bic.w	r3, r3, #15
 8007132:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	b29a      	uxth	r2, r3
 8007138:	89fb      	ldrh	r3, [r7, #14]
 800713a:	4313      	orrs	r3, r2
 800713c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	89fa      	ldrh	r2, [r7, #14]
 8007144:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0201 	orr.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	e000      	b.n	8007164 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007162:	2302      	movs	r3, #2
  }
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007172:	b08f      	sub	sp, #60	; 0x3c
 8007174:	af0a      	add	r7, sp, #40	; 0x28
 8007176:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e10f      	b.n	80073a2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f00c f9b7 	bl	8013510 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2203      	movs	r2, #3
 80071a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f005 fbf0 	bl	800c9a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	687e      	ldr	r6, [r7, #4]
 80071ce:	466d      	mov	r5, sp
 80071d0:	f106 0410 	add.w	r4, r6, #16
 80071d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80071e4:	1d33      	adds	r3, r6, #4
 80071e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071e8:	6838      	ldr	r0, [r7, #0]
 80071ea:	f005 fac7 	bl	800c77c <USB_CoreInit>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0d0      	b.n	80073a2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f005 fbde 	bl	800c9c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]
 8007210:	e04a      	b.n	80072a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007212:	7bfa      	ldrb	r2, [r7, #15]
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	333d      	adds	r3, #61	; 0x3d
 8007222:	2201      	movs	r2, #1
 8007224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007226:	7bfa      	ldrb	r2, [r7, #15]
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	333c      	adds	r3, #60	; 0x3c
 8007236:	7bfa      	ldrb	r2, [r7, #15]
 8007238:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800723a:	7bfa      	ldrb	r2, [r7, #15]
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	b298      	uxth	r0, r3
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	3342      	adds	r3, #66	; 0x42
 800724e:	4602      	mov	r2, r0
 8007250:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007252:	7bfa      	ldrb	r2, [r7, #15]
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4613      	mov	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	333f      	adds	r3, #63	; 0x3f
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007266:	7bfa      	ldrb	r2, [r7, #15]
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	3344      	adds	r3, #68	; 0x44
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800727a:	7bfa      	ldrb	r2, [r7, #15]
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	1a9b      	subs	r3, r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	3348      	adds	r3, #72	; 0x48
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800728e:	7bfa      	ldrb	r2, [r7, #15]
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	3350      	adds	r3, #80	; 0x50
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	3301      	adds	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
 80072a8:	7bfa      	ldrb	r2, [r7, #15]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d3af      	bcc.n	8007212 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]
 80072b6:	e044      	b.n	8007342 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80072b8:	7bfa      	ldrb	r2, [r7, #15]
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	4613      	mov	r3, r2
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	1a9b      	subs	r3, r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80072ce:	7bfa      	ldrb	r2, [r7, #15]
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80072e0:	7bfa      	ldrb	r2, [r7, #15]
 80072e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072e4:	7bfa      	ldrb	r2, [r7, #15]
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	4613      	mov	r3, r2
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	1a9b      	subs	r3, r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80072fa:	7bfa      	ldrb	r2, [r7, #15]
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	4613      	mov	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007310:	7bfa      	ldrb	r2, [r7, #15]
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	4613      	mov	r3, r2
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007326:	7bfa      	ldrb	r2, [r7, #15]
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	3301      	adds	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
 8007342:	7bfa      	ldrb	r2, [r7, #15]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d3b5      	bcc.n	80072b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	603b      	str	r3, [r7, #0]
 8007352:	687e      	ldr	r6, [r7, #4]
 8007354:	466d      	mov	r5, sp
 8007356:	f106 0410 	add.w	r4, r6, #16
 800735a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800735c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800735e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007366:	e885 0003 	stmia.w	r5, {r0, r1}
 800736a:	1d33      	adds	r3, r6, #4
 800736c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800736e:	6838      	ldr	r0, [r7, #0]
 8007370:	f005 fb76 	bl	800ca60 <USB_DevInit>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e00d      	b.n	80073a2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f006 fbf2 	bl	800db84 <USB_DevDisconnect>

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_PCD_Start+0x1c>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e020      	b.n	8007408 <HAL_PCD_Start+0x5e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d109      	bne.n	80073ea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d005      	beq.n	80073ea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f005 fac8 	bl	800c984 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f006 fba2 	bl	800db42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007410:	b590      	push	{r4, r7, lr}
 8007412:	b08d      	sub	sp, #52	; 0x34
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4618      	mov	r0, r3
 8007428:	f006 fc60 	bl	800dcec <USB_GetMode>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 839d 	bne.w	8007b6e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f006 fbc4 	bl	800dbc6 <USB_ReadInterrupts>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8393 	beq.w	8007b6c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f006 fbbb 	bl	800dbc6 <USB_ReadInterrupts>
 8007450:	4603      	mov	r3, r0
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b02      	cmp	r3, #2
 8007458:	d107      	bne.n	800746a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695a      	ldr	r2, [r3, #20]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f002 0202 	and.w	r2, r2, #2
 8007468:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4618      	mov	r0, r3
 8007470:	f006 fba9 	bl	800dbc6 <USB_ReadInterrupts>
 8007474:	4603      	mov	r3, r0
 8007476:	f003 0310 	and.w	r3, r3, #16
 800747a:	2b10      	cmp	r3, #16
 800747c:	d161      	bne.n	8007542 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699a      	ldr	r2, [r3, #24]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0210 	bic.w	r2, r2, #16
 800748c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f003 020f 	and.w	r2, r3, #15
 800749a:	4613      	mov	r3, r2
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	1a9b      	subs	r3, r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4413      	add	r3, r2
 80074aa:	3304      	adds	r3, #4
 80074ac:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	0c5b      	lsrs	r3, r3, #17
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d124      	bne.n	8007504 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80074c0:	4013      	ands	r3, r2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d035      	beq.n	8007532 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	091b      	lsrs	r3, r3, #4
 80074ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80074d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	461a      	mov	r2, r3
 80074d8:	6a38      	ldr	r0, [r7, #32]
 80074da:	f006 f9e0 	bl	800d89e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	091b      	lsrs	r3, r3, #4
 80074e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ea:	441a      	add	r2, r3
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	699a      	ldr	r2, [r3, #24]
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	091b      	lsrs	r3, r3, #4
 80074f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074fc:	441a      	add	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	619a      	str	r2, [r3, #24]
 8007502:	e016      	b.n	8007532 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	0c5b      	lsrs	r3, r3, #17
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	2b06      	cmp	r3, #6
 800750e:	d110      	bne.n	8007532 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007516:	2208      	movs	r2, #8
 8007518:	4619      	mov	r1, r3
 800751a:	6a38      	ldr	r0, [r7, #32]
 800751c:	f006 f9bf 	bl	800d89e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	699a      	ldr	r2, [r3, #24]
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	091b      	lsrs	r3, r3, #4
 8007528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800752c:	441a      	add	r2, r3
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0210 	orr.w	r2, r2, #16
 8007540:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f006 fb3d 	bl	800dbc6 <USB_ReadInterrupts>
 800754c:	4603      	mov	r3, r0
 800754e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007552:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007556:	d16e      	bne.n	8007636 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	f006 fb43 	bl	800dbec <USB_ReadDevAllOutEpInterrupt>
 8007566:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007568:	e062      	b.n	8007630 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d057      	beq.n	8007624 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f006 fb68 	bl	800dc54 <USB_ReadDevOutEPInterrupt>
 8007584:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00c      	beq.n	80075aa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	461a      	mov	r2, r3
 800759e:	2301      	movs	r3, #1
 80075a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80075a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fdb1 	bl	800810c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00c      	beq.n	80075ce <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	461a      	mov	r2, r3
 80075c2:	2308      	movs	r3, #8
 80075c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80075c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 feab 	bl	8008324 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f003 0310 	and.w	r3, r3, #16
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e4:	461a      	mov	r2, r3
 80075e6:	2310      	movs	r3, #16
 80075e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	461a      	mov	r2, r3
 8007602:	2320      	movs	r3, #32
 8007604:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d009      	beq.n	8007624 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761c:	461a      	mov	r2, r3
 800761e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007622:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	3301      	adds	r3, #1
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	085b      	lsrs	r3, r3, #1
 800762e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d199      	bne.n	800756a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f006 fac3 	bl	800dbc6 <USB_ReadInterrupts>
 8007640:	4603      	mov	r3, r0
 8007642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007646:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800764a:	f040 80c0 	bne.w	80077ce <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f006 fae4 	bl	800dc20 <USB_ReadDevAllInEpInterrupt>
 8007658:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800765e:	e0b2      	b.n	80077c6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80a7 	beq.w	80077ba <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f006 fb0a 	bl	800dc90 <USB_ReadDevInEPInterrupt>
 800767c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d057      	beq.n	8007738 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	2201      	movs	r2, #1
 8007690:	fa02 f303 	lsl.w	r3, r2, r3
 8007694:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	43db      	mvns	r3, r3
 80076a2:	69f9      	ldr	r1, [r7, #28]
 80076a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a8:	4013      	ands	r3, r2
 80076aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b8:	461a      	mov	r2, r3
 80076ba:	2301      	movs	r3, #1
 80076bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d132      	bne.n	800772c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ca:	4613      	mov	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	1a9b      	subs	r3, r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	440b      	add	r3, r1
 80076d4:	3348      	adds	r3, #72	; 0x48
 80076d6:	6819      	ldr	r1, [r3, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076dc:	4613      	mov	r3, r2
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	1a9b      	subs	r3, r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4403      	add	r3, r0
 80076e6:	3344      	adds	r3, #68	; 0x44
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4419      	add	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	4613      	mov	r3, r2
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	1a9b      	subs	r3, r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4403      	add	r3, r0
 80076fa:	3348      	adds	r3, #72	; 0x48
 80076fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d113      	bne.n	800772c <HAL_PCD_IRQHandler+0x31c>
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	440b      	add	r3, r1
 8007712:	3350      	adds	r3, #80	; 0x50
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d108      	bne.n	800772c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007724:	461a      	mov	r2, r3
 8007726:	2101      	movs	r1, #1
 8007728:	f006 fb12 	bl	800dd50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	b2db      	uxtb	r3, r3
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f00b ff6d 	bl	8013612 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d008      	beq.n	8007754 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774e:	461a      	mov	r2, r3
 8007750:	2308      	movs	r3, #8
 8007752:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f003 0310 	and.w	r3, r3, #16
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776a:	461a      	mov	r2, r3
 800776c:	2310      	movs	r3, #16
 800776e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007776:	2b00      	cmp	r3, #0
 8007778:	d008      	beq.n	800778c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	461a      	mov	r2, r3
 8007788:	2340      	movs	r3, #64	; 0x40
 800778a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d008      	beq.n	80077a8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a2:	461a      	mov	r2, r3
 80077a4:	2302      	movs	r3, #2
 80077a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80077b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fc1b 	bl	8007ff0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	3301      	adds	r3, #1
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f47f af49 	bne.w	8007660 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f006 f9f7 	bl	800dbc6 <USB_ReadInterrupts>
 80077d8:	4603      	mov	r3, r0
 80077da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e2:	d122      	bne.n	800782a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f2:	f023 0301 	bic.w	r3, r3, #1
 80077f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d108      	bne.n	8007814 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800780a:	2100      	movs	r1, #0
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fe27 	bl	8008460 <HAL_PCDEx_LPM_Callback>
 8007812:	e002      	b.n	800781a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f00b ff73 	bl	8013700 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695a      	ldr	r2, [r3, #20]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4618      	mov	r0, r3
 8007830:	f006 f9c9 	bl	800dbc6 <USB_ReadInterrupts>
 8007834:	4603      	mov	r3, r0
 8007836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800783a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800783e:	d112      	bne.n	8007866 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b01      	cmp	r3, #1
 800784e:	d102      	bne.n	8007856 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f00b ff2f 	bl	80136b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695a      	ldr	r2, [r3, #20]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007864:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f006 f9ab 	bl	800dbc6 <USB_ReadInterrupts>
 8007870:	4603      	mov	r3, r0
 8007872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787a:	f040 80c7 	bne.w	8007a0c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788c:	f023 0301 	bic.w	r3, r3, #1
 8007890:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2110      	movs	r1, #16
 8007898:	4618      	mov	r0, r3
 800789a:	f005 fa45 	bl	800cd28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800789e:	2300      	movs	r3, #0
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a2:	e056      	b.n	8007952 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	461a      	mov	r2, r3
 80078b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078d6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007904:	461a      	mov	r2, r3
 8007906:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800790a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800791c:	0151      	lsls	r1, r2, #5
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	440a      	add	r2, r1
 8007922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800792a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	440a      	add	r2, r1
 8007942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800794a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	3301      	adds	r3, #1
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007958:	429a      	cmp	r2, r3
 800795a:	d3a3      	bcc.n	80078a4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800796a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800796e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	2b00      	cmp	r3, #0
 8007976:	d016      	beq.n	80079a6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007988:	f043 030b 	orr.w	r3, r3, #11
 800798c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800799e:	f043 030b 	orr.w	r3, r3, #11
 80079a2:	6453      	str	r3, [r2, #68]	; 0x44
 80079a4:	e015      	b.n	80079d2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80079bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079cc:	f043 030b 	orr.w	r3, r3, #11
 80079d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079f6:	461a      	mov	r2, r3
 80079f8:	f006 f9aa 	bl	800dd50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695a      	ldr	r2, [r3, #20]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f006 f8d8 	bl	800dbc6 <USB_ReadInterrupts>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a20:	d124      	bne.n	8007a6c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f006 f96e 	bl	800dd08 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f005 f9d6 	bl	800cde2 <USB_GetDevSpeed>
 8007a36:	4603      	mov	r3, r0
 8007a38:	461a      	mov	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681c      	ldr	r4, [r3, #0]
 8007a42:	f001 f959 	bl	8008cf8 <HAL_RCC_GetHCLKFreq>
 8007a46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	4620      	mov	r0, r4
 8007a52:	f004 fef5 	bl	800c840 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f00b fe03 	bl	8013662 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	695a      	ldr	r2, [r3, #20]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f006 f8a8 	bl	800dbc6 <USB_ReadInterrupts>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d10a      	bne.n	8007a96 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f00b fde0 	bl	8013646 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695a      	ldr	r2, [r3, #20]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f002 0208 	and.w	r2, r2, #8
 8007a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f006 f893 	bl	800dbc6 <USB_ReadInterrupts>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aaa:	d10f      	bne.n	8007acc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f00b fe42 	bl	8013740 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695a      	ldr	r2, [r3, #20]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f006 f878 	bl	800dbc6 <USB_ReadInterrupts>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ae0:	d10f      	bne.n	8007b02 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f00b fe15 	bl	801371c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695a      	ldr	r2, [r3, #20]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f006 f85d 	bl	800dbc6 <USB_ReadInterrupts>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b16:	d10a      	bne.n	8007b2e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f00b fe23 	bl	8013764 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695a      	ldr	r2, [r3, #20]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f006 f847 	bl	800dbc6 <USB_ReadInterrupts>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d115      	bne.n	8007b6e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f00b fe13 	bl	8013780 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6859      	ldr	r1, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
 8007b6a:	e000      	b.n	8007b6e <HAL_PCD_IRQHandler+0x75e>
      return;
 8007b6c:	bf00      	nop
    }
  }
}
 8007b6e:	3734      	adds	r7, #52	; 0x34
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd90      	pop	{r4, r7, pc}

08007b74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_PCD_SetAddress+0x1a>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e013      	b.n	8007bb6 <HAL_PCD_SetAddress+0x42>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f005 ffa5 	bl	800daf6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	4608      	mov	r0, r1
 8007bc8:	4611      	mov	r1, r2
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4603      	mov	r3, r0
 8007bce:	70fb      	strb	r3, [r7, #3]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	803b      	strh	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	da0f      	bge.n	8007c04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	f003 020f 	and.w	r2, r3, #15
 8007bea:	4613      	mov	r3, r2
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	3338      	adds	r3, #56	; 0x38
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	705a      	strb	r2, [r3, #1]
 8007c02:	e00f      	b.n	8007c24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	f003 020f 	and.w	r2, r3, #15
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	00db      	lsls	r3, r3, #3
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	4413      	add	r3, r2
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007c30:	883a      	ldrh	r2, [r7, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	78ba      	ldrb	r2, [r7, #2]
 8007c3a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c4e:	78bb      	ldrb	r3, [r7, #2]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d102      	bne.n	8007c5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_PCD_EP_Open+0xaa>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e00e      	b.n	8007c86 <HAL_PCD_EP_Open+0xc8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68f9      	ldr	r1, [r7, #12]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f005 f8d8 	bl	800ce2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007c84:	7afb      	ldrb	r3, [r7, #11]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da0f      	bge.n	8007cc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	f003 020f 	and.w	r2, r3, #15
 8007ca8:	4613      	mov	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	3338      	adds	r3, #56	; 0x38
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	705a      	strb	r2, [r3, #1]
 8007cc0:	e00f      	b.n	8007ce2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	f003 020f 	and.w	r2, r3, #15
 8007cc8:	4613      	mov	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3304      	adds	r3, #4
 8007cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_PCD_EP_Close+0x6e>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e00e      	b.n	8007d1a <HAL_PCD_EP_Close+0x8c>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68f9      	ldr	r1, [r7, #12]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f005 f916 	bl	800cf3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	f003 020f 	and.w	r2, r3, #15
 8007d38:	4613      	mov	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4413      	add	r3, r2
 8007d48:	3304      	adds	r3, #4
 8007d4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2200      	movs	r2, #0
 8007d62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d64:	7afb      	ldrb	r3, [r7, #11]
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d102      	bne.n	8007d7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d7e:	7afb      	ldrb	r3, [r7, #11]
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d109      	bne.n	8007d9c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	461a      	mov	r2, r3
 8007d94:	6979      	ldr	r1, [r7, #20]
 8007d96:	f005 fbf1 	bl	800d57c <USB_EP0StartXfer>
 8007d9a:	e008      	b.n	8007dae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	461a      	mov	r2, r3
 8007da8:	6979      	ldr	r1, [r7, #20]
 8007daa:	f005 f9a3 	bl	800d0f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	f003 020f 	and.w	r2, r3, #15
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007dda:	681b      	ldr	r3, [r3, #0]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	607a      	str	r2, [r7, #4]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	460b      	mov	r3, r1
 8007df6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	f003 020f 	and.w	r2, r3, #15
 8007dfe:	4613      	mov	r3, r2
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	1a9b      	subs	r3, r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	3338      	adds	r3, #56	; 0x38
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2201      	movs	r2, #1
 8007e26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d102      	bne.n	8007e42 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e42:	7afb      	ldrb	r3, [r7, #11]
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	461a      	mov	r2, r3
 8007e58:	6979      	ldr	r1, [r7, #20]
 8007e5a:	f005 fb8f 	bl	800d57c <USB_EP0StartXfer>
 8007e5e:	e008      	b.n	8007e72 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6979      	ldr	r1, [r7, #20]
 8007e6e:	f005 f941 	bl	800d0f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	f003 020f 	and.w	r2, r3, #15
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d901      	bls.n	8007e9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e050      	b.n	8007f3c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	da0f      	bge.n	8007ec2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	f003 020f 	and.w	r2, r3, #15
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	3338      	adds	r3, #56	; 0x38
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	705a      	strb	r2, [r3, #1]
 8007ec0:	e00d      	b.n	8007ede <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ec2:	78fa      	ldrb	r2, [r7, #3]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	1a9b      	subs	r3, r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d101      	bne.n	8007efe <HAL_PCD_EP_SetStall+0x82>
 8007efa:	2302      	movs	r3, #2
 8007efc:	e01e      	b.n	8007f3c <HAL_PCD_EP_SetStall+0xc0>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f005 fd1e 	bl	800d94e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	b2d9      	uxtb	r1, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f005 ff0f 	bl	800dd50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	f003 020f 	and.w	r2, r3, #15
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d901      	bls.n	8007f62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e042      	b.n	8007fe8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da0f      	bge.n	8007f8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	f003 020f 	and.w	r2, r3, #15
 8007f70:	4613      	mov	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	3338      	adds	r3, #56	; 0x38
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3304      	adds	r3, #4
 8007f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	705a      	strb	r2, [r3, #1]
 8007f88:	e00f      	b.n	8007faa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	4613      	mov	r3, r2
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	1a9b      	subs	r3, r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_PCD_EP_ClrStall+0x86>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e00e      	b.n	8007fe8 <HAL_PCD_EP_ClrStall+0xa4>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68f9      	ldr	r1, [r7, #12]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f005 fd26 	bl	800da2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	; 0x28
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	4613      	mov	r3, r2
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	3338      	adds	r3, #56	; 0x38
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	4413      	add	r3, r2
 8008014:	3304      	adds	r3, #4
 8008016:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	699a      	ldr	r2, [r3, #24]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	429a      	cmp	r2, r3
 8008022:	d901      	bls.n	8008028 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e06c      	b.n	8008102 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	695a      	ldr	r2, [r3, #20]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	69fa      	ldr	r2, [r7, #28]
 800803a:	429a      	cmp	r2, r3
 800803c:	d902      	bls.n	8008044 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	3303      	adds	r3, #3
 8008048:	089b      	lsrs	r3, r3, #2
 800804a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800804c:	e02b      	b.n	80080a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	695a      	ldr	r2, [r3, #20]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	429a      	cmp	r2, r3
 8008062:	d902      	bls.n	800806a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	3303      	adds	r3, #3
 800806e:	089b      	lsrs	r3, r3, #2
 8008070:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68d9      	ldr	r1, [r3, #12]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	b2da      	uxtb	r2, r3
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008082:	b2db      	uxtb	r3, r3
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	4603      	mov	r3, r0
 8008088:	6978      	ldr	r0, [r7, #20]
 800808a:	f005 fbca 	bl	800d822 <USB_WritePacket>

    ep->xfer_buff  += len;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	441a      	add	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d809      	bhi.n	80080d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	699a      	ldr	r2, [r3, #24]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d203      	bcs.n	80080d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1be      	bne.n	800804e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	695a      	ldr	r2, [r3, #20]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d811      	bhi.n	8008100 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	2201      	movs	r2, #1
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	6939      	ldr	r1, [r7, #16]
 80080f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080fc:	4013      	ands	r3, r2
 80080fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	333c      	adds	r3, #60	; 0x3c
 8008124:	3304      	adds	r3, #4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	2b01      	cmp	r3, #1
 8008140:	f040 80a0 	bne.w	8008284 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d015      	beq.n	800817a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4a72      	ldr	r2, [pc, #456]	; (800831c <PCD_EP_OutXfrComplete_int+0x210>)
 8008152:	4293      	cmp	r3, r2
 8008154:	f240 80dd 	bls.w	8008312 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 80d7 	beq.w	8008312 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008170:	461a      	mov	r2, r3
 8008172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008176:	6093      	str	r3, [r2, #8]
 8008178:	e0cb      	b.n	8008312 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	d009      	beq.n	8008198 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008190:	461a      	mov	r2, r3
 8008192:	2320      	movs	r3, #32
 8008194:	6093      	str	r3, [r2, #8]
 8008196:	e0bc      	b.n	8008312 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f040 80b7 	bne.w	8008312 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a5d      	ldr	r2, [pc, #372]	; (800831c <PCD_EP_OutXfrComplete_int+0x210>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d90f      	bls.n	80081cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c2:	461a      	mov	r2, r3
 80081c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081c8:	6093      	str	r3, [r2, #8]
 80081ca:	e0a2      	b.n	8008312 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	4613      	mov	r3, r2
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	440b      	add	r3, r1
 80081da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80081de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	0159      	lsls	r1, r3, #5
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	440b      	add	r3, r1
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80081f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4403      	add	r3, r0
 8008202:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008206:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4613      	mov	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800821a:	6819      	ldr	r1, [r3, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4613      	mov	r3, r2
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4403      	add	r3, r0
 800822a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4419      	add	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4403      	add	r3, r0
 8008240:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008244:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d114      	bne.n	8008276 <PCD_EP_OutXfrComplete_int+0x16a>
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d108      	bne.n	8008276 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800826e:	461a      	mov	r2, r3
 8008270:	2101      	movs	r1, #1
 8008272:	f005 fd6d 	bl	800dd50 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	b2db      	uxtb	r3, r3
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f00b f9ad 	bl	80135dc <HAL_PCD_DataOutStageCallback>
 8008282:	e046      	b.n	8008312 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4a26      	ldr	r2, [pc, #152]	; (8008320 <PCD_EP_OutXfrComplete_int+0x214>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d124      	bne.n	80082d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a2:	461a      	mov	r2, r3
 80082a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a8:	6093      	str	r3, [r2, #8]
 80082aa:	e032      	b.n	8008312 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d008      	beq.n	80082c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c2:	461a      	mov	r2, r3
 80082c4:	2320      	movs	r3, #32
 80082c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f00b f984 	bl	80135dc <HAL_PCD_DataOutStageCallback>
 80082d4:	e01d      	b.n	8008312 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d114      	bne.n	8008306 <PCD_EP_OutXfrComplete_int+0x1fa>
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4613      	mov	r3, r2
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d108      	bne.n	8008306 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6818      	ldr	r0, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80082fe:	461a      	mov	r2, r3
 8008300:	2100      	movs	r1, #0
 8008302:	f005 fd25 	bl	800dd50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f00b f965 	bl	80135dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	4f54300a 	.word	0x4f54300a
 8008320:	4f54310a 	.word	0x4f54310a

08008324 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	333c      	adds	r3, #60	; 0x3c
 800833c:	3304      	adds	r3, #4
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4a15      	ldr	r2, [pc, #84]	; (80083ac <PCD_EP_OutSetupPacket_int+0x88>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d90e      	bls.n	8008378 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008360:	2b00      	cmp	r3, #0
 8008362:	d009      	beq.n	8008378 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008370:	461a      	mov	r2, r3
 8008372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008376:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f00b f91d 	bl	80135b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <PCD_EP_OutSetupPacket_int+0x88>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d90c      	bls.n	80083a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d108      	bne.n	80083a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008398:	461a      	mov	r2, r3
 800839a:	2101      	movs	r1, #1
 800839c:	f005 fcd8 	bl	800dd50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	4f54300a 	.word	0x4f54300a

080083b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
 80083bc:	4613      	mov	r3, r2
 80083be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d107      	bne.n	80083de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083ce:	883b      	ldrh	r3, [r7, #0]
 80083d0:	0419      	lsls	r1, r3, #16
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	430a      	orrs	r2, r1
 80083da:	629a      	str	r2, [r3, #40]	; 0x28
 80083dc:	e028      	b.n	8008430 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	0c1b      	lsrs	r3, r3, #16
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	4413      	add	r3, r2
 80083ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
 80083f0:	e00d      	b.n	800840e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	3340      	adds	r3, #64	; 0x40
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	0c1b      	lsrs	r3, r3, #16
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	4413      	add	r3, r2
 8008406:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	3301      	adds	r3, #1
 800840c:	73fb      	strb	r3, [r7, #15]
 800840e:	7bfa      	ldrb	r2, [r7, #15]
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	3b01      	subs	r3, #1
 8008414:	429a      	cmp	r2, r3
 8008416:	d3ec      	bcc.n	80083f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008418:	883b      	ldrh	r3, [r7, #0]
 800841a:	0418      	lsls	r0, r3, #16
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6819      	ldr	r1, [r3, #0]
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	3b01      	subs	r3, #1
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	4302      	orrs	r2, r0
 8008428:	3340      	adds	r3, #64	; 0x40
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	440b      	add	r3, r1
 800842e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	887a      	ldrh	r2, [r7, #2]
 8008450:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e264      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d075      	beq.n	8008582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008496:	4ba3      	ldr	r3, [pc, #652]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f003 030c 	and.w	r3, r3, #12
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d00c      	beq.n	80084bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084a2:	4ba0      	ldr	r3, [pc, #640]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d112      	bne.n	80084d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084ae:	4b9d      	ldr	r3, [pc, #628]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084ba:	d10b      	bne.n	80084d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084bc:	4b99      	ldr	r3, [pc, #612]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d05b      	beq.n	8008580 <HAL_RCC_OscConfig+0x108>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d157      	bne.n	8008580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e23f      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084dc:	d106      	bne.n	80084ec <HAL_RCC_OscConfig+0x74>
 80084de:	4b91      	ldr	r3, [pc, #580]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a90      	ldr	r2, [pc, #576]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80084e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	e01d      	b.n	8008528 <HAL_RCC_OscConfig+0xb0>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084f4:	d10c      	bne.n	8008510 <HAL_RCC_OscConfig+0x98>
 80084f6:	4b8b      	ldr	r3, [pc, #556]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a8a      	ldr	r2, [pc, #552]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80084fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	4b88      	ldr	r3, [pc, #544]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a87      	ldr	r2, [pc, #540]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800850c:	6013      	str	r3, [r2, #0]
 800850e:	e00b      	b.n	8008528 <HAL_RCC_OscConfig+0xb0>
 8008510:	4b84      	ldr	r3, [pc, #528]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a83      	ldr	r2, [pc, #524]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	4b81      	ldr	r3, [pc, #516]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a80      	ldr	r2, [pc, #512]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d013      	beq.n	8008558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008530:	f7fc fbfe 	bl	8004d30 <HAL_GetTick>
 8008534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008538:	f7fc fbfa 	bl	8004d30 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b64      	cmp	r3, #100	; 0x64
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e204      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800854a:	4b76      	ldr	r3, [pc, #472]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0f0      	beq.n	8008538 <HAL_RCC_OscConfig+0xc0>
 8008556:	e014      	b.n	8008582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008558:	f7fc fbea 	bl	8004d30 <HAL_GetTick>
 800855c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008560:	f7fc fbe6 	bl	8004d30 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b64      	cmp	r3, #100	; 0x64
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e1f0      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008572:	4b6c      	ldr	r3, [pc, #432]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1f0      	bne.n	8008560 <HAL_RCC_OscConfig+0xe8>
 800857e:	e000      	b.n	8008582 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d063      	beq.n	8008656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800858e:	4b65      	ldr	r3, [pc, #404]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f003 030c 	and.w	r3, r3, #12
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00b      	beq.n	80085b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800859a:	4b62      	ldr	r3, [pc, #392]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085a2:	2b08      	cmp	r3, #8
 80085a4:	d11c      	bne.n	80085e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085a6:	4b5f      	ldr	r3, [pc, #380]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d116      	bne.n	80085e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085b2:	4b5c      	ldr	r3, [pc, #368]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <HAL_RCC_OscConfig+0x152>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d001      	beq.n	80085ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e1c4      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ca:	4b56      	ldr	r3, [pc, #344]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4952      	ldr	r1, [pc, #328]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085de:	e03a      	b.n	8008656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d020      	beq.n	800862a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085e8:	4b4f      	ldr	r3, [pc, #316]	; (8008728 <HAL_RCC_OscConfig+0x2b0>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ee:	f7fc fb9f 	bl	8004d30 <HAL_GetTick>
 80085f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085f4:	e008      	b.n	8008608 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085f6:	f7fc fb9b 	bl	8004d30 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d901      	bls.n	8008608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e1a5      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008608:	4b46      	ldr	r3, [pc, #280]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0f0      	beq.n	80085f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008614:	4b43      	ldr	r3, [pc, #268]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4940      	ldr	r1, [pc, #256]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 8008624:	4313      	orrs	r3, r2
 8008626:	600b      	str	r3, [r1, #0]
 8008628:	e015      	b.n	8008656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800862a:	4b3f      	ldr	r3, [pc, #252]	; (8008728 <HAL_RCC_OscConfig+0x2b0>)
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008630:	f7fc fb7e 	bl	8004d30 <HAL_GetTick>
 8008634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008636:	e008      	b.n	800864a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008638:	f7fc fb7a 	bl	8004d30 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b02      	cmp	r3, #2
 8008644:	d901      	bls.n	800864a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e184      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800864a:	4b36      	ldr	r3, [pc, #216]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1f0      	bne.n	8008638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d030      	beq.n	80086c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800866a:	4b30      	ldr	r3, [pc, #192]	; (800872c <HAL_RCC_OscConfig+0x2b4>)
 800866c:	2201      	movs	r2, #1
 800866e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008670:	f7fc fb5e 	bl	8004d30 <HAL_GetTick>
 8008674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008676:	e008      	b.n	800868a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008678:	f7fc fb5a 	bl	8004d30 <HAL_GetTick>
 800867c:	4602      	mov	r2, r0
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	2b02      	cmp	r3, #2
 8008684:	d901      	bls.n	800868a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e164      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800868a:	4b26      	ldr	r3, [pc, #152]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 800868c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0f0      	beq.n	8008678 <HAL_RCC_OscConfig+0x200>
 8008696:	e015      	b.n	80086c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008698:	4b24      	ldr	r3, [pc, #144]	; (800872c <HAL_RCC_OscConfig+0x2b4>)
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800869e:	f7fc fb47 	bl	8004d30 <HAL_GetTick>
 80086a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086a4:	e008      	b.n	80086b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086a6:	f7fc fb43 	bl	8004d30 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d901      	bls.n	80086b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e14d      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086b8:	4b1a      	ldr	r3, [pc, #104]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80086ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1f0      	bne.n	80086a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80a0 	beq.w	8008812 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086d2:	2300      	movs	r3, #0
 80086d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086d6:	4b13      	ldr	r3, [pc, #76]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10f      	bne.n	8008702 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086e2:	2300      	movs	r3, #0
 80086e4:	60bb      	str	r3, [r7, #8]
 80086e6:	4b0f      	ldr	r3, [pc, #60]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	4a0e      	ldr	r2, [pc, #56]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80086ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f0:	6413      	str	r3, [r2, #64]	; 0x40
 80086f2:	4b0c      	ldr	r3, [pc, #48]	; (8008724 <HAL_RCC_OscConfig+0x2ac>)
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086fa:	60bb      	str	r3, [r7, #8]
 80086fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086fe:	2301      	movs	r3, #1
 8008700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008702:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <HAL_RCC_OscConfig+0x2b8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800870a:	2b00      	cmp	r3, #0
 800870c:	d121      	bne.n	8008752 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800870e:	4b08      	ldr	r3, [pc, #32]	; (8008730 <HAL_RCC_OscConfig+0x2b8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a07      	ldr	r2, [pc, #28]	; (8008730 <HAL_RCC_OscConfig+0x2b8>)
 8008714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800871a:	f7fc fb09 	bl	8004d30 <HAL_GetTick>
 800871e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008720:	e011      	b.n	8008746 <HAL_RCC_OscConfig+0x2ce>
 8008722:	bf00      	nop
 8008724:	40023800 	.word	0x40023800
 8008728:	42470000 	.word	0x42470000
 800872c:	42470e80 	.word	0x42470e80
 8008730:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008734:	f7fc fafc 	bl	8004d30 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e106      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008746:	4b85      	ldr	r3, [pc, #532]	; (800895c <HAL_RCC_OscConfig+0x4e4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0f0      	beq.n	8008734 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d106      	bne.n	8008768 <HAL_RCC_OscConfig+0x2f0>
 800875a:	4b81      	ldr	r3, [pc, #516]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 800875c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875e:	4a80      	ldr	r2, [pc, #512]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	6713      	str	r3, [r2, #112]	; 0x70
 8008766:	e01c      	b.n	80087a2 <HAL_RCC_OscConfig+0x32a>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	2b05      	cmp	r3, #5
 800876e:	d10c      	bne.n	800878a <HAL_RCC_OscConfig+0x312>
 8008770:	4b7b      	ldr	r3, [pc, #492]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 8008772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008774:	4a7a      	ldr	r2, [pc, #488]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 8008776:	f043 0304 	orr.w	r3, r3, #4
 800877a:	6713      	str	r3, [r2, #112]	; 0x70
 800877c:	4b78      	ldr	r3, [pc, #480]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 800877e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008780:	4a77      	ldr	r2, [pc, #476]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	6713      	str	r3, [r2, #112]	; 0x70
 8008788:	e00b      	b.n	80087a2 <HAL_RCC_OscConfig+0x32a>
 800878a:	4b75      	ldr	r3, [pc, #468]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 800878c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878e:	4a74      	ldr	r2, [pc, #464]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	6713      	str	r3, [r2, #112]	; 0x70
 8008796:	4b72      	ldr	r3, [pc, #456]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 8008798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879a:	4a71      	ldr	r2, [pc, #452]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 800879c:	f023 0304 	bic.w	r3, r3, #4
 80087a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d015      	beq.n	80087d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087aa:	f7fc fac1 	bl	8004d30 <HAL_GetTick>
 80087ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087b0:	e00a      	b.n	80087c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087b2:	f7fc fabd 	bl	8004d30 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e0c5      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087c8:	4b65      	ldr	r3, [pc, #404]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 80087ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0ee      	beq.n	80087b2 <HAL_RCC_OscConfig+0x33a>
 80087d4:	e014      	b.n	8008800 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087d6:	f7fc faab 	bl	8004d30 <HAL_GetTick>
 80087da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087dc:	e00a      	b.n	80087f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087de:	f7fc faa7 	bl	8004d30 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d901      	bls.n	80087f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e0af      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087f4:	4b5a      	ldr	r3, [pc, #360]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 80087f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1ee      	bne.n	80087de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d105      	bne.n	8008812 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008806:	4b56      	ldr	r3, [pc, #344]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	4a55      	ldr	r2, [pc, #340]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 800880c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 809b 	beq.w	8008952 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800881c:	4b50      	ldr	r3, [pc, #320]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f003 030c 	and.w	r3, r3, #12
 8008824:	2b08      	cmp	r3, #8
 8008826:	d05c      	beq.n	80088e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d141      	bne.n	80088b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008830:	4b4c      	ldr	r3, [pc, #304]	; (8008964 <HAL_RCC_OscConfig+0x4ec>)
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008836:	f7fc fa7b 	bl	8004d30 <HAL_GetTick>
 800883a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800883c:	e008      	b.n	8008850 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800883e:	f7fc fa77 	bl	8004d30 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d901      	bls.n	8008850 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e081      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008850:	4b43      	ldr	r3, [pc, #268]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1f0      	bne.n	800883e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	019b      	lsls	r3, r3, #6
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	085b      	lsrs	r3, r3, #1
 8008874:	3b01      	subs	r3, #1
 8008876:	041b      	lsls	r3, r3, #16
 8008878:	431a      	orrs	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	061b      	lsls	r3, r3, #24
 8008880:	4937      	ldr	r1, [pc, #220]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 8008882:	4313      	orrs	r3, r2
 8008884:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008886:	4b37      	ldr	r3, [pc, #220]	; (8008964 <HAL_RCC_OscConfig+0x4ec>)
 8008888:	2201      	movs	r2, #1
 800888a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800888c:	f7fc fa50 	bl	8004d30 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008894:	f7fc fa4c 	bl	8004d30 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e056      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088a6:	4b2e      	ldr	r3, [pc, #184]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f0      	beq.n	8008894 <HAL_RCC_OscConfig+0x41c>
 80088b2:	e04e      	b.n	8008952 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088b4:	4b2b      	ldr	r3, [pc, #172]	; (8008964 <HAL_RCC_OscConfig+0x4ec>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ba:	f7fc fa39 	bl	8004d30 <HAL_GetTick>
 80088be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088c0:	e008      	b.n	80088d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088c2:	f7fc fa35 	bl	8004d30 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e03f      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088d4:	4b22      	ldr	r3, [pc, #136]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1f0      	bne.n	80088c2 <HAL_RCC_OscConfig+0x44a>
 80088e0:	e037      	b.n	8008952 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d101      	bne.n	80088ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e032      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80088ee:	4b1c      	ldr	r3, [pc, #112]	; (8008960 <HAL_RCC_OscConfig+0x4e8>)
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d028      	beq.n	800894e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008906:	429a      	cmp	r2, r3
 8008908:	d121      	bne.n	800894e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008914:	429a      	cmp	r2, r3
 8008916:	d11a      	bne.n	800894e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800891e:	4013      	ands	r3, r2
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008924:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008926:	4293      	cmp	r3, r2
 8008928:	d111      	bne.n	800894e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	085b      	lsrs	r3, r3, #1
 8008936:	3b01      	subs	r3, #1
 8008938:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800893a:	429a      	cmp	r2, r3
 800893c:	d107      	bne.n	800894e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800894a:	429a      	cmp	r2, r3
 800894c:	d001      	beq.n	8008952 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e000      	b.n	8008954 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	40007000 	.word	0x40007000
 8008960:	40023800 	.word	0x40023800
 8008964:	42470060 	.word	0x42470060

08008968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e0cc      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800897c:	4b68      	ldr	r3, [pc, #416]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d90c      	bls.n	80089a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800898a:	4b65      	ldr	r3, [pc, #404]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008992:	4b63      	ldr	r3, [pc, #396]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d001      	beq.n	80089a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0b8      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d020      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089bc:	4b59      	ldr	r3, [pc, #356]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	4a58      	ldr	r2, [pc, #352]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80089c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0308 	and.w	r3, r3, #8
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089d4:	4b53      	ldr	r3, [pc, #332]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	4a52      	ldr	r2, [pc, #328]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80089de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089e0:	4b50      	ldr	r3, [pc, #320]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	494d      	ldr	r1, [pc, #308]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d044      	beq.n	8008a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d107      	bne.n	8008a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a06:	4b47      	ldr	r3, [pc, #284]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d119      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e07f      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d003      	beq.n	8008a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d107      	bne.n	8008a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a26:	4b3f      	ldr	r3, [pc, #252]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e06f      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a36:	4b3b      	ldr	r3, [pc, #236]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e067      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a46:	4b37      	ldr	r3, [pc, #220]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f023 0203 	bic.w	r2, r3, #3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	4934      	ldr	r1, [pc, #208]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a58:	f7fc f96a 	bl	8004d30 <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a5e:	e00a      	b.n	8008a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a60:	f7fc f966 	bl	8004d30 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e04f      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a76:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f003 020c 	and.w	r2, r3, #12
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d1eb      	bne.n	8008a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a88:	4b25      	ldr	r3, [pc, #148]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d20c      	bcs.n	8008ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a96:	4b22      	ldr	r3, [pc, #136]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9e:	4b20      	ldr	r3, [pc, #128]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 030f 	and.w	r3, r3, #15
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d001      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e032      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008abc:	4b19      	ldr	r3, [pc, #100]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	4916      	ldr	r1, [pc, #88]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0308 	and.w	r3, r3, #8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d009      	beq.n	8008aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ada:	4b12      	ldr	r3, [pc, #72]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	490e      	ldr	r1, [pc, #56]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008aee:	f000 f821 	bl	8008b34 <HAL_RCC_GetSysClockFreq>
 8008af2:	4602      	mov	r2, r0
 8008af4:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	091b      	lsrs	r3, r3, #4
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	490a      	ldr	r1, [pc, #40]	; (8008b28 <HAL_RCC_ClockConfig+0x1c0>)
 8008b00:	5ccb      	ldrb	r3, [r1, r3]
 8008b02:	fa22 f303 	lsr.w	r3, r2, r3
 8008b06:	4a09      	ldr	r2, [pc, #36]	; (8008b2c <HAL_RCC_ClockConfig+0x1c4>)
 8008b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <HAL_RCC_ClockConfig+0x1c8>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fc f8ca 	bl	8004ca8 <HAL_InitTick>

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	40023c00 	.word	0x40023c00
 8008b24:	40023800 	.word	0x40023800
 8008b28:	08019d1c 	.word	0x08019d1c
 8008b2c:	20000000 	.word	0x20000000
 8008b30:	20000004 	.word	0x20000004

08008b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	607b      	str	r3, [r7, #4]
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	2300      	movs	r3, #0
 8008b46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b4c:	4b67      	ldr	r3, [pc, #412]	; (8008cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 030c 	and.w	r3, r3, #12
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d00d      	beq.n	8008b74 <HAL_RCC_GetSysClockFreq+0x40>
 8008b58:	2b08      	cmp	r3, #8
 8008b5a:	f200 80bd 	bhi.w	8008cd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <HAL_RCC_GetSysClockFreq+0x34>
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d003      	beq.n	8008b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8008b66:	e0b7      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b68:	4b61      	ldr	r3, [pc, #388]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008b6a:	60bb      	str	r3, [r7, #8]
       break;
 8008b6c:	e0b7      	b.n	8008cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b6e:	4b61      	ldr	r3, [pc, #388]	; (8008cf4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008b70:	60bb      	str	r3, [r7, #8]
      break;
 8008b72:	e0b4      	b.n	8008cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b74:	4b5d      	ldr	r3, [pc, #372]	; (8008cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b7e:	4b5b      	ldr	r3, [pc, #364]	; (8008cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d04d      	beq.n	8008c26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b8a:	4b58      	ldr	r3, [pc, #352]	; (8008cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	099b      	lsrs	r3, r3, #6
 8008b90:	461a      	mov	r2, r3
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008b9a:	f04f 0100 	mov.w	r1, #0
 8008b9e:	ea02 0800 	and.w	r8, r2, r0
 8008ba2:	ea03 0901 	and.w	r9, r3, r1
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	4649      	mov	r1, r9
 8008baa:	f04f 0200 	mov.w	r2, #0
 8008bae:	f04f 0300 	mov.w	r3, #0
 8008bb2:	014b      	lsls	r3, r1, #5
 8008bb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008bb8:	0142      	lsls	r2, r0, #5
 8008bba:	4610      	mov	r0, r2
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	ebb0 0008 	subs.w	r0, r0, r8
 8008bc2:	eb61 0109 	sbc.w	r1, r1, r9
 8008bc6:	f04f 0200 	mov.w	r2, #0
 8008bca:	f04f 0300 	mov.w	r3, #0
 8008bce:	018b      	lsls	r3, r1, #6
 8008bd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008bd4:	0182      	lsls	r2, r0, #6
 8008bd6:	1a12      	subs	r2, r2, r0
 8008bd8:	eb63 0301 	sbc.w	r3, r3, r1
 8008bdc:	f04f 0000 	mov.w	r0, #0
 8008be0:	f04f 0100 	mov.w	r1, #0
 8008be4:	00d9      	lsls	r1, r3, #3
 8008be6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bea:	00d0      	lsls	r0, r2, #3
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	eb12 0208 	adds.w	r2, r2, r8
 8008bf4:	eb43 0309 	adc.w	r3, r3, r9
 8008bf8:	f04f 0000 	mov.w	r0, #0
 8008bfc:	f04f 0100 	mov.w	r1, #0
 8008c00:	0259      	lsls	r1, r3, #9
 8008c02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008c06:	0250      	lsls	r0, r2, #9
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4619      	mov	r1, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	461a      	mov	r2, r3
 8008c14:	f04f 0300 	mov.w	r3, #0
 8008c18:	f7f8 f846 	bl	8000ca8 <__aeabi_uldivmod>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4613      	mov	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e04a      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c26:	4b31      	ldr	r3, [pc, #196]	; (8008cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	099b      	lsrs	r3, r3, #6
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c36:	f04f 0100 	mov.w	r1, #0
 8008c3a:	ea02 0400 	and.w	r4, r2, r0
 8008c3e:	ea03 0501 	and.w	r5, r3, r1
 8008c42:	4620      	mov	r0, r4
 8008c44:	4629      	mov	r1, r5
 8008c46:	f04f 0200 	mov.w	r2, #0
 8008c4a:	f04f 0300 	mov.w	r3, #0
 8008c4e:	014b      	lsls	r3, r1, #5
 8008c50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008c54:	0142      	lsls	r2, r0, #5
 8008c56:	4610      	mov	r0, r2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	1b00      	subs	r0, r0, r4
 8008c5c:	eb61 0105 	sbc.w	r1, r1, r5
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	f04f 0300 	mov.w	r3, #0
 8008c68:	018b      	lsls	r3, r1, #6
 8008c6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008c6e:	0182      	lsls	r2, r0, #6
 8008c70:	1a12      	subs	r2, r2, r0
 8008c72:	eb63 0301 	sbc.w	r3, r3, r1
 8008c76:	f04f 0000 	mov.w	r0, #0
 8008c7a:	f04f 0100 	mov.w	r1, #0
 8008c7e:	00d9      	lsls	r1, r3, #3
 8008c80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c84:	00d0      	lsls	r0, r2, #3
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	1912      	adds	r2, r2, r4
 8008c8c:	eb45 0303 	adc.w	r3, r5, r3
 8008c90:	f04f 0000 	mov.w	r0, #0
 8008c94:	f04f 0100 	mov.w	r1, #0
 8008c98:	0299      	lsls	r1, r3, #10
 8008c9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008c9e:	0290      	lsls	r0, r2, #10
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	461a      	mov	r2, r3
 8008cac:	f04f 0300 	mov.w	r3, #0
 8008cb0:	f7f7 fffa 	bl	8000ca8 <__aeabi_uldivmod>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4613      	mov	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	0c1b      	lsrs	r3, r3, #16
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd4:	60bb      	str	r3, [r7, #8]
      break;
 8008cd6:	e002      	b.n	8008cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008cda:	60bb      	str	r3, [r7, #8]
      break;
 8008cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cde:	68bb      	ldr	r3, [r7, #8]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008cea:	bf00      	nop
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	00f42400 	.word	0x00f42400
 8008cf4:	007a1200 	.word	0x007a1200

08008cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cfc:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	20000000 	.word	0x20000000

08008d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d14:	f7ff fff0 	bl	8008cf8 <HAL_RCC_GetHCLKFreq>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	0a9b      	lsrs	r3, r3, #10
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	4903      	ldr	r1, [pc, #12]	; (8008d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d26:	5ccb      	ldrb	r3, [r1, r3]
 8008d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	40023800 	.word	0x40023800
 8008d34:	08019d2c 	.word	0x08019d2c

08008d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d3c:	f7ff ffdc 	bl	8008cf8 <HAL_RCC_GetHCLKFreq>
 8008d40:	4602      	mov	r2, r0
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	0b5b      	lsrs	r3, r3, #13
 8008d48:	f003 0307 	and.w	r3, r3, #7
 8008d4c:	4903      	ldr	r1, [pc, #12]	; (8008d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d4e:	5ccb      	ldrb	r3, [r1, r3]
 8008d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	40023800 	.word	0x40023800
 8008d5c:	08019d2c 	.word	0x08019d2c

08008d60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e022      	b.n	8008db8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d105      	bne.n	8008d8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7fb fbff 	bl	8004588 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f814 	bl	8008dc0 <HAL_SD_InitCard>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e00a      	b.n	8008db8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dc0:	b5b0      	push	{r4, r5, r7, lr}
 8008dc2:	b08e      	sub	sp, #56	; 0x38
 8008dc4:	af04      	add	r7, sp, #16
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008ddc:	2376      	movs	r3, #118	; 0x76
 8008dde:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681d      	ldr	r5, [r3, #0]
 8008de4:	466c      	mov	r4, sp
 8008de6:	f107 0314 	add.w	r3, r7, #20
 8008dea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008df2:	f107 0308 	add.w	r3, r7, #8
 8008df6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f002 ff4b 	bl	800bc94 <SDIO_Init>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e04c      	b.n	8008eaa <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008e10:	4b28      	ldr	r3, [pc, #160]	; (8008eb4 <HAL_SD_InitCard+0xf4>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f002 ff83 	bl	800bd26 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008e20:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <HAL_SD_InitCard+0xf4>)
 8008e22:	2201      	movs	r2, #1
 8008e24:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 f804 	bl	8009e34 <SD_PowerON>
 8008e2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	431a      	orrs	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e02e      	b.n	8008eaa <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 ff25 	bl	8009c9c <SD_InitCard>
 8008e52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00b      	beq.n	8008e72 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e01b      	b.n	8008eaa <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f002 ffe6 	bl	800be4c <SDMMC_CmdBlockLength>
 8008e80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00f      	beq.n	8008ea8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a0a      	ldr	r2, [pc, #40]	; (8008eb8 <HAL_SD_InitCard+0xf8>)
 8008e8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	431a      	orrs	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e000      	b.n	8008eaa <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3728      	adds	r7, #40	; 0x28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	422580a0 	.word	0x422580a0
 8008eb8:	004005ff 	.word	0x004005ff

08008ebc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08c      	sub	sp, #48	; 0x30
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d107      	bne.n	8008ee4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e0c0      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	f040 80b9 	bne.w	8009064 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	441a      	add	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d907      	bls.n	8008f16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e0a7      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2203      	movs	r2, #3
 8008f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2200      	movs	r2, #0
 8008f24:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	6812      	ldr	r2, [r2, #0]
 8008f30:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8008f34:	f043 0302 	orr.w	r3, r3, #2
 8008f38:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3e:	4a4c      	ldr	r2, [pc, #304]	; (8009070 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f46:	4a4b      	ldr	r2, [pc, #300]	; (8009074 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008f48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	2200      	movs	r2, #0
 8008f50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	2200      	movs	r2, #0
 8008f58:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3380      	adds	r3, #128	; 0x80
 8008f80:	4619      	mov	r1, r3
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	025b      	lsls	r3, r3, #9
 8008f88:	089b      	lsrs	r3, r3, #2
 8008f8a:	f7fc fb33 	bl	80055f4 <HAL_DMA_Start_IT>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d017      	beq.n	8008fc4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a33      	ldr	r2, [pc, #204]	; (8009078 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e050      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008fc4:	4b2d      	ldr	r3, [pc, #180]	; (800907c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d002      	beq.n	8008fd8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8008fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd4:	025b      	lsls	r3, r3, #9
 8008fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fdc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	025b      	lsls	r3, r3, #9
 8008fe2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008fe4:	2390      	movs	r3, #144	; 0x90
 8008fe6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f107 0210 	add.w	r2, r7, #16
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f002 fef8 	bl	800bdf4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d90a      	bls.n	8009020 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2282      	movs	r2, #130	; 0x82
 800900e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009016:	4618      	mov	r0, r3
 8009018:	f002 ff5c 	bl	800bed4 <SDMMC_CmdReadMultiBlock>
 800901c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800901e:	e009      	b.n	8009034 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2281      	movs	r2, #129	; 0x81
 8009024:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800902c:	4618      	mov	r0, r3
 800902e:	f002 ff2f 	bl	800be90 <SDMMC_CmdReadSingleBlock>
 8009032:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d012      	beq.n	8009060 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a0e      	ldr	r2, [pc, #56]	; (8009078 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009040:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	431a      	orrs	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e002      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	e000      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8009064:	2302      	movs	r3, #2
  }
}
 8009066:	4618      	mov	r0, r3
 8009068:	3730      	adds	r7, #48	; 0x30
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	08009aab 	.word	0x08009aab
 8009074:	08009b1d 	.word	0x08009b1d
 8009078:	004005ff 	.word	0x004005ff
 800907c:	4225858c 	.word	0x4225858c

08009080 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08c      	sub	sp, #48	; 0x30
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d107      	bne.n	80090a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e0c5      	b.n	8009234 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	f040 80be 	bne.w	8009232 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80090bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d907      	bls.n	80090da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e0ac      	b.n	8009234 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2203      	movs	r2, #3
 80090de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2200      	movs	r2, #0
 80090e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	6812      	ldr	r2, [r2, #0]
 80090f4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80090f8:	f043 0302 	orr.w	r3, r3, #2
 80090fc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	4a4e      	ldr	r2, [pc, #312]	; (800923c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910a:	4a4d      	ldr	r2, [pc, #308]	; (8009240 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800910c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009112:	2200      	movs	r2, #0
 8009114:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911a:	2b01      	cmp	r3, #1
 800911c:	d002      	beq.n	8009124 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	025b      	lsls	r3, r3, #9
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d90a      	bls.n	8009140 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	22a0      	movs	r2, #160	; 0xa0
 800912e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009136:	4618      	mov	r0, r3
 8009138:	f002 ff10 	bl	800bf5c <SDMMC_CmdWriteMultiBlock>
 800913c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800913e:	e009      	b.n	8009154 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2290      	movs	r2, #144	; 0x90
 8009144:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800914c:	4618      	mov	r0, r3
 800914e:	f002 fee3 	bl	800bf18 <SDMMC_CmdWriteSingleBlock>
 8009152:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d012      	beq.n	8009180 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a39      	ldr	r2, [pc, #228]	; (8009244 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009160:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009168:	431a      	orrs	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e059      	b.n	8009234 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009180:	4b31      	ldr	r3, [pc, #196]	; (8009248 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009182:	2201      	movs	r2, #1
 8009184:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918a:	2240      	movs	r2, #64	; 0x40
 800918c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3380      	adds	r3, #128	; 0x80
 80091b6:	461a      	mov	r2, r3
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	025b      	lsls	r3, r3, #9
 80091bc:	089b      	lsrs	r3, r3, #2
 80091be:	f7fc fa19 	bl	80055f4 <HAL_DMA_Start_IT>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01c      	beq.n	8009202 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	6812      	ldr	r2, [r2, #0]
 80091d2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80091d6:	f023 0302 	bic.w	r3, r3, #2
 80091da:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a18      	ldr	r2, [pc, #96]	; (8009244 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80091e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e018      	b.n	8009234 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009202:	f04f 33ff 	mov.w	r3, #4294967295
 8009206:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	025b      	lsls	r3, r3, #9
 800920c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800920e:	2390      	movs	r3, #144	; 0x90
 8009210:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009212:	2300      	movs	r3, #0
 8009214:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009216:	2300      	movs	r3, #0
 8009218:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800921a:	2301      	movs	r3, #1
 800921c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f107 0210 	add.w	r2, r7, #16
 8009226:	4611      	mov	r1, r2
 8009228:	4618      	mov	r0, r3
 800922a:	f002 fde3 	bl	800bdf4 <SDIO_ConfigData>

      return HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	e000      	b.n	8009234 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8009232:	2302      	movs	r3, #2
  }
}
 8009234:	4618      	mov	r0, r3
 8009236:	3730      	adds	r7, #48	; 0x30
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	08009a81 	.word	0x08009a81
 8009240:	08009b1d 	.word	0x08009b1d
 8009244:	004005ff 	.word	0x004005ff
 8009248:	4225858c 	.word	0x4225858c

0800924c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009258:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d008      	beq.n	800927a <HAL_SD_IRQHandler+0x2e>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fffd 	bl	800a272 <SD_Read_IT>
 8009278:	e165      	b.n	8009546 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 808f 	beq.w	80093a8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009292:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80092a2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80092a6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0201 	bic.w	r2, r2, #1
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f003 0308 	and.w	r3, r3, #8
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d039      	beq.n	8009336 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d104      	bne.n	80092d6 <HAL_SD_IRQHandler+0x8a>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d011      	beq.n	80092fa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4618      	mov	r0, r3
 80092dc:	f002 fe60 	bl	800bfa0 <SDMMC_CmdStopTransfer>
 80092e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d008      	beq.n	80092fa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	431a      	orrs	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f92f 	bl	8009558 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8009302:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <HAL_SD_IRQHandler+0xda>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f004 fe40 	bl	800dfac <HAL_SD_RxCpltCallback>
 800932c:	e10b      	b.n	8009546 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f004 fe32 	bl	800df98 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009334:	e107      	b.n	8009546 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 8102 	beq.w	8009546 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f003 0320 	and.w	r3, r3, #32
 8009348:	2b00      	cmp	r3, #0
 800934a:	d011      	beq.n	8009370 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4618      	mov	r0, r3
 8009352:	f002 fe25 	bl	800bfa0 <SDMMC_CmdStopTransfer>
 8009356:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d008      	beq.n	8009370 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	431a      	orrs	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f8f4 	bl	8009558 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	f040 80e5 	bne.w	8009546 <HAL_SD_IRQHandler+0x2fa>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	f040 80df 	bne.w	8009546 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f022 0208 	bic.w	r2, r2, #8
 8009396:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f004 fdf9 	bl	800df98 <HAL_SD_TxCpltCallback>
}
 80093a6:	e0ce      	b.n	8009546 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d008      	beq.n	80093c8 <HAL_SD_IRQHandler+0x17c>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 ffa7 	bl	800a314 <SD_Write_IT>
 80093c6:	e0be      	b.n	8009546 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ce:	f240 233a 	movw	r3, #570	; 0x23a
 80093d2:	4013      	ands	r3, r2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 80b6 	beq.w	8009546 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	f043 0202 	orr.w	r2, r3, #2
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	f003 0308 	and.w	r3, r3, #8
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d005      	beq.n	800940e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009406:	f043 0208 	orr.w	r2, r3, #8
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009420:	f043 0220 	orr.w	r2, r3, #32
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942e:	f003 0310 	and.w	r3, r3, #16
 8009432:	2b00      	cmp	r3, #0
 8009434:	d005      	beq.n	8009442 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943a:	f043 0210 	orr.w	r2, r3, #16
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	f043 0208 	orr.w	r2, r3, #8
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f240 723a 	movw	r2, #1850	; 0x73a
 8009464:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6812      	ldr	r2, [r2, #0]
 8009470:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009474:	f023 0302 	bic.w	r3, r3, #2
 8009478:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f002 fd8e 	bl	800bfa0 <SDMMC_CmdStopTransfer>
 8009484:	4602      	mov	r2, r0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	431a      	orrs	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 0308 	and.w	r3, r3, #8
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00a      	beq.n	80094b0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f855 	bl	8009558 <HAL_SD_ErrorCallback>
}
 80094ae:	e04a      	b.n	8009546 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d045      	beq.n	8009546 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d104      	bne.n	80094ce <HAL_SD_IRQHandler+0x282>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d011      	beq.n	80094f2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d2:	4a1f      	ldr	r2, [pc, #124]	; (8009550 <HAL_SD_IRQHandler+0x304>)
 80094d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fc f952 	bl	8005784 <HAL_DMA_Abort_IT>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d02f      	beq.n	8009546 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fb68 	bl	8009bc0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80094f0:	e029      	b.n	8009546 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d104      	bne.n	8009506 <HAL_SD_IRQHandler+0x2ba>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d011      	beq.n	800952a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	4a12      	ldr	r2, [pc, #72]	; (8009554 <HAL_SD_IRQHandler+0x308>)
 800950c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	4618      	mov	r0, r3
 8009514:	f7fc f936 	bl	8005784 <HAL_DMA_Abort_IT>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d013      	beq.n	8009546 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fb83 	bl	8009c2e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009528:	e00d      	b.n	8009546 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f004 fd20 	bl	800df84 <HAL_SD_AbortCallback>
}
 8009544:	e7ff      	b.n	8009546 <HAL_SD_IRQHandler+0x2fa>
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	08009bc1 	.word	0x08009bc1
 8009554:	08009c2f 	.word	0x08009c2f

08009558 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800957a:	0f9b      	lsrs	r3, r3, #30
 800957c:	b2da      	uxtb	r2, r3
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009586:	0e9b      	lsrs	r3, r3, #26
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 030f 	and.w	r3, r3, #15
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009598:	0e1b      	lsrs	r3, r3, #24
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 0303 	and.w	r3, r3, #3
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095aa:	0c1b      	lsrs	r3, r3, #16
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b6:	0a1b      	lsrs	r3, r3, #8
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095cc:	0d1b      	lsrs	r3, r3, #20
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095d8:	0c1b      	lsrs	r3, r3, #16
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ea:	0bdb      	lsrs	r3, r3, #15
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095fc:	0b9b      	lsrs	r3, r3, #14
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	b2da      	uxtb	r2, r3
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800960e:	0b5b      	lsrs	r3, r3, #13
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	b2da      	uxtb	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009620:	0b1b      	lsrs	r3, r3, #12
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	b2da      	uxtb	r2, r3
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2200      	movs	r2, #0
 8009632:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009638:	2b00      	cmp	r3, #0
 800963a:	d163      	bne.n	8009704 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009640:	009a      	lsls	r2, r3, #2
 8009642:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009646:	4013      	ands	r3, r2
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800964c:	0f92      	lsrs	r2, r2, #30
 800964e:	431a      	orrs	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009658:	0edb      	lsrs	r3, r3, #27
 800965a:	b2db      	uxtb	r3, r3
 800965c:	f003 0307 	and.w	r3, r3, #7
 8009660:	b2da      	uxtb	r2, r3
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966a:	0e1b      	lsrs	r3, r3, #24
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	b2da      	uxtb	r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967c:	0d5b      	lsrs	r3, r3, #21
 800967e:	b2db      	uxtb	r3, r3
 8009680:	f003 0307 	and.w	r3, r3, #7
 8009684:	b2da      	uxtb	r2, r3
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968e:	0c9b      	lsrs	r3, r3, #18
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f003 0307 	and.w	r3, r3, #7
 8009696:	b2da      	uxtb	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a0:	0bdb      	lsrs	r3, r3, #15
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	7e1b      	ldrb	r3, [r3, #24]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 0307 	and.w	r3, r3, #7
 80096c2:	3302      	adds	r3, #2
 80096c4:	2201      	movs	r2, #1
 80096c6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80096ce:	fb02 f203 	mul.w	r2, r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	7a1b      	ldrb	r3, [r3, #8]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	2201      	movs	r2, #1
 80096e2:	409a      	lsls	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80096f0:	0a52      	lsrs	r2, r2, #9
 80096f2:	fb02 f203 	mul.w	r2, r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009700:	661a      	str	r2, [r3, #96]	; 0x60
 8009702:	e031      	b.n	8009768 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009708:	2b01      	cmp	r3, #1
 800970a:	d11d      	bne.n	8009748 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009710:	041b      	lsls	r3, r3, #16
 8009712:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800971a:	0c1b      	lsrs	r3, r3, #16
 800971c:	431a      	orrs	r2, r3
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	3301      	adds	r3, #1
 8009728:	029a      	lsls	r2, r3, #10
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800973c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	661a      	str	r2, [r3, #96]	; 0x60
 8009746:	e00f      	b.n	8009768 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a58      	ldr	r2, [pc, #352]	; (80098b0 <HAL_SD_GetCardCSD+0x344>)
 800974e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009754:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e09d      	b.n	80098a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800976c:	0b9b      	lsrs	r3, r3, #14
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	b2da      	uxtb	r2, r3
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977e:	09db      	lsrs	r3, r3, #7
 8009780:	b2db      	uxtb	r3, r3
 8009782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009786:	b2da      	uxtb	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009796:	b2da      	uxtb	r2, r3
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a0:	0fdb      	lsrs	r3, r3, #31
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ac:	0f5b      	lsrs	r3, r3, #29
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097be:	0e9b      	lsrs	r3, r3, #26
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d0:	0d9b      	lsrs	r3, r3, #22
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 030f 	and.w	r3, r3, #15
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e2:	0d5b      	lsrs	r3, r3, #21
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fe:	0c1b      	lsrs	r3, r3, #16
 8009800:	b2db      	uxtb	r3, r3
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	b2da      	uxtb	r2, r3
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009812:	0bdb      	lsrs	r3, r3, #15
 8009814:	b2db      	uxtb	r3, r3
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	b2da      	uxtb	r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009826:	0b9b      	lsrs	r3, r3, #14
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	b2da      	uxtb	r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983a:	0b5b      	lsrs	r3, r3, #13
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	b2da      	uxtb	r2, r3
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984e:	0b1b      	lsrs	r3, r3, #12
 8009850:	b2db      	uxtb	r3, r3
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	b2da      	uxtb	r2, r3
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009862:	0a9b      	lsrs	r3, r3, #10
 8009864:	b2db      	uxtb	r3, r3
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	b2da      	uxtb	r2, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009876:	0a1b      	lsrs	r3, r3, #8
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	b2da      	uxtb	r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988a:	085b      	lsrs	r3, r3, #1
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009892:	b2da      	uxtb	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	004005ff 	.word	0x004005ff

080098b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800990c:	b5b0      	push	{r4, r5, r7, lr}
 800990e:	b08e      	sub	sp, #56	; 0x38
 8009910:	af04      	add	r7, sp, #16
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2203      	movs	r2, #3
 8009920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009928:	2b03      	cmp	r3, #3
 800992a:	d02e      	beq.n	800998a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009932:	d106      	bne.n	8009942 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009938:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	639a      	str	r2, [r3, #56]	; 0x38
 8009940:	e029      	b.n	8009996 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009948:	d10a      	bne.n	8009960 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fb28 	bl	8009fa0 <SD_WideBus_Enable>
 8009950:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	639a      	str	r2, [r3, #56]	; 0x38
 800995e:	e01a      	b.n	8009996 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10a      	bne.n	800997c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fb65 	bl	800a036 <SD_WideBus_Disable>
 800996c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
 800997a:	e00c      	b.n	8009996 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38
 8009988:	e005      	b.n	8009996 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00b      	beq.n	80099b6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a26      	ldr	r2, [pc, #152]	; (8009a3c <HAL_SD_ConfigWideBusOperation+0x130>)
 80099a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099b4:	e01f      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681d      	ldr	r5, [r3, #0]
 80099dc:	466c      	mov	r4, sp
 80099de:	f107 0314 	add.w	r3, r7, #20
 80099e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099ea:	f107 0308 	add.w	r3, r7, #8
 80099ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099f0:	4628      	mov	r0, r5
 80099f2:	f002 f94f 	bl	800bc94 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099fe:	4618      	mov	r0, r3
 8009a00:	f002 fa24 	bl	800be4c <SDMMC_CmdBlockLength>
 8009a04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00c      	beq.n	8009a26 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0a      	ldr	r2, [pc, #40]	; (8009a3c <HAL_SD_ConfigWideBusOperation+0x130>)
 8009a12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3728      	adds	r7, #40	; 0x28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bdb0      	pop	{r4, r5, r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	004005ff 	.word	0x004005ff

08009a40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a4c:	f107 030c 	add.w	r3, r7, #12
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fa7c 	bl	8009f50 <SD_SendStatus>
 8009a58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	0a5b      	lsrs	r3, r3, #9
 8009a70:	f003 030f 	and.w	r3, r3, #15
 8009a74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009a76:	693b      	ldr	r3, [r7, #16]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009a9e:	bf00      	nop
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abc:	2b82      	cmp	r3, #130	; 0x82
 8009abe:	d111      	bne.n	8009ae4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f002 fa6b 	bl	800bfa0 <SDMMC_CmdStopTransfer>
 8009aca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d008      	beq.n	8009ae4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff fd3a 	bl	8009558 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 0208 	bic.w	r2, r2, #8
 8009af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f240 523a 	movw	r2, #1338	; 0x53a
 8009afc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f004 fa4d 	bl	800dfac <HAL_SD_RxCpltCallback>
#endif
}
 8009b12:	bf00      	nop
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7fb ffd6 	bl	8005adc <HAL_DMA_GetError>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d03e      	beq.n	8009bb4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b44:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d002      	beq.n	8009b52 <SD_DMAError+0x36>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d12d      	bne.n	8009bae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a19      	ldr	r2, [pc, #100]	; (8009bbc <SD_DMAError+0xa0>)
 8009b58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009b68:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009b76:	6978      	ldr	r0, [r7, #20]
 8009b78:	f7ff ff62 	bl	8009a40 <HAL_SD_GetCardState>
 8009b7c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b06      	cmp	r3, #6
 8009b82:	d002      	beq.n	8009b8a <SD_DMAError+0x6e>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b05      	cmp	r3, #5
 8009b88:	d10a      	bne.n	8009ba0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f002 fa06 	bl	800bfa0 <SDMMC_CmdStopTransfer>
 8009b94:	4602      	mov	r2, r0
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2200      	movs	r2, #0
 8009bac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009bae:	6978      	ldr	r0, [r7, #20]
 8009bb0:	f7ff fcd2 	bl	8009558 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009bb4:	bf00      	nop
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	004005ff 	.word	0x004005ff

08009bc0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bd6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f7ff ff31 	bl	8009a40 <HAL_SD_GetCardState>
 8009bde:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b06      	cmp	r3, #6
 8009bf2:	d002      	beq.n	8009bfa <SD_DMATxAbort+0x3a>
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d10a      	bne.n	8009c10 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f002 f9ce 	bl	800bfa0 <SDMMC_CmdStopTransfer>
 8009c04:	4602      	mov	r2, r0
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d103      	bne.n	8009c20 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f004 f9b3 	bl	800df84 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009c1e:	e002      	b.n	8009c26 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f7ff fc99 	bl	8009558 <HAL_SD_ErrorCallback>
}
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f240 523a 	movw	r2, #1338	; 0x53a
 8009c44:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff fefa 	bl	8009a40 <HAL_SD_GetCardState>
 8009c4c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2b06      	cmp	r3, #6
 8009c60:	d002      	beq.n	8009c68 <SD_DMARxAbort+0x3a>
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b05      	cmp	r3, #5
 8009c66:	d10a      	bne.n	8009c7e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f002 f997 	bl	800bfa0 <SDMMC_CmdStopTransfer>
 8009c72:	4602      	mov	r2, r0
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	431a      	orrs	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d103      	bne.n	8009c8e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f004 f97c 	bl	800df84 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009c8c:	e002      	b.n	8009c94 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f7ff fc62 	bl	8009558 <HAL_SD_ErrorCallback>
}
 8009c94:	bf00      	nop
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009c9c:	b5b0      	push	{r4, r5, r7, lr}
 8009c9e:	b094      	sub	sp, #80	; 0x50
 8009ca0:	af04      	add	r7, sp, #16
 8009ca2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f002 f849 	bl	800bd44 <SDIO_GetPowerState>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009cbc:	e0b6      	b.n	8009e2c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d02f      	beq.n	8009d26 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f002 fa72 	bl	800c1b4 <SDMMC_CmdSendCID>
 8009cd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <SD_InitCard+0x40>
    {
      return errorstate;
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cda:	e0a7      	b.n	8009e2c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f002 f873 	bl	800bdce <SDIO_GetResponse>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f002 f86a 	bl	800bdce <SDIO_GetResponse>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2108      	movs	r1, #8
 8009d06:	4618      	mov	r0, r3
 8009d08:	f002 f861 	bl	800bdce <SDIO_GetResponse>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	210c      	movs	r1, #12
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f002 f858 	bl	800bdce <SDIO_GetResponse>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d00d      	beq.n	8009d4a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f107 020e 	add.w	r2, r7, #14
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f002 fa78 	bl	800c22e <SDMMC_CmdSetRelAdd>
 8009d3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <SD_InitCard+0xae>
    {
      return errorstate;
 8009d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d48:	e070      	b.n	8009e2c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	d036      	beq.n	8009dc0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009d52:	89fb      	ldrh	r3, [r7, #14]
 8009d54:	461a      	mov	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d62:	041b      	lsls	r3, r3, #16
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f002 fa42 	bl	800c1f0 <SDMMC_CmdSendCSD>
 8009d6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d76:	e059      	b.n	8009e2c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f002 f825 	bl	800bdce <SDIO_GetResponse>
 8009d84:	4602      	mov	r2, r0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2104      	movs	r1, #4
 8009d90:	4618      	mov	r0, r3
 8009d92:	f002 f81c 	bl	800bdce <SDIO_GetResponse>
 8009d96:	4602      	mov	r2, r0
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2108      	movs	r1, #8
 8009da2:	4618      	mov	r0, r3
 8009da4:	f002 f813 	bl	800bdce <SDIO_GetResponse>
 8009da8:	4602      	mov	r2, r0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	210c      	movs	r1, #12
 8009db4:	4618      	mov	r0, r3
 8009db6:	f002 f80a 	bl	800bdce <SDIO_GetResponse>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2104      	movs	r1, #4
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f002 f801 	bl	800bdce <SDIO_GetResponse>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	0d1a      	lsrs	r2, r3, #20
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009dd4:	f107 0310 	add.w	r3, r7, #16
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff fbc6 	bl	800956c <HAL_SD_GetCardCSD>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009de6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009dea:	e01f      	b.n	8009e2c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6819      	ldr	r1, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df4:	041b      	lsls	r3, r3, #16
 8009df6:	461a      	mov	r2, r3
 8009df8:	f04f 0300 	mov.w	r3, #0
 8009dfc:	4608      	mov	r0, r1
 8009dfe:	f002 f8f1 	bl	800bfe4 <SDMMC_CmdSelDesel>
 8009e02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <SD_InitCard+0x172>
  {
    return errorstate;
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0c:	e00e      	b.n	8009e2c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681d      	ldr	r5, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	466c      	mov	r4, sp
 8009e16:	f103 0210 	add.w	r2, r3, #16
 8009e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e20:	3304      	adds	r3, #4
 8009e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e24:	4628      	mov	r0, r5
 8009e26:	f001 ff35 	bl	800bc94 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3740      	adds	r7, #64	; 0x40
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bdb0      	pop	{r4, r5, r7, pc}

08009e34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	2300      	movs	r3, #0
 8009e46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f002 f8ec 	bl	800c02a <SDMMC_CmdGoIdleState>
 8009e52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	e072      	b.n	8009f44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f002 f8ff 	bl	800c066 <SDMMC_CmdOperCond>
 8009e68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00d      	beq.n	8009e8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f002 f8d5 	bl	800c02a <SDMMC_CmdGoIdleState>
 8009e80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d004      	beq.n	8009e92 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	e05b      	b.n	8009f44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d137      	bne.n	8009f0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f002 f8ff 	bl	800c0a4 <SDMMC_CmdAppCommand>
 8009ea6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d02d      	beq.n	8009f0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009eb2:	e047      	b.n	8009f44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2100      	movs	r1, #0
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f002 f8f2 	bl	800c0a4 <SDMMC_CmdAppCommand>
 8009ec0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <SD_PowerON+0x98>
    {
      return errorstate;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	e03b      	b.n	8009f44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	491e      	ldr	r1, [pc, #120]	; (8009f4c <SD_PowerON+0x118>)
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f002 f908 	bl	800c0e8 <SDMMC_CmdAppOperCommand>
 8009ed8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ee0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ee4:	e02e      	b.n	8009f44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 ff6e 	bl	800bdce <SDIO_GetResponse>
 8009ef2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	0fdb      	lsrs	r3, r3, #31
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d101      	bne.n	8009f00 <SD_PowerON+0xcc>
 8009efc:	2301      	movs	r3, #1
 8009efe:	e000      	b.n	8009f02 <SD_PowerON+0xce>
 8009f00:	2300      	movs	r3, #0
 8009f02:	613b      	str	r3, [r7, #16]

    count++;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	3301      	adds	r3, #1
 8009f08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d802      	bhi.n	8009f1a <SD_PowerON+0xe6>
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0cc      	beq.n	8009eb4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d902      	bls.n	8009f2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f28:	e00c      	b.n	8009f44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d003      	beq.n	8009f3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	645a      	str	r2, [r3, #68]	; 0x44
 8009f3a:	e002      	b.n	8009f42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	c1100000 	.word	0xc1100000

08009f50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d102      	bne.n	8009f66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009f60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f64:	e018      	b.n	8009f98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6e:	041b      	lsls	r3, r3, #16
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f002 f97c 	bl	800c270 <SDMMC_CmdSendStatus>
 8009f78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	e009      	b.n	8009f98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 ff1f 	bl	800bdce <SDIO_GetResponse>
 8009f90:	4602      	mov	r2, r0
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	2300      	movs	r3, #0
 8009fae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f001 ff09 	bl	800bdce <SDIO_GetResponse>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fc6:	d102      	bne.n	8009fce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fcc:	e02f      	b.n	800a02e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fce:	f107 030c 	add.w	r3, r7, #12
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f879 	bl	800a0cc <SD_FindSCR>
 8009fda:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	e023      	b.n	800a02e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01c      	beq.n	800a02a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff8:	041b      	lsls	r3, r3, #16
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f002 f851 	bl	800c0a4 <SDMMC_CmdAppCommand>
 800a002:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	e00f      	b.n	800a02e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2102      	movs	r1, #2
 800a014:	4618      	mov	r0, r3
 800a016:	f002 f88a 	bl	800c12e <SDMMC_CmdBusWidth>
 800a01a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	e003      	b.n	800a02e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a026:	2300      	movs	r3, #0
 800a028:	e001      	b.n	800a02e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a02a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b086      	sub	sp, #24
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a03e:	2300      	movs	r3, #0
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	2300      	movs	r3, #0
 800a044:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2100      	movs	r1, #0
 800a04c:	4618      	mov	r0, r3
 800a04e:	f001 febe 	bl	800bdce <SDIO_GetResponse>
 800a052:	4603      	mov	r3, r0
 800a054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a058:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a05c:	d102      	bne.n	800a064 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a05e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a062:	e02f      	b.n	800a0c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a064:	f107 030c 	add.w	r3, r7, #12
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f82e 	bl	800a0cc <SD_FindSCR>
 800a070:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	e023      	b.n	800a0c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d01c      	beq.n	800a0c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a08e:	041b      	lsls	r3, r3, #16
 800a090:	4619      	mov	r1, r3
 800a092:	4610      	mov	r0, r2
 800a094:	f002 f806 	bl	800c0a4 <SDMMC_CmdAppCommand>
 800a098:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	e00f      	b.n	800a0c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f002 f83f 	bl	800c12e <SDMMC_CmdBusWidth>
 800a0b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	e003      	b.n	800a0c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e001      	b.n	800a0c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a0cc:	b590      	push	{r4, r7, lr}
 800a0ce:	b08f      	sub	sp, #60	; 0x3c
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a0d6:	f7fa fe2b 	bl	8004d30 <HAL_GetTick>
 800a0da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60bb      	str	r3, [r7, #8]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2108      	movs	r1, #8
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 feaa 	bl	800be4c <SDMMC_CmdBlockLength>
 800a0f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	e0b2      	b.n	800a26a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a10c:	041b      	lsls	r3, r3, #16
 800a10e:	4619      	mov	r1, r3
 800a110:	4610      	mov	r0, r2
 800a112:	f001 ffc7 	bl	800c0a4 <SDMMC_CmdAppCommand>
 800a116:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	e0a3      	b.n	800a26a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a122:	f04f 33ff 	mov.w	r3, #4294967295
 800a126:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a128:	2308      	movs	r3, #8
 800a12a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a12c:	2330      	movs	r3, #48	; 0x30
 800a12e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a130:	2302      	movs	r3, #2
 800a132:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a134:	2300      	movs	r3, #0
 800a136:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a138:	2301      	movs	r3, #1
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f107 0210 	add.w	r2, r7, #16
 800a144:	4611      	mov	r1, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f001 fe54 	bl	800bdf4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	f002 f80e 	bl	800c172 <SDMMC_CmdSendSCR>
 800a156:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d02a      	beq.n	800a1b4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	e083      	b.n	800a26a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00f      	beq.n	800a190 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6819      	ldr	r1, [r3, #0]
 800a174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	f107 0208 	add.w	r2, r7, #8
 800a17c:	18d4      	adds	r4, r2, r3
 800a17e:	4608      	mov	r0, r1
 800a180:	f001 fdb3 	bl	800bcea <SDIO_ReadFIFO>
 800a184:	4603      	mov	r3, r0
 800a186:	6023      	str	r3, [r4, #0]
      index++;
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	3301      	adds	r3, #1
 800a18c:	637b      	str	r3, [r7, #52]	; 0x34
 800a18e:	e006      	b.n	800a19e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d012      	beq.n	800a1c4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a19e:	f7fa fdc7 	bl	8004d30 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ac:	d102      	bne.n	800a1b4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a1ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1b2:	e05a      	b.n	800a26a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ba:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0cf      	beq.n	800a162 <SD_FindSCR+0x96>
 800a1c2:	e000      	b.n	800a1c6 <SD_FindSCR+0xfa>
      break;
 800a1c4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1cc:	f003 0308 	and.w	r3, r3, #8
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d005      	beq.n	800a1e0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2208      	movs	r2, #8
 800a1da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a1dc:	2308      	movs	r3, #8
 800a1de:	e044      	b.n	800a26a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d005      	beq.n	800a1fa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	e037      	b.n	800a26a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2220      	movs	r2, #32
 800a20e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a210:	2320      	movs	r3, #32
 800a212:	e02a      	b.n	800a26a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f240 523a 	movw	r2, #1338	; 0x53a
 800a21c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	061a      	lsls	r2, r3, #24
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	021b      	lsls	r3, r3, #8
 800a226:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a22a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	0a1b      	lsrs	r3, r3, #8
 800a230:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a234:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	0e1b      	lsrs	r3, r3, #24
 800a23a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	601a      	str	r2, [r3, #0]
    scr++;
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	3304      	adds	r3, #4
 800a244:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	061a      	lsls	r2, r3, #24
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a252:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	0a1b      	lsrs	r3, r3, #8
 800a258:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a25c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	0e1b      	lsrs	r3, r3, #24
 800a262:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	373c      	adds	r7, #60	; 0x3c
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd90      	pop	{r4, r7, pc}

0800a272 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b086      	sub	sp, #24
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d03f      	beq.n	800a30c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	e033      	b.n	800a2fa <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4618      	mov	r0, r3
 800a298:	f001 fd27 	bl	800bcea <SDIO_ReadFIFO>
 800a29c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	0a1b      	lsrs	r3, r3, #8
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	0c1b      	lsrs	r3, r3, #16
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	0e1b      	lsrs	r3, r3, #24
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b07      	cmp	r3, #7
 800a2fe:	d9c8      	bls.n	800a292 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a30c:	bf00      	nop
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d043      	beq.n	800a3b6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a32e:	2300      	movs	r3, #0
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	e037      	b.n	800a3a4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3301      	adds	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	3b01      	subs	r3, #1
 800a344:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	021a      	lsls	r2, r3, #8
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	4313      	orrs	r3, r2
 800a350:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	3301      	adds	r3, #1
 800a356:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	041a      	lsls	r2, r3, #16
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	4313      	orrs	r3, r2
 800a368:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3301      	adds	r3, #1
 800a36e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	3b01      	subs	r3, #1
 800a374:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	061a      	lsls	r2, r3, #24
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3301      	adds	r3, #1
 800a386:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f107 0208 	add.w	r2, r7, #8
 800a396:	4611      	mov	r1, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f001 fcb3 	bl	800bd04 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	617b      	str	r3, [r7, #20]
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2b07      	cmp	r3, #7
 800a3a8:	d9c4      	bls.n	800a334 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a3b6:	bf00      	nop
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b082      	sub	sp, #8
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e07b      	b.n	800a4c8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d108      	bne.n	800a3ea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3e0:	d009      	beq.n	800a3f6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	61da      	str	r2, [r3, #28]
 800a3e8:	e005      	b.n	800a3f6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	d106      	bne.n	800a416 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7fa f9a9 	bl	8004768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2202      	movs	r2, #2
 800a41a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a42c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a448:	431a      	orrs	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	431a      	orrs	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	431a      	orrs	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a466:	431a      	orrs	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a470:	431a      	orrs	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a47a:	ea42 0103 	orr.w	r1, r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	0c1b      	lsrs	r3, r3, #16
 800a494:	f003 0104 	and.w	r1, r3, #4
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	f003 0210 	and.w	r2, r3, #16
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	69da      	ldr	r2, [r3, #28]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e041      	b.n	800a566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7fa f97e 	bl	80047f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3304      	adds	r3, #4
 800a50c:	4619      	mov	r1, r3
 800a50e:	4610      	mov	r0, r2
 800a510:	f000 f9ce 	bl	800a8b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b01      	cmp	r3, #1
 800a582:	d001      	beq.n	800a588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e04e      	b.n	800a626 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2202      	movs	r2, #2
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0201 	orr.w	r2, r2, #1
 800a59e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a23      	ldr	r2, [pc, #140]	; (800a634 <HAL_TIM_Base_Start_IT+0xc4>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d022      	beq.n	800a5f0 <HAL_TIM_Base_Start_IT+0x80>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b2:	d01d      	beq.n	800a5f0 <HAL_TIM_Base_Start_IT+0x80>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a1f      	ldr	r2, [pc, #124]	; (800a638 <HAL_TIM_Base_Start_IT+0xc8>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d018      	beq.n	800a5f0 <HAL_TIM_Base_Start_IT+0x80>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a1e      	ldr	r2, [pc, #120]	; (800a63c <HAL_TIM_Base_Start_IT+0xcc>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d013      	beq.n	800a5f0 <HAL_TIM_Base_Start_IT+0x80>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1c      	ldr	r2, [pc, #112]	; (800a640 <HAL_TIM_Base_Start_IT+0xd0>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d00e      	beq.n	800a5f0 <HAL_TIM_Base_Start_IT+0x80>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a1b      	ldr	r2, [pc, #108]	; (800a644 <HAL_TIM_Base_Start_IT+0xd4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d009      	beq.n	800a5f0 <HAL_TIM_Base_Start_IT+0x80>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a19      	ldr	r2, [pc, #100]	; (800a648 <HAL_TIM_Base_Start_IT+0xd8>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d004      	beq.n	800a5f0 <HAL_TIM_Base_Start_IT+0x80>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a18      	ldr	r2, [pc, #96]	; (800a64c <HAL_TIM_Base_Start_IT+0xdc>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d111      	bne.n	800a614 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b06      	cmp	r3, #6
 800a600:	d010      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f042 0201 	orr.w	r2, r2, #1
 800a610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a612:	e007      	b.n	800a624 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0201 	orr.w	r2, r2, #1
 800a622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	40010000 	.word	0x40010000
 800a638:	40000400 	.word	0x40000400
 800a63c:	40000800 	.word	0x40000800
 800a640:	40000c00 	.word	0x40000c00
 800a644:	40010400 	.word	0x40010400
 800a648:	40014000 	.word	0x40014000
 800a64c:	40001800 	.word	0x40001800

0800a650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b02      	cmp	r3, #2
 800a664:	d122      	bne.n	800a6ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f003 0302 	and.w	r3, r3, #2
 800a670:	2b02      	cmp	r3, #2
 800a672:	d11b      	bne.n	800a6ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f06f 0202 	mvn.w	r2, #2
 800a67c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f8ee 	bl	800a874 <HAL_TIM_IC_CaptureCallback>
 800a698:	e005      	b.n	800a6a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f8e0 	bl	800a860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f8f1 	bl	800a888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	f003 0304 	and.w	r3, r3, #4
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	d122      	bne.n	800a700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	f003 0304 	and.w	r3, r3, #4
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d11b      	bne.n	800a700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f06f 0204 	mvn.w	r2, #4
 800a6d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f8c4 	bl	800a874 <HAL_TIM_IC_CaptureCallback>
 800a6ec:	e005      	b.n	800a6fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f8b6 	bl	800a860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f8c7 	bl	800a888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	f003 0308 	and.w	r3, r3, #8
 800a70a:	2b08      	cmp	r3, #8
 800a70c:	d122      	bne.n	800a754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f003 0308 	and.w	r3, r3, #8
 800a718:	2b08      	cmp	r3, #8
 800a71a:	d11b      	bne.n	800a754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f06f 0208 	mvn.w	r2, #8
 800a724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2204      	movs	r2, #4
 800a72a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f89a 	bl	800a874 <HAL_TIM_IC_CaptureCallback>
 800a740:	e005      	b.n	800a74e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f88c 	bl	800a860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f89d 	bl	800a888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	f003 0310 	and.w	r3, r3, #16
 800a75e:	2b10      	cmp	r3, #16
 800a760:	d122      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0310 	and.w	r3, r3, #16
 800a76c:	2b10      	cmp	r3, #16
 800a76e:	d11b      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f06f 0210 	mvn.w	r2, #16
 800a778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2208      	movs	r2, #8
 800a77e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f870 	bl	800a874 <HAL_TIM_IC_CaptureCallback>
 800a794:	e005      	b.n	800a7a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f862 	bl	800a860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f873 	bl	800a888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d10e      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d107      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f06f 0201 	mvn.w	r2, #1
 800a7cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7f9 f94e 	bl	8003a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7de:	2b80      	cmp	r3, #128	; 0x80
 800a7e0:	d10e      	bne.n	800a800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ec:	2b80      	cmp	r3, #128	; 0x80
 800a7ee:	d107      	bne.n	800a800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f902 	bl	800aa04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80a:	2b40      	cmp	r3, #64	; 0x40
 800a80c:	d10e      	bne.n	800a82c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a818:	2b40      	cmp	r3, #64	; 0x40
 800a81a:	d107      	bne.n	800a82c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f838 	bl	800a89c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b20      	cmp	r3, #32
 800a838:	d10e      	bne.n	800a858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f003 0320 	and.w	r3, r3, #32
 800a844:	2b20      	cmp	r3, #32
 800a846:	d107      	bne.n	800a858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f06f 0220 	mvn.w	r2, #32
 800a850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f8cc 	bl	800a9f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a40      	ldr	r2, [pc, #256]	; (800a9c4 <TIM_Base_SetConfig+0x114>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d013      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ce:	d00f      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a3d      	ldr	r2, [pc, #244]	; (800a9c8 <TIM_Base_SetConfig+0x118>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d00b      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a3c      	ldr	r2, [pc, #240]	; (800a9cc <TIM_Base_SetConfig+0x11c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d007      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a3b      	ldr	r2, [pc, #236]	; (800a9d0 <TIM_Base_SetConfig+0x120>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d003      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a3a      	ldr	r2, [pc, #232]	; (800a9d4 <TIM_Base_SetConfig+0x124>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d108      	bne.n	800a902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a2f      	ldr	r2, [pc, #188]	; (800a9c4 <TIM_Base_SetConfig+0x114>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d02b      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a910:	d027      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a2c      	ldr	r2, [pc, #176]	; (800a9c8 <TIM_Base_SetConfig+0x118>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d023      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a2b      	ldr	r2, [pc, #172]	; (800a9cc <TIM_Base_SetConfig+0x11c>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d01f      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a2a      	ldr	r2, [pc, #168]	; (800a9d0 <TIM_Base_SetConfig+0x120>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d01b      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a29      	ldr	r2, [pc, #164]	; (800a9d4 <TIM_Base_SetConfig+0x124>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d017      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a28      	ldr	r2, [pc, #160]	; (800a9d8 <TIM_Base_SetConfig+0x128>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d013      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a27      	ldr	r2, [pc, #156]	; (800a9dc <TIM_Base_SetConfig+0x12c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d00f      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a26      	ldr	r2, [pc, #152]	; (800a9e0 <TIM_Base_SetConfig+0x130>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00b      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a25      	ldr	r2, [pc, #148]	; (800a9e4 <TIM_Base_SetConfig+0x134>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d007      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a24      	ldr	r2, [pc, #144]	; (800a9e8 <TIM_Base_SetConfig+0x138>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d003      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a23      	ldr	r2, [pc, #140]	; (800a9ec <TIM_Base_SetConfig+0x13c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d108      	bne.n	800a974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4313      	orrs	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	4313      	orrs	r3, r2
 800a980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	689a      	ldr	r2, [r3, #8]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a0a      	ldr	r2, [pc, #40]	; (800a9c4 <TIM_Base_SetConfig+0x114>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d003      	beq.n	800a9a8 <TIM_Base_SetConfig+0xf8>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a0c      	ldr	r2, [pc, #48]	; (800a9d4 <TIM_Base_SetConfig+0x124>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d103      	bne.n	800a9b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	691a      	ldr	r2, [r3, #16]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	615a      	str	r2, [r3, #20]
}
 800a9b6:	bf00      	nop
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40000400 	.word	0x40000400
 800a9cc:	40000800 	.word	0x40000800
 800a9d0:	40000c00 	.word	0x40000c00
 800a9d4:	40010400 	.word	0x40010400
 800a9d8:	40014000 	.word	0x40014000
 800a9dc:	40014400 	.word	0x40014400
 800a9e0:	40014800 	.word	0x40014800
 800a9e4:	40001800 	.word	0x40001800
 800a9e8:	40001c00 	.word	0x40001c00
 800a9ec:	40002000 	.word	0x40002000

0800a9f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e03f      	b.n	800aaaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7f9 ff20 	bl	8004884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2224      	movs	r2, #36	; 0x24
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 ff51 	bl	800b904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	691a      	ldr	r2, [r3, #16]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	695a      	ldr	r2, [r3, #20]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68da      	ldr	r2, [r3, #12]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2220      	movs	r2, #32
 800aaa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b08a      	sub	sp, #40	; 0x28
 800aab6:	af02      	add	r7, sp, #8
 800aab8:	60f8      	str	r0, [r7, #12]
 800aaba:	60b9      	str	r1, [r7, #8]
 800aabc:	603b      	str	r3, [r7, #0]
 800aabe:	4613      	mov	r3, r2
 800aac0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b20      	cmp	r3, #32
 800aad0:	d17c      	bne.n	800abcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <HAL_UART_Transmit+0x2c>
 800aad8:	88fb      	ldrh	r3, [r7, #6]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e075      	b.n	800abce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d101      	bne.n	800aaf0 <HAL_UART_Transmit+0x3e>
 800aaec:	2302      	movs	r3, #2
 800aaee:	e06e      	b.n	800abce <HAL_UART_Transmit+0x11c>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2221      	movs	r2, #33	; 0x21
 800ab02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab06:	f7fa f913 	bl	8004d30 <HAL_GetTick>
 800ab0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	88fa      	ldrh	r2, [r7, #6]
 800ab10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	88fa      	ldrh	r2, [r7, #6]
 800ab16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab20:	d108      	bne.n	800ab34 <HAL_UART_Transmit+0x82>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d104      	bne.n	800ab34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	61bb      	str	r3, [r7, #24]
 800ab32:	e003      	b.n	800ab3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ab44:	e02a      	b.n	800ab9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2180      	movs	r1, #128	; 0x80
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 fc7d 	bl	800b450 <UART_WaitOnFlagUntilTimeout>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e036      	b.n	800abce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10b      	bne.n	800ab7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	3302      	adds	r3, #2
 800ab7a:	61bb      	str	r3, [r7, #24]
 800ab7c:	e007      	b.n	800ab8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	781a      	ldrb	r2, [r3, #0]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	3b01      	subs	r3, #1
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1cf      	bne.n	800ab46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2200      	movs	r2, #0
 800abae:	2140      	movs	r1, #64	; 0x40
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f000 fc4d 	bl	800b450 <UART_WaitOnFlagUntilTimeout>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e006      	b.n	800abce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2220      	movs	r2, #32
 800abc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	e000      	b.n	800abce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800abcc:	2302      	movs	r3, #2
  }
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3720      	adds	r7, #32
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b08a      	sub	sp, #40	; 0x28
 800abda:	af02      	add	r7, sp, #8
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	603b      	str	r3, [r7, #0]
 800abe2:	4613      	mov	r3, r2
 800abe4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800abe6:	2300      	movs	r3, #0
 800abe8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b20      	cmp	r3, #32
 800abf4:	f040 808c 	bne.w	800ad10 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <HAL_UART_Receive+0x2e>
 800abfe:	88fb      	ldrh	r3, [r7, #6]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e084      	b.n	800ad12 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d101      	bne.n	800ac16 <HAL_UART_Receive+0x40>
 800ac12:	2302      	movs	r3, #2
 800ac14:	e07d      	b.n	800ad12 <HAL_UART_Receive+0x13c>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2222      	movs	r2, #34	; 0x22
 800ac28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac32:	f7fa f87d 	bl	8004d30 <HAL_GetTick>
 800ac36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	88fa      	ldrh	r2, [r7, #6]
 800ac3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	88fa      	ldrh	r2, [r7, #6]
 800ac42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4c:	d108      	bne.n	800ac60 <HAL_UART_Receive+0x8a>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d104      	bne.n	800ac60 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	61bb      	str	r3, [r7, #24]
 800ac5e:	e003      	b.n	800ac68 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac64:	2300      	movs	r3, #0
 800ac66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ac70:	e043      	b.n	800acfa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2120      	movs	r1, #32
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 fbe7 	bl	800b450 <UART_WaitOnFlagUntilTimeout>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e042      	b.n	800ad12 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10c      	bne.n	800acac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	3302      	adds	r3, #2
 800aca8:	61bb      	str	r3, [r7, #24]
 800acaa:	e01f      	b.n	800acec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb4:	d007      	beq.n	800acc6 <HAL_UART_Receive+0xf0>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10a      	bne.n	800acd4 <HAL_UART_Receive+0xfe>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	b2da      	uxtb	r2, r3
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	701a      	strb	r2, [r3, #0]
 800acd2:	e008      	b.n	800ace6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	3301      	adds	r3, #1
 800acea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3b01      	subs	r3, #1
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1b6      	bne.n	800ac72 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	e000      	b.n	800ad12 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800ad10:	2302      	movs	r3, #2
  }
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3720      	adds	r7, #32
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	60b9      	str	r1, [r7, #8]
 800ad24:	4613      	mov	r3, r2
 800ad26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b20      	cmp	r3, #32
 800ad32:	d11d      	bne.n	800ad70 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <HAL_UART_Receive_IT+0x26>
 800ad3a:	88fb      	ldrh	r3, [r7, #6]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e016      	b.n	800ad72 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d101      	bne.n	800ad52 <HAL_UART_Receive_IT+0x38>
 800ad4e:	2302      	movs	r3, #2
 800ad50:	e00f      	b.n	800ad72 <HAL_UART_Receive_IT+0x58>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad60:	88fb      	ldrh	r3, [r7, #6]
 800ad62:	461a      	mov	r2, r3
 800ad64:	68b9      	ldr	r1, [r7, #8]
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 fbe0 	bl	800b52c <UART_Start_Receive_IT>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	e000      	b.n	800ad72 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ad70:	2302      	movs	r3, #2
  }
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b09a      	sub	sp, #104	; 0x68
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	330c      	adds	r3, #12
 800ad8a:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ad94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad9a:	667b      	str	r3, [r7, #100]	; 0x64
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	330c      	adds	r3, #12
 800ada2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ada4:	657a      	str	r2, [r7, #84]	; 0x54
 800ada6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800adb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e5      	bne.n	800ad84 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3314      	adds	r3, #20
 800adbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	e853 3f00 	ldrex	r3, [r3]
 800adc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	f023 0301 	bic.w	r3, r3, #1
 800adce:	663b      	str	r3, [r7, #96]	; 0x60
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3314      	adds	r3, #20
 800add6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800add8:	643a      	str	r2, [r7, #64]	; 0x40
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800addc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ade0:	e841 2300 	strex	r3, r2, [r1]
 800ade4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1e5      	bne.n	800adb8 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d119      	bne.n	800ae28 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	330c      	adds	r3, #12
 800adfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	e853 3f00 	ldrex	r3, [r3]
 800ae02:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	f023 0310 	bic.w	r3, r3, #16
 800ae0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	330c      	adds	r3, #12
 800ae12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae1c:	e841 2300 	strex	r3, r2, [r1]
 800ae20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e5      	bne.n	800adf4 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae32:	2b40      	cmp	r3, #64	; 0x40
 800ae34:	d13f      	bne.n	800aeb6 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3314      	adds	r3, #20
 800ae3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae4c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3314      	adds	r3, #20
 800ae54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae56:	61ba      	str	r2, [r7, #24]
 800ae58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	6979      	ldr	r1, [r7, #20]
 800ae5c:	69ba      	ldr	r2, [r7, #24]
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	613b      	str	r3, [r7, #16]
   return(result);
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e5      	bne.n	800ae36 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d013      	beq.n	800ae9a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae76:	4a19      	ldr	r2, [pc, #100]	; (800aedc <HAL_UART_AbortReceive_IT+0x160>)
 800ae78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fa fc80 	bl	8005784 <HAL_DMA_Abort_IT>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d022      	beq.n	800aed0 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae94:	4610      	mov	r0, r2
 800ae96:	4798      	blx	r3
 800ae98:	e01a      	b.n	800aed0 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2220      	movs	r2, #32
 800aea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fab8 	bl	800b424 <HAL_UART_AbortReceiveCpltCallback>
 800aeb4:	e00c      	b.n	800aed0 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 faaa 	bl	800b424 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3768      	adds	r7, #104	; 0x68
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	0800b68f 	.word	0x0800b68f

0800aee0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b0ba      	sub	sp, #232	; 0xe8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800af06:	2300      	movs	r3, #0
 800af08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af16:	f003 030f 	and.w	r3, r3, #15
 800af1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800af1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10f      	bne.n	800af46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d009      	beq.n	800af46 <HAL_UART_IRQHandler+0x66>
 800af32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af36:	f003 0320 	and.w	r3, r3, #32
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fc25 	bl	800b78e <UART_Receive_IT>
      return;
 800af44:	e256      	b.n	800b3f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800af46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 80de 	beq.w	800b10c <HAL_UART_IRQHandler+0x22c>
 800af50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af54:	f003 0301 	and.w	r3, r3, #1
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d106      	bne.n	800af6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800af5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 80d1 	beq.w	800b10c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800af6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <HAL_UART_IRQHandler+0xae>
 800af76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d005      	beq.n	800af8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af86:	f043 0201 	orr.w	r2, r3, #1
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00b      	beq.n	800afb2 <HAL_UART_IRQHandler+0xd2>
 800af9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d005      	beq.n	800afb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afaa:	f043 0202 	orr.w	r2, r3, #2
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800afb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afb6:	f003 0302 	and.w	r3, r3, #2
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00b      	beq.n	800afd6 <HAL_UART_IRQHandler+0xf6>
 800afbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d005      	beq.n	800afd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afce:	f043 0204 	orr.w	r2, r3, #4
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800afd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afda:	f003 0308 	and.w	r3, r3, #8
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d011      	beq.n	800b006 <HAL_UART_IRQHandler+0x126>
 800afe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afe6:	f003 0320 	and.w	r3, r3, #32
 800afea:	2b00      	cmp	r3, #0
 800afec:	d105      	bne.n	800affa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800afee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d005      	beq.n	800b006 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	f043 0208 	orr.w	r2, r3, #8
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f000 81ed 	beq.w	800b3ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b014:	f003 0320 	and.w	r3, r3, #32
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d008      	beq.n	800b02e <HAL_UART_IRQHandler+0x14e>
 800b01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b020:	f003 0320 	and.w	r3, r3, #32
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fbb0 	bl	800b78e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b038:	2b40      	cmp	r3, #64	; 0x40
 800b03a:	bf0c      	ite	eq
 800b03c:	2301      	moveq	r3, #1
 800b03e:	2300      	movne	r3, #0
 800b040:	b2db      	uxtb	r3, r3
 800b042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04a:	f003 0308 	and.w	r3, r3, #8
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d103      	bne.n	800b05a <HAL_UART_IRQHandler+0x17a>
 800b052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b056:	2b00      	cmp	r3, #0
 800b058:	d04f      	beq.n	800b0fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 faa0 	bl	800b5a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06a:	2b40      	cmp	r3, #64	; 0x40
 800b06c:	d141      	bne.n	800b0f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3314      	adds	r3, #20
 800b074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3314      	adds	r3, #20
 800b096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b09a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b09e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b0a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b0aa:	e841 2300 	strex	r3, r2, [r1]
 800b0ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b0b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1d9      	bne.n	800b06e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d013      	beq.n	800b0ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c6:	4a7d      	ldr	r2, [pc, #500]	; (800b2bc <HAL_UART_IRQHandler+0x3dc>)
 800b0c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fa fb58 	bl	8005784 <HAL_DMA_Abort_IT>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d016      	beq.n	800b108 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0e8:	e00e      	b.n	800b108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f990 	bl	800b410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f0:	e00a      	b.n	800b108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f98c 	bl	800b410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f8:	e006      	b.n	800b108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f988 	bl	800b410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b106:	e170      	b.n	800b3ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b108:	bf00      	nop
    return;
 800b10a:	e16e      	b.n	800b3ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b110:	2b01      	cmp	r3, #1
 800b112:	f040 814a 	bne.w	800b3aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b11a:	f003 0310 	and.w	r3, r3, #16
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f000 8143 	beq.w	800b3aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b128:	f003 0310 	and.w	r3, r3, #16
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 813c 	beq.w	800b3aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b132:	2300      	movs	r3, #0
 800b134:	60bb      	str	r3, [r7, #8]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	60bb      	str	r3, [r7, #8]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	60bb      	str	r3, [r7, #8]
 800b146:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b152:	2b40      	cmp	r3, #64	; 0x40
 800b154:	f040 80b4 	bne.w	800b2c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 8140 	beq.w	800b3ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b176:	429a      	cmp	r2, r3
 800b178:	f080 8139 	bcs.w	800b3ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b182:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b188:	69db      	ldr	r3, [r3, #28]
 800b18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b18e:	f000 8088 	beq.w	800b2a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	330c      	adds	r3, #12
 800b198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b1a0:	e853 3f00 	ldrex	r3, [r3]
 800b1a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b1a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b1be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b1c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b1ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b1ce:	e841 2300 	strex	r3, r2, [r1]
 800b1d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b1d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1d9      	bne.n	800b192 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3314      	adds	r3, #20
 800b1e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1e8:	e853 3f00 	ldrex	r3, [r3]
 800b1ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b1ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1f0:	f023 0301 	bic.w	r3, r3, #1
 800b1f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	3314      	adds	r3, #20
 800b1fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b20a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b20e:	e841 2300 	strex	r3, r2, [r1]
 800b212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1e1      	bne.n	800b1de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3314      	adds	r3, #20
 800b220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b22a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3314      	adds	r3, #20
 800b23a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b23e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b24c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e3      	bne.n	800b21a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2220      	movs	r2, #32
 800b256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	330c      	adds	r3, #12
 800b266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26a:	e853 3f00 	ldrex	r3, [r3]
 800b26e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b272:	f023 0310 	bic.w	r3, r3, #16
 800b276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	330c      	adds	r3, #12
 800b280:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b284:	65ba      	str	r2, [r7, #88]	; 0x58
 800b286:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b288:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b28a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b28c:	e841 2300 	strex	r3, r2, [r1]
 800b290:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1e3      	bne.n	800b260 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fa fa01 	bl	80056a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f8c0 	bl	800b438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2b8:	e099      	b.n	800b3ee <HAL_UART_IRQHandler+0x50e>
 800b2ba:	bf00      	nop
 800b2bc:	0800b667 	.word	0x0800b667
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 808b 	beq.w	800b3f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b2dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 8086 	beq.w	800b3f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	330c      	adds	r3, #12
 800b2ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	330c      	adds	r3, #12
 800b306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b30a:	647a      	str	r2, [r7, #68]	; 0x44
 800b30c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e3      	bne.n	800b2e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3314      	adds	r3, #20
 800b324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	e853 3f00 	ldrex	r3, [r3]
 800b32c:	623b      	str	r3, [r7, #32]
   return(result);
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	f023 0301 	bic.w	r3, r3, #1
 800b334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3314      	adds	r3, #20
 800b33e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b342:	633a      	str	r2, [r7, #48]	; 0x30
 800b344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b34a:	e841 2300 	strex	r3, r2, [r1]
 800b34e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1e3      	bne.n	800b31e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2220      	movs	r2, #32
 800b35a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	330c      	adds	r3, #12
 800b36a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	e853 3f00 	ldrex	r3, [r3]
 800b372:	60fb      	str	r3, [r7, #12]
   return(result);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f023 0310 	bic.w	r3, r3, #16
 800b37a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	330c      	adds	r3, #12
 800b384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b388:	61fa      	str	r2, [r7, #28]
 800b38a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38c:	69b9      	ldr	r1, [r7, #24]
 800b38e:	69fa      	ldr	r2, [r7, #28]
 800b390:	e841 2300 	strex	r3, r2, [r1]
 800b394:	617b      	str	r3, [r7, #20]
   return(result);
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1e3      	bne.n	800b364 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b39c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f848 	bl	800b438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b3a8:	e023      	b.n	800b3f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b3aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <HAL_UART_IRQHandler+0x4ea>
 800b3b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f97b 	bl	800b6be <UART_Transmit_IT>
    return;
 800b3c8:	e014      	b.n	800b3f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00e      	beq.n	800b3f4 <HAL_UART_IRQHandler+0x514>
 800b3d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d008      	beq.n	800b3f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f9bb 	bl	800b75e <UART_EndTransmit_IT>
    return;
 800b3e8:	e004      	b.n	800b3f4 <HAL_UART_IRQHandler+0x514>
    return;
 800b3ea:	bf00      	nop
 800b3ec:	e002      	b.n	800b3f4 <HAL_UART_IRQHandler+0x514>
      return;
 800b3ee:	bf00      	nop
 800b3f0:	e000      	b.n	800b3f4 <HAL_UART_IRQHandler+0x514>
      return;
 800b3f2:	bf00      	nop
  }
}
 800b3f4:	37e8      	adds	r7, #232	; 0xe8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop

0800b3fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b090      	sub	sp, #64	; 0x40
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	4613      	mov	r3, r2
 800b45e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b460:	e050      	b.n	800b504 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b468:	d04c      	beq.n	800b504 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b46a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d007      	beq.n	800b480 <UART_WaitOnFlagUntilTimeout+0x30>
 800b470:	f7f9 fc5e 	bl	8004d30 <HAL_GetTick>
 800b474:	4602      	mov	r2, r0
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d241      	bcs.n	800b504 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	330c      	adds	r3, #12
 800b486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48a:	e853 3f00 	ldrex	r3, [r3]
 800b48e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b496:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	330c      	adds	r3, #12
 800b49e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4a0:	637a      	str	r2, [r7, #52]	; 0x34
 800b4a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e5      	bne.n	800b480 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3314      	adds	r3, #20
 800b4ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	e853 3f00 	ldrex	r3, [r3]
 800b4c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	f023 0301 	bic.w	r3, r3, #1
 800b4ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3314      	adds	r3, #20
 800b4d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4d4:	623a      	str	r2, [r7, #32]
 800b4d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d8:	69f9      	ldr	r1, [r7, #28]
 800b4da:	6a3a      	ldr	r2, [r7, #32]
 800b4dc:	e841 2300 	strex	r3, r2, [r1]
 800b4e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1e5      	bne.n	800b4b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2220      	movs	r2, #32
 800b4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2220      	movs	r2, #32
 800b4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e00f      	b.n	800b524 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	4013      	ands	r3, r2
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	429a      	cmp	r2, r3
 800b512:	bf0c      	ite	eq
 800b514:	2301      	moveq	r3, #1
 800b516:	2300      	movne	r3, #0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	461a      	mov	r2, r3
 800b51c:	79fb      	ldrb	r3, [r7, #7]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d09f      	beq.n	800b462 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3740      	adds	r7, #64	; 0x40
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	4613      	mov	r3, r2
 800b538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	88fa      	ldrh	r2, [r7, #6]
 800b544:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	88fa      	ldrh	r2, [r7, #6]
 800b54a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2222      	movs	r2, #34	; 0x22
 800b556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68da      	ldr	r2, [r3, #12]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b570:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	695a      	ldr	r2, [r3, #20]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f042 0201 	orr.w	r2, r2, #1
 800b580:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68da      	ldr	r2, [r3, #12]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f042 0220 	orr.w	r2, r2, #32
 800b590:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b095      	sub	sp, #84	; 0x54
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	330c      	adds	r3, #12
 800b5ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b2:	e853 3f00 	ldrex	r3, [r3]
 800b5b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	330c      	adds	r3, #12
 800b5c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5c8:	643a      	str	r2, [r7, #64]	; 0x40
 800b5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5d0:	e841 2300 	strex	r3, r2, [r1]
 800b5d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e5      	bne.n	800b5a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3314      	adds	r3, #20
 800b5e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	e853 3f00 	ldrex	r3, [r3]
 800b5ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	f023 0301 	bic.w	r3, r3, #1
 800b5f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3314      	adds	r3, #20
 800b5fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b604:	e841 2300 	strex	r3, r2, [r1]
 800b608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1e5      	bne.n	800b5dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b614:	2b01      	cmp	r3, #1
 800b616:	d119      	bne.n	800b64c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	330c      	adds	r3, #12
 800b61e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	e853 3f00 	ldrex	r3, [r3]
 800b626:	60bb      	str	r3, [r7, #8]
   return(result);
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	f023 0310 	bic.w	r3, r3, #16
 800b62e:	647b      	str	r3, [r7, #68]	; 0x44
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	330c      	adds	r3, #12
 800b636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b638:	61ba      	str	r2, [r7, #24]
 800b63a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63c:	6979      	ldr	r1, [r7, #20]
 800b63e:	69ba      	ldr	r2, [r7, #24]
 800b640:	e841 2300 	strex	r3, r2, [r1]
 800b644:	613b      	str	r3, [r7, #16]
   return(result);
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1e5      	bne.n	800b618 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2220      	movs	r2, #32
 800b650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b65a:	bf00      	nop
 800b65c:	3754      	adds	r7, #84	; 0x54
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7ff fec5 	bl	800b410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b686:	bf00      	nop
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff feb7 	bl	800b424 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6b6:	bf00      	nop
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b085      	sub	sp, #20
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b21      	cmp	r3, #33	; 0x21
 800b6d0:	d13e      	bne.n	800b750 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6da:	d114      	bne.n	800b706 <UART_Transmit_IT+0x48>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d110      	bne.n	800b706 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	1c9a      	adds	r2, r3, #2
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	621a      	str	r2, [r3, #32]
 800b704:	e008      	b.n	800b718 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	1c59      	adds	r1, r3, #1
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	6211      	str	r1, [r2, #32]
 800b710:	781a      	ldrb	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	3b01      	subs	r3, #1
 800b720:	b29b      	uxth	r3, r3
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	4619      	mov	r1, r3
 800b726:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10f      	bne.n	800b74c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68da      	ldr	r2, [r3, #12]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b73a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b74a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	e000      	b.n	800b752 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b750:	2302      	movs	r3, #2
  }
}
 800b752:	4618      	mov	r0, r3
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b774:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2220      	movs	r2, #32
 800b77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7ff fe3c 	bl	800b3fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b08c      	sub	sp, #48	; 0x30
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b22      	cmp	r3, #34	; 0x22
 800b7a0:	f040 80ab 	bne.w	800b8fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ac:	d117      	bne.n	800b7de <UART_Receive_IT+0x50>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d113      	bne.n	800b7de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d6:	1c9a      	adds	r2, r3, #2
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	629a      	str	r2, [r3, #40]	; 0x28
 800b7dc:	e026      	b.n	800b82c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f0:	d007      	beq.n	800b802 <UART_Receive_IT+0x74>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10a      	bne.n	800b810 <UART_Receive_IT+0x82>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d106      	bne.n	800b810 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80c:	701a      	strb	r2, [r3, #0]
 800b80e:	e008      	b.n	800b822 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	b2db      	uxtb	r3, r3
 800b818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b820:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b830:	b29b      	uxth	r3, r3
 800b832:	3b01      	subs	r3, #1
 800b834:	b29b      	uxth	r3, r3
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	4619      	mov	r1, r3
 800b83a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d15a      	bne.n	800b8f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68da      	ldr	r2, [r3, #12]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f022 0220 	bic.w	r2, r2, #32
 800b84e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68da      	ldr	r2, [r3, #12]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b85e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	695a      	ldr	r2, [r3, #20]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f022 0201 	bic.w	r2, r2, #1
 800b86e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2220      	movs	r2, #32
 800b874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d135      	bne.n	800b8ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	330c      	adds	r3, #12
 800b88c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	e853 3f00 	ldrex	r3, [r3]
 800b894:	613b      	str	r3, [r7, #16]
   return(result);
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	f023 0310 	bic.w	r3, r3, #16
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	330c      	adds	r3, #12
 800b8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a6:	623a      	str	r2, [r7, #32]
 800b8a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	69f9      	ldr	r1, [r7, #28]
 800b8ac:	6a3a      	ldr	r2, [r7, #32]
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e5      	bne.n	800b886 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f003 0310 	and.w	r3, r3, #16
 800b8c4:	2b10      	cmp	r3, #16
 800b8c6:	d10a      	bne.n	800b8de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	60fb      	str	r3, [r7, #12]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff fda7 	bl	800b438 <HAL_UARTEx_RxEventCallback>
 800b8ea:	e002      	b.n	800b8f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7f8 f9c3 	bl	8003c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	e002      	b.n	800b8fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e000      	b.n	800b8fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b8fa:	2302      	movs	r3, #2
  }
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3730      	adds	r7, #48	; 0x30
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b908:	b09f      	sub	sp, #124	; 0x7c
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b90e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b91a:	68d9      	ldr	r1, [r3, #12]
 800b91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	ea40 0301 	orr.w	r3, r0, r1
 800b924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b928:	689a      	ldr	r2, [r3, #8]
 800b92a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	431a      	orrs	r2, r3
 800b930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b932:	695b      	ldr	r3, [r3, #20]
 800b934:	431a      	orrs	r2, r3
 800b936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b938:	69db      	ldr	r3, [r3, #28]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b93e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b948:	f021 010c 	bic.w	r1, r1, #12
 800b94c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b952:	430b      	orrs	r3, r1
 800b954:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b962:	6999      	ldr	r1, [r3, #24]
 800b964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	ea40 0301 	orr.w	r3, r0, r1
 800b96c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b96e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4bc5      	ldr	r3, [pc, #788]	; (800bc88 <UART_SetConfig+0x384>)
 800b974:	429a      	cmp	r2, r3
 800b976:	d004      	beq.n	800b982 <UART_SetConfig+0x7e>
 800b978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	4bc3      	ldr	r3, [pc, #780]	; (800bc8c <UART_SetConfig+0x388>)
 800b97e:	429a      	cmp	r2, r3
 800b980:	d103      	bne.n	800b98a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b982:	f7fd f9d9 	bl	8008d38 <HAL_RCC_GetPCLK2Freq>
 800b986:	6778      	str	r0, [r7, #116]	; 0x74
 800b988:	e002      	b.n	800b990 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b98a:	f7fd f9c1 	bl	8008d10 <HAL_RCC_GetPCLK1Freq>
 800b98e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b998:	f040 80b6 	bne.w	800bb08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b99c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b99e:	461c      	mov	r4, r3
 800b9a0:	f04f 0500 	mov.w	r5, #0
 800b9a4:	4622      	mov	r2, r4
 800b9a6:	462b      	mov	r3, r5
 800b9a8:	1891      	adds	r1, r2, r2
 800b9aa:	6439      	str	r1, [r7, #64]	; 0x40
 800b9ac:	415b      	adcs	r3, r3
 800b9ae:	647b      	str	r3, [r7, #68]	; 0x44
 800b9b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9b4:	1912      	adds	r2, r2, r4
 800b9b6:	eb45 0303 	adc.w	r3, r5, r3
 800b9ba:	f04f 0000 	mov.w	r0, #0
 800b9be:	f04f 0100 	mov.w	r1, #0
 800b9c2:	00d9      	lsls	r1, r3, #3
 800b9c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b9c8:	00d0      	lsls	r0, r2, #3
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	1911      	adds	r1, r2, r4
 800b9d0:	6639      	str	r1, [r7, #96]	; 0x60
 800b9d2:	416b      	adcs	r3, r5
 800b9d4:	667b      	str	r3, [r7, #100]	; 0x64
 800b9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	f04f 0300 	mov.w	r3, #0
 800b9e0:	1891      	adds	r1, r2, r2
 800b9e2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b9e4:	415b      	adcs	r3, r3
 800b9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b9ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b9f0:	f7f5 f95a 	bl	8000ca8 <__aeabi_uldivmod>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4ba5      	ldr	r3, [pc, #660]	; (800bc90 <UART_SetConfig+0x38c>)
 800b9fa:	fba3 2302 	umull	r2, r3, r3, r2
 800b9fe:	095b      	lsrs	r3, r3, #5
 800ba00:	011e      	lsls	r6, r3, #4
 800ba02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba04:	461c      	mov	r4, r3
 800ba06:	f04f 0500 	mov.w	r5, #0
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	462b      	mov	r3, r5
 800ba0e:	1891      	adds	r1, r2, r2
 800ba10:	6339      	str	r1, [r7, #48]	; 0x30
 800ba12:	415b      	adcs	r3, r3
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
 800ba16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ba1a:	1912      	adds	r2, r2, r4
 800ba1c:	eb45 0303 	adc.w	r3, r5, r3
 800ba20:	f04f 0000 	mov.w	r0, #0
 800ba24:	f04f 0100 	mov.w	r1, #0
 800ba28:	00d9      	lsls	r1, r3, #3
 800ba2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ba2e:	00d0      	lsls	r0, r2, #3
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	1911      	adds	r1, r2, r4
 800ba36:	65b9      	str	r1, [r7, #88]	; 0x58
 800ba38:	416b      	adcs	r3, r5
 800ba3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	461a      	mov	r2, r3
 800ba42:	f04f 0300 	mov.w	r3, #0
 800ba46:	1891      	adds	r1, r2, r2
 800ba48:	62b9      	str	r1, [r7, #40]	; 0x28
 800ba4a:	415b      	adcs	r3, r3
 800ba4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ba56:	f7f5 f927 	bl	8000ca8 <__aeabi_uldivmod>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4b8c      	ldr	r3, [pc, #560]	; (800bc90 <UART_SetConfig+0x38c>)
 800ba60:	fba3 1302 	umull	r1, r3, r3, r2
 800ba64:	095b      	lsrs	r3, r3, #5
 800ba66:	2164      	movs	r1, #100	; 0x64
 800ba68:	fb01 f303 	mul.w	r3, r1, r3
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	3332      	adds	r3, #50	; 0x32
 800ba72:	4a87      	ldr	r2, [pc, #540]	; (800bc90 <UART_SetConfig+0x38c>)
 800ba74:	fba2 2303 	umull	r2, r3, r2, r3
 800ba78:	095b      	lsrs	r3, r3, #5
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba80:	441e      	add	r6, r3
 800ba82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba84:	4618      	mov	r0, r3
 800ba86:	f04f 0100 	mov.w	r1, #0
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	1894      	adds	r4, r2, r2
 800ba90:	623c      	str	r4, [r7, #32]
 800ba92:	415b      	adcs	r3, r3
 800ba94:	627b      	str	r3, [r7, #36]	; 0x24
 800ba96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba9a:	1812      	adds	r2, r2, r0
 800ba9c:	eb41 0303 	adc.w	r3, r1, r3
 800baa0:	f04f 0400 	mov.w	r4, #0
 800baa4:	f04f 0500 	mov.w	r5, #0
 800baa8:	00dd      	lsls	r5, r3, #3
 800baaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800baae:	00d4      	lsls	r4, r2, #3
 800bab0:	4622      	mov	r2, r4
 800bab2:	462b      	mov	r3, r5
 800bab4:	1814      	adds	r4, r2, r0
 800bab6:	653c      	str	r4, [r7, #80]	; 0x50
 800bab8:	414b      	adcs	r3, r1
 800baba:	657b      	str	r3, [r7, #84]	; 0x54
 800babc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	461a      	mov	r2, r3
 800bac2:	f04f 0300 	mov.w	r3, #0
 800bac6:	1891      	adds	r1, r2, r2
 800bac8:	61b9      	str	r1, [r7, #24]
 800baca:	415b      	adcs	r3, r3
 800bacc:	61fb      	str	r3, [r7, #28]
 800bace:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bad2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800bad6:	f7f5 f8e7 	bl	8000ca8 <__aeabi_uldivmod>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4b6c      	ldr	r3, [pc, #432]	; (800bc90 <UART_SetConfig+0x38c>)
 800bae0:	fba3 1302 	umull	r1, r3, r3, r2
 800bae4:	095b      	lsrs	r3, r3, #5
 800bae6:	2164      	movs	r1, #100	; 0x64
 800bae8:	fb01 f303 	mul.w	r3, r1, r3
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	3332      	adds	r3, #50	; 0x32
 800baf2:	4a67      	ldr	r2, [pc, #412]	; (800bc90 <UART_SetConfig+0x38c>)
 800baf4:	fba2 2303 	umull	r2, r3, r2, r3
 800baf8:	095b      	lsrs	r3, r3, #5
 800bafa:	f003 0207 	and.w	r2, r3, #7
 800bafe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4432      	add	r2, r6
 800bb04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bb06:	e0b9      	b.n	800bc7c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb0a:	461c      	mov	r4, r3
 800bb0c:	f04f 0500 	mov.w	r5, #0
 800bb10:	4622      	mov	r2, r4
 800bb12:	462b      	mov	r3, r5
 800bb14:	1891      	adds	r1, r2, r2
 800bb16:	6139      	str	r1, [r7, #16]
 800bb18:	415b      	adcs	r3, r3
 800bb1a:	617b      	str	r3, [r7, #20]
 800bb1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bb20:	1912      	adds	r2, r2, r4
 800bb22:	eb45 0303 	adc.w	r3, r5, r3
 800bb26:	f04f 0000 	mov.w	r0, #0
 800bb2a:	f04f 0100 	mov.w	r1, #0
 800bb2e:	00d9      	lsls	r1, r3, #3
 800bb30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb34:	00d0      	lsls	r0, r2, #3
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	eb12 0804 	adds.w	r8, r2, r4
 800bb3e:	eb43 0905 	adc.w	r9, r3, r5
 800bb42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f04f 0100 	mov.w	r1, #0
 800bb4c:	f04f 0200 	mov.w	r2, #0
 800bb50:	f04f 0300 	mov.w	r3, #0
 800bb54:	008b      	lsls	r3, r1, #2
 800bb56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bb5a:	0082      	lsls	r2, r0, #2
 800bb5c:	4640      	mov	r0, r8
 800bb5e:	4649      	mov	r1, r9
 800bb60:	f7f5 f8a2 	bl	8000ca8 <__aeabi_uldivmod>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4b49      	ldr	r3, [pc, #292]	; (800bc90 <UART_SetConfig+0x38c>)
 800bb6a:	fba3 2302 	umull	r2, r3, r3, r2
 800bb6e:	095b      	lsrs	r3, r3, #5
 800bb70:	011e      	lsls	r6, r3, #4
 800bb72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb74:	4618      	mov	r0, r3
 800bb76:	f04f 0100 	mov.w	r1, #0
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	1894      	adds	r4, r2, r2
 800bb80:	60bc      	str	r4, [r7, #8]
 800bb82:	415b      	adcs	r3, r3
 800bb84:	60fb      	str	r3, [r7, #12]
 800bb86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb8a:	1812      	adds	r2, r2, r0
 800bb8c:	eb41 0303 	adc.w	r3, r1, r3
 800bb90:	f04f 0400 	mov.w	r4, #0
 800bb94:	f04f 0500 	mov.w	r5, #0
 800bb98:	00dd      	lsls	r5, r3, #3
 800bb9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bb9e:	00d4      	lsls	r4, r2, #3
 800bba0:	4622      	mov	r2, r4
 800bba2:	462b      	mov	r3, r5
 800bba4:	1814      	adds	r4, r2, r0
 800bba6:	64bc      	str	r4, [r7, #72]	; 0x48
 800bba8:	414b      	adcs	r3, r1
 800bbaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f04f 0100 	mov.w	r1, #0
 800bbb6:	f04f 0200 	mov.w	r2, #0
 800bbba:	f04f 0300 	mov.w	r3, #0
 800bbbe:	008b      	lsls	r3, r1, #2
 800bbc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bbc4:	0082      	lsls	r2, r0, #2
 800bbc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bbca:	f7f5 f86d 	bl	8000ca8 <__aeabi_uldivmod>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4b2f      	ldr	r3, [pc, #188]	; (800bc90 <UART_SetConfig+0x38c>)
 800bbd4:	fba3 1302 	umull	r1, r3, r3, r2
 800bbd8:	095b      	lsrs	r3, r3, #5
 800bbda:	2164      	movs	r1, #100	; 0x64
 800bbdc:	fb01 f303 	mul.w	r3, r1, r3
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	011b      	lsls	r3, r3, #4
 800bbe4:	3332      	adds	r3, #50	; 0x32
 800bbe6:	4a2a      	ldr	r2, [pc, #168]	; (800bc90 <UART_SetConfig+0x38c>)
 800bbe8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbec:	095b      	lsrs	r3, r3, #5
 800bbee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbf2:	441e      	add	r6, r3
 800bbf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f04f 0100 	mov.w	r1, #0
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	1894      	adds	r4, r2, r2
 800bc02:	603c      	str	r4, [r7, #0]
 800bc04:	415b      	adcs	r3, r3
 800bc06:	607b      	str	r3, [r7, #4]
 800bc08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc0c:	1812      	adds	r2, r2, r0
 800bc0e:	eb41 0303 	adc.w	r3, r1, r3
 800bc12:	f04f 0400 	mov.w	r4, #0
 800bc16:	f04f 0500 	mov.w	r5, #0
 800bc1a:	00dd      	lsls	r5, r3, #3
 800bc1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bc20:	00d4      	lsls	r4, r2, #3
 800bc22:	4622      	mov	r2, r4
 800bc24:	462b      	mov	r3, r5
 800bc26:	eb12 0a00 	adds.w	sl, r2, r0
 800bc2a:	eb43 0b01 	adc.w	fp, r3, r1
 800bc2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f04f 0100 	mov.w	r1, #0
 800bc38:	f04f 0200 	mov.w	r2, #0
 800bc3c:	f04f 0300 	mov.w	r3, #0
 800bc40:	008b      	lsls	r3, r1, #2
 800bc42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bc46:	0082      	lsls	r2, r0, #2
 800bc48:	4650      	mov	r0, sl
 800bc4a:	4659      	mov	r1, fp
 800bc4c:	f7f5 f82c 	bl	8000ca8 <__aeabi_uldivmod>
 800bc50:	4602      	mov	r2, r0
 800bc52:	460b      	mov	r3, r1
 800bc54:	4b0e      	ldr	r3, [pc, #56]	; (800bc90 <UART_SetConfig+0x38c>)
 800bc56:	fba3 1302 	umull	r1, r3, r3, r2
 800bc5a:	095b      	lsrs	r3, r3, #5
 800bc5c:	2164      	movs	r1, #100	; 0x64
 800bc5e:	fb01 f303 	mul.w	r3, r1, r3
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	011b      	lsls	r3, r3, #4
 800bc66:	3332      	adds	r3, #50	; 0x32
 800bc68:	4a09      	ldr	r2, [pc, #36]	; (800bc90 <UART_SetConfig+0x38c>)
 800bc6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc6e:	095b      	lsrs	r3, r3, #5
 800bc70:	f003 020f 	and.w	r2, r3, #15
 800bc74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4432      	add	r2, r6
 800bc7a:	609a      	str	r2, [r3, #8]
}
 800bc7c:	bf00      	nop
 800bc7e:	377c      	adds	r7, #124	; 0x7c
 800bc80:	46bd      	mov	sp, r7
 800bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc86:	bf00      	nop
 800bc88:	40011000 	.word	0x40011000
 800bc8c:	40011400 	.word	0x40011400
 800bc90:	51eb851f 	.word	0x51eb851f

0800bc94 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800bc94:	b084      	sub	sp, #16
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	f107 001c 	add.w	r0, r7, #28
 800bca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bcaa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bcac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bcae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bcb2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bcb6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bcba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bcbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800bcce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	431a      	orrs	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	b004      	add	sp, #16
 800bce8:	4770      	bx	lr

0800bcea <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b083      	sub	sp, #12
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b082      	sub	sp, #8
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2203      	movs	r2, #3
 800bd32:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bd34:	2002      	movs	r0, #2
 800bd36:	f7f9 f807 	bl	8004d48 <HAL_Delay>
  
  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0303 	and.w	r3, r3, #3
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd7e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bd84:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bd8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bd9a:	f023 030f 	bic.w	r3, r3, #15
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	431a      	orrs	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	b2db      	uxtb	r3, r3
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800bdce:	b480      	push	{r7}
 800bdd0:	b085      	sub	sp, #20
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	3314      	adds	r3, #20
 800bddc:	461a      	mov	r2, r3
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	4413      	add	r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
}  
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdfe:	2300      	movs	r3, #0
 800be00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	685a      	ldr	r2, [r3, #4]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be1a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800be20:	431a      	orrs	r2, r3
                       Data->DPSM);
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800be26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be32:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	431a      	orrs	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800be3e:	2300      	movs	r3, #0

}
 800be40:	4618      	mov	r0, r3
 800be42:	3714      	adds	r7, #20
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800be5a:	2310      	movs	r3, #16
 800be5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be5e:	2340      	movs	r3, #64	; 0x40
 800be60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be62:	2300      	movs	r3, #0
 800be64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be6c:	f107 0308 	add.w	r3, r7, #8
 800be70:	4619      	mov	r1, r3
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff ff74 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800be78:	f241 3288 	movw	r2, #5000	; 0x1388
 800be7c:	2110      	movs	r1, #16
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa44 	bl	800c30c <SDMMC_GetCmdResp1>
 800be84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be86:	69fb      	ldr	r3, [r7, #28]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3720      	adds	r7, #32
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800be9e:	2311      	movs	r3, #17
 800bea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bea2:	2340      	movs	r3, #64	; 0x40
 800bea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800beaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800beb0:	f107 0308 	add.w	r3, r7, #8
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7ff ff52 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bebc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec0:	2111      	movs	r1, #17
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fa22 	bl	800c30c <SDMMC_GetCmdResp1>
 800bec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beca:	69fb      	ldr	r3, [r7, #28]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3720      	adds	r7, #32
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bee2:	2312      	movs	r3, #18
 800bee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bee6:	2340      	movs	r3, #64	; 0x40
 800bee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800beea:	2300      	movs	r3, #0
 800beec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800beee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bef2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bef4:	f107 0308 	add.w	r3, r7, #8
 800bef8:	4619      	mov	r1, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff ff30 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bf00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf04:	2112      	movs	r1, #18
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fa00 	bl	800c30c <SDMMC_GetCmdResp1>
 800bf0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf0e:	69fb      	ldr	r3, [r7, #28]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3720      	adds	r7, #32
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b088      	sub	sp, #32
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bf26:	2318      	movs	r3, #24
 800bf28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf2a:	2340      	movs	r3, #64	; 0x40
 800bf2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf38:	f107 0308 	add.w	r3, r7, #8
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7ff ff0e 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bf44:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf48:	2118      	movs	r1, #24
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f9de 	bl	800c30c <SDMMC_GetCmdResp1>
 800bf50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf52:	69fb      	ldr	r3, [r7, #28]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3720      	adds	r7, #32
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b088      	sub	sp, #32
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bf6a:	2319      	movs	r3, #25
 800bf6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf6e:	2340      	movs	r3, #64	; 0x40
 800bf70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf72:	2300      	movs	r3, #0
 800bf74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf7c:	f107 0308 	add.w	r3, r7, #8
 800bf80:	4619      	mov	r1, r3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff feec 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bf88:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf8c:	2119      	movs	r1, #25
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f9bc 	bl	800c30c <SDMMC_GetCmdResp1>
 800bf94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf96:	69fb      	ldr	r3, [r7, #28]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b088      	sub	sp, #32
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bfac:	230c      	movs	r3, #12
 800bfae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bfb0:	2340      	movs	r3, #64	; 0x40
 800bfb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bfb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfbe:	f107 0308 	add.w	r3, r7, #8
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff fecb 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800bfca:	4a05      	ldr	r2, [pc, #20]	; (800bfe0 <SDMMC_CmdStopTransfer+0x40>)
 800bfcc:	210c      	movs	r1, #12
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f99c 	bl	800c30c <SDMMC_GetCmdResp1>
 800bfd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd6:	69fb      	ldr	r3, [r7, #28]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3720      	adds	r7, #32
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	05f5e100 	.word	0x05f5e100

0800bfe4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08a      	sub	sp, #40	; 0x28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bff4:	2307      	movs	r3, #7
 800bff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bff8:	2340      	movs	r3, #64	; 0x40
 800bffa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bffc:	2300      	movs	r3, #0
 800bffe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c004:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c006:	f107 0310 	add.w	r3, r7, #16
 800c00a:	4619      	mov	r1, r3
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f7ff fea7 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c012:	f241 3288 	movw	r2, #5000	; 0x1388
 800c016:	2107      	movs	r1, #7
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f000 f977 	bl	800c30c <SDMMC_GetCmdResp1>
 800c01e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c022:	4618      	mov	r0, r3
 800c024:	3728      	adds	r7, #40	; 0x28
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b088      	sub	sp, #32
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c032:	2300      	movs	r3, #0
 800c034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c036:	2300      	movs	r3, #0
 800c038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c03a:	2300      	movs	r3, #0
 800c03c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c03e:	2300      	movs	r3, #0
 800c040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c046:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c048:	f107 0308 	add.w	r3, r7, #8
 800c04c:	4619      	mov	r1, r3
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff fe86 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f92d 	bl	800c2b4 <SDMMC_GetCmdError>
 800c05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c05c:	69fb      	ldr	r3, [r7, #28]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3720      	adds	r7, #32
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b088      	sub	sp, #32
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c06e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c074:	2308      	movs	r3, #8
 800c076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c078:	2340      	movs	r3, #64	; 0x40
 800c07a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c07c:	2300      	movs	r3, #0
 800c07e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c084:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c086:	f107 0308 	add.w	r3, r7, #8
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7ff fe67 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fb24 	bl	800c6e0 <SDMMC_GetCmdResp7>
 800c098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c09a:	69fb      	ldr	r3, [r7, #28]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3720      	adds	r7, #32
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c0b2:	2337      	movs	r3, #55	; 0x37
 800c0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c0b6:	2340      	movs	r3, #64	; 0x40
 800c0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c0be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0c4:	f107 0308 	add.w	r3, r7, #8
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff fe48 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0d4:	2137      	movs	r1, #55	; 0x37
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f918 	bl	800c30c <SDMMC_GetCmdResp1>
 800c0dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0de:	69fb      	ldr	r3, [r7, #28]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3720      	adds	r7, #32
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c0fe:	2329      	movs	r3, #41	; 0x29
 800c100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c102:	2340      	movs	r3, #64	; 0x40
 800c104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c106:	2300      	movs	r3, #0
 800c108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c10e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c110:	f107 0308 	add.w	r3, r7, #8
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff fe22 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fa2b 	bl	800c578 <SDMMC_GetCmdResp3>
 800c122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c124:	69fb      	ldr	r3, [r7, #28]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3720      	adds	r7, #32
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b088      	sub	sp, #32
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c13c:	2306      	movs	r3, #6
 800c13e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c140:	2340      	movs	r3, #64	; 0x40
 800c142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c144:	2300      	movs	r3, #0
 800c146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c14c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c14e:	f107 0308 	add.w	r3, r7, #8
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff fe03 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c15a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c15e:	2106      	movs	r1, #6
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 f8d3 	bl	800c30c <SDMMC_GetCmdResp1>
 800c166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c168:	69fb      	ldr	r3, [r7, #28]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3720      	adds	r7, #32
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b088      	sub	sp, #32
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c17a:	2300      	movs	r3, #0
 800c17c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c17e:	2333      	movs	r3, #51	; 0x33
 800c180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c182:	2340      	movs	r3, #64	; 0x40
 800c184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c186:	2300      	movs	r3, #0
 800c188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c18a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c18e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c190:	f107 0308 	add.w	r3, r7, #8
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff fde2 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1a0:	2133      	movs	r1, #51	; 0x33
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f8b2 	bl	800c30c <SDMMC_GetCmdResp1>
 800c1a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1aa:	69fb      	ldr	r3, [r7, #28]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3720      	adds	r7, #32
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c1c4:	23c0      	movs	r3, #192	; 0xc0
 800c1c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c1d2:	f107 0308 	add.w	r3, r7, #8
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff fdc1 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f982 	bl	800c4e8 <SDMMC_GetCmdResp2>
 800c1e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1e6:	69fb      	ldr	r3, [r7, #28]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c1fe:	2309      	movs	r3, #9
 800c200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c202:	23c0      	movs	r3, #192	; 0xc0
 800c204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c206:	2300      	movs	r3, #0
 800c208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c20a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c20e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c210:	f107 0308 	add.w	r3, r7, #8
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fda2 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f963 	bl	800c4e8 <SDMMC_GetCmdResp2>
 800c222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c224:	69fb      	ldr	r3, [r7, #28]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3720      	adds	r7, #32
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b088      	sub	sp, #32
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
 800c236:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c238:	2300      	movs	r3, #0
 800c23a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c23c:	2303      	movs	r3, #3
 800c23e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c240:	2340      	movs	r3, #64	; 0x40
 800c242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c244:	2300      	movs	r3, #0
 800c246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c24c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c24e:	f107 0308 	add.w	r3, r7, #8
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7ff fd83 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	2103      	movs	r1, #3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f9c8 	bl	800c5f4 <SDMMC_GetCmdResp6>
 800c264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c266:	69fb      	ldr	r3, [r7, #28]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3720      	adds	r7, #32
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b088      	sub	sp, #32
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c27e:	230d      	movs	r3, #13
 800c280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c282:	2340      	movs	r3, #64	; 0x40
 800c284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c286:	2300      	movs	r3, #0
 800c288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c28e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c290:	f107 0308 	add.w	r3, r7, #8
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7ff fd62 	bl	800bd60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2a0:	210d      	movs	r1, #13
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 f832 	bl	800c30c <SDMMC_GetCmdResp1>
 800c2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3720      	adds	r7, #32
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2bc:	4b11      	ldr	r3, [pc, #68]	; (800c304 <SDMMC_GetCmdError+0x50>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a11      	ldr	r2, [pc, #68]	; (800c308 <SDMMC_GetCmdError+0x54>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	0a5b      	lsrs	r3, r3, #9
 800c2c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2cc:	fb02 f303 	mul.w	r3, r2, r3
 800c2d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	1e5a      	subs	r2, r3, #1
 800c2d6:	60fa      	str	r2, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d102      	bne.n	800c2e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2e0:	e009      	b.n	800c2f6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d0f1      	beq.n	800c2d2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	22c5      	movs	r2, #197	; 0xc5
 800c2f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3714      	adds	r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	20000000 	.word	0x20000000
 800c308:	10624dd3 	.word	0x10624dd3

0800c30c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	460b      	mov	r3, r1
 800c316:	607a      	str	r2, [r7, #4]
 800c318:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c31a:	4b70      	ldr	r3, [pc, #448]	; (800c4dc <SDMMC_GetCmdResp1+0x1d0>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a70      	ldr	r2, [pc, #448]	; (800c4e0 <SDMMC_GetCmdResp1+0x1d4>)
 800c320:	fba2 2303 	umull	r2, r3, r2, r3
 800c324:	0a5a      	lsrs	r2, r3, #9
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	fb02 f303 	mul.w	r3, r2, r3
 800c32c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	1e5a      	subs	r2, r3, #1
 800c332:	61fa      	str	r2, [r7, #28]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c33c:	e0c9      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c342:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0ef      	beq.n	800c32e <SDMMC_GetCmdResp1+0x22>
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1ea      	bne.n	800c32e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c35c:	f003 0304 	and.w	r3, r3, #4
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2204      	movs	r2, #4
 800c368:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c36a:	2304      	movs	r3, #4
 800c36c:	e0b1      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	2b00      	cmp	r3, #0
 800c378:	d004      	beq.n	800c384 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2201      	movs	r2, #1
 800c37e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c380:	2301      	movs	r3, #1
 800c382:	e0a6      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	22c5      	movs	r2, #197	; 0xc5
 800c388:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f7ff fd12 	bl	800bdb4 <SDIO_GetCommandResponse>
 800c390:	4603      	mov	r3, r0
 800c392:	461a      	mov	r2, r3
 800c394:	7afb      	ldrb	r3, [r7, #11]
 800c396:	4293      	cmp	r3, r2
 800c398:	d001      	beq.n	800c39e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e099      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c39e:	2100      	movs	r1, #0
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f7ff fd14 	bl	800bdce <SDIO_GetResponse>
 800c3a6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c3a8:	697a      	ldr	r2, [r7, #20]
 800c3aa:	4b4e      	ldr	r3, [pc, #312]	; (800c4e4 <SDMMC_GetCmdResp1+0x1d8>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	e08d      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	da02      	bge.n	800c3c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c3bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c3c0:	e087      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c3cc:	2340      	movs	r3, #64	; 0x40
 800c3ce:	e080      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c3da:	2380      	movs	r3, #128	; 0x80
 800c3dc:	e079      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c3e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3ec:	e071      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c3f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3fc:	e069      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c40c:	e061      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c41c:	e059      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c42c:	e051      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c43c:	e049      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c448:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c44c:	e041      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c45c:	e039      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c46c:	e031      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c478:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c47c:	e029      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c488:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c48c:	e021      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c498:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c49c:	e019      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c4a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c4ac:	e011      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c4b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c4bc:	e009      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f003 0308 	and.w	r3, r3, #8
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c4c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c4cc:	e001      	b.n	800c4d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3720      	adds	r7, #32
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	20000000 	.word	0x20000000
 800c4e0:	10624dd3 	.word	0x10624dd3
 800c4e4:	fdffe008 	.word	0xfdffe008

0800c4e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4f0:	4b1f      	ldr	r3, [pc, #124]	; (800c570 <SDMMC_GetCmdResp2+0x88>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a1f      	ldr	r2, [pc, #124]	; (800c574 <SDMMC_GetCmdResp2+0x8c>)
 800c4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4fa:	0a5b      	lsrs	r3, r3, #9
 800c4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c500:	fb02 f303 	mul.w	r3, r2, r3
 800c504:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	1e5a      	subs	r2, r3, #1
 800c50a:	60fa      	str	r2, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d102      	bne.n	800c516 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c514:	e026      	b.n	800c564 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c51a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c522:	2b00      	cmp	r3, #0
 800c524:	d0ef      	beq.n	800c506 <SDMMC_GetCmdResp2+0x1e>
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1ea      	bne.n	800c506 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c534:	f003 0304 	and.w	r3, r3, #4
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d004      	beq.n	800c546 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2204      	movs	r2, #4
 800c540:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c542:	2304      	movs	r3, #4
 800c544:	e00e      	b.n	800c564 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d004      	beq.n	800c55c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2201      	movs	r2, #1
 800c556:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c558:	2301      	movs	r3, #1
 800c55a:	e003      	b.n	800c564 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	22c5      	movs	r2, #197	; 0xc5
 800c560:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	20000000 	.word	0x20000000
 800c574:	10624dd3 	.word	0x10624dd3

0800c578 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c580:	4b1a      	ldr	r3, [pc, #104]	; (800c5ec <SDMMC_GetCmdResp3+0x74>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a1a      	ldr	r2, [pc, #104]	; (800c5f0 <SDMMC_GetCmdResp3+0x78>)
 800c586:	fba2 2303 	umull	r2, r3, r2, r3
 800c58a:	0a5b      	lsrs	r3, r3, #9
 800c58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c590:	fb02 f303 	mul.w	r3, r2, r3
 800c594:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	1e5a      	subs	r2, r3, #1
 800c59a:	60fa      	str	r2, [r7, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d102      	bne.n	800c5a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5a4:	e01b      	b.n	800c5de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d0ef      	beq.n	800c596 <SDMMC_GetCmdResp3+0x1e>
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1ea      	bne.n	800c596 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c4:	f003 0304 	and.w	r3, r3, #4
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d004      	beq.n	800c5d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2204      	movs	r2, #4
 800c5d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5d2:	2304      	movs	r3, #4
 800c5d4:	e003      	b.n	800c5de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	22c5      	movs	r2, #197	; 0xc5
 800c5da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	20000000 	.word	0x20000000
 800c5f0:	10624dd3 	.word	0x10624dd3

0800c5f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b088      	sub	sp, #32
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c602:	4b35      	ldr	r3, [pc, #212]	; (800c6d8 <SDMMC_GetCmdResp6+0xe4>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a35      	ldr	r2, [pc, #212]	; (800c6dc <SDMMC_GetCmdResp6+0xe8>)
 800c608:	fba2 2303 	umull	r2, r3, r2, r3
 800c60c:	0a5b      	lsrs	r3, r3, #9
 800c60e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c612:	fb02 f303 	mul.w	r3, r2, r3
 800c616:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	1e5a      	subs	r2, r3, #1
 800c61c:	61fa      	str	r2, [r7, #28]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d102      	bne.n	800c628 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c622:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c626:	e052      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0ef      	beq.n	800c618 <SDMMC_GetCmdResp6+0x24>
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1ea      	bne.n	800c618 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c646:	f003 0304 	and.w	r3, r3, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2204      	movs	r2, #4
 800c652:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c654:	2304      	movs	r3, #4
 800c656:	e03a      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d004      	beq.n	800c66e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2201      	movs	r2, #1
 800c668:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c66a:	2301      	movs	r3, #1
 800c66c:	e02f      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f7ff fba0 	bl	800bdb4 <SDIO_GetCommandResponse>
 800c674:	4603      	mov	r3, r0
 800c676:	461a      	mov	r2, r3
 800c678:	7afb      	ldrb	r3, [r7, #11]
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d001      	beq.n	800c682 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c67e:	2301      	movs	r3, #1
 800c680:	e025      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	22c5      	movs	r2, #197	; 0xc5
 800c686:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c688:	2100      	movs	r1, #0
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7ff fb9f 	bl	800bdce <SDIO_GetResponse>
 800c690:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d106      	bne.n	800c6aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	0c1b      	lsrs	r3, r3, #16
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	e011      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6b8:	e009      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6c8:	e001      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c6ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000000 	.word	0x20000000
 800c6dc:	10624dd3 	.word	0x10624dd3

0800c6e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c6e8:	4b22      	ldr	r3, [pc, #136]	; (800c774 <SDMMC_GetCmdResp7+0x94>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a22      	ldr	r2, [pc, #136]	; (800c778 <SDMMC_GetCmdResp7+0x98>)
 800c6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f2:	0a5b      	lsrs	r3, r3, #9
 800c6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6f8:	fb02 f303 	mul.w	r3, r2, r3
 800c6fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	1e5a      	subs	r2, r3, #1
 800c702:	60fa      	str	r2, [r7, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d102      	bne.n	800c70e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c70c:	e02c      	b.n	800c768 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c712:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d0ef      	beq.n	800c6fe <SDMMC_GetCmdResp7+0x1e>
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1ea      	bne.n	800c6fe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	2b00      	cmp	r3, #0
 800c732:	d004      	beq.n	800c73e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2204      	movs	r2, #4
 800c738:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c73a:	2304      	movs	r3, #4
 800c73c:	e014      	b.n	800c768 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d004      	beq.n	800c754 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2201      	movs	r2, #1
 800c74e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c750:	2301      	movs	r3, #1
 800c752:	e009      	b.n	800c768 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2240      	movs	r2, #64	; 0x40
 800c764:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c766:	2300      	movs	r3, #0
  
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	20000000 	.word	0x20000000
 800c778:	10624dd3 	.word	0x10624dd3

0800c77c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c77c:	b084      	sub	sp, #16
 800c77e:	b580      	push	{r7, lr}
 800c780:	b084      	sub	sp, #16
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
 800c786:	f107 001c 	add.w	r0, r7, #28
 800c78a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	2b01      	cmp	r3, #1
 800c792:	d122      	bne.n	800c7da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c7a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d105      	bne.n	800c7ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f001 fb1c 	bl	800de0c <USB_CoreReset>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73fb      	strb	r3, [r7, #15]
 800c7d8:	e01a      	b.n	800c810 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f001 fb10 	bl	800de0c <USB_CoreReset>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	639a      	str	r2, [r3, #56]	; 0x38
 800c802:	e005      	b.n	800c810 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c808:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	2b01      	cmp	r3, #1
 800c814:	d10b      	bne.n	800c82e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	f043 0206 	orr.w	r2, r3, #6
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	f043 0220 	orr.w	r2, r3, #32
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c83a:	b004      	add	sp, #16
 800c83c:	4770      	bx	lr
	...

0800c840 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	4613      	mov	r3, r2
 800c84c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	2b02      	cmp	r3, #2
 800c852:	d165      	bne.n	800c920 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	4a41      	ldr	r2, [pc, #260]	; (800c95c <USB_SetTurnaroundTime+0x11c>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d906      	bls.n	800c86a <USB_SetTurnaroundTime+0x2a>
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	4a40      	ldr	r2, [pc, #256]	; (800c960 <USB_SetTurnaroundTime+0x120>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d202      	bcs.n	800c86a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c864:	230f      	movs	r3, #15
 800c866:	617b      	str	r3, [r7, #20]
 800c868:	e062      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	4a3c      	ldr	r2, [pc, #240]	; (800c960 <USB_SetTurnaroundTime+0x120>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d306      	bcc.n	800c880 <USB_SetTurnaroundTime+0x40>
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	4a3b      	ldr	r2, [pc, #236]	; (800c964 <USB_SetTurnaroundTime+0x124>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d202      	bcs.n	800c880 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c87a:	230e      	movs	r3, #14
 800c87c:	617b      	str	r3, [r7, #20]
 800c87e:	e057      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	4a38      	ldr	r2, [pc, #224]	; (800c964 <USB_SetTurnaroundTime+0x124>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d306      	bcc.n	800c896 <USB_SetTurnaroundTime+0x56>
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	4a37      	ldr	r2, [pc, #220]	; (800c968 <USB_SetTurnaroundTime+0x128>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d202      	bcs.n	800c896 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c890:	230d      	movs	r3, #13
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	e04c      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	4a33      	ldr	r2, [pc, #204]	; (800c968 <USB_SetTurnaroundTime+0x128>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d306      	bcc.n	800c8ac <USB_SetTurnaroundTime+0x6c>
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	4a32      	ldr	r2, [pc, #200]	; (800c96c <USB_SetTurnaroundTime+0x12c>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d802      	bhi.n	800c8ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c8a6:	230c      	movs	r3, #12
 800c8a8:	617b      	str	r3, [r7, #20]
 800c8aa:	e041      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4a2f      	ldr	r2, [pc, #188]	; (800c96c <USB_SetTurnaroundTime+0x12c>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d906      	bls.n	800c8c2 <USB_SetTurnaroundTime+0x82>
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	4a2e      	ldr	r2, [pc, #184]	; (800c970 <USB_SetTurnaroundTime+0x130>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d802      	bhi.n	800c8c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c8bc:	230b      	movs	r3, #11
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	e036      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	4a2a      	ldr	r2, [pc, #168]	; (800c970 <USB_SetTurnaroundTime+0x130>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d906      	bls.n	800c8d8 <USB_SetTurnaroundTime+0x98>
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	4a29      	ldr	r2, [pc, #164]	; (800c974 <USB_SetTurnaroundTime+0x134>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d802      	bhi.n	800c8d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c8d2:	230a      	movs	r3, #10
 800c8d4:	617b      	str	r3, [r7, #20]
 800c8d6:	e02b      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	4a26      	ldr	r2, [pc, #152]	; (800c974 <USB_SetTurnaroundTime+0x134>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d906      	bls.n	800c8ee <USB_SetTurnaroundTime+0xae>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	4a25      	ldr	r2, [pc, #148]	; (800c978 <USB_SetTurnaroundTime+0x138>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d202      	bcs.n	800c8ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c8e8:	2309      	movs	r3, #9
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	e020      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	4a21      	ldr	r2, [pc, #132]	; (800c978 <USB_SetTurnaroundTime+0x138>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d306      	bcc.n	800c904 <USB_SetTurnaroundTime+0xc4>
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	4a20      	ldr	r2, [pc, #128]	; (800c97c <USB_SetTurnaroundTime+0x13c>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d802      	bhi.n	800c904 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c8fe:	2308      	movs	r3, #8
 800c900:	617b      	str	r3, [r7, #20]
 800c902:	e015      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	4a1d      	ldr	r2, [pc, #116]	; (800c97c <USB_SetTurnaroundTime+0x13c>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d906      	bls.n	800c91a <USB_SetTurnaroundTime+0xda>
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	4a1c      	ldr	r2, [pc, #112]	; (800c980 <USB_SetTurnaroundTime+0x140>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d202      	bcs.n	800c91a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c914:	2307      	movs	r3, #7
 800c916:	617b      	str	r3, [r7, #20]
 800c918:	e00a      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c91a:	2306      	movs	r3, #6
 800c91c:	617b      	str	r3, [r7, #20]
 800c91e:	e007      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c920:	79fb      	ldrb	r3, [r7, #7]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d102      	bne.n	800c92c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c926:	2309      	movs	r3, #9
 800c928:	617b      	str	r3, [r7, #20]
 800c92a:	e001      	b.n	800c930 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c92c:	2309      	movs	r3, #9
 800c92e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	68da      	ldr	r2, [r3, #12]
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	029b      	lsls	r3, r3, #10
 800c944:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c948:	431a      	orrs	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	371c      	adds	r7, #28
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	00d8acbf 	.word	0x00d8acbf
 800c960:	00e4e1c0 	.word	0x00e4e1c0
 800c964:	00f42400 	.word	0x00f42400
 800c968:	01067380 	.word	0x01067380
 800c96c:	011a499f 	.word	0x011a499f
 800c970:	01312cff 	.word	0x01312cff
 800c974:	014ca43f 	.word	0x014ca43f
 800c978:	016e3600 	.word	0x016e3600
 800c97c:	01a6ab1f 	.word	0x01a6ab1f
 800c980:	01e84800 	.word	0x01e84800

0800c984 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	f043 0201 	orr.w	r2, r3, #1
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b083      	sub	sp, #12
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	f023 0201 	bic.w	r2, r3, #1
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c9e4:	78fb      	ldrb	r3, [r7, #3]
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d115      	bne.n	800ca16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c9f6:	2001      	movs	r0, #1
 800c9f8:	f7f8 f9a6 	bl	8004d48 <HAL_Delay>
      ms++;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f001 f972 	bl	800dcec <USB_GetMode>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d01e      	beq.n	800ca4c <USB_SetCurrentMode+0x84>
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2b31      	cmp	r3, #49	; 0x31
 800ca12:	d9f0      	bls.n	800c9f6 <USB_SetCurrentMode+0x2e>
 800ca14:	e01a      	b.n	800ca4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca16:	78fb      	ldrb	r3, [r7, #3]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d115      	bne.n	800ca48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ca28:	2001      	movs	r0, #1
 800ca2a:	f7f8 f98d 	bl	8004d48 <HAL_Delay>
      ms++;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3301      	adds	r3, #1
 800ca32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f001 f959 	bl	800dcec <USB_GetMode>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d005      	beq.n	800ca4c <USB_SetCurrentMode+0x84>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b31      	cmp	r3, #49	; 0x31
 800ca44:	d9f0      	bls.n	800ca28 <USB_SetCurrentMode+0x60>
 800ca46:	e001      	b.n	800ca4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e005      	b.n	800ca58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2b32      	cmp	r3, #50	; 0x32
 800ca50:	d101      	bne.n	800ca56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	e000      	b.n	800ca58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca60:	b084      	sub	sp, #16
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b086      	sub	sp, #24
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ca6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca72:	2300      	movs	r3, #0
 800ca74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	613b      	str	r3, [r7, #16]
 800ca7e:	e009      	b.n	800ca94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	3340      	adds	r3, #64	; 0x40
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4413      	add	r3, r2
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	3301      	adds	r3, #1
 800ca92:	613b      	str	r3, [r7, #16]
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	2b0e      	cmp	r3, #14
 800ca98:	d9f2      	bls.n	800ca80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d11c      	bne.n	800cada <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800caae:	f043 0302 	orr.w	r3, r3, #2
 800cab2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	639a      	str	r2, [r3, #56]	; 0x38
 800cad8:	e00b      	b.n	800caf2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cade:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800caf8:	461a      	mov	r2, r3
 800cafa:	2300      	movs	r3, #0
 800cafc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb04:	4619      	mov	r1, r3
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	680b      	ldr	r3, [r1, #0]
 800cb10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d10c      	bne.n	800cb32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d104      	bne.n	800cb28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cb1e:	2100      	movs	r1, #0
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 f945 	bl	800cdb0 <USB_SetDevSpeed>
 800cb26:	e008      	b.n	800cb3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cb28:	2101      	movs	r1, #1
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f940 	bl	800cdb0 <USB_SetDevSpeed>
 800cb30:	e003      	b.n	800cb3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb32:	2103      	movs	r1, #3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 f93b 	bl	800cdb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb3a:	2110      	movs	r1, #16
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f8f3 	bl	800cd28 <USB_FlushTxFifo>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f90f 	bl	800cd70 <USB_FlushRxFifo>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d001      	beq.n	800cb5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb62:	461a      	mov	r2, r3
 800cb64:	2300      	movs	r3, #0
 800cb66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb6e:	461a      	mov	r2, r3
 800cb70:	2300      	movs	r3, #0
 800cb72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb80:	2300      	movs	r3, #0
 800cb82:	613b      	str	r3, [r7, #16]
 800cb84:	e043      	b.n	800cc0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	015a      	lsls	r2, r3, #5
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb9c:	d118      	bne.n	800cbd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d10a      	bne.n	800cbba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cbb6:	6013      	str	r3, [r2, #0]
 800cbb8:	e013      	b.n	800cbe2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	015a      	lsls	r2, r3, #5
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cbcc:	6013      	str	r3, [r2, #0]
 800cbce:	e008      	b.n	800cbe2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	015a      	lsls	r2, r3, #5
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbdc:	461a      	mov	r2, r3
 800cbde:	2300      	movs	r3, #0
 800cbe0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	015a      	lsls	r2, r3, #5
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	4413      	add	r3, r2
 800cbea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbee:	461a      	mov	r2, r3
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	015a      	lsls	r2, r3, #5
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc00:	461a      	mov	r2, r3
 800cc02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	613b      	str	r3, [r7, #16]
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d3b7      	bcc.n	800cb86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc16:	2300      	movs	r3, #0
 800cc18:	613b      	str	r3, [r7, #16]
 800cc1a:	e043      	b.n	800cca4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	015a      	lsls	r2, r3, #5
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	4413      	add	r3, r2
 800cc24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc32:	d118      	bne.n	800cc66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10a      	bne.n	800cc50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	015a      	lsls	r2, r3, #5
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	4413      	add	r3, r2
 800cc42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc46:	461a      	mov	r2, r3
 800cc48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc4c:	6013      	str	r3, [r2, #0]
 800cc4e:	e013      	b.n	800cc78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	015a      	lsls	r2, r3, #5
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4413      	add	r3, r2
 800cc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	e008      	b.n	800cc78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	015a      	lsls	r2, r3, #5
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc72:	461a      	mov	r2, r3
 800cc74:	2300      	movs	r3, #0
 800cc76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc84:	461a      	mov	r2, r3
 800cc86:	2300      	movs	r3, #0
 800cc88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	015a      	lsls	r2, r3, #5
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	4413      	add	r3, r2
 800cc92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc96:	461a      	mov	r2, r3
 800cc98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	3301      	adds	r3, #1
 800cca2:	613b      	str	r3, [r7, #16]
 800cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d3b7      	bcc.n	800cc1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cccc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d105      	bne.n	800cce0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	f043 0210 	orr.w	r2, r3, #16
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	699a      	ldr	r2, [r3, #24]
 800cce4:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <USB_DevInit+0x2c4>)
 800cce6:	4313      	orrs	r3, r2
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ccec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d005      	beq.n	800ccfe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	699b      	ldr	r3, [r3, #24]
 800ccf6:	f043 0208 	orr.w	r2, r3, #8
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ccfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d107      	bne.n	800cd14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd0c:	f043 0304 	orr.w	r3, r3, #4
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cd14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd20:	b004      	add	sp, #16
 800cd22:	4770      	bx	lr
 800cd24:	803c3800 	.word	0x803c3800

0800cd28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	019b      	lsls	r3, r3, #6
 800cd3a:	f043 0220 	orr.w	r2, r3, #32
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	3301      	adds	r3, #1
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	4a08      	ldr	r2, [pc, #32]	; (800cd6c <USB_FlushTxFifo+0x44>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d901      	bls.n	800cd52 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	e006      	b.n	800cd60 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	f003 0320 	and.w	r3, r3, #32
 800cd5a:	2b20      	cmp	r3, #32
 800cd5c:	d0f1      	beq.n	800cd42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	00030d40 	.word	0x00030d40

0800cd70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2210      	movs	r2, #16
 800cd80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3301      	adds	r3, #1
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	4a08      	ldr	r2, [pc, #32]	; (800cdac <USB_FlushRxFifo+0x3c>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d901      	bls.n	800cd92 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	e006      	b.n	800cda0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	f003 0310 	and.w	r3, r3, #16
 800cd9a:	2b10      	cmp	r3, #16
 800cd9c:	d0f1      	beq.n	800cd82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	00030d40 	.word	0x00030d40

0800cdb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	78fb      	ldrb	r3, [r7, #3]
 800cdca:	68f9      	ldr	r1, [r7, #12]
 800cdcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3714      	adds	r7, #20
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cde2:	b480      	push	{r7}
 800cde4:	b087      	sub	sp, #28
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	f003 0306 	and.w	r3, r3, #6
 800cdfa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d102      	bne.n	800ce08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ce02:	2300      	movs	r3, #0
 800ce04:	75fb      	strb	r3, [r7, #23]
 800ce06:	e00a      	b.n	800ce1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d002      	beq.n	800ce14 <USB_GetDevSpeed+0x32>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2b06      	cmp	r3, #6
 800ce12:	d102      	bne.n	800ce1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ce14:	2302      	movs	r3, #2
 800ce16:	75fb      	strb	r3, [r7, #23]
 800ce18:	e001      	b.n	800ce1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ce1a:	230f      	movs	r3, #15
 800ce1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	371c      	adds	r7, #28
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	785b      	ldrb	r3, [r3, #1]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d13a      	bne.n	800cebe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce4e:	69da      	ldr	r2, [r3, #28]
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	f003 030f 	and.w	r3, r3, #15
 800ce58:	2101      	movs	r1, #1
 800ce5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	68f9      	ldr	r1, [r7, #12]
 800ce62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce66:	4313      	orrs	r3, r2
 800ce68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	015a      	lsls	r2, r3, #5
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	4413      	add	r3, r2
 800ce72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d155      	bne.n	800cf2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	015a      	lsls	r2, r3, #5
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	4413      	add	r3, r2
 800ce88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	78db      	ldrb	r3, [r3, #3]
 800ce9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ce9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	059b      	lsls	r3, r3, #22
 800cea2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cea4:	4313      	orrs	r3, r2
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	0151      	lsls	r1, r2, #5
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	440a      	add	r2, r1
 800ceae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ceb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ceba:	6013      	str	r3, [r2, #0]
 800cebc:	e036      	b.n	800cf2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cec4:	69da      	ldr	r2, [r3, #28]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	f003 030f 	and.w	r3, r3, #15
 800cece:	2101      	movs	r1, #1
 800ced0:	fa01 f303 	lsl.w	r3, r1, r3
 800ced4:	041b      	lsls	r3, r3, #16
 800ced6:	68f9      	ldr	r1, [r7, #12]
 800ced8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cedc:	4313      	orrs	r3, r2
 800cede:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	015a      	lsls	r2, r3, #5
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	4413      	add	r3, r2
 800cee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d11a      	bne.n	800cf2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	015a      	lsls	r2, r3, #5
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	4413      	add	r3, r2
 800cefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	78db      	ldrb	r3, [r3, #3]
 800cf10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf12:	430b      	orrs	r3, r1
 800cf14:	4313      	orrs	r3, r2
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	0151      	lsls	r1, r2, #5
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	440a      	add	r2, r1
 800cf1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
	...

0800cf3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	785b      	ldrb	r3, [r3, #1]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d161      	bne.n	800d01c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	015a      	lsls	r2, r3, #5
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4413      	add	r3, r2
 800cf60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf6e:	d11f      	bne.n	800cfb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	015a      	lsls	r2, r3, #5
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	4413      	add	r3, r2
 800cf78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	0151      	lsls	r1, r2, #5
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	440a      	add	r2, r1
 800cf86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cf8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	015a      	lsls	r2, r3, #5
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	4413      	add	r3, r2
 800cf98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	0151      	lsls	r1, r2, #5
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	440a      	add	r2, r1
 800cfa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cfae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	f003 030f 	and.w	r3, r3, #15
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	fa01 f303 	lsl.w	r3, r1, r3
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	43db      	mvns	r3, r3
 800cfca:	68f9      	ldr	r1, [r7, #12]
 800cfcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfda:	69da      	ldr	r2, [r3, #28]
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	f003 030f 	and.w	r3, r3, #15
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	fa01 f303 	lsl.w	r3, r1, r3
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	43db      	mvns	r3, r3
 800cfee:	68f9      	ldr	r1, [r7, #12]
 800cff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cff4:	4013      	ands	r3, r2
 800cff6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	015a      	lsls	r2, r3, #5
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	4413      	add	r3, r2
 800d000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	0159      	lsls	r1, r3, #5
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	440b      	add	r3, r1
 800d00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d012:	4619      	mov	r1, r3
 800d014:	4b35      	ldr	r3, [pc, #212]	; (800d0ec <USB_DeactivateEndpoint+0x1b0>)
 800d016:	4013      	ands	r3, r2
 800d018:	600b      	str	r3, [r1, #0]
 800d01a:	e060      	b.n	800d0de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	015a      	lsls	r2, r3, #5
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4413      	add	r3, r2
 800d024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d02e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d032:	d11f      	bne.n	800d074 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	015a      	lsls	r2, r3, #5
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	4413      	add	r3, r2
 800d03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	0151      	lsls	r1, r2, #5
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	440a      	add	r2, r1
 800d04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d04e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d052:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	015a      	lsls	r2, r3, #5
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	4413      	add	r3, r2
 800d05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	0151      	lsls	r1, r2, #5
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	440a      	add	r2, r1
 800d06a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d06e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d072:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d07a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	f003 030f 	and.w	r3, r3, #15
 800d084:	2101      	movs	r1, #1
 800d086:	fa01 f303 	lsl.w	r3, r1, r3
 800d08a:	041b      	lsls	r3, r3, #16
 800d08c:	43db      	mvns	r3, r3
 800d08e:	68f9      	ldr	r1, [r7, #12]
 800d090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d094:	4013      	ands	r3, r2
 800d096:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d09e:	69da      	ldr	r2, [r3, #28]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	f003 030f 	and.w	r3, r3, #15
 800d0a8:	2101      	movs	r1, #1
 800d0aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d0ae:	041b      	lsls	r3, r3, #16
 800d0b0:	43db      	mvns	r3, r3
 800d0b2:	68f9      	ldr	r1, [r7, #12]
 800d0b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	015a      	lsls	r2, r3, #5
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	0159      	lsls	r1, r3, #5
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	440b      	add	r3, r1
 800d0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	4b05      	ldr	r3, [pc, #20]	; (800d0f0 <USB_DeactivateEndpoint+0x1b4>)
 800d0da:	4013      	ands	r3, r2
 800d0dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3714      	adds	r7, #20
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	ec337800 	.word	0xec337800
 800d0f0:	eff37800 	.word	0xeff37800

0800d0f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b08a      	sub	sp, #40	; 0x28
 800d0f8:	af02      	add	r7, sp, #8
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	4613      	mov	r3, r2
 800d100:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	785b      	ldrb	r3, [r3, #1]
 800d110:	2b01      	cmp	r3, #1
 800d112:	f040 815c 	bne.w	800d3ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	695b      	ldr	r3, [r3, #20]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d132      	bne.n	800d184 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	69ba      	ldr	r2, [r7, #24]
 800d12e:	0151      	lsls	r1, r2, #5
 800d130:	69fa      	ldr	r2, [r7, #28]
 800d132:	440a      	add	r2, r1
 800d134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d138:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d13c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d140:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	015a      	lsls	r2, r3, #5
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	4413      	add	r3, r2
 800d14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	69ba      	ldr	r2, [r7, #24]
 800d152:	0151      	lsls	r1, r2, #5
 800d154:	69fa      	ldr	r2, [r7, #28]
 800d156:	440a      	add	r2, r1
 800d158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d15c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	015a      	lsls	r2, r3, #5
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	4413      	add	r3, r2
 800d16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	69ba      	ldr	r2, [r7, #24]
 800d172:	0151      	lsls	r1, r2, #5
 800d174:	69fa      	ldr	r2, [r7, #28]
 800d176:	440a      	add	r2, r1
 800d178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d17c:	0cdb      	lsrs	r3, r3, #19
 800d17e:	04db      	lsls	r3, r3, #19
 800d180:	6113      	str	r3, [r2, #16]
 800d182:	e074      	b.n	800d26e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	015a      	lsls	r2, r3, #5
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	4413      	add	r3, r2
 800d18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	69ba      	ldr	r2, [r7, #24]
 800d194:	0151      	lsls	r1, r2, #5
 800d196:	69fa      	ldr	r2, [r7, #28]
 800d198:	440a      	add	r2, r1
 800d19a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d19e:	0cdb      	lsrs	r3, r3, #19
 800d1a0:	04db      	lsls	r3, r3, #19
 800d1a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	015a      	lsls	r2, r3, #5
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	69ba      	ldr	r2, [r7, #24]
 800d1b4:	0151      	lsls	r1, r2, #5
 800d1b6:	69fa      	ldr	r2, [r7, #28]
 800d1b8:	440a      	add	r2, r1
 800d1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d1c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d1c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	015a      	lsls	r2, r3, #5
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	6959      	ldr	r1, [r3, #20]
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	440b      	add	r3, r1
 800d1e0:	1e59      	subs	r1, r3, #1
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800d1ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d1ec:	4b9d      	ldr	r3, [pc, #628]	; (800d464 <USB_EPStartXfer+0x370>)
 800d1ee:	400b      	ands	r3, r1
 800d1f0:	69b9      	ldr	r1, [r7, #24]
 800d1f2:	0148      	lsls	r0, r1, #5
 800d1f4:	69f9      	ldr	r1, [r7, #28]
 800d1f6:	4401      	add	r1, r0
 800d1f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	4413      	add	r3, r2
 800d208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d20c:	691a      	ldr	r2, [r3, #16]
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	695b      	ldr	r3, [r3, #20]
 800d212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d216:	69b9      	ldr	r1, [r7, #24]
 800d218:	0148      	lsls	r0, r1, #5
 800d21a:	69f9      	ldr	r1, [r7, #28]
 800d21c:	4401      	add	r1, r0
 800d21e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d222:	4313      	orrs	r3, r2
 800d224:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	78db      	ldrb	r3, [r3, #3]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d11f      	bne.n	800d26e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	015a      	lsls	r2, r3, #5
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	4413      	add	r3, r2
 800d236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	69ba      	ldr	r2, [r7, #24]
 800d23e:	0151      	lsls	r1, r2, #5
 800d240:	69fa      	ldr	r2, [r7, #28]
 800d242:	440a      	add	r2, r1
 800d244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d248:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d24c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	015a      	lsls	r2, r3, #5
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	4413      	add	r3, r2
 800d256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	69ba      	ldr	r2, [r7, #24]
 800d25e:	0151      	lsls	r1, r2, #5
 800d260:	69fa      	ldr	r2, [r7, #28]
 800d262:	440a      	add	r2, r1
 800d264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d26c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d26e:	79fb      	ldrb	r3, [r7, #7]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d14b      	bne.n	800d30c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d009      	beq.n	800d290 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	015a      	lsls	r2, r3, #5
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	4413      	add	r3, r2
 800d284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d288:	461a      	mov	r2, r3
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	78db      	ldrb	r3, [r3, #3]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d128      	bne.n	800d2ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d110      	bne.n	800d2ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	015a      	lsls	r2, r3, #5
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	69ba      	ldr	r2, [r7, #24]
 800d2b8:	0151      	lsls	r1, r2, #5
 800d2ba:	69fa      	ldr	r2, [r7, #28]
 800d2bc:	440a      	add	r2, r1
 800d2be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	e00f      	b.n	800d2ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	015a      	lsls	r2, r3, #5
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	0151      	lsls	r1, r2, #5
 800d2dc:	69fa      	ldr	r2, [r7, #28]
 800d2de:	440a      	add	r2, r1
 800d2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	015a      	lsls	r2, r3, #5
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	69ba      	ldr	r2, [r7, #24]
 800d2fa:	0151      	lsls	r1, r2, #5
 800d2fc:	69fa      	ldr	r2, [r7, #28]
 800d2fe:	440a      	add	r2, r1
 800d300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d304:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d308:	6013      	str	r3, [r2, #0]
 800d30a:	e12f      	b.n	800d56c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	015a      	lsls	r2, r3, #5
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	4413      	add	r3, r2
 800d314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	69ba      	ldr	r2, [r7, #24]
 800d31c:	0151      	lsls	r1, r2, #5
 800d31e:	69fa      	ldr	r2, [r7, #28]
 800d320:	440a      	add	r2, r1
 800d322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d326:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d32a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	78db      	ldrb	r3, [r3, #3]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d015      	beq.n	800d360 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	695b      	ldr	r3, [r3, #20]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f000 8117 	beq.w	800d56c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	f003 030f 	and.w	r3, r3, #15
 800d34e:	2101      	movs	r1, #1
 800d350:	fa01 f303 	lsl.w	r3, r1, r3
 800d354:	69f9      	ldr	r1, [r7, #28]
 800d356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d35a:	4313      	orrs	r3, r2
 800d35c:	634b      	str	r3, [r1, #52]	; 0x34
 800d35e:	e105      	b.n	800d56c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d110      	bne.n	800d392 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	015a      	lsls	r2, r3, #5
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	4413      	add	r3, r2
 800d378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	69ba      	ldr	r2, [r7, #24]
 800d380:	0151      	lsls	r1, r2, #5
 800d382:	69fa      	ldr	r2, [r7, #28]
 800d384:	440a      	add	r2, r1
 800d386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d38a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d38e:	6013      	str	r3, [r2, #0]
 800d390:	e00f      	b.n	800d3b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	015a      	lsls	r2, r3, #5
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	4413      	add	r3, r2
 800d39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	69ba      	ldr	r2, [r7, #24]
 800d3a2:	0151      	lsls	r1, r2, #5
 800d3a4:	69fa      	ldr	r2, [r7, #28]
 800d3a6:	440a      	add	r2, r1
 800d3a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	68d9      	ldr	r1, [r3, #12]
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	781a      	ldrb	r2, [r3, #0]
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	695b      	ldr	r3, [r3, #20]
 800d3be:	b298      	uxth	r0, r3
 800d3c0:	79fb      	ldrb	r3, [r7, #7]
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f000 fa2b 	bl	800d822 <USB_WritePacket>
 800d3cc:	e0ce      	b.n	800d56c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	015a      	lsls	r2, r3, #5
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	69ba      	ldr	r2, [r7, #24]
 800d3de:	0151      	lsls	r1, r2, #5
 800d3e0:	69fa      	ldr	r2, [r7, #28]
 800d3e2:	440a      	add	r2, r1
 800d3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3e8:	0cdb      	lsrs	r3, r3, #19
 800d3ea:	04db      	lsls	r3, r3, #19
 800d3ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	015a      	lsls	r2, r3, #5
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	69ba      	ldr	r2, [r7, #24]
 800d3fe:	0151      	lsls	r1, r2, #5
 800d400:	69fa      	ldr	r2, [r7, #28]
 800d402:	440a      	add	r2, r1
 800d404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d408:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d40c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d410:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	695b      	ldr	r3, [r3, #20]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d126      	bne.n	800d468 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	015a      	lsls	r2, r3, #5
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	4413      	add	r3, r2
 800d422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d426:	691a      	ldr	r2, [r3, #16]
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d430:	69b9      	ldr	r1, [r7, #24]
 800d432:	0148      	lsls	r0, r1, #5
 800d434:	69f9      	ldr	r1, [r7, #28]
 800d436:	4401      	add	r1, r0
 800d438:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d43c:	4313      	orrs	r3, r2
 800d43e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	015a      	lsls	r2, r3, #5
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	4413      	add	r3, r2
 800d448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	69ba      	ldr	r2, [r7, #24]
 800d450:	0151      	lsls	r1, r2, #5
 800d452:	69fa      	ldr	r2, [r7, #28]
 800d454:	440a      	add	r2, r1
 800d456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d45a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d45e:	6113      	str	r3, [r2, #16]
 800d460:	e036      	b.n	800d4d0 <USB_EPStartXfer+0x3dc>
 800d462:	bf00      	nop
 800d464:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	695a      	ldr	r2, [r3, #20]
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	4413      	add	r3, r2
 800d472:	1e5a      	subs	r2, r3, #1
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	fbb2 f3f3 	udiv	r3, r2, r3
 800d47c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	015a      	lsls	r2, r3, #5
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	4413      	add	r3, r2
 800d486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d48a:	691a      	ldr	r2, [r3, #16]
 800d48c:	8afb      	ldrh	r3, [r7, #22]
 800d48e:	04d9      	lsls	r1, r3, #19
 800d490:	4b39      	ldr	r3, [pc, #228]	; (800d578 <USB_EPStartXfer+0x484>)
 800d492:	400b      	ands	r3, r1
 800d494:	69b9      	ldr	r1, [r7, #24]
 800d496:	0148      	lsls	r0, r1, #5
 800d498:	69f9      	ldr	r1, [r7, #28]
 800d49a:	4401      	add	r1, r0
 800d49c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	015a      	lsls	r2, r3, #5
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b0:	691a      	ldr	r2, [r3, #16]
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	8af9      	ldrh	r1, [r7, #22]
 800d4b8:	fb01 f303 	mul.w	r3, r1, r3
 800d4bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4c0:	69b9      	ldr	r1, [r7, #24]
 800d4c2:	0148      	lsls	r0, r1, #5
 800d4c4:	69f9      	ldr	r1, [r7, #28]
 800d4c6:	4401      	add	r1, r0
 800d4c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d10d      	bne.n	800d4f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d009      	beq.n	800d4f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	68d9      	ldr	r1, [r3, #12]
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	015a      	lsls	r2, r3, #5
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ee:	460a      	mov	r2, r1
 800d4f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	78db      	ldrb	r3, [r3, #3]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d128      	bne.n	800d54c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d506:	2b00      	cmp	r3, #0
 800d508:	d110      	bne.n	800d52c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	015a      	lsls	r2, r3, #5
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	4413      	add	r3, r2
 800d512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	69ba      	ldr	r2, [r7, #24]
 800d51a:	0151      	lsls	r1, r2, #5
 800d51c:	69fa      	ldr	r2, [r7, #28]
 800d51e:	440a      	add	r2, r1
 800d520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d528:	6013      	str	r3, [r2, #0]
 800d52a:	e00f      	b.n	800d54c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	015a      	lsls	r2, r3, #5
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	4413      	add	r3, r2
 800d534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	69ba      	ldr	r2, [r7, #24]
 800d53c:	0151      	lsls	r1, r2, #5
 800d53e:	69fa      	ldr	r2, [r7, #28]
 800d540:	440a      	add	r2, r1
 800d542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d54a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	015a      	lsls	r2, r3, #5
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	4413      	add	r3, r2
 800d554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	69ba      	ldr	r2, [r7, #24]
 800d55c:	0151      	lsls	r1, r2, #5
 800d55e:	69fa      	ldr	r2, [r7, #28]
 800d560:	440a      	add	r2, r1
 800d562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d56a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3720      	adds	r7, #32
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	1ff80000 	.word	0x1ff80000

0800d57c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b087      	sub	sp, #28
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	4613      	mov	r3, r2
 800d588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	785b      	ldrb	r3, [r3, #1]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	f040 80cd 	bne.w	800d738 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d132      	bne.n	800d60c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	015a      	lsls	r2, r3, #5
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	693a      	ldr	r2, [r7, #16]
 800d5b6:	0151      	lsls	r1, r2, #5
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	440a      	add	r2, r1
 800d5bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d5c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d5c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	015a      	lsls	r2, r3, #5
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	693a      	ldr	r2, [r7, #16]
 800d5da:	0151      	lsls	r1, r2, #5
 800d5dc:	697a      	ldr	r2, [r7, #20]
 800d5de:	440a      	add	r2, r1
 800d5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	015a      	lsls	r2, r3, #5
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	0151      	lsls	r1, r2, #5
 800d5fc:	697a      	ldr	r2, [r7, #20]
 800d5fe:	440a      	add	r2, r1
 800d600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d604:	0cdb      	lsrs	r3, r3, #19
 800d606:	04db      	lsls	r3, r3, #19
 800d608:	6113      	str	r3, [r2, #16]
 800d60a:	e04e      	b.n	800d6aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	015a      	lsls	r2, r3, #5
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	4413      	add	r3, r2
 800d614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	693a      	ldr	r2, [r7, #16]
 800d61c:	0151      	lsls	r1, r2, #5
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	440a      	add	r2, r1
 800d622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d626:	0cdb      	lsrs	r3, r3, #19
 800d628:	04db      	lsls	r3, r3, #19
 800d62a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	015a      	lsls	r2, r3, #5
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	4413      	add	r3, r2
 800d634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d638:	691b      	ldr	r3, [r3, #16]
 800d63a:	693a      	ldr	r2, [r7, #16]
 800d63c:	0151      	lsls	r1, r2, #5
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	440a      	add	r2, r1
 800d642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d646:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d64a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d64e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	695a      	ldr	r2, [r3, #20]
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d903      	bls.n	800d664 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	689a      	ldr	r2, [r3, #8]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	015a      	lsls	r2, r3, #5
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	4413      	add	r3, r2
 800d66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	693a      	ldr	r2, [r7, #16]
 800d674:	0151      	lsls	r1, r2, #5
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	440a      	add	r2, r1
 800d67a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d67e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	015a      	lsls	r2, r3, #5
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	4413      	add	r3, r2
 800d68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d690:	691a      	ldr	r2, [r3, #16]
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	695b      	ldr	r3, [r3, #20]
 800d696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d69a:	6939      	ldr	r1, [r7, #16]
 800d69c:	0148      	lsls	r0, r1, #5
 800d69e:	6979      	ldr	r1, [r7, #20]
 800d6a0:	4401      	add	r1, r0
 800d6a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d11e      	bne.n	800d6ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d009      	beq.n	800d6cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	015a      	lsls	r2, r3, #5
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	015a      	lsls	r2, r3, #5
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	693a      	ldr	r2, [r7, #16]
 800d6dc:	0151      	lsls	r1, r2, #5
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	440a      	add	r2, r1
 800d6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6ea:	6013      	str	r3, [r2, #0]
 800d6ec:	e092      	b.n	800d814 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	015a      	lsls	r2, r3, #5
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	693a      	ldr	r2, [r7, #16]
 800d6fe:	0151      	lsls	r1, r2, #5
 800d700:	697a      	ldr	r2, [r7, #20]
 800d702:	440a      	add	r2, r1
 800d704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d708:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d70c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	695b      	ldr	r3, [r3, #20]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d07e      	beq.n	800d814 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d71c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	f003 030f 	and.w	r3, r3, #15
 800d726:	2101      	movs	r1, #1
 800d728:	fa01 f303 	lsl.w	r3, r1, r3
 800d72c:	6979      	ldr	r1, [r7, #20]
 800d72e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d732:	4313      	orrs	r3, r2
 800d734:	634b      	str	r3, [r1, #52]	; 0x34
 800d736:	e06d      	b.n	800d814 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	015a      	lsls	r2, r3, #5
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	4413      	add	r3, r2
 800d740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	693a      	ldr	r2, [r7, #16]
 800d748:	0151      	lsls	r1, r2, #5
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	440a      	add	r2, r1
 800d74e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d752:	0cdb      	lsrs	r3, r3, #19
 800d754:	04db      	lsls	r3, r3, #19
 800d756:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	015a      	lsls	r2, r3, #5
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	4413      	add	r3, r2
 800d760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d764:	691b      	ldr	r3, [r3, #16]
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	0151      	lsls	r1, r2, #5
 800d76a:	697a      	ldr	r2, [r7, #20]
 800d76c:	440a      	add	r2, r1
 800d76e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d772:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d776:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d77a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d003      	beq.n	800d78c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	689a      	ldr	r2, [r3, #8]
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	015a      	lsls	r2, r3, #5
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	4413      	add	r3, r2
 800d794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d798:	691b      	ldr	r3, [r3, #16]
 800d79a:	693a      	ldr	r2, [r7, #16]
 800d79c:	0151      	lsls	r1, r2, #5
 800d79e:	697a      	ldr	r2, [r7, #20]
 800d7a0:	440a      	add	r2, r1
 800d7a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	015a      	lsls	r2, r3, #5
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b8:	691a      	ldr	r2, [r3, #16]
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7c2:	6939      	ldr	r1, [r7, #16]
 800d7c4:	0148      	lsls	r0, r1, #5
 800d7c6:	6979      	ldr	r1, [r7, #20]
 800d7c8:	4401      	add	r1, r0
 800d7ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d10d      	bne.n	800d7f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d009      	beq.n	800d7f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	68d9      	ldr	r1, [r3, #12]
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	015a      	lsls	r2, r3, #5
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f0:	460a      	mov	r2, r1
 800d7f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	015a      	lsls	r2, r3, #5
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	0151      	lsls	r1, r2, #5
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	440a      	add	r2, r1
 800d80a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d80e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d812:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d822:	b480      	push	{r7}
 800d824:	b089      	sub	sp, #36	; 0x24
 800d826:	af00      	add	r7, sp, #0
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	4611      	mov	r1, r2
 800d82e:	461a      	mov	r2, r3
 800d830:	460b      	mov	r3, r1
 800d832:	71fb      	strb	r3, [r7, #7]
 800d834:	4613      	mov	r3, r2
 800d836:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d840:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d844:	2b00      	cmp	r3, #0
 800d846:	d123      	bne.n	800d890 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d848:	88bb      	ldrh	r3, [r7, #4]
 800d84a:	3303      	adds	r3, #3
 800d84c:	089b      	lsrs	r3, r3, #2
 800d84e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d850:	2300      	movs	r3, #0
 800d852:	61bb      	str	r3, [r7, #24]
 800d854:	e018      	b.n	800d888 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d856:	79fb      	ldrb	r3, [r7, #7]
 800d858:	031a      	lsls	r2, r3, #12
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	4413      	add	r3, r2
 800d85e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d862:	461a      	mov	r2, r3
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	3301      	adds	r3, #1
 800d86e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	3301      	adds	r3, #1
 800d874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	3301      	adds	r3, #1
 800d87a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	3301      	adds	r3, #1
 800d880:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	3301      	adds	r3, #1
 800d886:	61bb      	str	r3, [r7, #24]
 800d888:	69ba      	ldr	r2, [r7, #24]
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d3e2      	bcc.n	800d856 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3724      	adds	r7, #36	; 0x24
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr

0800d89e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d89e:	b480      	push	{r7}
 800d8a0:	b08b      	sub	sp, #44	; 0x2c
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	60f8      	str	r0, [r7, #12]
 800d8a6:	60b9      	str	r1, [r7, #8]
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d8b4:	88fb      	ldrh	r3, [r7, #6]
 800d8b6:	089b      	lsrs	r3, r3, #2
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d8bc:	88fb      	ldrh	r3, [r7, #6]
 800d8be:	f003 0303 	and.w	r3, r3, #3
 800d8c2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	623b      	str	r3, [r7, #32]
 800d8c8:	e014      	b.n	800d8f4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	601a      	str	r2, [r3, #0]
    pDest++;
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d8:	3301      	adds	r3, #1
 800d8da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	3301      	adds	r3, #1
 800d8e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	623b      	str	r3, [r7, #32]
 800d8f4:	6a3a      	ldr	r2, [r7, #32]
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d3e6      	bcc.n	800d8ca <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d8fc:	8bfb      	ldrh	r3, [r7, #30]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d01e      	beq.n	800d940 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d902:	2300      	movs	r3, #0
 800d904:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d90c:	461a      	mov	r2, r3
 800d90e:	f107 0310 	add.w	r3, r7, #16
 800d912:	6812      	ldr	r2, [r2, #0]
 800d914:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	6a3b      	ldr	r3, [r7, #32]
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	00db      	lsls	r3, r3, #3
 800d91e:	fa22 f303 	lsr.w	r3, r2, r3
 800d922:	b2da      	uxtb	r2, r3
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	701a      	strb	r2, [r3, #0]
      i++;
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	3301      	adds	r3, #1
 800d92c:	623b      	str	r3, [r7, #32]
      pDest++;
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d930:	3301      	adds	r3, #1
 800d932:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d934:	8bfb      	ldrh	r3, [r7, #30]
 800d936:	3b01      	subs	r3, #1
 800d938:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d93a:	8bfb      	ldrh	r3, [r7, #30]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1ea      	bne.n	800d916 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d942:	4618      	mov	r0, r3
 800d944:	372c      	adds	r7, #44	; 0x2c
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr

0800d94e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d94e:	b480      	push	{r7}
 800d950:	b085      	sub	sp, #20
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	785b      	ldrb	r3, [r3, #1]
 800d966:	2b01      	cmp	r3, #1
 800d968:	d12c      	bne.n	800d9c4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	015a      	lsls	r2, r3, #5
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	4413      	add	r3, r2
 800d972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	db12      	blt.n	800d9a2 <USB_EPSetStall+0x54>
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00f      	beq.n	800d9a2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	015a      	lsls	r2, r3, #5
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	4413      	add	r3, r2
 800d98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68ba      	ldr	r2, [r7, #8]
 800d992:	0151      	lsls	r1, r2, #5
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	440a      	add	r2, r1
 800d998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d99c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9a0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	015a      	lsls	r2, r3, #5
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	0151      	lsls	r1, r2, #5
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	440a      	add	r2, r1
 800d9b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	e02b      	b.n	800da1c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	015a      	lsls	r2, r3, #5
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	db12      	blt.n	800d9fc <USB_EPSetStall+0xae>
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00f      	beq.n	800d9fc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	015a      	lsls	r2, r3, #5
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	68ba      	ldr	r2, [r7, #8]
 800d9ec:	0151      	lsls	r1, r2, #5
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	440a      	add	r2, r1
 800d9f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9fa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	015a      	lsls	r2, r3, #5
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	4413      	add	r3, r2
 800da04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	0151      	lsls	r1, r2, #5
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	440a      	add	r2, r1
 800da12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da2a:	b480      	push	{r7}
 800da2c:	b085      	sub	sp, #20
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	785b      	ldrb	r3, [r3, #1]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d128      	bne.n	800da98 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	015a      	lsls	r2, r3, #5
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	4413      	add	r3, r2
 800da4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	0151      	lsls	r1, r2, #5
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	440a      	add	r2, r1
 800da5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	78db      	ldrb	r3, [r3, #3]
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d003      	beq.n	800da76 <USB_EPClearStall+0x4c>
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	78db      	ldrb	r3, [r3, #3]
 800da72:	2b02      	cmp	r3, #2
 800da74:	d138      	bne.n	800dae8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	015a      	lsls	r2, r3, #5
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	4413      	add	r3, r2
 800da7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	68ba      	ldr	r2, [r7, #8]
 800da86:	0151      	lsls	r1, r2, #5
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	440a      	add	r2, r1
 800da8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da94:	6013      	str	r3, [r2, #0]
 800da96:	e027      	b.n	800dae8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	015a      	lsls	r2, r3, #5
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	0151      	lsls	r1, r2, #5
 800daaa:	68fa      	ldr	r2, [r7, #12]
 800daac:	440a      	add	r2, r1
 800daae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dab6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	78db      	ldrb	r3, [r3, #3]
 800dabc:	2b03      	cmp	r3, #3
 800dabe:	d003      	beq.n	800dac8 <USB_EPClearStall+0x9e>
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	78db      	ldrb	r3, [r3, #3]
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d10f      	bne.n	800dae8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	015a      	lsls	r2, r3, #5
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	4413      	add	r3, r2
 800dad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	0151      	lsls	r1, r2, #5
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	440a      	add	r2, r1
 800dade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dae6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3714      	adds	r7, #20
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b085      	sub	sp, #20
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
 800dafe:	460b      	mov	r3, r1
 800db00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800db18:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	78fb      	ldrb	r3, [r7, #3]
 800db24:	011b      	lsls	r3, r3, #4
 800db26:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800db2a:	68f9      	ldr	r1, [r7, #12]
 800db2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db30:	4313      	orrs	r3, r2
 800db32:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3714      	adds	r7, #20
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr

0800db42 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db42:	b480      	push	{r7}
 800db44:	b085      	sub	sp, #20
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db5c:	f023 0303 	bic.w	r3, r3, #3
 800db60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db70:	f023 0302 	bic.w	r3, r3, #2
 800db74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db9e:	f023 0303 	bic.w	r3, r3, #3
 800dba2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbb2:	f043 0302 	orr.w	r3, r3, #2
 800dbb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3714      	adds	r7, #20
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr

0800dbc6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b085      	sub	sp, #20
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	695b      	ldr	r3, [r3, #20]
 800dbd2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	699b      	ldr	r3, [r3, #24]
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	4013      	ands	r3, r2
 800dbdc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dbde:	68fb      	ldr	r3, [r7, #12]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc08:	69db      	ldr	r3, [r3, #28]
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	0c1b      	lsrs	r3, r3, #16
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc32:	699b      	ldr	r3, [r3, #24]
 800dc34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc3c:	69db      	ldr	r3, [r3, #28]
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	4013      	ands	r3, r2
 800dc42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	b29b      	uxth	r3, r3
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3714      	adds	r7, #20
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dc64:	78fb      	ldrb	r3, [r7, #3]
 800dc66:	015a      	lsls	r2, r3, #5
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc7a:	695b      	ldr	r3, [r3, #20]
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	4013      	ands	r3, r2
 800dc80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc82:	68bb      	ldr	r3, [r7, #8]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b087      	sub	sp, #28
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcb2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dcb4:	78fb      	ldrb	r3, [r7, #3]
 800dcb6:	f003 030f 	and.w	r3, r3, #15
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	fa22 f303 	lsr.w	r3, r2, r3
 800dcc0:	01db      	lsls	r3, r3, #7
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dcca:	78fb      	ldrb	r3, [r7, #3]
 800dccc:	015a      	lsls	r2, r3, #5
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	693a      	ldr	r2, [r7, #16]
 800dcda:	4013      	ands	r3, r2
 800dcdc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dcde:	68bb      	ldr	r3, [r7, #8]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	371c      	adds	r7, #28
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	695b      	ldr	r3, [r3, #20]
 800dcf8:	f003 0301 	and.w	r3, r3, #1
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dd26:	f023 0307 	bic.w	r3, r3, #7
 800dd2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
	...

0800dd50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b087      	sub	sp, #28
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	607a      	str	r2, [r7, #4]
 800dd5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	333c      	adds	r3, #60	; 0x3c
 800dd66:	3304      	adds	r3, #4
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	4a26      	ldr	r2, [pc, #152]	; (800de08 <USB_EP0_OutStart+0xb8>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d90a      	bls.n	800dd8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd84:	d101      	bne.n	800dd8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	e037      	b.n	800ddfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd90:	461a      	mov	r2, r3
 800dd92:	2300      	movs	r3, #0
 800dd94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dda4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dda8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddb8:	f043 0318 	orr.w	r3, r3, #24
 800ddbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ddd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ddd2:	7afb      	ldrb	r3, [r7, #11]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d10f      	bne.n	800ddf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddde:	461a      	mov	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddf2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ddf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	4f54300a 	.word	0x4f54300a

0800de0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de14:	2300      	movs	r3, #0
 800de16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3301      	adds	r3, #1
 800de1c:	60fb      	str	r3, [r7, #12]
 800de1e:	4a13      	ldr	r2, [pc, #76]	; (800de6c <USB_CoreReset+0x60>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d901      	bls.n	800de28 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800de24:	2303      	movs	r3, #3
 800de26:	e01a      	b.n	800de5e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	daf3      	bge.n	800de18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800de30:	2300      	movs	r3, #0
 800de32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	f043 0201 	orr.w	r2, r3, #1
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	3301      	adds	r3, #1
 800de44:	60fb      	str	r3, [r7, #12]
 800de46:	4a09      	ldr	r2, [pc, #36]	; (800de6c <USB_CoreReset+0x60>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d901      	bls.n	800de50 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800de4c:	2303      	movs	r3, #3
 800de4e:	e006      	b.n	800de5e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	f003 0301 	and.w	r3, r3, #1
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d0f1      	beq.n	800de40 <USB_CoreReset+0x34>

  return HAL_OK;
 800de5c:	2300      	movs	r3, #0
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3714      	adds	r7, #20
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop
 800de6c:	00030d40 	.word	0x00030d40

0800de70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800de74:	4904      	ldr	r1, [pc, #16]	; (800de88 <MX_FATFS_Init+0x18>)
 800de76:	4805      	ldr	r0, [pc, #20]	; (800de8c <MX_FATFS_Init+0x1c>)
 800de78:	f005 f86e 	bl	8012f58 <FATFS_LinkDriver>
 800de7c:	4603      	mov	r3, r0
 800de7e:	461a      	mov	r2, r3
 800de80:	4b03      	ldr	r3, [pc, #12]	; (800de90 <MX_FATFS_Init+0x20>)
 800de82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800de84:	bf00      	nop
 800de86:	bd80      	pop	{r7, pc}
 800de88:	200017ec 	.word	0x200017ec
 800de8c:	08019d3c 	.word	0x08019d3c
 800de90:	200017e8 	.word	0x200017e8

0800de94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800de9e:	f000 f896 	bl	800dfce <BSP_SD_IsDetected>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d001      	beq.n	800deac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	e012      	b.n	800ded2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800deac:	480b      	ldr	r0, [pc, #44]	; (800dedc <BSP_SD_Init+0x48>)
 800deae:	f7fa ff57 	bl	8008d60 <HAL_SD_Init>
 800deb2:	4603      	mov	r3, r0
 800deb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800deb6:	79fb      	ldrb	r3, [r7, #7]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d109      	bne.n	800ded0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800debc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dec0:	4806      	ldr	r0, [pc, #24]	; (800dedc <BSP_SD_Init+0x48>)
 800dec2:	f7fb fd23 	bl	800990c <HAL_SD_ConfigWideBusOperation>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800decc:	2301      	movs	r3, #1
 800dece:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ded0:	79fb      	ldrb	r3, [r7, #7]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	20001044 	.word	0x20001044

0800dee0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b086      	sub	sp, #24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800deec:	2300      	movs	r3, #0
 800deee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	68f9      	ldr	r1, [r7, #12]
 800def6:	4806      	ldr	r0, [pc, #24]	; (800df10 <BSP_SD_ReadBlocks_DMA+0x30>)
 800def8:	f7fa ffe0 	bl	8008ebc <HAL_SD_ReadBlocks_DMA>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d001      	beq.n	800df06 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800df02:	2301      	movs	r3, #1
 800df04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800df06:	7dfb      	ldrb	r3, [r7, #23]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3718      	adds	r7, #24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	20001044 	.word	0x20001044

0800df14 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800df20:	2300      	movs	r3, #0
 800df22:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	68ba      	ldr	r2, [r7, #8]
 800df28:	68f9      	ldr	r1, [r7, #12]
 800df2a:	4806      	ldr	r0, [pc, #24]	; (800df44 <BSP_SD_WriteBlocks_DMA+0x30>)
 800df2c:	f7fb f8a8 	bl	8009080 <HAL_SD_WriteBlocks_DMA>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d001      	beq.n	800df3a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800df36:	2301      	movs	r3, #1
 800df38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	20001044 	.word	0x20001044

0800df48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800df4c:	4805      	ldr	r0, [pc, #20]	; (800df64 <BSP_SD_GetCardState+0x1c>)
 800df4e:	f7fb fd77 	bl	8009a40 <HAL_SD_GetCardState>
 800df52:	4603      	mov	r3, r0
 800df54:	2b04      	cmp	r3, #4
 800df56:	bf14      	ite	ne
 800df58:	2301      	movne	r3, #1
 800df5a:	2300      	moveq	r3, #0
 800df5c:	b2db      	uxtb	r3, r3
}
 800df5e:	4618      	mov	r0, r3
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	20001044 	.word	0x20001044

0800df68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800df70:	6879      	ldr	r1, [r7, #4]
 800df72:	4803      	ldr	r0, [pc, #12]	; (800df80 <BSP_SD_GetCardInfo+0x18>)
 800df74:	f7fb fc9e 	bl	80098b4 <HAL_SD_GetCardInfo>
}
 800df78:	bf00      	nop
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	20001044 	.word	0x20001044

0800df84 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800df8c:	f000 f818 	bl	800dfc0 <BSP_SD_AbortCallback>
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dfa0:	f000 f9a8 	bl	800e2f4 <BSP_SD_WriteCpltCallback>
}
 800dfa4:	bf00      	nop
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dfb4:	f000 f9aa 	bl	800e30c <BSP_SD_ReadCpltCallback>
}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	af00      	add	r7, sp, #0

}
 800dfc4:	bf00      	nop
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b082      	sub	sp, #8
 800dfd2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dfd8:	f000 f80c 	bl	800dff4 <BSP_PlatformIsDetected>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d101      	bne.n	800dfe6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dfe6:	79fb      	ldrb	r3, [r7, #7]
 800dfe8:	b2db      	uxtb	r3, r3
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
	...

0800dff4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dffa:	2301      	movs	r3, #1
 800dffc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dffe:	2108      	movs	r1, #8
 800e000:	4806      	ldr	r0, [pc, #24]	; (800e01c <BSP_PlatformIsDetected+0x28>)
 800e002:	f7f8 f803 	bl	800600c <HAL_GPIO_ReadPin>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e00c:	2300      	movs	r3, #0
 800e00e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e010:	79fb      	ldrb	r3, [r7, #7]
}
 800e012:	4618      	mov	r0, r3
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	40020c00 	.word	0x40020c00

0800e020 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e028:	f7f6 fe82 	bl	8004d30 <HAL_GetTick>
 800e02c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e02e:	e006      	b.n	800e03e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e030:	f7ff ff8a 	bl	800df48 <BSP_SD_GetCardState>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d101      	bne.n	800e03e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	e009      	b.n	800e052 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e03e:	f7f6 fe77 	bl	8004d30 <HAL_GetTick>
 800e042:	4602      	mov	r2, r0
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d8f0      	bhi.n	800e030 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e04e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	4603      	mov	r3, r0
 800e064:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e066:	4b0b      	ldr	r3, [pc, #44]	; (800e094 <SD_CheckStatus+0x38>)
 800e068:	2201      	movs	r2, #1
 800e06a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e06c:	f7ff ff6c 	bl	800df48 <BSP_SD_GetCardState>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d107      	bne.n	800e086 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e076:	4b07      	ldr	r3, [pc, #28]	; (800e094 <SD_CheckStatus+0x38>)
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	f023 0301 	bic.w	r3, r3, #1
 800e080:	b2da      	uxtb	r2, r3
 800e082:	4b04      	ldr	r3, [pc, #16]	; (800e094 <SD_CheckStatus+0x38>)
 800e084:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e086:	4b03      	ldr	r3, [pc, #12]	; (800e094 <SD_CheckStatus+0x38>)
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	b2db      	uxtb	r3, r3
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	20000009 	.word	0x20000009

0800e098 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	4603      	mov	r3, r0
 800e0a0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e0a2:	f7ff fef7 	bl	800de94 <BSP_SD_Init>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d107      	bne.n	800e0bc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e0ac:	79fb      	ldrb	r3, [r7, #7]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7ff ffd4 	bl	800e05c <SD_CheckStatus>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	4b04      	ldr	r3, [pc, #16]	; (800e0cc <SD_initialize+0x34>)
 800e0ba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e0bc:	4b03      	ldr	r3, [pc, #12]	; (800e0cc <SD_initialize+0x34>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	b2db      	uxtb	r3, r3
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20000009 	.word	0x20000009

0800e0d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e0da:	79fb      	ldrb	r3, [r7, #7]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff ffbd 	bl	800e05c <SD_CheckStatus>
 800e0e2:	4603      	mov	r3, r0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60b9      	str	r1, [r7, #8]
 800e0f4:	607a      	str	r2, [r7, #4]
 800e0f6:	603b      	str	r3, [r7, #0]
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e100:	f247 5030 	movw	r0, #30000	; 0x7530
 800e104:	f7ff ff8c 	bl	800e020 <SD_CheckStatusWithTimeout>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	da01      	bge.n	800e112 <SD_read+0x26>
  {
    return res;
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	e03b      	b.n	800e18a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e112:	683a      	ldr	r2, [r7, #0]
 800e114:	6879      	ldr	r1, [r7, #4]
 800e116:	68b8      	ldr	r0, [r7, #8]
 800e118:	f7ff fee2 	bl	800dee0 <BSP_SD_ReadBlocks_DMA>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d132      	bne.n	800e188 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e122:	4b1c      	ldr	r3, [pc, #112]	; (800e194 <SD_read+0xa8>)
 800e124:	2200      	movs	r2, #0
 800e126:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e128:	f7f6 fe02 	bl	8004d30 <HAL_GetTick>
 800e12c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e12e:	bf00      	nop
 800e130:	4b18      	ldr	r3, [pc, #96]	; (800e194 <SD_read+0xa8>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d108      	bne.n	800e14a <SD_read+0x5e>
 800e138:	f7f6 fdfa 	bl	8004d30 <HAL_GetTick>
 800e13c:	4602      	mov	r2, r0
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	f247 522f 	movw	r2, #29999	; 0x752f
 800e146:	4293      	cmp	r3, r2
 800e148:	d9f2      	bls.n	800e130 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800e14a:	4b12      	ldr	r3, [pc, #72]	; (800e194 <SD_read+0xa8>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d102      	bne.n	800e158 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	75fb      	strb	r3, [r7, #23]
 800e156:	e017      	b.n	800e188 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e158:	4b0e      	ldr	r3, [pc, #56]	; (800e194 <SD_read+0xa8>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e15e:	f7f6 fde7 	bl	8004d30 <HAL_GetTick>
 800e162:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e164:	e007      	b.n	800e176 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e166:	f7ff feef 	bl	800df48 <BSP_SD_GetCardState>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d102      	bne.n	800e176 <SD_read+0x8a>
          {
            res = RES_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e174:	e008      	b.n	800e188 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e176:	f7f6 fddb 	bl	8004d30 <HAL_GetTick>
 800e17a:	4602      	mov	r2, r0
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	1ad3      	subs	r3, r2, r3
 800e180:	f247 522f 	movw	r2, #29999	; 0x752f
 800e184:	4293      	cmp	r3, r2
 800e186:	d9ee      	bls.n	800e166 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e188:	7dfb      	ldrb	r3, [r7, #23]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	200005a8 	.word	0x200005a8

0800e198 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60b9      	str	r1, [r7, #8]
 800e1a0:	607a      	str	r2, [r7, #4]
 800e1a2:	603b      	str	r3, [r7, #0]
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e1ac:	4b24      	ldr	r3, [pc, #144]	; (800e240 <SD_write+0xa8>)
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e1b2:	f247 5030 	movw	r0, #30000	; 0x7530
 800e1b6:	f7ff ff33 	bl	800e020 <SD_CheckStatusWithTimeout>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	da01      	bge.n	800e1c4 <SD_write+0x2c>
  {
    return res;
 800e1c0:	7dfb      	ldrb	r3, [r7, #23]
 800e1c2:	e038      	b.n	800e236 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	6879      	ldr	r1, [r7, #4]
 800e1c8:	68b8      	ldr	r0, [r7, #8]
 800e1ca:	f7ff fea3 	bl	800df14 <BSP_SD_WriteBlocks_DMA>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d12f      	bne.n	800e234 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e1d4:	f7f6 fdac 	bl	8004d30 <HAL_GetTick>
 800e1d8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e1da:	bf00      	nop
 800e1dc:	4b18      	ldr	r3, [pc, #96]	; (800e240 <SD_write+0xa8>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d108      	bne.n	800e1f6 <SD_write+0x5e>
 800e1e4:	f7f6 fda4 	bl	8004d30 <HAL_GetTick>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	f247 522f 	movw	r2, #29999	; 0x752f
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d9f2      	bls.n	800e1dc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e1f6:	4b12      	ldr	r3, [pc, #72]	; (800e240 <SD_write+0xa8>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d102      	bne.n	800e204 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e1fe:	2301      	movs	r3, #1
 800e200:	75fb      	strb	r3, [r7, #23]
 800e202:	e017      	b.n	800e234 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e204:	4b0e      	ldr	r3, [pc, #56]	; (800e240 <SD_write+0xa8>)
 800e206:	2200      	movs	r2, #0
 800e208:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e20a:	f7f6 fd91 	bl	8004d30 <HAL_GetTick>
 800e20e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e210:	e007      	b.n	800e222 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e212:	f7ff fe99 	bl	800df48 <BSP_SD_GetCardState>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <SD_write+0x8a>
          {
            res = RES_OK;
 800e21c:	2300      	movs	r3, #0
 800e21e:	75fb      	strb	r3, [r7, #23]
            break;
 800e220:	e008      	b.n	800e234 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e222:	f7f6 fd85 	bl	8004d30 <HAL_GetTick>
 800e226:	4602      	mov	r2, r0
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	1ad3      	subs	r3, r2, r3
 800e22c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e230:	4293      	cmp	r3, r2
 800e232:	d9ee      	bls.n	800e212 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e234:	7dfb      	ldrb	r3, [r7, #23]
}
 800e236:	4618      	mov	r0, r3
 800e238:	3718      	adds	r7, #24
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	200005a4 	.word	0x200005a4

0800e244 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b08c      	sub	sp, #48	; 0x30
 800e248:	af00      	add	r7, sp, #0
 800e24a:	4603      	mov	r3, r0
 800e24c:	603a      	str	r2, [r7, #0]
 800e24e:	71fb      	strb	r3, [r7, #7]
 800e250:	460b      	mov	r3, r1
 800e252:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e25a:	4b25      	ldr	r3, [pc, #148]	; (800e2f0 <SD_ioctl+0xac>)
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	f003 0301 	and.w	r3, r3, #1
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <SD_ioctl+0x28>
 800e268:	2303      	movs	r3, #3
 800e26a:	e03c      	b.n	800e2e6 <SD_ioctl+0xa2>

  switch (cmd)
 800e26c:	79bb      	ldrb	r3, [r7, #6]
 800e26e:	2b03      	cmp	r3, #3
 800e270:	d834      	bhi.n	800e2dc <SD_ioctl+0x98>
 800e272:	a201      	add	r2, pc, #4	; (adr r2, 800e278 <SD_ioctl+0x34>)
 800e274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e278:	0800e289 	.word	0x0800e289
 800e27c:	0800e291 	.word	0x0800e291
 800e280:	0800e2a9 	.word	0x0800e2a9
 800e284:	0800e2c3 	.word	0x0800e2c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e28e:	e028      	b.n	800e2e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e290:	f107 030c 	add.w	r3, r7, #12
 800e294:	4618      	mov	r0, r3
 800e296:	f7ff fe67 	bl	800df68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e29a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e2a6:	e01c      	b.n	800e2e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e2a8:	f107 030c 	add.w	r3, r7, #12
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7ff fe5b 	bl	800df68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e2c0:	e00f      	b.n	800e2e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e2c2:	f107 030c 	add.w	r3, r7, #12
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7ff fe4e 	bl	800df68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ce:	0a5a      	lsrs	r2, r3, #9
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e2da:	e002      	b.n	800e2e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e2dc:	2304      	movs	r3, #4
 800e2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e2e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3730      	adds	r7, #48	; 0x30
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20000009 	.word	0x20000009

0800e2f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e2f8:	4b03      	ldr	r3, [pc, #12]	; (800e308 <BSP_SD_WriteCpltCallback+0x14>)
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	601a      	str	r2, [r3, #0]
}
 800e2fe:	bf00      	nop
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr
 800e308:	200005a4 	.word	0x200005a4

0800e30c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e30c:	b480      	push	{r7}
 800e30e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e310:	4b03      	ldr	r3, [pc, #12]	; (800e320 <BSP_SD_ReadCpltCallback+0x14>)
 800e312:	2201      	movs	r2, #1
 800e314:	601a      	str	r2, [r3, #0]
}
 800e316:	bf00      	nop
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	200005a8 	.word	0x200005a8

0800e324 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	460b      	mov	r3, r1
 800e32e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e330:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e334:	f005 fbbc 	bl	8013ab0 <USBD_static_malloc>
 800e338:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d105      	bne.n	800e34c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e348:	2302      	movs	r3, #2
 800e34a:	e066      	b.n	800e41a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	7c1b      	ldrb	r3, [r3, #16]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d119      	bne.n	800e390 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e35c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e360:	2202      	movs	r2, #2
 800e362:	2181      	movs	r1, #129	; 0x81
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f005 fa80 	bl	801386a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2201      	movs	r2, #1
 800e36e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e370:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e374:	2202      	movs	r2, #2
 800e376:	2101      	movs	r1, #1
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f005 fa76 	bl	801386a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2201      	movs	r2, #1
 800e382:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2210      	movs	r2, #16
 800e38a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e38e:	e016      	b.n	800e3be <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e390:	2340      	movs	r3, #64	; 0x40
 800e392:	2202      	movs	r2, #2
 800e394:	2181      	movs	r1, #129	; 0x81
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f005 fa67 	bl	801386a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e3a2:	2340      	movs	r3, #64	; 0x40
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	2101      	movs	r1, #1
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f005 fa5e 	bl	801386a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2210      	movs	r2, #16
 800e3ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e3be:	2308      	movs	r3, #8
 800e3c0:	2203      	movs	r2, #3
 800e3c2:	2182      	movs	r1, #130	; 0x82
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f005 fa50 	bl	801386a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	7c1b      	ldrb	r3, [r3, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d109      	bne.n	800e408 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3fe:	2101      	movs	r1, #1
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f005 fb21 	bl	8013a48 <USBD_LL_PrepareReceive>
 800e406:	e007      	b.n	800e418 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e40e:	2340      	movs	r3, #64	; 0x40
 800e410:	2101      	movs	r1, #1
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f005 fb18 	bl	8013a48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e418:	2300      	movs	r3, #0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b082      	sub	sp, #8
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	460b      	mov	r3, r1
 800e42c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e42e:	2181      	movs	r1, #129	; 0x81
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f005 fa40 	bl	80138b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e43c:	2101      	movs	r1, #1
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f005 fa39 	bl	80138b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e44c:	2182      	movs	r1, #130	; 0x82
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f005 fa31 	bl	80138b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00e      	beq.n	800e48c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e47e:	4618      	mov	r0, r3
 800e480:	f005 fb24 	bl	8013acc <USBD_static_free>
    pdev->pClassData = NULL;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2200      	movs	r2, #0
 800e488:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e48c:	2300      	movs	r3, #0
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3708      	adds	r7, #8
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
	...

0800e498 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b086      	sub	sp, #24
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d101      	bne.n	800e4c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e4bc:	2303      	movs	r3, #3
 800e4be:	e0af      	b.n	800e620 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d03f      	beq.n	800e54c <USBD_CDC_Setup+0xb4>
 800e4cc:	2b20      	cmp	r3, #32
 800e4ce:	f040 809f 	bne.w	800e610 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	88db      	ldrh	r3, [r3, #6]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d02e      	beq.n	800e538 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	b25b      	sxtb	r3, r3
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	da16      	bge.n	800e512 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e4f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	88d2      	ldrh	r2, [r2, #6]
 800e4f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	88db      	ldrh	r3, [r3, #6]
 800e4fc:	2b07      	cmp	r3, #7
 800e4fe:	bf28      	it	cs
 800e500:	2307      	movcs	r3, #7
 800e502:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	89fa      	ldrh	r2, [r7, #14]
 800e508:	4619      	mov	r1, r3
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f001 fb19 	bl	800fb42 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e510:	e085      	b.n	800e61e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	785a      	ldrb	r2, [r3, #1]
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	88db      	ldrh	r3, [r3, #6]
 800e520:	b2da      	uxtb	r2, r3
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e528:	6939      	ldr	r1, [r7, #16]
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	88db      	ldrh	r3, [r3, #6]
 800e52e:	461a      	mov	r2, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f001 fb32 	bl	800fb9a <USBD_CtlPrepareRx>
      break;
 800e536:	e072      	b.n	800e61e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	683a      	ldr	r2, [r7, #0]
 800e542:	7850      	ldrb	r0, [r2, #1]
 800e544:	2200      	movs	r2, #0
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	4798      	blx	r3
      break;
 800e54a:	e068      	b.n	800e61e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	785b      	ldrb	r3, [r3, #1]
 800e550:	2b0b      	cmp	r3, #11
 800e552:	d852      	bhi.n	800e5fa <USBD_CDC_Setup+0x162>
 800e554:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <USBD_CDC_Setup+0xc4>)
 800e556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55a:	bf00      	nop
 800e55c:	0800e58d 	.word	0x0800e58d
 800e560:	0800e609 	.word	0x0800e609
 800e564:	0800e5fb 	.word	0x0800e5fb
 800e568:	0800e5fb 	.word	0x0800e5fb
 800e56c:	0800e5fb 	.word	0x0800e5fb
 800e570:	0800e5fb 	.word	0x0800e5fb
 800e574:	0800e5fb 	.word	0x0800e5fb
 800e578:	0800e5fb 	.word	0x0800e5fb
 800e57c:	0800e5fb 	.word	0x0800e5fb
 800e580:	0800e5fb 	.word	0x0800e5fb
 800e584:	0800e5b7 	.word	0x0800e5b7
 800e588:	0800e5e1 	.word	0x0800e5e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e592:	b2db      	uxtb	r3, r3
 800e594:	2b03      	cmp	r3, #3
 800e596:	d107      	bne.n	800e5a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e598:	f107 030a 	add.w	r3, r7, #10
 800e59c:	2202      	movs	r2, #2
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f001 face 	bl	800fb42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e5a6:	e032      	b.n	800e60e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e5a8:	6839      	ldr	r1, [r7, #0]
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f001 fa58 	bl	800fa60 <USBD_CtlError>
            ret = USBD_FAIL;
 800e5b0:	2303      	movs	r3, #3
 800e5b2:	75fb      	strb	r3, [r7, #23]
          break;
 800e5b4:	e02b      	b.n	800e60e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	2b03      	cmp	r3, #3
 800e5c0:	d107      	bne.n	800e5d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e5c2:	f107 030d 	add.w	r3, r7, #13
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f001 fab9 	bl	800fb42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e5d0:	e01d      	b.n	800e60e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f001 fa43 	bl	800fa60 <USBD_CtlError>
            ret = USBD_FAIL;
 800e5da:	2303      	movs	r3, #3
 800e5dc:	75fb      	strb	r3, [r7, #23]
          break;
 800e5de:	e016      	b.n	800e60e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	2b03      	cmp	r3, #3
 800e5ea:	d00f      	beq.n	800e60c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f001 fa36 	bl	800fa60 <USBD_CtlError>
            ret = USBD_FAIL;
 800e5f4:	2303      	movs	r3, #3
 800e5f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e5f8:	e008      	b.n	800e60c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e5fa:	6839      	ldr	r1, [r7, #0]
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f001 fa2f 	bl	800fa60 <USBD_CtlError>
          ret = USBD_FAIL;
 800e602:	2303      	movs	r3, #3
 800e604:	75fb      	strb	r3, [r7, #23]
          break;
 800e606:	e002      	b.n	800e60e <USBD_CDC_Setup+0x176>
          break;
 800e608:	bf00      	nop
 800e60a:	e008      	b.n	800e61e <USBD_CDC_Setup+0x186>
          break;
 800e60c:	bf00      	nop
      }
      break;
 800e60e:	e006      	b.n	800e61e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e610:	6839      	ldr	r1, [r7, #0]
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f001 fa24 	bl	800fa60 <USBD_CtlError>
      ret = USBD_FAIL;
 800e618:	2303      	movs	r3, #3
 800e61a:	75fb      	strb	r3, [r7, #23]
      break;
 800e61c:	bf00      	nop
  }

  return (uint8_t)ret;
 800e61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3718      	adds	r7, #24
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	460b      	mov	r3, r1
 800e632:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e63a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e646:	2303      	movs	r3, #3
 800e648:	e04f      	b.n	800e6ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e650:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e652:	78fa      	ldrb	r2, [r7, #3]
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	4613      	mov	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	440b      	add	r3, r1
 800e660:	3318      	adds	r3, #24
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d029      	beq.n	800e6bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e668:	78fa      	ldrb	r2, [r7, #3]
 800e66a:	6879      	ldr	r1, [r7, #4]
 800e66c:	4613      	mov	r3, r2
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	4413      	add	r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	440b      	add	r3, r1
 800e676:	3318      	adds	r3, #24
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	78f9      	ldrb	r1, [r7, #3]
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	460b      	mov	r3, r1
 800e680:	00db      	lsls	r3, r3, #3
 800e682:	1a5b      	subs	r3, r3, r1
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	4403      	add	r3, r0
 800e688:	3344      	adds	r3, #68	; 0x44
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e690:	fb03 f301 	mul.w	r3, r3, r1
 800e694:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e696:	2b00      	cmp	r3, #0
 800e698:	d110      	bne.n	800e6bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e69a:	78fa      	ldrb	r2, [r7, #3]
 800e69c:	6879      	ldr	r1, [r7, #4]
 800e69e:	4613      	mov	r3, r2
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	4413      	add	r3, r2
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	440b      	add	r3, r1
 800e6a8:	3318      	adds	r3, #24
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e6ae:	78f9      	ldrb	r1, [r7, #3]
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f005 f9a6 	bl	8013a06 <USBD_LL_Transmit>
 800e6ba:	e015      	b.n	800e6e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d00b      	beq.n	800e6e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e6de:	68ba      	ldr	r2, [r7, #8]
 800e6e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e6e4:	78fa      	ldrb	r2, [r7, #3]
 800e6e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e6e8:	2300      	movs	r3, #0
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b084      	sub	sp, #16
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e704:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d101      	bne.n	800e714 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e710:	2303      	movs	r3, #3
 800e712:	e015      	b.n	800e740 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e714:	78fb      	ldrb	r3, [r7, #3]
 800e716:	4619      	mov	r1, r3
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f005 f9b6 	bl	8013a8a <USBD_LL_GetRxDataSize>
 800e71e:	4602      	mov	r2, r0
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e734:	68fa      	ldr	r2, [r7, #12]
 800e736:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e73a:	4611      	mov	r1, r2
 800e73c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e756:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d101      	bne.n	800e762 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e75e:	2303      	movs	r3, #3
 800e760:	e01b      	b.n	800e79a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d015      	beq.n	800e798 <USBD_CDC_EP0_RxReady+0x50>
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e772:	2bff      	cmp	r3, #255	; 0xff
 800e774:	d010      	beq.n	800e798 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e784:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e78c:	b292      	uxth	r2, r2
 800e78e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	22ff      	movs	r2, #255	; 0xff
 800e794:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e798:	2300      	movs	r3, #0
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
	...

0800e7a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2243      	movs	r2, #67	; 0x43
 800e7b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e7b2:	4b03      	ldr	r3, [pc, #12]	; (800e7c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	20000094 	.word	0x20000094

0800e7c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2243      	movs	r2, #67	; 0x43
 800e7d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e7d2:	4b03      	ldr	r3, [pc, #12]	; (800e7e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr
 800e7e0:	20000050 	.word	0x20000050

0800e7e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2243      	movs	r2, #67	; 0x43
 800e7f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e7f2:	4b03      	ldr	r3, [pc, #12]	; (800e800 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr
 800e800:	200000d8 	.word	0x200000d8

0800e804 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	220a      	movs	r2, #10
 800e810:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e812:	4b03      	ldr	r3, [pc, #12]	; (800e820 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e814:	4618      	mov	r0, r3
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	2000000c 	.word	0x2000000c

0800e824 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e834:	2303      	movs	r3, #3
 800e836:	e004      	b.n	800e842 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	683a      	ldr	r2, [r7, #0]
 800e83c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	370c      	adds	r7, #12
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr

0800e84e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e84e:	b480      	push	{r7}
 800e850:	b087      	sub	sp, #28
 800e852:	af00      	add	r7, sp, #0
 800e854:	60f8      	str	r0, [r7, #12]
 800e856:	60b9      	str	r1, [r7, #8]
 800e858:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e860:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d101      	bne.n	800e86c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e868:	2303      	movs	r3, #3
 800e86a:	e008      	b.n	800e87e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	371c      	adds	r7, #28
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e88a:	b480      	push	{r7}
 800e88c:	b085      	sub	sp, #20
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
 800e892:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e89a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d101      	bne.n	800e8a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e8a2:	2303      	movs	r3, #3
 800e8a4:	e004      	b.n	800e8b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	683a      	ldr	r2, [r7, #0]
 800e8aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3714      	adds	r7, #20
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d101      	bne.n	800e8de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e8da:	2303      	movs	r3, #3
 800e8dc:	e01a      	b.n	800e914 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d114      	bne.n	800e912 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e906:	2181      	movs	r1, #129	; 0x81
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f005 f87c 	bl	8013a06 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e912:	7bfb      	ldrb	r3, [r7, #15]
}
 800e914:	4618      	mov	r0, r3
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e92a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e932:	2b00      	cmp	r3, #0
 800e934:	d101      	bne.n	800e93a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e936:	2303      	movs	r3, #3
 800e938:	e016      	b.n	800e968 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	7c1b      	ldrb	r3, [r3, #16]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d109      	bne.n	800e956 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e94c:	2101      	movs	r1, #1
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f005 f87a 	bl	8013a48 <USBD_LL_PrepareReceive>
 800e954:	e007      	b.n	800e966 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e95c:	2340      	movs	r3, #64	; 0x40
 800e95e:	2101      	movs	r1, #1
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f005 f871 	bl	8013a48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	4613      	mov	r3, r2
 800e97c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d101      	bne.n	800e988 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e984:	2303      	movs	r3, #3
 800e986:	e01f      	b.n	800e9c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2200      	movs	r2, #0
 800e98c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d003      	beq.n	800e9ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	68ba      	ldr	r2, [r7, #8]
 800e9aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	79fa      	ldrb	r2, [r7, #7]
 800e9ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f004 feed 	bl	801379c <USBD_LL_Init>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3718      	adds	r7, #24
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d101      	bne.n	800e9e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e9e4:	2303      	movs	r3, #3
 800e9e6:	e016      	b.n	800ea16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00b      	beq.n	800ea14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea04:	f107 020e 	add.w	r2, r7, #14
 800ea08:	4610      	mov	r0, r2
 800ea0a:	4798      	blx	r3
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3710      	adds	r7, #16
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b082      	sub	sp, #8
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f004 ff04 	bl	8013834 <USBD_LL_Start>
 800ea2c:	4603      	mov	r3, r0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ea36:	b480      	push	{r7}
 800ea38:	b083      	sub	sp, #12
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	460b      	mov	r3, r1
 800ea56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ea58:	2303      	movs	r3, #3
 800ea5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d009      	beq.n	800ea7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	78fa      	ldrb	r2, [r7, #3]
 800ea70:	4611      	mov	r1, r2
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	4798      	blx	r3
 800ea76:	4603      	mov	r3, r0
 800ea78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ea7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3710      	adds	r7, #16
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d007      	beq.n	800eaaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	78fa      	ldrb	r2, [r7, #3]
 800eaa4:	4611      	mov	r1, r2
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	4798      	blx	r3
  }

  return USBD_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eac4:	6839      	ldr	r1, [r7, #0]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 ff90 	bl	800f9ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800eada:	461a      	mov	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eae8:	f003 031f 	and.w	r3, r3, #31
 800eaec:	2b02      	cmp	r3, #2
 800eaee:	d01a      	beq.n	800eb26 <USBD_LL_SetupStage+0x72>
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d822      	bhi.n	800eb3a <USBD_LL_SetupStage+0x86>
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d002      	beq.n	800eafe <USBD_LL_SetupStage+0x4a>
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d00a      	beq.n	800eb12 <USBD_LL_SetupStage+0x5e>
 800eafc:	e01d      	b.n	800eb3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb04:	4619      	mov	r1, r3
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 fa62 	bl	800efd0 <USBD_StdDevReq>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	73fb      	strb	r3, [r7, #15]
      break;
 800eb10:	e020      	b.n	800eb54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb18:	4619      	mov	r1, r3
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 fac6 	bl	800f0ac <USBD_StdItfReq>
 800eb20:	4603      	mov	r3, r0
 800eb22:	73fb      	strb	r3, [r7, #15]
      break;
 800eb24:	e016      	b.n	800eb54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 fb05 	bl	800f13e <USBD_StdEPReq>
 800eb34:	4603      	mov	r3, r0
 800eb36:	73fb      	strb	r3, [r7, #15]
      break;
 800eb38:	e00c      	b.n	800eb54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	4619      	mov	r1, r3
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f004 fed3 	bl	80138f4 <USBD_LL_StallEP>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	73fb      	strb	r3, [r7, #15]
      break;
 800eb52:	bf00      	nop
  }

  return ret;
 800eb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3710      	adds	r7, #16
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b086      	sub	sp, #24
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	60f8      	str	r0, [r7, #12]
 800eb66:	460b      	mov	r3, r1
 800eb68:	607a      	str	r2, [r7, #4]
 800eb6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eb6c:	7afb      	ldrb	r3, [r7, #11]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d138      	bne.n	800ebe4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eb78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb80:	2b03      	cmp	r3, #3
 800eb82:	d14a      	bne.n	800ec1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	689a      	ldr	r2, [r3, #8]
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d913      	bls.n	800ebb8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	689a      	ldr	r2, [r3, #8]
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	1ad2      	subs	r2, r2, r3
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	68da      	ldr	r2, [r3, #12]
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	689b      	ldr	r3, [r3, #8]
 800eba6:	4293      	cmp	r3, r2
 800eba8:	bf28      	it	cs
 800ebaa:	4613      	movcs	r3, r2
 800ebac:	461a      	mov	r2, r3
 800ebae:	6879      	ldr	r1, [r7, #4]
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f001 f80f 	bl	800fbd4 <USBD_CtlContinueRx>
 800ebb6:	e030      	b.n	800ec1a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	2b03      	cmp	r3, #3
 800ebc2:	d10b      	bne.n	800ebdc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebca:	691b      	ldr	r3, [r3, #16]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d005      	beq.n	800ebdc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd6:	691b      	ldr	r3, [r3, #16]
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f001 f80a 	bl	800fbf6 <USBD_CtlSendStatus>
 800ebe2:	e01a      	b.n	800ec1a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	2b03      	cmp	r3, #3
 800ebee:	d114      	bne.n	800ec1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00e      	beq.n	800ec1a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec02:	699b      	ldr	r3, [r3, #24]
 800ec04:	7afa      	ldrb	r2, [r7, #11]
 800ec06:	4611      	mov	r1, r2
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	4798      	blx	r3
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ec10:	7dfb      	ldrb	r3, [r7, #23]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d001      	beq.n	800ec1a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	e000      	b.n	800ec1c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3718      	adds	r7, #24
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b086      	sub	sp, #24
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	607a      	str	r2, [r7, #4]
 800ec30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ec32:	7afb      	ldrb	r3, [r7, #11]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d16b      	bne.n	800ed10 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	3314      	adds	r3, #20
 800ec3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d156      	bne.n	800ecf6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	689a      	ldr	r2, [r3, #8]
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d914      	bls.n	800ec7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	689a      	ldr	r2, [r3, #8]
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	1ad2      	subs	r2, r2, r3
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	461a      	mov	r2, r3
 800ec68:	6879      	ldr	r1, [r7, #4]
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	f000 ff84 	bl	800fb78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec70:	2300      	movs	r3, #0
 800ec72:	2200      	movs	r2, #0
 800ec74:	2100      	movs	r1, #0
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f004 fee6 	bl	8013a48 <USBD_LL_PrepareReceive>
 800ec7c:	e03b      	b.n	800ecf6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	68da      	ldr	r2, [r3, #12]
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d11c      	bne.n	800ecc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	685a      	ldr	r2, [r3, #4]
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d316      	bcc.n	800ecc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	685a      	ldr	r2, [r3, #4]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d20f      	bcs.n	800ecc4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eca4:	2200      	movs	r2, #0
 800eca6:	2100      	movs	r1, #0
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f000 ff65 	bl	800fb78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	2200      	movs	r2, #0
 800ecba:	2100      	movs	r1, #0
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f004 fec3 	bl	8013a48 <USBD_LL_PrepareReceive>
 800ecc2:	e018      	b.n	800ecf6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	2b03      	cmp	r3, #3
 800ecce:	d10b      	bne.n	800ece8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d005      	beq.n	800ece8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ece8:	2180      	movs	r1, #128	; 0x80
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f004 fe02 	bl	80138f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f000 ff93 	bl	800fc1c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d122      	bne.n	800ed46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f7ff fe98 	bl	800ea36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ed0e:	e01a      	b.n	800ed46 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b03      	cmp	r3, #3
 800ed1a:	d114      	bne.n	800ed46 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed22:	695b      	ldr	r3, [r3, #20]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00e      	beq.n	800ed46 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed2e:	695b      	ldr	r3, [r3, #20]
 800ed30:	7afa      	ldrb	r2, [r7, #11]
 800ed32:	4611      	mov	r1, r2
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	4798      	blx	r3
 800ed38:	4603      	mov	r3, r0
 800ed3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ed3c:	7dfb      	ldrb	r3, [r7, #23]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	e000      	b.n	800ed48 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3718      	adds	r7, #24
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ed80:	2303      	movs	r3, #3
 800ed82:	e02f      	b.n	800ede4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00f      	beq.n	800edae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d009      	beq.n	800edae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	6852      	ldr	r2, [r2, #4]
 800eda6:	b2d2      	uxtb	r2, r2
 800eda8:	4611      	mov	r1, r2
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800edae:	2340      	movs	r3, #64	; 0x40
 800edb0:	2200      	movs	r2, #0
 800edb2:	2100      	movs	r1, #0
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f004 fd58 	bl	801386a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2201      	movs	r2, #1
 800edbe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2240      	movs	r2, #64	; 0x40
 800edc6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800edca:	2340      	movs	r3, #64	; 0x40
 800edcc:	2200      	movs	r2, #0
 800edce:	2180      	movs	r1, #128	; 0x80
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f004 fd4a 	bl	801386a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2201      	movs	r2, #1
 800edda:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2240      	movs	r2, #64	; 0x40
 800ede0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	78fa      	ldrb	r2, [r7, #3]
 800edfc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2204      	movs	r2, #4
 800ee26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	d106      	bne.n	800ee5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d101      	bne.n	800ee7e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	e012      	b.n	800eea4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	2b03      	cmp	r3, #3
 800ee88:	d10b      	bne.n	800eea2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee90:	69db      	ldr	r3, [r3, #28]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d005      	beq.n	800eea2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee9c:	69db      	ldr	r3, [r3, #28]
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eea2:	2300      	movs	r3, #0
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d101      	bne.n	800eec6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800eec2:	2303      	movs	r3, #3
 800eec4:	e014      	b.n	800eef0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	2b03      	cmp	r3, #3
 800eed0:	d10d      	bne.n	800eeee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eed8:	6a1b      	ldr	r3, [r3, #32]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d007      	beq.n	800eeee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eee4:	6a1b      	ldr	r3, [r3, #32]
 800eee6:	78fa      	ldrb	r2, [r7, #3]
 800eee8:	4611      	mov	r1, r2
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eeee:	2300      	movs	r3, #0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	460b      	mov	r3, r1
 800ef02:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d101      	bne.n	800ef12 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ef0e:	2303      	movs	r3, #3
 800ef10:	e014      	b.n	800ef3c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	2b03      	cmp	r3, #3
 800ef1c:	d10d      	bne.n	800ef3a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d007      	beq.n	800ef3a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef32:	78fa      	ldrb	r2, [r7, #3]
 800ef34:	4611      	mov	r1, r2
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ef3a:	2300      	movs	r3, #0
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	370c      	adds	r7, #12
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr

0800ef5a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b082      	sub	sp, #8
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d009      	beq.n	800ef88 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	6852      	ldr	r2, [r2, #4]
 800ef80:	b2d2      	uxtb	r2, r2
 800ef82:	4611      	mov	r1, r2
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	4798      	blx	r3
  }

  return USBD_OK;
 800ef88:	2300      	movs	r3, #0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3708      	adds	r7, #8
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef92:	b480      	push	{r7}
 800ef94:	b087      	sub	sp, #28
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	3301      	adds	r3, #1
 800efa8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800efb0:	8a3b      	ldrh	r3, [r7, #16]
 800efb2:	021b      	lsls	r3, r3, #8
 800efb4:	b21a      	sxth	r2, r3
 800efb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800efba:	4313      	orrs	r3, r2
 800efbc:	b21b      	sxth	r3, r3
 800efbe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800efc0:	89fb      	ldrh	r3, [r7, #14]
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	371c      	adds	r7, #28
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr
	...

0800efd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800efda:	2300      	movs	r3, #0
 800efdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800efe6:	2b40      	cmp	r3, #64	; 0x40
 800efe8:	d005      	beq.n	800eff6 <USBD_StdDevReq+0x26>
 800efea:	2b40      	cmp	r3, #64	; 0x40
 800efec:	d853      	bhi.n	800f096 <USBD_StdDevReq+0xc6>
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00b      	beq.n	800f00a <USBD_StdDevReq+0x3a>
 800eff2:	2b20      	cmp	r3, #32
 800eff4:	d14f      	bne.n	800f096 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800effc:	689b      	ldr	r3, [r3, #8]
 800effe:	6839      	ldr	r1, [r7, #0]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	4798      	blx	r3
 800f004:	4603      	mov	r3, r0
 800f006:	73fb      	strb	r3, [r7, #15]
      break;
 800f008:	e04a      	b.n	800f0a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	785b      	ldrb	r3, [r3, #1]
 800f00e:	2b09      	cmp	r3, #9
 800f010:	d83b      	bhi.n	800f08a <USBD_StdDevReq+0xba>
 800f012:	a201      	add	r2, pc, #4	; (adr r2, 800f018 <USBD_StdDevReq+0x48>)
 800f014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f018:	0800f06d 	.word	0x0800f06d
 800f01c:	0800f081 	.word	0x0800f081
 800f020:	0800f08b 	.word	0x0800f08b
 800f024:	0800f077 	.word	0x0800f077
 800f028:	0800f08b 	.word	0x0800f08b
 800f02c:	0800f04b 	.word	0x0800f04b
 800f030:	0800f041 	.word	0x0800f041
 800f034:	0800f08b 	.word	0x0800f08b
 800f038:	0800f063 	.word	0x0800f063
 800f03c:	0800f055 	.word	0x0800f055
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f040:	6839      	ldr	r1, [r7, #0]
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 f9de 	bl	800f404 <USBD_GetDescriptor>
          break;
 800f048:	e024      	b.n	800f094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 fb43 	bl	800f6d8 <USBD_SetAddress>
          break;
 800f052:	e01f      	b.n	800f094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f054:	6839      	ldr	r1, [r7, #0]
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 fb82 	bl	800f760 <USBD_SetConfig>
 800f05c:	4603      	mov	r3, r0
 800f05e:	73fb      	strb	r3, [r7, #15]
          break;
 800f060:	e018      	b.n	800f094 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f062:	6839      	ldr	r1, [r7, #0]
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fc21 	bl	800f8ac <USBD_GetConfig>
          break;
 800f06a:	e013      	b.n	800f094 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f06c:	6839      	ldr	r1, [r7, #0]
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 fc52 	bl	800f918 <USBD_GetStatus>
          break;
 800f074:	e00e      	b.n	800f094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f076:	6839      	ldr	r1, [r7, #0]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fc81 	bl	800f980 <USBD_SetFeature>
          break;
 800f07e:	e009      	b.n	800f094 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fc90 	bl	800f9a8 <USBD_ClrFeature>
          break;
 800f088:	e004      	b.n	800f094 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f08a:	6839      	ldr	r1, [r7, #0]
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 fce7 	bl	800fa60 <USBD_CtlError>
          break;
 800f092:	bf00      	nop
      }
      break;
 800f094:	e004      	b.n	800f0a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 fce1 	bl	800fa60 <USBD_CtlError>
      break;
 800f09e:	bf00      	nop
  }

  return ret;
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop

0800f0ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f0c2:	2b40      	cmp	r3, #64	; 0x40
 800f0c4:	d005      	beq.n	800f0d2 <USBD_StdItfReq+0x26>
 800f0c6:	2b40      	cmp	r3, #64	; 0x40
 800f0c8:	d82f      	bhi.n	800f12a <USBD_StdItfReq+0x7e>
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <USBD_StdItfReq+0x26>
 800f0ce:	2b20      	cmp	r3, #32
 800f0d0:	d12b      	bne.n	800f12a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d81d      	bhi.n	800f11c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	889b      	ldrh	r3, [r3, #4]
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d813      	bhi.n	800f112 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	4798      	blx	r3
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	88db      	ldrh	r3, [r3, #6]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d110      	bne.n	800f126 <USBD_StdItfReq+0x7a>
 800f104:	7bfb      	ldrb	r3, [r7, #15]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10d      	bne.n	800f126 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 fd73 	bl	800fbf6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f110:	e009      	b.n	800f126 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f112:	6839      	ldr	r1, [r7, #0]
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 fca3 	bl	800fa60 <USBD_CtlError>
          break;
 800f11a:	e004      	b.n	800f126 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f11c:	6839      	ldr	r1, [r7, #0]
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 fc9e 	bl	800fa60 <USBD_CtlError>
          break;
 800f124:	e000      	b.n	800f128 <USBD_StdItfReq+0x7c>
          break;
 800f126:	bf00      	nop
      }
      break;
 800f128:	e004      	b.n	800f134 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f12a:	6839      	ldr	r1, [r7, #0]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 fc97 	bl	800fa60 <USBD_CtlError>
      break;
 800f132:	bf00      	nop
  }

  return ret;
 800f134:	7bfb      	ldrb	r3, [r7, #15]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b084      	sub	sp, #16
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
 800f146:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	889b      	ldrh	r3, [r3, #4]
 800f150:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f15a:	2b40      	cmp	r3, #64	; 0x40
 800f15c:	d007      	beq.n	800f16e <USBD_StdEPReq+0x30>
 800f15e:	2b40      	cmp	r3, #64	; 0x40
 800f160:	f200 8145 	bhi.w	800f3ee <USBD_StdEPReq+0x2b0>
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00c      	beq.n	800f182 <USBD_StdEPReq+0x44>
 800f168:	2b20      	cmp	r3, #32
 800f16a:	f040 8140 	bne.w	800f3ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f174:	689b      	ldr	r3, [r3, #8]
 800f176:	6839      	ldr	r1, [r7, #0]
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	4798      	blx	r3
 800f17c:	4603      	mov	r3, r0
 800f17e:	73fb      	strb	r3, [r7, #15]
      break;
 800f180:	e13a      	b.n	800f3f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	785b      	ldrb	r3, [r3, #1]
 800f186:	2b03      	cmp	r3, #3
 800f188:	d007      	beq.n	800f19a <USBD_StdEPReq+0x5c>
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	f300 8129 	bgt.w	800f3e2 <USBD_StdEPReq+0x2a4>
 800f190:	2b00      	cmp	r3, #0
 800f192:	d07f      	beq.n	800f294 <USBD_StdEPReq+0x156>
 800f194:	2b01      	cmp	r3, #1
 800f196:	d03c      	beq.n	800f212 <USBD_StdEPReq+0xd4>
 800f198:	e123      	b.n	800f3e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d002      	beq.n	800f1ac <USBD_StdEPReq+0x6e>
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d016      	beq.n	800f1d8 <USBD_StdEPReq+0x9a>
 800f1aa:	e02c      	b.n	800f206 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1ac:	7bbb      	ldrb	r3, [r7, #14]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d00d      	beq.n	800f1ce <USBD_StdEPReq+0x90>
 800f1b2:	7bbb      	ldrb	r3, [r7, #14]
 800f1b4:	2b80      	cmp	r3, #128	; 0x80
 800f1b6:	d00a      	beq.n	800f1ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1b8:	7bbb      	ldrb	r3, [r7, #14]
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f004 fb99 	bl	80138f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f1c2:	2180      	movs	r1, #128	; 0x80
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f004 fb95 	bl	80138f4 <USBD_LL_StallEP>
 800f1ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f1cc:	e020      	b.n	800f210 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 fc45 	bl	800fa60 <USBD_CtlError>
              break;
 800f1d6:	e01b      	b.n	800f210 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	885b      	ldrh	r3, [r3, #2]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d10e      	bne.n	800f1fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f1e0:	7bbb      	ldrb	r3, [r7, #14]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00b      	beq.n	800f1fe <USBD_StdEPReq+0xc0>
 800f1e6:	7bbb      	ldrb	r3, [r7, #14]
 800f1e8:	2b80      	cmp	r3, #128	; 0x80
 800f1ea:	d008      	beq.n	800f1fe <USBD_StdEPReq+0xc0>
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	88db      	ldrh	r3, [r3, #6]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d104      	bne.n	800f1fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1f4:	7bbb      	ldrb	r3, [r7, #14]
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f004 fb7b 	bl	80138f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 fcf9 	bl	800fbf6 <USBD_CtlSendStatus>

              break;
 800f204:	e004      	b.n	800f210 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f206:	6839      	ldr	r1, [r7, #0]
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 fc29 	bl	800fa60 <USBD_CtlError>
              break;
 800f20e:	bf00      	nop
          }
          break;
 800f210:	e0ec      	b.n	800f3ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b02      	cmp	r3, #2
 800f21c:	d002      	beq.n	800f224 <USBD_StdEPReq+0xe6>
 800f21e:	2b03      	cmp	r3, #3
 800f220:	d016      	beq.n	800f250 <USBD_StdEPReq+0x112>
 800f222:	e030      	b.n	800f286 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f224:	7bbb      	ldrb	r3, [r7, #14]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00d      	beq.n	800f246 <USBD_StdEPReq+0x108>
 800f22a:	7bbb      	ldrb	r3, [r7, #14]
 800f22c:	2b80      	cmp	r3, #128	; 0x80
 800f22e:	d00a      	beq.n	800f246 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f230:	7bbb      	ldrb	r3, [r7, #14]
 800f232:	4619      	mov	r1, r3
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f004 fb5d 	bl	80138f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f23a:	2180      	movs	r1, #128	; 0x80
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f004 fb59 	bl	80138f4 <USBD_LL_StallEP>
 800f242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f244:	e025      	b.n	800f292 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fc09 	bl	800fa60 <USBD_CtlError>
              break;
 800f24e:	e020      	b.n	800f292 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	885b      	ldrh	r3, [r3, #2]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d11b      	bne.n	800f290 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f258:	7bbb      	ldrb	r3, [r7, #14]
 800f25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d004      	beq.n	800f26c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f262:	7bbb      	ldrb	r3, [r7, #14]
 800f264:	4619      	mov	r1, r3
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f004 fb63 	bl	8013932 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fcc2 	bl	800fbf6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	4798      	blx	r3
 800f280:	4603      	mov	r3, r0
 800f282:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f284:	e004      	b.n	800f290 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f286:	6839      	ldr	r1, [r7, #0]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 fbe9 	bl	800fa60 <USBD_CtlError>
              break;
 800f28e:	e000      	b.n	800f292 <USBD_StdEPReq+0x154>
              break;
 800f290:	bf00      	nop
          }
          break;
 800f292:	e0ab      	b.n	800f3ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	d002      	beq.n	800f2a6 <USBD_StdEPReq+0x168>
 800f2a0:	2b03      	cmp	r3, #3
 800f2a2:	d032      	beq.n	800f30a <USBD_StdEPReq+0x1cc>
 800f2a4:	e097      	b.n	800f3d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2a6:	7bbb      	ldrb	r3, [r7, #14]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d007      	beq.n	800f2bc <USBD_StdEPReq+0x17e>
 800f2ac:	7bbb      	ldrb	r3, [r7, #14]
 800f2ae:	2b80      	cmp	r3, #128	; 0x80
 800f2b0:	d004      	beq.n	800f2bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f2b2:	6839      	ldr	r1, [r7, #0]
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fbd3 	bl	800fa60 <USBD_CtlError>
                break;
 800f2ba:	e091      	b.n	800f3e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	da0b      	bge.n	800f2dc <USBD_StdEPReq+0x19e>
 800f2c4:	7bbb      	ldrb	r3, [r7, #14]
 800f2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	4413      	add	r3, r2
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	3310      	adds	r3, #16
 800f2d4:	687a      	ldr	r2, [r7, #4]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	3304      	adds	r3, #4
 800f2da:	e00b      	b.n	800f2f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2dc:	7bbb      	ldrb	r3, [r7, #14]
 800f2de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	2202      	movs	r2, #2
 800f300:	4619      	mov	r1, r3
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 fc1d 	bl	800fb42 <USBD_CtlSendData>
              break;
 800f308:	e06a      	b.n	800f3e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f30a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	da11      	bge.n	800f336 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f312:	7bbb      	ldrb	r3, [r7, #14]
 800f314:	f003 020f 	and.w	r2, r3, #15
 800f318:	6879      	ldr	r1, [r7, #4]
 800f31a:	4613      	mov	r3, r2
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	4413      	add	r3, r2
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	440b      	add	r3, r1
 800f324:	3324      	adds	r3, #36	; 0x24
 800f326:	881b      	ldrh	r3, [r3, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d117      	bne.n	800f35c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f32c:	6839      	ldr	r1, [r7, #0]
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 fb96 	bl	800fa60 <USBD_CtlError>
                  break;
 800f334:	e054      	b.n	800f3e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f336:	7bbb      	ldrb	r3, [r7, #14]
 800f338:	f003 020f 	and.w	r2, r3, #15
 800f33c:	6879      	ldr	r1, [r7, #4]
 800f33e:	4613      	mov	r3, r2
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	4413      	add	r3, r2
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	440b      	add	r3, r1
 800f348:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f34c:	881b      	ldrh	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d104      	bne.n	800f35c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fb83 	bl	800fa60 <USBD_CtlError>
                  break;
 800f35a:	e041      	b.n	800f3e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f35c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f360:	2b00      	cmp	r3, #0
 800f362:	da0b      	bge.n	800f37c <USBD_StdEPReq+0x23e>
 800f364:	7bbb      	ldrb	r3, [r7, #14]
 800f366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f36a:	4613      	mov	r3, r2
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	4413      	add	r3, r2
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	3310      	adds	r3, #16
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	4413      	add	r3, r2
 800f378:	3304      	adds	r3, #4
 800f37a:	e00b      	b.n	800f394 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f382:	4613      	mov	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4413      	add	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	4413      	add	r3, r2
 800f392:	3304      	adds	r3, #4
 800f394:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f396:	7bbb      	ldrb	r3, [r7, #14]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d002      	beq.n	800f3a2 <USBD_StdEPReq+0x264>
 800f39c:	7bbb      	ldrb	r3, [r7, #14]
 800f39e:	2b80      	cmp	r3, #128	; 0x80
 800f3a0:	d103      	bne.n	800f3aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	601a      	str	r2, [r3, #0]
 800f3a8:	e00e      	b.n	800f3c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f3aa:	7bbb      	ldrb	r3, [r7, #14]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f004 fade 	bl	8013970 <USBD_LL_IsStallEP>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d003      	beq.n	800f3c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	2201      	movs	r2, #1
 800f3be:	601a      	str	r2, [r3, #0]
 800f3c0:	e002      	b.n	800f3c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	2202      	movs	r2, #2
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 fbb7 	bl	800fb42 <USBD_CtlSendData>
              break;
 800f3d4:	e004      	b.n	800f3e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f3d6:	6839      	ldr	r1, [r7, #0]
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 fb41 	bl	800fa60 <USBD_CtlError>
              break;
 800f3de:	bf00      	nop
          }
          break;
 800f3e0:	e004      	b.n	800f3ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f3e2:	6839      	ldr	r1, [r7, #0]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fb3b 	bl	800fa60 <USBD_CtlError>
          break;
 800f3ea:	bf00      	nop
      }
      break;
 800f3ec:	e004      	b.n	800f3f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f3ee:	6839      	ldr	r1, [r7, #0]
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 fb35 	bl	800fa60 <USBD_CtlError>
      break;
 800f3f6:	bf00      	nop
  }

  return ret;
 800f3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
	...

0800f404 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f40e:	2300      	movs	r3, #0
 800f410:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f412:	2300      	movs	r3, #0
 800f414:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f416:	2300      	movs	r3, #0
 800f418:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	885b      	ldrh	r3, [r3, #2]
 800f41e:	0a1b      	lsrs	r3, r3, #8
 800f420:	b29b      	uxth	r3, r3
 800f422:	3b01      	subs	r3, #1
 800f424:	2b06      	cmp	r3, #6
 800f426:	f200 8128 	bhi.w	800f67a <USBD_GetDescriptor+0x276>
 800f42a:	a201      	add	r2, pc, #4	; (adr r2, 800f430 <USBD_GetDescriptor+0x2c>)
 800f42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f430:	0800f44d 	.word	0x0800f44d
 800f434:	0800f465 	.word	0x0800f465
 800f438:	0800f4a5 	.word	0x0800f4a5
 800f43c:	0800f67b 	.word	0x0800f67b
 800f440:	0800f67b 	.word	0x0800f67b
 800f444:	0800f61b 	.word	0x0800f61b
 800f448:	0800f647 	.word	0x0800f647
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	7c12      	ldrb	r2, [r2, #16]
 800f458:	f107 0108 	add.w	r1, r7, #8
 800f45c:	4610      	mov	r0, r2
 800f45e:	4798      	blx	r3
 800f460:	60f8      	str	r0, [r7, #12]
      break;
 800f462:	e112      	b.n	800f68a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	7c1b      	ldrb	r3, [r3, #16]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d10d      	bne.n	800f488 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f474:	f107 0208 	add.w	r2, r7, #8
 800f478:	4610      	mov	r0, r2
 800f47a:	4798      	blx	r3
 800f47c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	3301      	adds	r3, #1
 800f482:	2202      	movs	r2, #2
 800f484:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f486:	e100      	b.n	800f68a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f490:	f107 0208 	add.w	r2, r7, #8
 800f494:	4610      	mov	r0, r2
 800f496:	4798      	blx	r3
 800f498:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	3301      	adds	r3, #1
 800f49e:	2202      	movs	r2, #2
 800f4a0:	701a      	strb	r2, [r3, #0]
      break;
 800f4a2:	e0f2      	b.n	800f68a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	885b      	ldrh	r3, [r3, #2]
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b05      	cmp	r3, #5
 800f4ac:	f200 80ac 	bhi.w	800f608 <USBD_GetDescriptor+0x204>
 800f4b0:	a201      	add	r2, pc, #4	; (adr r2, 800f4b8 <USBD_GetDescriptor+0xb4>)
 800f4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b6:	bf00      	nop
 800f4b8:	0800f4d1 	.word	0x0800f4d1
 800f4bc:	0800f505 	.word	0x0800f505
 800f4c0:	0800f539 	.word	0x0800f539
 800f4c4:	0800f56d 	.word	0x0800f56d
 800f4c8:	0800f5a1 	.word	0x0800f5a1
 800f4cc:	0800f5d5 	.word	0x0800f5d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00b      	beq.n	800f4f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	7c12      	ldrb	r2, [r2, #16]
 800f4e8:	f107 0108 	add.w	r1, r7, #8
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	4798      	blx	r3
 800f4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4f2:	e091      	b.n	800f618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4f4:	6839      	ldr	r1, [r7, #0]
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 fab2 	bl	800fa60 <USBD_CtlError>
            err++;
 800f4fc:	7afb      	ldrb	r3, [r7, #11]
 800f4fe:	3301      	adds	r3, #1
 800f500:	72fb      	strb	r3, [r7, #11]
          break;
 800f502:	e089      	b.n	800f618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00b      	beq.n	800f528 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f516:	689b      	ldr	r3, [r3, #8]
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	7c12      	ldrb	r2, [r2, #16]
 800f51c:	f107 0108 	add.w	r1, r7, #8
 800f520:	4610      	mov	r0, r2
 800f522:	4798      	blx	r3
 800f524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f526:	e077      	b.n	800f618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f528:	6839      	ldr	r1, [r7, #0]
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 fa98 	bl	800fa60 <USBD_CtlError>
            err++;
 800f530:	7afb      	ldrb	r3, [r7, #11]
 800f532:	3301      	adds	r3, #1
 800f534:	72fb      	strb	r3, [r7, #11]
          break;
 800f536:	e06f      	b.n	800f618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00b      	beq.n	800f55c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	687a      	ldr	r2, [r7, #4]
 800f54e:	7c12      	ldrb	r2, [r2, #16]
 800f550:	f107 0108 	add.w	r1, r7, #8
 800f554:	4610      	mov	r0, r2
 800f556:	4798      	blx	r3
 800f558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f55a:	e05d      	b.n	800f618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f55c:	6839      	ldr	r1, [r7, #0]
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f000 fa7e 	bl	800fa60 <USBD_CtlError>
            err++;
 800f564:	7afb      	ldrb	r3, [r7, #11]
 800f566:	3301      	adds	r3, #1
 800f568:	72fb      	strb	r3, [r7, #11]
          break;
 800f56a:	e055      	b.n	800f618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f572:	691b      	ldr	r3, [r3, #16]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00b      	beq.n	800f590 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f57e:	691b      	ldr	r3, [r3, #16]
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	7c12      	ldrb	r2, [r2, #16]
 800f584:	f107 0108 	add.w	r1, r7, #8
 800f588:	4610      	mov	r0, r2
 800f58a:	4798      	blx	r3
 800f58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f58e:	e043      	b.n	800f618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fa64 	bl	800fa60 <USBD_CtlError>
            err++;
 800f598:	7afb      	ldrb	r3, [r7, #11]
 800f59a:	3301      	adds	r3, #1
 800f59c:	72fb      	strb	r3, [r7, #11]
          break;
 800f59e:	e03b      	b.n	800f618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5a6:	695b      	ldr	r3, [r3, #20]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00b      	beq.n	800f5c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5b2:	695b      	ldr	r3, [r3, #20]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	7c12      	ldrb	r2, [r2, #16]
 800f5b8:	f107 0108 	add.w	r1, r7, #8
 800f5bc:	4610      	mov	r0, r2
 800f5be:	4798      	blx	r3
 800f5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5c2:	e029      	b.n	800f618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fa4a 	bl	800fa60 <USBD_CtlError>
            err++;
 800f5cc:	7afb      	ldrb	r3, [r7, #11]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800f5d2:	e021      	b.n	800f618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5da:	699b      	ldr	r3, [r3, #24]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00b      	beq.n	800f5f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5e6:	699b      	ldr	r3, [r3, #24]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	7c12      	ldrb	r2, [r2, #16]
 800f5ec:	f107 0108 	add.w	r1, r7, #8
 800f5f0:	4610      	mov	r0, r2
 800f5f2:	4798      	blx	r3
 800f5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5f6:	e00f      	b.n	800f618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5f8:	6839      	ldr	r1, [r7, #0]
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f000 fa30 	bl	800fa60 <USBD_CtlError>
            err++;
 800f600:	7afb      	ldrb	r3, [r7, #11]
 800f602:	3301      	adds	r3, #1
 800f604:	72fb      	strb	r3, [r7, #11]
          break;
 800f606:	e007      	b.n	800f618 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f608:	6839      	ldr	r1, [r7, #0]
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f000 fa28 	bl	800fa60 <USBD_CtlError>
          err++;
 800f610:	7afb      	ldrb	r3, [r7, #11]
 800f612:	3301      	adds	r3, #1
 800f614:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f616:	bf00      	nop
      }
      break;
 800f618:	e037      	b.n	800f68a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	7c1b      	ldrb	r3, [r3, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d109      	bne.n	800f636 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f62a:	f107 0208 	add.w	r2, r7, #8
 800f62e:	4610      	mov	r0, r2
 800f630:	4798      	blx	r3
 800f632:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f634:	e029      	b.n	800f68a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f636:	6839      	ldr	r1, [r7, #0]
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fa11 	bl	800fa60 <USBD_CtlError>
        err++;
 800f63e:	7afb      	ldrb	r3, [r7, #11]
 800f640:	3301      	adds	r3, #1
 800f642:	72fb      	strb	r3, [r7, #11]
      break;
 800f644:	e021      	b.n	800f68a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	7c1b      	ldrb	r3, [r3, #16]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d10d      	bne.n	800f66a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f656:	f107 0208 	add.w	r2, r7, #8
 800f65a:	4610      	mov	r0, r2
 800f65c:	4798      	blx	r3
 800f65e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	3301      	adds	r3, #1
 800f664:	2207      	movs	r2, #7
 800f666:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f668:	e00f      	b.n	800f68a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f66a:	6839      	ldr	r1, [r7, #0]
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 f9f7 	bl	800fa60 <USBD_CtlError>
        err++;
 800f672:	7afb      	ldrb	r3, [r7, #11]
 800f674:	3301      	adds	r3, #1
 800f676:	72fb      	strb	r3, [r7, #11]
      break;
 800f678:	e007      	b.n	800f68a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f67a:	6839      	ldr	r1, [r7, #0]
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 f9ef 	bl	800fa60 <USBD_CtlError>
      err++;
 800f682:	7afb      	ldrb	r3, [r7, #11]
 800f684:	3301      	adds	r3, #1
 800f686:	72fb      	strb	r3, [r7, #11]
      break;
 800f688:	bf00      	nop
  }

  if (err != 0U)
 800f68a:	7afb      	ldrb	r3, [r7, #11]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d11e      	bne.n	800f6ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	88db      	ldrh	r3, [r3, #6]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d016      	beq.n	800f6c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f698:	893b      	ldrh	r3, [r7, #8]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00e      	beq.n	800f6bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	88da      	ldrh	r2, [r3, #6]
 800f6a2:	893b      	ldrh	r3, [r7, #8]
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	bf28      	it	cs
 800f6a8:	4613      	movcs	r3, r2
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f6ae:	893b      	ldrh	r3, [r7, #8]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	68f9      	ldr	r1, [r7, #12]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fa44 	bl	800fb42 <USBD_CtlSendData>
 800f6ba:	e009      	b.n	800f6d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f6bc:	6839      	ldr	r1, [r7, #0]
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f9ce 	bl	800fa60 <USBD_CtlError>
 800f6c4:	e004      	b.n	800f6d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 fa95 	bl	800fbf6 <USBD_CtlSendStatus>
 800f6cc:	e000      	b.n	800f6d0 <USBD_GetDescriptor+0x2cc>
    return;
 800f6ce:	bf00      	nop
  }
}
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop

0800f6d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	889b      	ldrh	r3, [r3, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d131      	bne.n	800f74e <USBD_SetAddress+0x76>
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	88db      	ldrh	r3, [r3, #6]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d12d      	bne.n	800f74e <USBD_SetAddress+0x76>
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	885b      	ldrh	r3, [r3, #2]
 800f6f6:	2b7f      	cmp	r3, #127	; 0x7f
 800f6f8:	d829      	bhi.n	800f74e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	885b      	ldrh	r3, [r3, #2]
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f704:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	2b03      	cmp	r3, #3
 800f710:	d104      	bne.n	800f71c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f712:	6839      	ldr	r1, [r7, #0]
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f9a3 	bl	800fa60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f71a:	e01d      	b.n	800f758 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	7bfa      	ldrb	r2, [r7, #15]
 800f720:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f724:	7bfb      	ldrb	r3, [r7, #15]
 800f726:	4619      	mov	r1, r3
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f004 f94d 	bl	80139c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 fa61 	bl	800fbf6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f734:	7bfb      	ldrb	r3, [r7, #15]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d004      	beq.n	800f744 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2202      	movs	r2, #2
 800f73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f742:	e009      	b.n	800f758 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2201      	movs	r2, #1
 800f748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f74c:	e004      	b.n	800f758 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f74e:	6839      	ldr	r1, [r7, #0]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 f985 	bl	800fa60 <USBD_CtlError>
  }
}
 800f756:	bf00      	nop
 800f758:	bf00      	nop
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f76a:	2300      	movs	r3, #0
 800f76c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	885b      	ldrh	r3, [r3, #2]
 800f772:	b2da      	uxtb	r2, r3
 800f774:	4b4c      	ldr	r3, [pc, #304]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f776:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f778:	4b4b      	ldr	r3, [pc, #300]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d905      	bls.n	800f78c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 f96c 	bl	800fa60 <USBD_CtlError>
    return USBD_FAIL;
 800f788:	2303      	movs	r3, #3
 800f78a:	e088      	b.n	800f89e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f792:	b2db      	uxtb	r3, r3
 800f794:	2b02      	cmp	r3, #2
 800f796:	d002      	beq.n	800f79e <USBD_SetConfig+0x3e>
 800f798:	2b03      	cmp	r3, #3
 800f79a:	d025      	beq.n	800f7e8 <USBD_SetConfig+0x88>
 800f79c:	e071      	b.n	800f882 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f79e:	4b42      	ldr	r3, [pc, #264]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d01c      	beq.n	800f7e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f7a6:	4b40      	ldr	r3, [pc, #256]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7b0:	4b3d      	ldr	r3, [pc, #244]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f7ff f948 	bl	800ea4c <USBD_SetClassConfig>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f7c0:	7bfb      	ldrb	r3, [r7, #15]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d004      	beq.n	800f7d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 f949 	bl	800fa60 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f7ce:	e065      	b.n	800f89c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f000 fa10 	bl	800fbf6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2203      	movs	r2, #3
 800f7da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f7de:	e05d      	b.n	800f89c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 fa08 	bl	800fbf6 <USBD_CtlSendStatus>
      break;
 800f7e6:	e059      	b.n	800f89c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f7e8:	4b2f      	ldr	r3, [pc, #188]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d112      	bne.n	800f816 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2202      	movs	r2, #2
 800f7f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f7f8:	4b2b      	ldr	r3, [pc, #172]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f802:	4b29      	ldr	r3, [pc, #164]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	4619      	mov	r1, r3
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7ff f93b 	bl	800ea84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 f9f1 	bl	800fbf6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f814:	e042      	b.n	800f89c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f816:	4b24      	ldr	r3, [pc, #144]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	461a      	mov	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	429a      	cmp	r2, r3
 800f822:	d02a      	beq.n	800f87a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff f929 	bl	800ea84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f832:	4b1d      	ldr	r3, [pc, #116]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	461a      	mov	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f83c:	4b1a      	ldr	r3, [pc, #104]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	4619      	mov	r1, r3
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f7ff f902 	bl	800ea4c <USBD_SetClassConfig>
 800f848:	4603      	mov	r3, r0
 800f84a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f84c:	7bfb      	ldrb	r3, [r7, #15]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00f      	beq.n	800f872 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f852:	6839      	ldr	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 f903 	bl	800fa60 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	4619      	mov	r1, r3
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f7ff f90e 	bl	800ea84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2202      	movs	r2, #2
 800f86c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f870:	e014      	b.n	800f89c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 f9bf 	bl	800fbf6 <USBD_CtlSendStatus>
      break;
 800f878:	e010      	b.n	800f89c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 f9bb 	bl	800fbf6 <USBD_CtlSendStatus>
      break;
 800f880:	e00c      	b.n	800f89c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f882:	6839      	ldr	r1, [r7, #0]
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 f8eb 	bl	800fa60 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f88a:	4b07      	ldr	r3, [pc, #28]	; (800f8a8 <USBD_SetConfig+0x148>)
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	4619      	mov	r1, r3
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7ff f8f7 	bl	800ea84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f896:	2303      	movs	r3, #3
 800f898:	73fb      	strb	r3, [r7, #15]
      break;
 800f89a:	bf00      	nop
  }

  return ret;
 800f89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3710      	adds	r7, #16
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	200005ac 	.word	0x200005ac

0800f8ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	88db      	ldrh	r3, [r3, #6]
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d004      	beq.n	800f8c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f8be:	6839      	ldr	r1, [r7, #0]
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f8cd 	bl	800fa60 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f8c6:	e023      	b.n	800f910 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	dc02      	bgt.n	800f8da <USBD_GetConfig+0x2e>
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	dc03      	bgt.n	800f8e0 <USBD_GetConfig+0x34>
 800f8d8:	e015      	b.n	800f906 <USBD_GetConfig+0x5a>
 800f8da:	2b03      	cmp	r3, #3
 800f8dc:	d00b      	beq.n	800f8f6 <USBD_GetConfig+0x4a>
 800f8de:	e012      	b.n	800f906 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	3308      	adds	r3, #8
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 f927 	bl	800fb42 <USBD_CtlSendData>
        break;
 800f8f4:	e00c      	b.n	800f910 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 f91f 	bl	800fb42 <USBD_CtlSendData>
        break;
 800f904:	e004      	b.n	800f910 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f906:	6839      	ldr	r1, [r7, #0]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 f8a9 	bl	800fa60 <USBD_CtlError>
        break;
 800f90e:	bf00      	nop
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	3b01      	subs	r3, #1
 800f92c:	2b02      	cmp	r3, #2
 800f92e:	d81e      	bhi.n	800f96e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	88db      	ldrh	r3, [r3, #6]
 800f934:	2b02      	cmp	r3, #2
 800f936:	d004      	beq.n	800f942 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f938:	6839      	ldr	r1, [r7, #0]
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 f890 	bl	800fa60 <USBD_CtlError>
        break;
 800f940:	e01a      	b.n	800f978 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2201      	movs	r2, #1
 800f946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d005      	beq.n	800f95e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	f043 0202 	orr.w	r2, r3, #2
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	330c      	adds	r3, #12
 800f962:	2202      	movs	r2, #2
 800f964:	4619      	mov	r1, r3
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f000 f8eb 	bl	800fb42 <USBD_CtlSendData>
      break;
 800f96c:	e004      	b.n	800f978 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f96e:	6839      	ldr	r1, [r7, #0]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 f875 	bl	800fa60 <USBD_CtlError>
      break;
 800f976:	bf00      	nop
  }
}
 800f978:	bf00      	nop
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	885b      	ldrh	r3, [r3, #2]
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d106      	bne.n	800f9a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2201      	movs	r2, #1
 800f996:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f92b 	bl	800fbf6 <USBD_CtlSendStatus>
  }
}
 800f9a0:	bf00      	nop
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	2b02      	cmp	r3, #2
 800f9be:	d80b      	bhi.n	800f9d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	885b      	ldrh	r3, [r3, #2]
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d10c      	bne.n	800f9e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f000 f910 	bl	800fbf6 <USBD_CtlSendStatus>
      }
      break;
 800f9d6:	e004      	b.n	800f9e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f9d8:	6839      	ldr	r1, [r7, #0]
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f840 	bl	800fa60 <USBD_CtlError>
      break;
 800f9e0:	e000      	b.n	800f9e4 <USBD_ClrFeature+0x3c>
      break;
 800f9e2:	bf00      	nop
  }
}
 800f9e4:	bf00      	nop
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	781a      	ldrb	r2, [r3, #0]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	3301      	adds	r3, #1
 800fa06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	781a      	ldrb	r2, [r3, #0]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	3301      	adds	r3, #1
 800fa14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f7ff fabb 	bl	800ef92 <SWAPBYTE>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	461a      	mov	r2, r3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	3301      	adds	r3, #1
 800fa28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	f7ff faae 	bl	800ef92 <SWAPBYTE>
 800fa36:	4603      	mov	r3, r0
 800fa38:	461a      	mov	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	3301      	adds	r3, #1
 800fa42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	3301      	adds	r3, #1
 800fa48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f7ff faa1 	bl	800ef92 <SWAPBYTE>
 800fa50:	4603      	mov	r3, r0
 800fa52:	461a      	mov	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	80da      	strh	r2, [r3, #6]
}
 800fa58:	bf00      	nop
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa6a:	2180      	movs	r1, #128	; 0x80
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f003 ff41 	bl	80138f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa72:	2100      	movs	r1, #0
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f003 ff3d 	bl	80138f4 <USBD_LL_StallEP>
}
 800fa7a:	bf00      	nop
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b086      	sub	sp, #24
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	60f8      	str	r0, [r7, #12]
 800fa8a:	60b9      	str	r1, [r7, #8]
 800fa8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d036      	beq.n	800fb06 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa9c:	6938      	ldr	r0, [r7, #16]
 800fa9e:	f000 f836 	bl	800fb0e <USBD_GetLen>
 800faa2:	4603      	mov	r3, r0
 800faa4:	3301      	adds	r3, #1
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	005b      	lsls	r3, r3, #1
 800faaa:	b29a      	uxth	r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fab0:	7dfb      	ldrb	r3, [r7, #23]
 800fab2:	68ba      	ldr	r2, [r7, #8]
 800fab4:	4413      	add	r3, r2
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	7812      	ldrb	r2, [r2, #0]
 800faba:	701a      	strb	r2, [r3, #0]
  idx++;
 800fabc:	7dfb      	ldrb	r3, [r7, #23]
 800fabe:	3301      	adds	r3, #1
 800fac0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fac2:	7dfb      	ldrb	r3, [r7, #23]
 800fac4:	68ba      	ldr	r2, [r7, #8]
 800fac6:	4413      	add	r3, r2
 800fac8:	2203      	movs	r2, #3
 800faca:	701a      	strb	r2, [r3, #0]
  idx++;
 800facc:	7dfb      	ldrb	r3, [r7, #23]
 800face:	3301      	adds	r3, #1
 800fad0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fad2:	e013      	b.n	800fafc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fad4:	7dfb      	ldrb	r3, [r7, #23]
 800fad6:	68ba      	ldr	r2, [r7, #8]
 800fad8:	4413      	add	r3, r2
 800fada:	693a      	ldr	r2, [r7, #16]
 800fadc:	7812      	ldrb	r2, [r2, #0]
 800fade:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	3301      	adds	r3, #1
 800fae4:	613b      	str	r3, [r7, #16]
    idx++;
 800fae6:	7dfb      	ldrb	r3, [r7, #23]
 800fae8:	3301      	adds	r3, #1
 800faea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800faec:	7dfb      	ldrb	r3, [r7, #23]
 800faee:	68ba      	ldr	r2, [r7, #8]
 800faf0:	4413      	add	r3, r2
 800faf2:	2200      	movs	r2, #0
 800faf4:	701a      	strb	r2, [r3, #0]
    idx++;
 800faf6:	7dfb      	ldrb	r3, [r7, #23]
 800faf8:	3301      	adds	r3, #1
 800fafa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d1e7      	bne.n	800fad4 <USBD_GetString+0x52>
 800fb04:	e000      	b.n	800fb08 <USBD_GetString+0x86>
    return;
 800fb06:	bf00      	nop
  }
}
 800fb08:	3718      	adds	r7, #24
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fb0e:	b480      	push	{r7}
 800fb10:	b085      	sub	sp, #20
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fb16:	2300      	movs	r3, #0
 800fb18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fb1e:	e005      	b.n	800fb2c <USBD_GetLen+0x1e>
  {
    len++;
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
 800fb22:	3301      	adds	r3, #1
 800fb24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1f5      	bne.n	800fb20 <USBD_GetLen+0x12>
  }

  return len;
 800fb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3714      	adds	r7, #20
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr

0800fb42 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b084      	sub	sp, #16
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	60f8      	str	r0, [r7, #12]
 800fb4a:	60b9      	str	r1, [r7, #8]
 800fb4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2202      	movs	r2, #2
 800fb52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	68ba      	ldr	r2, [r7, #8]
 800fb66:	2100      	movs	r1, #0
 800fb68:	68f8      	ldr	r0, [r7, #12]
 800fb6a:	f003 ff4c 	bl	8013a06 <USBD_LL_Transmit>

  return USBD_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	68ba      	ldr	r2, [r7, #8]
 800fb88:	2100      	movs	r1, #0
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f003 ff3b 	bl	8013a06 <USBD_LL_Transmit>

  return USBD_OK;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}

0800fb9a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb9a:	b580      	push	{r7, lr}
 800fb9c:	b084      	sub	sp, #16
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	60f8      	str	r0, [r7, #12]
 800fba2:	60b9      	str	r1, [r7, #8]
 800fba4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2203      	movs	r2, #3
 800fbaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f003 ff3f 	bl	8013a48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3710      	adds	r7, #16
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b084      	sub	sp, #16
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	68f8      	ldr	r0, [r7, #12]
 800fbe8:	f003 ff2e 	bl	8013a48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b082      	sub	sp, #8
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2204      	movs	r2, #4
 800fc02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fc06:	2300      	movs	r3, #0
 800fc08:	2200      	movs	r2, #0
 800fc0a:	2100      	movs	r1, #0
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f003 fefa 	bl	8013a06 <USBD_LL_Transmit>

  return USBD_OK;
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2205      	movs	r2, #5
 800fc28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	2200      	movs	r2, #0
 800fc30:	2100      	movs	r1, #0
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f003 ff08 	bl	8013a48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc38:	2300      	movs	r3, #0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
	...

0800fc44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fc4e:	79fb      	ldrb	r3, [r7, #7]
 800fc50:	4a08      	ldr	r2, [pc, #32]	; (800fc74 <disk_status+0x30>)
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	4413      	add	r3, r2
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	79fa      	ldrb	r2, [r7, #7]
 800fc5c:	4905      	ldr	r1, [pc, #20]	; (800fc74 <disk_status+0x30>)
 800fc5e:	440a      	add	r2, r1
 800fc60:	7a12      	ldrb	r2, [r2, #8]
 800fc62:	4610      	mov	r0, r2
 800fc64:	4798      	blx	r3
 800fc66:	4603      	mov	r3, r0
 800fc68:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3710      	adds	r7, #16
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	200007d8 	.word	0x200007d8

0800fc78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	4603      	mov	r3, r0
 800fc80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fc82:	2300      	movs	r3, #0
 800fc84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fc86:	79fb      	ldrb	r3, [r7, #7]
 800fc88:	4a0d      	ldr	r2, [pc, #52]	; (800fcc0 <disk_initialize+0x48>)
 800fc8a:	5cd3      	ldrb	r3, [r2, r3]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d111      	bne.n	800fcb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fc90:	79fb      	ldrb	r3, [r7, #7]
 800fc92:	4a0b      	ldr	r2, [pc, #44]	; (800fcc0 <disk_initialize+0x48>)
 800fc94:	2101      	movs	r1, #1
 800fc96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fc98:	79fb      	ldrb	r3, [r7, #7]
 800fc9a:	4a09      	ldr	r2, [pc, #36]	; (800fcc0 <disk_initialize+0x48>)
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	4413      	add	r3, r2
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	79fa      	ldrb	r2, [r7, #7]
 800fca6:	4906      	ldr	r1, [pc, #24]	; (800fcc0 <disk_initialize+0x48>)
 800fca8:	440a      	add	r2, r1
 800fcaa:	7a12      	ldrb	r2, [r2, #8]
 800fcac:	4610      	mov	r0, r2
 800fcae:	4798      	blx	r3
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3710      	adds	r7, #16
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	200007d8 	.word	0x200007d8

0800fcc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fcc4:	b590      	push	{r4, r7, lr}
 800fcc6:	b087      	sub	sp, #28
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60b9      	str	r1, [r7, #8]
 800fccc:	607a      	str	r2, [r7, #4]
 800fcce:	603b      	str	r3, [r7, #0]
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fcd4:	7bfb      	ldrb	r3, [r7, #15]
 800fcd6:	4a0a      	ldr	r2, [pc, #40]	; (800fd00 <disk_read+0x3c>)
 800fcd8:	009b      	lsls	r3, r3, #2
 800fcda:	4413      	add	r3, r2
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	689c      	ldr	r4, [r3, #8]
 800fce0:	7bfb      	ldrb	r3, [r7, #15]
 800fce2:	4a07      	ldr	r2, [pc, #28]	; (800fd00 <disk_read+0x3c>)
 800fce4:	4413      	add	r3, r2
 800fce6:	7a18      	ldrb	r0, [r3, #8]
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	68b9      	ldr	r1, [r7, #8]
 800fcee:	47a0      	blx	r4
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	75fb      	strb	r3, [r7, #23]
  return res;
 800fcf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	371c      	adds	r7, #28
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd90      	pop	{r4, r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	200007d8 	.word	0x200007d8

0800fd04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fd04:	b590      	push	{r4, r7, lr}
 800fd06:	b087      	sub	sp, #28
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60b9      	str	r1, [r7, #8]
 800fd0c:	607a      	str	r2, [r7, #4]
 800fd0e:	603b      	str	r3, [r7, #0]
 800fd10:	4603      	mov	r3, r0
 800fd12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fd14:	7bfb      	ldrb	r3, [r7, #15]
 800fd16:	4a0a      	ldr	r2, [pc, #40]	; (800fd40 <disk_write+0x3c>)
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	4413      	add	r3, r2
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	68dc      	ldr	r4, [r3, #12]
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
 800fd22:	4a07      	ldr	r2, [pc, #28]	; (800fd40 <disk_write+0x3c>)
 800fd24:	4413      	add	r3, r2
 800fd26:	7a18      	ldrb	r0, [r3, #8]
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	68b9      	ldr	r1, [r7, #8]
 800fd2e:	47a0      	blx	r4
 800fd30:	4603      	mov	r3, r0
 800fd32:	75fb      	strb	r3, [r7, #23]
  return res;
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	371c      	adds	r7, #28
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd90      	pop	{r4, r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	200007d8 	.word	0x200007d8

0800fd44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	603a      	str	r2, [r7, #0]
 800fd4e:	71fb      	strb	r3, [r7, #7]
 800fd50:	460b      	mov	r3, r1
 800fd52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fd54:	79fb      	ldrb	r3, [r7, #7]
 800fd56:	4a09      	ldr	r2, [pc, #36]	; (800fd7c <disk_ioctl+0x38>)
 800fd58:	009b      	lsls	r3, r3, #2
 800fd5a:	4413      	add	r3, r2
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	79fa      	ldrb	r2, [r7, #7]
 800fd62:	4906      	ldr	r1, [pc, #24]	; (800fd7c <disk_ioctl+0x38>)
 800fd64:	440a      	add	r2, r1
 800fd66:	7a10      	ldrb	r0, [r2, #8]
 800fd68:	79b9      	ldrb	r1, [r7, #6]
 800fd6a:	683a      	ldr	r2, [r7, #0]
 800fd6c:	4798      	blx	r3
 800fd6e:	4603      	mov	r3, r0
 800fd70:	73fb      	strb	r3, [r7, #15]
  return res;
 800fd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3710      	adds	r7, #16
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	200007d8 	.word	0x200007d8

0800fd80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fd90:	89fb      	ldrh	r3, [r7, #14]
 800fd92:	021b      	lsls	r3, r3, #8
 800fd94:	b21a      	sxth	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	b21b      	sxth	r3, r3
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	b21b      	sxth	r3, r3
 800fda0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fda2:	89fb      	ldrh	r3, [r7, #14]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3714      	adds	r7, #20
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b085      	sub	sp, #20
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	3303      	adds	r3, #3
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	021b      	lsls	r3, r3, #8
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	3202      	adds	r2, #2
 800fdc8:	7812      	ldrb	r2, [r2, #0]
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	021b      	lsls	r3, r3, #8
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	3201      	adds	r2, #1
 800fdd6:	7812      	ldrb	r2, [r2, #0]
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	021b      	lsls	r3, r3, #8
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	7812      	ldrb	r2, [r2, #0]
 800fde4:	4313      	orrs	r3, r2
 800fde6:	60fb      	str	r3, [r7, #12]
	return rv;
 800fde8:	68fb      	ldr	r3, [r7, #12]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3714      	adds	r7, #20
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr

0800fdf6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fdf6:	b480      	push	{r7}
 800fdf8:	b083      	sub	sp, #12
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
 800fdfe:	460b      	mov	r3, r1
 800fe00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	1c5a      	adds	r2, r3, #1
 800fe06:	607a      	str	r2, [r7, #4]
 800fe08:	887a      	ldrh	r2, [r7, #2]
 800fe0a:	b2d2      	uxtb	r2, r2
 800fe0c:	701a      	strb	r2, [r3, #0]
 800fe0e:	887b      	ldrh	r3, [r7, #2]
 800fe10:	0a1b      	lsrs	r3, r3, #8
 800fe12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	1c5a      	adds	r2, r3, #1
 800fe18:	607a      	str	r2, [r7, #4]
 800fe1a:	887a      	ldrh	r2, [r7, #2]
 800fe1c:	b2d2      	uxtb	r2, r2
 800fe1e:	701a      	strb	r2, [r3, #0]
}
 800fe20:	bf00      	nop
 800fe22:	370c      	adds	r7, #12
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	1c5a      	adds	r2, r3, #1
 800fe3a:	607a      	str	r2, [r7, #4]
 800fe3c:	683a      	ldr	r2, [r7, #0]
 800fe3e:	b2d2      	uxtb	r2, r2
 800fe40:	701a      	strb	r2, [r3, #0]
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	0a1b      	lsrs	r3, r3, #8
 800fe46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	1c5a      	adds	r2, r3, #1
 800fe4c:	607a      	str	r2, [r7, #4]
 800fe4e:	683a      	ldr	r2, [r7, #0]
 800fe50:	b2d2      	uxtb	r2, r2
 800fe52:	701a      	strb	r2, [r3, #0]
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	0a1b      	lsrs	r3, r3, #8
 800fe58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	1c5a      	adds	r2, r3, #1
 800fe5e:	607a      	str	r2, [r7, #4]
 800fe60:	683a      	ldr	r2, [r7, #0]
 800fe62:	b2d2      	uxtb	r2, r2
 800fe64:	701a      	strb	r2, [r3, #0]
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	0a1b      	lsrs	r3, r3, #8
 800fe6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	1c5a      	adds	r2, r3, #1
 800fe70:	607a      	str	r2, [r7, #4]
 800fe72:	683a      	ldr	r2, [r7, #0]
 800fe74:	b2d2      	uxtb	r2, r2
 800fe76:	701a      	strb	r2, [r3, #0]
}
 800fe78:	bf00      	nop
 800fe7a:	370c      	adds	r7, #12
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fe84:	b480      	push	{r7}
 800fe86:	b087      	sub	sp, #28
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00d      	beq.n	800feba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fe9e:	693a      	ldr	r2, [r7, #16]
 800fea0:	1c53      	adds	r3, r2, #1
 800fea2:	613b      	str	r3, [r7, #16]
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	1c59      	adds	r1, r3, #1
 800fea8:	6179      	str	r1, [r7, #20]
 800feaa:	7812      	ldrb	r2, [r2, #0]
 800feac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	3b01      	subs	r3, #1
 800feb2:	607b      	str	r3, [r7, #4]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d1f1      	bne.n	800fe9e <mem_cpy+0x1a>
	}
}
 800feba:	bf00      	nop
 800febc:	371c      	adds	r7, #28
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr

0800fec6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fec6:	b480      	push	{r7}
 800fec8:	b087      	sub	sp, #28
 800feca:	af00      	add	r7, sp, #0
 800fecc:	60f8      	str	r0, [r7, #12]
 800fece:	60b9      	str	r1, [r7, #8]
 800fed0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	1c5a      	adds	r2, r3, #1
 800feda:	617a      	str	r2, [r7, #20]
 800fedc:	68ba      	ldr	r2, [r7, #8]
 800fede:	b2d2      	uxtb	r2, r2
 800fee0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	3b01      	subs	r3, #1
 800fee6:	607b      	str	r3, [r7, #4]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d1f3      	bne.n	800fed6 <mem_set+0x10>
}
 800feee:	bf00      	nop
 800fef0:	bf00      	nop
 800fef2:	371c      	adds	r7, #28
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fefc:	b480      	push	{r7}
 800fefe:	b089      	sub	sp, #36	; 0x24
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	61fb      	str	r3, [r7, #28]
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ff10:	2300      	movs	r3, #0
 800ff12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	1c5a      	adds	r2, r3, #1
 800ff18:	61fa      	str	r2, [r7, #28]
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	1c5a      	adds	r2, r3, #1
 800ff22:	61ba      	str	r2, [r7, #24]
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	1acb      	subs	r3, r1, r3
 800ff28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	607b      	str	r3, [r7, #4]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d002      	beq.n	800ff3c <mem_cmp+0x40>
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d0eb      	beq.n	800ff14 <mem_cmp+0x18>

	return r;
 800ff3c:	697b      	ldr	r3, [r7, #20]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3724      	adds	r7, #36	; 0x24
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr

0800ff4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ff4a:	b480      	push	{r7}
 800ff4c:	b083      	sub	sp, #12
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ff54:	e002      	b.n	800ff5c <chk_chr+0x12>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	607b      	str	r3, [r7, #4]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d005      	beq.n	800ff70 <chk_chr+0x26>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d1f2      	bne.n	800ff56 <chk_chr+0xc>
	return *str;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	781b      	ldrb	r3, [r3, #0]
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	60bb      	str	r3, [r7, #8]
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	60fb      	str	r3, [r7, #12]
 800ff92:	e029      	b.n	800ffe8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ff94:	4a27      	ldr	r2, [pc, #156]	; (8010034 <chk_lock+0xb4>)
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	011b      	lsls	r3, r3, #4
 800ff9a:	4413      	add	r3, r2
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d01d      	beq.n	800ffde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ffa2:	4a24      	ldr	r2, [pc, #144]	; (8010034 <chk_lock+0xb4>)
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	011b      	lsls	r3, r3, #4
 800ffa8:	4413      	add	r3, r2
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d116      	bne.n	800ffe2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ffb4:	4a1f      	ldr	r2, [pc, #124]	; (8010034 <chk_lock+0xb4>)
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	011b      	lsls	r3, r3, #4
 800ffba:	4413      	add	r3, r2
 800ffbc:	3304      	adds	r3, #4
 800ffbe:	681a      	ldr	r2, [r3, #0]
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d10c      	bne.n	800ffe2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ffc8:	4a1a      	ldr	r2, [pc, #104]	; (8010034 <chk_lock+0xb4>)
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	011b      	lsls	r3, r3, #4
 800ffce:	4413      	add	r3, r2
 800ffd0:	3308      	adds	r3, #8
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d102      	bne.n	800ffe2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ffdc:	e007      	b.n	800ffee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	60fb      	str	r3, [r7, #12]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2b01      	cmp	r3, #1
 800ffec:	d9d2      	bls.n	800ff94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2b02      	cmp	r3, #2
 800fff2:	d109      	bne.n	8010008 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d102      	bne.n	8010000 <chk_lock+0x80>
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	2b02      	cmp	r3, #2
 800fffe:	d101      	bne.n	8010004 <chk_lock+0x84>
 8010000:	2300      	movs	r3, #0
 8010002:	e010      	b.n	8010026 <chk_lock+0xa6>
 8010004:	2312      	movs	r3, #18
 8010006:	e00e      	b.n	8010026 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d108      	bne.n	8010020 <chk_lock+0xa0>
 801000e:	4a09      	ldr	r2, [pc, #36]	; (8010034 <chk_lock+0xb4>)
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	011b      	lsls	r3, r3, #4
 8010014:	4413      	add	r3, r2
 8010016:	330c      	adds	r3, #12
 8010018:	881b      	ldrh	r3, [r3, #0]
 801001a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801001e:	d101      	bne.n	8010024 <chk_lock+0xa4>
 8010020:	2310      	movs	r3, #16
 8010022:	e000      	b.n	8010026 <chk_lock+0xa6>
 8010024:	2300      	movs	r3, #0
}
 8010026:	4618      	mov	r0, r3
 8010028:	3714      	adds	r7, #20
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop
 8010034:	200005b8 	.word	0x200005b8

08010038 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801003e:	2300      	movs	r3, #0
 8010040:	607b      	str	r3, [r7, #4]
 8010042:	e002      	b.n	801004a <enq_lock+0x12>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	3301      	adds	r3, #1
 8010048:	607b      	str	r3, [r7, #4]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2b01      	cmp	r3, #1
 801004e:	d806      	bhi.n	801005e <enq_lock+0x26>
 8010050:	4a09      	ldr	r2, [pc, #36]	; (8010078 <enq_lock+0x40>)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	011b      	lsls	r3, r3, #4
 8010056:	4413      	add	r3, r2
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d1f2      	bne.n	8010044 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2b02      	cmp	r3, #2
 8010062:	bf14      	ite	ne
 8010064:	2301      	movne	r3, #1
 8010066:	2300      	moveq	r3, #0
 8010068:	b2db      	uxtb	r3, r3
}
 801006a:	4618      	mov	r0, r3
 801006c:	370c      	adds	r7, #12
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	200005b8 	.word	0x200005b8

0801007c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801007c:	b480      	push	{r7}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010086:	2300      	movs	r3, #0
 8010088:	60fb      	str	r3, [r7, #12]
 801008a:	e01f      	b.n	80100cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801008c:	4a41      	ldr	r2, [pc, #260]	; (8010194 <inc_lock+0x118>)
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	011b      	lsls	r3, r3, #4
 8010092:	4413      	add	r3, r2
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	429a      	cmp	r2, r3
 801009c:	d113      	bne.n	80100c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801009e:	4a3d      	ldr	r2, [pc, #244]	; (8010194 <inc_lock+0x118>)
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	011b      	lsls	r3, r3, #4
 80100a4:	4413      	add	r3, r2
 80100a6:	3304      	adds	r3, #4
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d109      	bne.n	80100c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80100b2:	4a38      	ldr	r2, [pc, #224]	; (8010194 <inc_lock+0x118>)
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	011b      	lsls	r3, r3, #4
 80100b8:	4413      	add	r3, r2
 80100ba:	3308      	adds	r3, #8
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d006      	beq.n	80100d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	3301      	adds	r3, #1
 80100ca:	60fb      	str	r3, [r7, #12]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	d9dc      	bls.n	801008c <inc_lock+0x10>
 80100d2:	e000      	b.n	80100d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80100d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d132      	bne.n	8010142 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80100dc:	2300      	movs	r3, #0
 80100de:	60fb      	str	r3, [r7, #12]
 80100e0:	e002      	b.n	80100e8 <inc_lock+0x6c>
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	3301      	adds	r3, #1
 80100e6:	60fb      	str	r3, [r7, #12]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d806      	bhi.n	80100fc <inc_lock+0x80>
 80100ee:	4a29      	ldr	r2, [pc, #164]	; (8010194 <inc_lock+0x118>)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	011b      	lsls	r3, r3, #4
 80100f4:	4413      	add	r3, r2
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1f2      	bne.n	80100e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2b02      	cmp	r3, #2
 8010100:	d101      	bne.n	8010106 <inc_lock+0x8a>
 8010102:	2300      	movs	r3, #0
 8010104:	e040      	b.n	8010188 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	4922      	ldr	r1, [pc, #136]	; (8010194 <inc_lock+0x118>)
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	011b      	lsls	r3, r3, #4
 8010110:	440b      	add	r3, r1
 8010112:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	689a      	ldr	r2, [r3, #8]
 8010118:	491e      	ldr	r1, [pc, #120]	; (8010194 <inc_lock+0x118>)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	011b      	lsls	r3, r3, #4
 801011e:	440b      	add	r3, r1
 8010120:	3304      	adds	r3, #4
 8010122:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	695a      	ldr	r2, [r3, #20]
 8010128:	491a      	ldr	r1, [pc, #104]	; (8010194 <inc_lock+0x118>)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	011b      	lsls	r3, r3, #4
 801012e:	440b      	add	r3, r1
 8010130:	3308      	adds	r3, #8
 8010132:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010134:	4a17      	ldr	r2, [pc, #92]	; (8010194 <inc_lock+0x118>)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	011b      	lsls	r3, r3, #4
 801013a:	4413      	add	r3, r2
 801013c:	330c      	adds	r3, #12
 801013e:	2200      	movs	r2, #0
 8010140:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d009      	beq.n	801015c <inc_lock+0xe0>
 8010148:	4a12      	ldr	r2, [pc, #72]	; (8010194 <inc_lock+0x118>)
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	011b      	lsls	r3, r3, #4
 801014e:	4413      	add	r3, r2
 8010150:	330c      	adds	r3, #12
 8010152:	881b      	ldrh	r3, [r3, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d001      	beq.n	801015c <inc_lock+0xe0>
 8010158:	2300      	movs	r3, #0
 801015a:	e015      	b.n	8010188 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d108      	bne.n	8010174 <inc_lock+0xf8>
 8010162:	4a0c      	ldr	r2, [pc, #48]	; (8010194 <inc_lock+0x118>)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	011b      	lsls	r3, r3, #4
 8010168:	4413      	add	r3, r2
 801016a:	330c      	adds	r3, #12
 801016c:	881b      	ldrh	r3, [r3, #0]
 801016e:	3301      	adds	r3, #1
 8010170:	b29a      	uxth	r2, r3
 8010172:	e001      	b.n	8010178 <inc_lock+0xfc>
 8010174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010178:	4906      	ldr	r1, [pc, #24]	; (8010194 <inc_lock+0x118>)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	011b      	lsls	r3, r3, #4
 801017e:	440b      	add	r3, r1
 8010180:	330c      	adds	r3, #12
 8010182:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	3301      	adds	r3, #1
}
 8010188:	4618      	mov	r0, r3
 801018a:	3714      	adds	r7, #20
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr
 8010194:	200005b8 	.word	0x200005b8

08010198 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010198:	b480      	push	{r7}
 801019a:	b085      	sub	sp, #20
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	3b01      	subs	r3, #1
 80101a4:	607b      	str	r3, [r7, #4]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	d825      	bhi.n	80101f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80101ac:	4a17      	ldr	r2, [pc, #92]	; (801020c <dec_lock+0x74>)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	011b      	lsls	r3, r3, #4
 80101b2:	4413      	add	r3, r2
 80101b4:	330c      	adds	r3, #12
 80101b6:	881b      	ldrh	r3, [r3, #0]
 80101b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80101ba:	89fb      	ldrh	r3, [r7, #14]
 80101bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101c0:	d101      	bne.n	80101c6 <dec_lock+0x2e>
 80101c2:	2300      	movs	r3, #0
 80101c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80101c6:	89fb      	ldrh	r3, [r7, #14]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <dec_lock+0x3a>
 80101cc:	89fb      	ldrh	r3, [r7, #14]
 80101ce:	3b01      	subs	r3, #1
 80101d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80101d2:	4a0e      	ldr	r2, [pc, #56]	; (801020c <dec_lock+0x74>)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	011b      	lsls	r3, r3, #4
 80101d8:	4413      	add	r3, r2
 80101da:	330c      	adds	r3, #12
 80101dc:	89fa      	ldrh	r2, [r7, #14]
 80101de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80101e0:	89fb      	ldrh	r3, [r7, #14]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d105      	bne.n	80101f2 <dec_lock+0x5a>
 80101e6:	4a09      	ldr	r2, [pc, #36]	; (801020c <dec_lock+0x74>)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	011b      	lsls	r3, r3, #4
 80101ec:	4413      	add	r3, r2
 80101ee:	2200      	movs	r2, #0
 80101f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80101f2:	2300      	movs	r3, #0
 80101f4:	737b      	strb	r3, [r7, #13]
 80101f6:	e001      	b.n	80101fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80101f8:	2302      	movs	r3, #2
 80101fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80101fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3714      	adds	r7, #20
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
 801020a:	bf00      	nop
 801020c:	200005b8 	.word	0x200005b8

08010210 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010210:	b480      	push	{r7}
 8010212:	b085      	sub	sp, #20
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010218:	2300      	movs	r3, #0
 801021a:	60fb      	str	r3, [r7, #12]
 801021c:	e010      	b.n	8010240 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801021e:	4a0d      	ldr	r2, [pc, #52]	; (8010254 <clear_lock+0x44>)
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	011b      	lsls	r3, r3, #4
 8010224:	4413      	add	r3, r2
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	429a      	cmp	r2, r3
 801022c:	d105      	bne.n	801023a <clear_lock+0x2a>
 801022e:	4a09      	ldr	r2, [pc, #36]	; (8010254 <clear_lock+0x44>)
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	011b      	lsls	r3, r3, #4
 8010234:	4413      	add	r3, r2
 8010236:	2200      	movs	r2, #0
 8010238:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	3301      	adds	r3, #1
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d9eb      	bls.n	801021e <clear_lock+0xe>
	}
}
 8010246:	bf00      	nop
 8010248:	bf00      	nop
 801024a:	3714      	adds	r7, #20
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr
 8010254:	200005b8 	.word	0x200005b8

08010258 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b086      	sub	sp, #24
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010260:	2300      	movs	r3, #0
 8010262:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	78db      	ldrb	r3, [r3, #3]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d034      	beq.n	80102d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010270:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	7858      	ldrb	r0, [r3, #1]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801027c:	2301      	movs	r3, #1
 801027e:	697a      	ldr	r2, [r7, #20]
 8010280:	f7ff fd40 	bl	800fd04 <disk_write>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d002      	beq.n	8010290 <sync_window+0x38>
			res = FR_DISK_ERR;
 801028a:	2301      	movs	r3, #1
 801028c:	73fb      	strb	r3, [r7, #15]
 801028e:	e022      	b.n	80102d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029a:	697a      	ldr	r2, [r7, #20]
 801029c:	1ad2      	subs	r2, r2, r3
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	69db      	ldr	r3, [r3, #28]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d217      	bcs.n	80102d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	789b      	ldrb	r3, [r3, #2]
 80102aa:	613b      	str	r3, [r7, #16]
 80102ac:	e010      	b.n	80102d0 <sync_window+0x78>
					wsect += fs->fsize;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	69db      	ldr	r3, [r3, #28]
 80102b2:	697a      	ldr	r2, [r7, #20]
 80102b4:	4413      	add	r3, r2
 80102b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	7858      	ldrb	r0, [r3, #1]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80102c2:	2301      	movs	r3, #1
 80102c4:	697a      	ldr	r2, [r7, #20]
 80102c6:	f7ff fd1d 	bl	800fd04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	3b01      	subs	r3, #1
 80102ce:	613b      	str	r3, [r7, #16]
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d8eb      	bhi.n	80102ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80102d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3718      	adds	r7, #24
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80102ea:	2300      	movs	r3, #0
 80102ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102f2:	683a      	ldr	r2, [r7, #0]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d01b      	beq.n	8010330 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff ffad 	bl	8010258 <sync_window>
 80102fe:	4603      	mov	r3, r0
 8010300:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010302:	7bfb      	ldrb	r3, [r7, #15]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d113      	bne.n	8010330 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	7858      	ldrb	r0, [r3, #1]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010312:	2301      	movs	r3, #1
 8010314:	683a      	ldr	r2, [r7, #0]
 8010316:	f7ff fcd5 	bl	800fcc4 <disk_read>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d004      	beq.n	801032a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010320:	f04f 33ff 	mov.w	r3, #4294967295
 8010324:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010326:	2301      	movs	r3, #1
 8010328:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010330:	7bfb      	ldrb	r3, [r7, #15]
}
 8010332:	4618      	mov	r0, r3
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
	...

0801033c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f7ff ff87 	bl	8010258 <sync_window>
 801034a:	4603      	mov	r3, r0
 801034c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801034e:	7bfb      	ldrb	r3, [r7, #15]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d158      	bne.n	8010406 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	2b03      	cmp	r3, #3
 801035a:	d148      	bne.n	80103ee <sync_fs+0xb2>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	791b      	ldrb	r3, [r3, #4]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d144      	bne.n	80103ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	3334      	adds	r3, #52	; 0x34
 8010368:	f44f 7200 	mov.w	r2, #512	; 0x200
 801036c:	2100      	movs	r1, #0
 801036e:	4618      	mov	r0, r3
 8010370:	f7ff fda9 	bl	800fec6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	3334      	adds	r3, #52	; 0x34
 8010378:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801037c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010380:	4618      	mov	r0, r3
 8010382:	f7ff fd38 	bl	800fdf6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	3334      	adds	r3, #52	; 0x34
 801038a:	4921      	ldr	r1, [pc, #132]	; (8010410 <sync_fs+0xd4>)
 801038c:	4618      	mov	r0, r3
 801038e:	f7ff fd4d 	bl	800fe2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	3334      	adds	r3, #52	; 0x34
 8010396:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801039a:	491e      	ldr	r1, [pc, #120]	; (8010414 <sync_fs+0xd8>)
 801039c:	4618      	mov	r0, r3
 801039e:	f7ff fd45 	bl	800fe2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	3334      	adds	r3, #52	; 0x34
 80103a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	4619      	mov	r1, r3
 80103b0:	4610      	mov	r0, r2
 80103b2:	f7ff fd3b 	bl	800fe2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	3334      	adds	r3, #52	; 0x34
 80103ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	4619      	mov	r1, r3
 80103c4:	4610      	mov	r0, r2
 80103c6:	f7ff fd31 	bl	800fe2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6a1b      	ldr	r3, [r3, #32]
 80103ce:	1c5a      	adds	r2, r3, #1
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	7858      	ldrb	r0, [r3, #1]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103e2:	2301      	movs	r3, #1
 80103e4:	f7ff fc8e 	bl	800fd04 <disk_write>
			fs->fsi_flag = 0;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	785b      	ldrb	r3, [r3, #1]
 80103f2:	2200      	movs	r2, #0
 80103f4:	2100      	movs	r1, #0
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7ff fca4 	bl	800fd44 <disk_ioctl>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d001      	beq.n	8010406 <sync_fs+0xca>
 8010402:	2301      	movs	r3, #1
 8010404:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010406:	7bfb      	ldrb	r3, [r7, #15]
}
 8010408:	4618      	mov	r0, r3
 801040a:	3710      	adds	r7, #16
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	41615252 	.word	0x41615252
 8010414:	61417272 	.word	0x61417272

08010418 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	3b02      	subs	r3, #2
 8010426:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	699b      	ldr	r3, [r3, #24]
 801042c:	3b02      	subs	r3, #2
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	429a      	cmp	r2, r3
 8010432:	d301      	bcc.n	8010438 <clust2sect+0x20>
 8010434:	2300      	movs	r3, #0
 8010436:	e008      	b.n	801044a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	895b      	ldrh	r3, [r3, #10]
 801043c:	461a      	mov	r2, r3
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	fb03 f202 	mul.w	r2, r3, r2
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010448:	4413      	add	r3, r2
}
 801044a:	4618      	mov	r0, r3
 801044c:	370c      	adds	r7, #12
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr

08010456 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b086      	sub	sp, #24
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	2b01      	cmp	r3, #1
 801046a:	d904      	bls.n	8010476 <get_fat+0x20>
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	699b      	ldr	r3, [r3, #24]
 8010470:	683a      	ldr	r2, [r7, #0]
 8010472:	429a      	cmp	r2, r3
 8010474:	d302      	bcc.n	801047c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010476:	2301      	movs	r3, #1
 8010478:	617b      	str	r3, [r7, #20]
 801047a:	e08f      	b.n	801059c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801047c:	f04f 33ff 	mov.w	r3, #4294967295
 8010480:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	2b03      	cmp	r3, #3
 8010488:	d062      	beq.n	8010550 <get_fat+0xfa>
 801048a:	2b03      	cmp	r3, #3
 801048c:	dc7c      	bgt.n	8010588 <get_fat+0x132>
 801048e:	2b01      	cmp	r3, #1
 8010490:	d002      	beq.n	8010498 <get_fat+0x42>
 8010492:	2b02      	cmp	r3, #2
 8010494:	d042      	beq.n	801051c <get_fat+0xc6>
 8010496:	e077      	b.n	8010588 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	60fb      	str	r3, [r7, #12]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	085b      	lsrs	r3, r3, #1
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	4413      	add	r3, r2
 80104a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	0a5b      	lsrs	r3, r3, #9
 80104ae:	4413      	add	r3, r2
 80104b0:	4619      	mov	r1, r3
 80104b2:	6938      	ldr	r0, [r7, #16]
 80104b4:	f7ff ff14 	bl	80102e0 <move_window>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d167      	bne.n	801058e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	1c5a      	adds	r2, r3, #1
 80104c2:	60fa      	str	r2, [r7, #12]
 80104c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104c8:	693a      	ldr	r2, [r7, #16]
 80104ca:	4413      	add	r3, r2
 80104cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	0a5b      	lsrs	r3, r3, #9
 80104da:	4413      	add	r3, r2
 80104dc:	4619      	mov	r1, r3
 80104de:	6938      	ldr	r0, [r7, #16]
 80104e0:	f7ff fefe 	bl	80102e0 <move_window>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d153      	bne.n	8010592 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104f0:	693a      	ldr	r2, [r7, #16]
 80104f2:	4413      	add	r3, r2
 80104f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104f8:	021b      	lsls	r3, r3, #8
 80104fa:	461a      	mov	r2, r3
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	4313      	orrs	r3, r2
 8010500:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	f003 0301 	and.w	r3, r3, #1
 8010508:	2b00      	cmp	r3, #0
 801050a:	d002      	beq.n	8010512 <get_fat+0xbc>
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	091b      	lsrs	r3, r3, #4
 8010510:	e002      	b.n	8010518 <get_fat+0xc2>
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010518:	617b      	str	r3, [r7, #20]
			break;
 801051a:	e03f      	b.n	801059c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	0a1b      	lsrs	r3, r3, #8
 8010524:	4413      	add	r3, r2
 8010526:	4619      	mov	r1, r3
 8010528:	6938      	ldr	r0, [r7, #16]
 801052a:	f7ff fed9 	bl	80102e0 <move_window>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d130      	bne.n	8010596 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	005b      	lsls	r3, r3, #1
 801053e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010542:	4413      	add	r3, r2
 8010544:	4618      	mov	r0, r3
 8010546:	f7ff fc1b 	bl	800fd80 <ld_word>
 801054a:	4603      	mov	r3, r0
 801054c:	617b      	str	r3, [r7, #20]
			break;
 801054e:	e025      	b.n	801059c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	09db      	lsrs	r3, r3, #7
 8010558:	4413      	add	r3, r2
 801055a:	4619      	mov	r1, r3
 801055c:	6938      	ldr	r0, [r7, #16]
 801055e:	f7ff febf 	bl	80102e0 <move_window>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d118      	bne.n	801059a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010576:	4413      	add	r3, r2
 8010578:	4618      	mov	r0, r3
 801057a:	f7ff fc19 	bl	800fdb0 <ld_dword>
 801057e:	4603      	mov	r3, r0
 8010580:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010584:	617b      	str	r3, [r7, #20]
			break;
 8010586:	e009      	b.n	801059c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010588:	2301      	movs	r3, #1
 801058a:	617b      	str	r3, [r7, #20]
 801058c:	e006      	b.n	801059c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801058e:	bf00      	nop
 8010590:	e004      	b.n	801059c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010592:	bf00      	nop
 8010594:	e002      	b.n	801059c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010596:	bf00      	nop
 8010598:	e000      	b.n	801059c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801059a:	bf00      	nop
		}
	}

	return val;
 801059c:	697b      	ldr	r3, [r7, #20]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3718      	adds	r7, #24
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80105a6:	b590      	push	{r4, r7, lr}
 80105a8:	b089      	sub	sp, #36	; 0x24
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	60f8      	str	r0, [r7, #12]
 80105ae:	60b9      	str	r1, [r7, #8]
 80105b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80105b2:	2302      	movs	r3, #2
 80105b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	f240 80d2 	bls.w	8010762 <put_fat+0x1bc>
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	68ba      	ldr	r2, [r7, #8]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	f080 80cc 	bcs.w	8010762 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	2b03      	cmp	r3, #3
 80105d0:	f000 8096 	beq.w	8010700 <put_fat+0x15a>
 80105d4:	2b03      	cmp	r3, #3
 80105d6:	f300 80cd 	bgt.w	8010774 <put_fat+0x1ce>
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d002      	beq.n	80105e4 <put_fat+0x3e>
 80105de:	2b02      	cmp	r3, #2
 80105e0:	d06e      	beq.n	80106c0 <put_fat+0x11a>
 80105e2:	e0c7      	b.n	8010774 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	61bb      	str	r3, [r7, #24]
 80105e8:	69bb      	ldr	r3, [r7, #24]
 80105ea:	085b      	lsrs	r3, r3, #1
 80105ec:	69ba      	ldr	r2, [r7, #24]
 80105ee:	4413      	add	r3, r2
 80105f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105f6:	69bb      	ldr	r3, [r7, #24]
 80105f8:	0a5b      	lsrs	r3, r3, #9
 80105fa:	4413      	add	r3, r2
 80105fc:	4619      	mov	r1, r3
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f7ff fe6e 	bl	80102e0 <move_window>
 8010604:	4603      	mov	r3, r0
 8010606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010608:	7ffb      	ldrb	r3, [r7, #31]
 801060a:	2b00      	cmp	r3, #0
 801060c:	f040 80ab 	bne.w	8010766 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	1c59      	adds	r1, r3, #1
 801061a:	61b9      	str	r1, [r7, #24]
 801061c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010620:	4413      	add	r3, r2
 8010622:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	f003 0301 	and.w	r3, r3, #1
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00d      	beq.n	801064a <put_fat+0xa4>
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	b25b      	sxtb	r3, r3
 8010634:	f003 030f 	and.w	r3, r3, #15
 8010638:	b25a      	sxtb	r2, r3
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	b2db      	uxtb	r3, r3
 801063e:	011b      	lsls	r3, r3, #4
 8010640:	b25b      	sxtb	r3, r3
 8010642:	4313      	orrs	r3, r2
 8010644:	b25b      	sxtb	r3, r3
 8010646:	b2db      	uxtb	r3, r3
 8010648:	e001      	b.n	801064e <put_fat+0xa8>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	b2db      	uxtb	r3, r3
 801064e:	697a      	ldr	r2, [r7, #20]
 8010650:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2201      	movs	r2, #1
 8010656:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801065c:	69bb      	ldr	r3, [r7, #24]
 801065e:	0a5b      	lsrs	r3, r3, #9
 8010660:	4413      	add	r3, r2
 8010662:	4619      	mov	r1, r3
 8010664:	68f8      	ldr	r0, [r7, #12]
 8010666:	f7ff fe3b 	bl	80102e0 <move_window>
 801066a:	4603      	mov	r3, r0
 801066c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801066e:	7ffb      	ldrb	r3, [r7, #31]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d17a      	bne.n	801076a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010680:	4413      	add	r3, r2
 8010682:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	f003 0301 	and.w	r3, r3, #1
 801068a:	2b00      	cmp	r3, #0
 801068c:	d003      	beq.n	8010696 <put_fat+0xf0>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	091b      	lsrs	r3, r3, #4
 8010692:	b2db      	uxtb	r3, r3
 8010694:	e00e      	b.n	80106b4 <put_fat+0x10e>
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	b25b      	sxtb	r3, r3
 801069c:	f023 030f 	bic.w	r3, r3, #15
 80106a0:	b25a      	sxtb	r2, r3
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	0a1b      	lsrs	r3, r3, #8
 80106a6:	b25b      	sxtb	r3, r3
 80106a8:	f003 030f 	and.w	r3, r3, #15
 80106ac:	b25b      	sxtb	r3, r3
 80106ae:	4313      	orrs	r3, r2
 80106b0:	b25b      	sxtb	r3, r3
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	697a      	ldr	r2, [r7, #20]
 80106b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2201      	movs	r2, #1
 80106bc:	70da      	strb	r2, [r3, #3]
			break;
 80106be:	e059      	b.n	8010774 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	0a1b      	lsrs	r3, r3, #8
 80106c8:	4413      	add	r3, r2
 80106ca:	4619      	mov	r1, r3
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	f7ff fe07 	bl	80102e0 <move_window>
 80106d2:	4603      	mov	r3, r0
 80106d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80106d6:	7ffb      	ldrb	r3, [r7, #31]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d148      	bne.n	801076e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	005b      	lsls	r3, r3, #1
 80106e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80106ea:	4413      	add	r3, r2
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	b292      	uxth	r2, r2
 80106f0:	4611      	mov	r1, r2
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ff fb7f 	bl	800fdf6 <st_word>
			fs->wflag = 1;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2201      	movs	r2, #1
 80106fc:	70da      	strb	r2, [r3, #3]
			break;
 80106fe:	e039      	b.n	8010774 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	09db      	lsrs	r3, r3, #7
 8010708:	4413      	add	r3, r2
 801070a:	4619      	mov	r1, r3
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	f7ff fde7 	bl	80102e0 <move_window>
 8010712:	4603      	mov	r3, r0
 8010714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010716:	7ffb      	ldrb	r3, [r7, #31]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d12a      	bne.n	8010772 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010730:	4413      	add	r3, r2
 8010732:	4618      	mov	r0, r3
 8010734:	f7ff fb3c 	bl	800fdb0 <ld_dword>
 8010738:	4603      	mov	r3, r0
 801073a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801073e:	4323      	orrs	r3, r4
 8010740:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010750:	4413      	add	r3, r2
 8010752:	6879      	ldr	r1, [r7, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	f7ff fb69 	bl	800fe2c <st_dword>
			fs->wflag = 1;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2201      	movs	r2, #1
 801075e:	70da      	strb	r2, [r3, #3]
			break;
 8010760:	e008      	b.n	8010774 <put_fat+0x1ce>
		}
	}
 8010762:	bf00      	nop
 8010764:	e006      	b.n	8010774 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010766:	bf00      	nop
 8010768:	e004      	b.n	8010774 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801076a:	bf00      	nop
 801076c:	e002      	b.n	8010774 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801076e:	bf00      	nop
 8010770:	e000      	b.n	8010774 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010772:	bf00      	nop
	return res;
 8010774:	7ffb      	ldrb	r3, [r7, #31]
}
 8010776:	4618      	mov	r0, r3
 8010778:	3724      	adds	r7, #36	; 0x24
 801077a:	46bd      	mov	sp, r7
 801077c:	bd90      	pop	{r4, r7, pc}

0801077e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b08c      	sub	sp, #48	; 0x30
 8010782:	af00      	add	r7, sp, #0
 8010784:	60f8      	str	r0, [r7, #12]
 8010786:	60b9      	str	r1, [r7, #8]
 8010788:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801078a:	2300      	movs	r3, #0
 801078c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	623b      	str	r3, [r7, #32]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	62fb      	str	r3, [r7, #44]	; 0x2c
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d904      	bls.n	80107ae <remove_chain+0x30>
 80107a4:	6a3b      	ldr	r3, [r7, #32]
 80107a6:	699b      	ldr	r3, [r3, #24]
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d301      	bcc.n	80107b2 <remove_chain+0x34>
 80107ae:	2302      	movs	r3, #2
 80107b0:	e075      	b.n	801089e <remove_chain+0x120>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00f      	beq.n	80107d8 <remove_chain+0x5a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80107b8:	f04f 32ff 	mov.w	r2, #4294967295
 80107bc:	6879      	ldr	r1, [r7, #4]
 80107be:	6a38      	ldr	r0, [r7, #32]
 80107c0:	f7ff fef1 	bl	80105a6 <put_fat>
 80107c4:	4603      	mov	r3, r0
 80107c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res != FR_OK) return res;
 80107ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d002      	beq.n	80107d8 <remove_chain+0x5a>
 80107d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107d6:	e062      	b.n	801089e <remove_chain+0x120>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80107d8:	68b9      	ldr	r1, [r7, #8]
 80107da:	68f8      	ldr	r0, [r7, #12]
 80107dc:	f7ff fe3b 	bl	8010456 <get_fat>
 80107e0:	61f8      	str	r0, [r7, #28]
		if (nxt == 0) break;				/* Empty cluster? */
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d058      	beq.n	801089a <remove_chain+0x11c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d101      	bne.n	80107f2 <remove_chain+0x74>
 80107ee:	2302      	movs	r3, #2
 80107f0:	e055      	b.n	801089e <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80107f2:	69fb      	ldr	r3, [r7, #28]
 80107f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f8:	d101      	bne.n	80107fe <remove_chain+0x80>
 80107fa:	2301      	movs	r3, #1
 80107fc:	e04f      	b.n	801089e <remove_chain+0x120>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80107fe:	2200      	movs	r2, #0
 8010800:	68b9      	ldr	r1, [r7, #8]
 8010802:	6a38      	ldr	r0, [r7, #32]
 8010804:	f7ff fecf 	bl	80105a6 <put_fat>
 8010808:	4603      	mov	r3, r0
 801080a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) return res;
 801080e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010812:	2b00      	cmp	r3, #0
 8010814:	d002      	beq.n	801081c <remove_chain+0x9e>
 8010816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801081a:	e040      	b.n	801089e <remove_chain+0x120>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801081c:	6a3b      	ldr	r3, [r7, #32]
 801081e:	695a      	ldr	r2, [r3, #20]
 8010820:	6a3b      	ldr	r3, [r7, #32]
 8010822:	699b      	ldr	r3, [r3, #24]
 8010824:	3b02      	subs	r3, #2
 8010826:	429a      	cmp	r2, r3
 8010828:	d20b      	bcs.n	8010842 <remove_chain+0xc4>
			fs->free_clst++;
 801082a:	6a3b      	ldr	r3, [r7, #32]
 801082c:	695b      	ldr	r3, [r3, #20]
 801082e:	1c5a      	adds	r2, r3, #1
 8010830:	6a3b      	ldr	r3, [r7, #32]
 8010832:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010834:	6a3b      	ldr	r3, [r7, #32]
 8010836:	791b      	ldrb	r3, [r3, #4]
 8010838:	f043 0301 	orr.w	r3, r3, #1
 801083c:	b2da      	uxtb	r2, r3
 801083e:	6a3b      	ldr	r3, [r7, #32]
 8010840:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8010842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010844:	3301      	adds	r3, #1
 8010846:	69fa      	ldr	r2, [r7, #28]
 8010848:	429a      	cmp	r2, r3
 801084a:	d102      	bne.n	8010852 <remove_chain+0xd4>
			ecl = nxt;
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010850:	e01b      	b.n	801088a <remove_chain+0x10c>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
				if (res != FR_OK) return res;
			}
#endif
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
 8010852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010854:	6a38      	ldr	r0, [r7, #32]
 8010856:	f7ff fddf 	bl	8010418 <clust2sect>
 801085a:	4603      	mov	r3, r0
 801085c:	617b      	str	r3, [r7, #20]
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 801085e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010860:	6a38      	ldr	r0, [r7, #32]
 8010862:	f7ff fdd9 	bl	8010418 <clust2sect>
 8010866:	4602      	mov	r2, r0
 8010868:	6a3b      	ldr	r3, [r7, #32]
 801086a:	895b      	ldrh	r3, [r3, #10]
 801086c:	4413      	add	r3, r2
 801086e:	3b01      	subs	r3, #1
 8010870:	61bb      	str	r3, [r7, #24]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	785b      	ldrb	r3, [r3, #1]
 8010876:	f107 0214 	add.w	r2, r7, #20
 801087a:	2104      	movs	r1, #4
 801087c:	4618      	mov	r0, r3
 801087e:	f7ff fa61 	bl	800fd44 <disk_ioctl>
#endif
			scl = ecl = nxt;
 8010882:	69fb      	ldr	r3, [r7, #28]
 8010884:	62bb      	str	r3, [r7, #40]	; 0x28
 8010886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010888:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
#endif
		clst = nxt;					/* Next cluster */
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801088e:	6a3b      	ldr	r3, [r7, #32]
 8010890:	699b      	ldr	r3, [r3, #24]
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	429a      	cmp	r2, r3
 8010896:	d39f      	bcc.n	80107d8 <remove_chain+0x5a>
 8010898:	e000      	b.n	801089c <remove_chain+0x11e>
		if (nxt == 0) break;				/* Empty cluster? */
 801089a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3730      	adds	r7, #48	; 0x30
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b088      	sub	sp, #32
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
 80108ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d10d      	bne.n	80108d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	691b      	ldr	r3, [r3, #16]
 80108c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d004      	beq.n	80108d2 <create_chain+0x2c>
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	699b      	ldr	r3, [r3, #24]
 80108cc:	69ba      	ldr	r2, [r7, #24]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d31b      	bcc.n	801090a <create_chain+0x64>
 80108d2:	2301      	movs	r3, #1
 80108d4:	61bb      	str	r3, [r7, #24]
 80108d6:	e018      	b.n	801090a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80108d8:	6839      	ldr	r1, [r7, #0]
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f7ff fdbb 	bl	8010456 <get_fat>
 80108e0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d801      	bhi.n	80108ec <create_chain+0x46>
 80108e8:	2301      	movs	r3, #1
 80108ea:	e070      	b.n	80109ce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f2:	d101      	bne.n	80108f8 <create_chain+0x52>
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	e06a      	b.n	80109ce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	699b      	ldr	r3, [r3, #24]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d201      	bcs.n	8010906 <create_chain+0x60>
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	e063      	b.n	80109ce <create_chain+0x128>
		scl = clst;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801090a:	69bb      	ldr	r3, [r7, #24]
 801090c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	3301      	adds	r3, #1
 8010912:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	699b      	ldr	r3, [r3, #24]
 8010918:	69fa      	ldr	r2, [r7, #28]
 801091a:	429a      	cmp	r2, r3
 801091c:	d307      	bcc.n	801092e <create_chain+0x88>
				ncl = 2;
 801091e:	2302      	movs	r3, #2
 8010920:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010922:	69fa      	ldr	r2, [r7, #28]
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	429a      	cmp	r2, r3
 8010928:	d901      	bls.n	801092e <create_chain+0x88>
 801092a:	2300      	movs	r3, #0
 801092c:	e04f      	b.n	80109ce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801092e:	69f9      	ldr	r1, [r7, #28]
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7ff fd90 	bl	8010456 <get_fat>
 8010936:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d00e      	beq.n	801095c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2b01      	cmp	r3, #1
 8010942:	d003      	beq.n	801094c <create_chain+0xa6>
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801094a:	d101      	bne.n	8010950 <create_chain+0xaa>
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	e03e      	b.n	80109ce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010950:	69fa      	ldr	r2, [r7, #28]
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	429a      	cmp	r2, r3
 8010956:	d1da      	bne.n	801090e <create_chain+0x68>
 8010958:	2300      	movs	r3, #0
 801095a:	e038      	b.n	80109ce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801095c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801095e:	f04f 32ff 	mov.w	r2, #4294967295
 8010962:	69f9      	ldr	r1, [r7, #28]
 8010964:	6938      	ldr	r0, [r7, #16]
 8010966:	f7ff fe1e 	bl	80105a6 <put_fat>
 801096a:	4603      	mov	r3, r0
 801096c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801096e:	7dfb      	ldrb	r3, [r7, #23]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d109      	bne.n	8010988 <create_chain+0xe2>
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d006      	beq.n	8010988 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801097a:	69fa      	ldr	r2, [r7, #28]
 801097c:	6839      	ldr	r1, [r7, #0]
 801097e:	6938      	ldr	r0, [r7, #16]
 8010980:	f7ff fe11 	bl	80105a6 <put_fat>
 8010984:	4603      	mov	r3, r0
 8010986:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010988:	7dfb      	ldrb	r3, [r7, #23]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d116      	bne.n	80109bc <create_chain+0x116>
		fs->last_clst = ncl;
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	69fa      	ldr	r2, [r7, #28]
 8010992:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	695a      	ldr	r2, [r3, #20]
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	699b      	ldr	r3, [r3, #24]
 801099c:	3b02      	subs	r3, #2
 801099e:	429a      	cmp	r2, r3
 80109a0:	d804      	bhi.n	80109ac <create_chain+0x106>
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	695b      	ldr	r3, [r3, #20]
 80109a6:	1e5a      	subs	r2, r3, #1
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	791b      	ldrb	r3, [r3, #4]
 80109b0:	f043 0301 	orr.w	r3, r3, #1
 80109b4:	b2da      	uxtb	r2, r3
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	711a      	strb	r2, [r3, #4]
 80109ba:	e007      	b.n	80109cc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80109bc:	7dfb      	ldrb	r3, [r7, #23]
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d102      	bne.n	80109c8 <create_chain+0x122>
 80109c2:	f04f 33ff 	mov.w	r3, #4294967295
 80109c6:	e000      	b.n	80109ca <create_chain+0x124>
 80109c8:	2301      	movs	r3, #1
 80109ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80109cc:	69fb      	ldr	r3, [r7, #28]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3720      	adds	r7, #32
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80109d6:	b480      	push	{r7}
 80109d8:	b087      	sub	sp, #28
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ea:	3304      	adds	r3, #4
 80109ec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	0a5b      	lsrs	r3, r3, #9
 80109f2:	68fa      	ldr	r2, [r7, #12]
 80109f4:	8952      	ldrh	r2, [r2, #10]
 80109f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80109fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	1d1a      	adds	r2, r3, #4
 8010a00:	613a      	str	r2, [r7, #16]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d101      	bne.n	8010a10 <clmt_clust+0x3a>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	e010      	b.n	8010a32 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010a10:	697a      	ldr	r2, [r7, #20]
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d307      	bcc.n	8010a28 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010a18:	697a      	ldr	r2, [r7, #20]
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	1ad3      	subs	r3, r2, r3
 8010a1e:	617b      	str	r3, [r7, #20]
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	3304      	adds	r3, #4
 8010a24:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010a26:	e7e9      	b.n	80109fc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010a28:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	4413      	add	r3, r2
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	371c      	adds	r7, #28
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr

08010a3e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b086      	sub	sp, #24
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
 8010a46:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010a54:	d204      	bcs.n	8010a60 <dir_sdi+0x22>
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	f003 031f 	and.w	r3, r3, #31
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d001      	beq.n	8010a64 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010a60:	2302      	movs	r3, #2
 8010a62:	e063      	b.n	8010b2c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	689b      	ldr	r3, [r3, #8]
 8010a6e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d106      	bne.n	8010a84 <dir_sdi+0x46>
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	2b02      	cmp	r3, #2
 8010a7c:	d902      	bls.n	8010a84 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a82:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d10c      	bne.n	8010aa4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	095b      	lsrs	r3, r3, #5
 8010a8e:	693a      	ldr	r2, [r7, #16]
 8010a90:	8912      	ldrh	r2, [r2, #8]
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d301      	bcc.n	8010a9a <dir_sdi+0x5c>
 8010a96:	2302      	movs	r3, #2
 8010a98:	e048      	b.n	8010b2c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	61da      	str	r2, [r3, #28]
 8010aa2:	e029      	b.n	8010af8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	895b      	ldrh	r3, [r3, #10]
 8010aa8:	025b      	lsls	r3, r3, #9
 8010aaa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010aac:	e019      	b.n	8010ae2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6979      	ldr	r1, [r7, #20]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7ff fccf 	bl	8010456 <get_fat>
 8010ab8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac0:	d101      	bne.n	8010ac6 <dir_sdi+0x88>
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e032      	b.n	8010b2c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d904      	bls.n	8010ad6 <dir_sdi+0x98>
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	699b      	ldr	r3, [r3, #24]
 8010ad0:	697a      	ldr	r2, [r7, #20]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d301      	bcc.n	8010ada <dir_sdi+0x9c>
 8010ad6:	2302      	movs	r3, #2
 8010ad8:	e028      	b.n	8010b2c <dir_sdi+0xee>
			ofs -= csz;
 8010ada:	683a      	ldr	r2, [r7, #0]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010ae2:	683a      	ldr	r2, [r7, #0]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d2e1      	bcs.n	8010aae <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010aea:	6979      	ldr	r1, [r7, #20]
 8010aec:	6938      	ldr	r0, [r7, #16]
 8010aee:	f7ff fc93 	bl	8010418 <clust2sect>
 8010af2:	4602      	mov	r2, r0
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	697a      	ldr	r2, [r7, #20]
 8010afc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	69db      	ldr	r3, [r3, #28]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d101      	bne.n	8010b0a <dir_sdi+0xcc>
 8010b06:	2302      	movs	r3, #2
 8010b08:	e010      	b.n	8010b2c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	69da      	ldr	r2, [r3, #28]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	0a5b      	lsrs	r3, r3, #9
 8010b12:	441a      	add	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b24:	441a      	add	r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010b2a:	2300      	movs	r3, #0
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3718      	adds	r7, #24
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b086      	sub	sp, #24
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	695b      	ldr	r3, [r3, #20]
 8010b48:	3320      	adds	r3, #32
 8010b4a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	69db      	ldr	r3, [r3, #28]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d003      	beq.n	8010b5c <dir_next+0x28>
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010b5a:	d301      	bcc.n	8010b60 <dir_next+0x2c>
 8010b5c:	2304      	movs	r3, #4
 8010b5e:	e0aa      	b.n	8010cb6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	f040 8098 	bne.w	8010c9c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	69db      	ldr	r3, [r3, #28]
 8010b70:	1c5a      	adds	r2, r3, #1
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	699b      	ldr	r3, [r3, #24]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d10b      	bne.n	8010b96 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	095b      	lsrs	r3, r3, #5
 8010b82:	68fa      	ldr	r2, [r7, #12]
 8010b84:	8912      	ldrh	r2, [r2, #8]
 8010b86:	4293      	cmp	r3, r2
 8010b88:	f0c0 8088 	bcc.w	8010c9c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	61da      	str	r2, [r3, #28]
 8010b92:	2304      	movs	r3, #4
 8010b94:	e08f      	b.n	8010cb6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	0a5b      	lsrs	r3, r3, #9
 8010b9a:	68fa      	ldr	r2, [r7, #12]
 8010b9c:	8952      	ldrh	r2, [r2, #10]
 8010b9e:	3a01      	subs	r2, #1
 8010ba0:	4013      	ands	r3, r2
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d17a      	bne.n	8010c9c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010ba6:	687a      	ldr	r2, [r7, #4]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	699b      	ldr	r3, [r3, #24]
 8010bac:	4619      	mov	r1, r3
 8010bae:	4610      	mov	r0, r2
 8010bb0:	f7ff fc51 	bl	8010456 <get_fat>
 8010bb4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d801      	bhi.n	8010bc0 <dir_next+0x8c>
 8010bbc:	2302      	movs	r3, #2
 8010bbe:	e07a      	b.n	8010cb6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc6:	d101      	bne.n	8010bcc <dir_next+0x98>
 8010bc8:	2301      	movs	r3, #1
 8010bca:	e074      	b.n	8010cb6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	699b      	ldr	r3, [r3, #24]
 8010bd0:	697a      	ldr	r2, [r7, #20]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d358      	bcc.n	8010c88 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d104      	bne.n	8010be6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	61da      	str	r2, [r3, #28]
 8010be2:	2304      	movs	r3, #4
 8010be4:	e067      	b.n	8010cb6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010be6:	687a      	ldr	r2, [r7, #4]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	699b      	ldr	r3, [r3, #24]
 8010bec:	4619      	mov	r1, r3
 8010bee:	4610      	mov	r0, r2
 8010bf0:	f7ff fe59 	bl	80108a6 <create_chain>
 8010bf4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d101      	bne.n	8010c00 <dir_next+0xcc>
 8010bfc:	2307      	movs	r3, #7
 8010bfe:	e05a      	b.n	8010cb6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	d101      	bne.n	8010c0a <dir_next+0xd6>
 8010c06:	2302      	movs	r3, #2
 8010c08:	e055      	b.n	8010cb6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c10:	d101      	bne.n	8010c16 <dir_next+0xe2>
 8010c12:	2301      	movs	r3, #1
 8010c14:	e04f      	b.n	8010cb6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f7ff fb1e 	bl	8010258 <sync_window>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d001      	beq.n	8010c26 <dir_next+0xf2>
 8010c22:	2301      	movs	r3, #1
 8010c24:	e047      	b.n	8010cb6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	3334      	adds	r3, #52	; 0x34
 8010c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c2e:	2100      	movs	r1, #0
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff f948 	bl	800fec6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010c36:	2300      	movs	r3, #0
 8010c38:	613b      	str	r3, [r7, #16]
 8010c3a:	6979      	ldr	r1, [r7, #20]
 8010c3c:	68f8      	ldr	r0, [r7, #12]
 8010c3e:	f7ff fbeb 	bl	8010418 <clust2sect>
 8010c42:	4602      	mov	r2, r0
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	631a      	str	r2, [r3, #48]	; 0x30
 8010c48:	e012      	b.n	8010c70 <dir_next+0x13c>
						fs->wflag = 1;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	f7ff fb01 	bl	8010258 <sync_window>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d001      	beq.n	8010c60 <dir_next+0x12c>
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	e02a      	b.n	8010cb6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	3301      	adds	r3, #1
 8010c64:	613b      	str	r3, [r7, #16]
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c6a:	1c5a      	adds	r2, r3, #1
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	895b      	ldrh	r3, [r3, #10]
 8010c74:	461a      	mov	r2, r3
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d3e6      	bcc.n	8010c4a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	1ad2      	subs	r2, r2, r3
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	697a      	ldr	r2, [r7, #20]
 8010c8c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010c8e:	6979      	ldr	r1, [r7, #20]
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f7ff fbc1 	bl	8010418 <clust2sect>
 8010c96:	4602      	mov	r2, r0
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	68ba      	ldr	r2, [r7, #8]
 8010ca0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cae:	441a      	add	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010cb4:	2300      	movs	r3, #0
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3718      	adds	r7, #24
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010cbe:	b580      	push	{r7, lr}
 8010cc0:	b086      	sub	sp, #24
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
 8010cc6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010cce:	2100      	movs	r1, #0
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f7ff feb4 	bl	8010a3e <dir_sdi>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010cda:	7dfb      	ldrb	r3, [r7, #23]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d12b      	bne.n	8010d38 <dir_alloc+0x7a>
		n = 0;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	69db      	ldr	r3, [r3, #28]
 8010ce8:	4619      	mov	r1, r3
 8010cea:	68f8      	ldr	r0, [r7, #12]
 8010cec:	f7ff faf8 	bl	80102e0 <move_window>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010cf4:	7dfb      	ldrb	r3, [r7, #23]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d11d      	bne.n	8010d36 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a1b      	ldr	r3, [r3, #32]
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	2be5      	cmp	r3, #229	; 0xe5
 8010d02:	d004      	beq.n	8010d0e <dir_alloc+0x50>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6a1b      	ldr	r3, [r3, #32]
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d107      	bne.n	8010d1e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	3301      	adds	r3, #1
 8010d12:	613b      	str	r3, [r7, #16]
 8010d14:	693a      	ldr	r2, [r7, #16]
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d102      	bne.n	8010d22 <dir_alloc+0x64>
 8010d1c:	e00c      	b.n	8010d38 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010d1e:	2300      	movs	r3, #0
 8010d20:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010d22:	2101      	movs	r1, #1
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f7ff ff05 	bl	8010b34 <dir_next>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010d2e:	7dfb      	ldrb	r3, [r7, #23]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d0d7      	beq.n	8010ce4 <dir_alloc+0x26>
 8010d34:	e000      	b.n	8010d38 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010d36:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010d38:	7dfb      	ldrb	r3, [r7, #23]
 8010d3a:	2b04      	cmp	r3, #4
 8010d3c:	d101      	bne.n	8010d42 <dir_alloc+0x84>
 8010d3e:	2307      	movs	r3, #7
 8010d40:	75fb      	strb	r3, [r7, #23]
	return res;
 8010d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3718      	adds	r7, #24
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b084      	sub	sp, #16
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	331a      	adds	r3, #26
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7ff f810 	bl	800fd80 <ld_word>
 8010d60:	4603      	mov	r3, r0
 8010d62:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	2b03      	cmp	r3, #3
 8010d6a:	d109      	bne.n	8010d80 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	3314      	adds	r3, #20
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7ff f805 	bl	800fd80 <ld_word>
 8010d76:	4603      	mov	r3, r0
 8010d78:	041b      	lsls	r3, r3, #16
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010d80:	68fb      	ldr	r3, [r7, #12]
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	60f8      	str	r0, [r7, #12]
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	331a      	adds	r3, #26
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	b292      	uxth	r2, r2
 8010d9e:	4611      	mov	r1, r2
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7ff f828 	bl	800fdf6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	2b03      	cmp	r3, #3
 8010dac:	d109      	bne.n	8010dc2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	f103 0214 	add.w	r2, r3, #20
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	0c1b      	lsrs	r3, r3, #16
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	4619      	mov	r1, r3
 8010dbc:	4610      	mov	r0, r2
 8010dbe:	f7ff f81a 	bl	800fdf6 <st_word>
	}
}
 8010dc2:	bf00      	nop
 8010dc4:	3710      	adds	r7, #16
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
	...

08010dcc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8010dcc:	b590      	push	{r4, r7, lr}
 8010dce:	b087      	sub	sp, #28
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	331a      	adds	r3, #26
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fe ffd0 	bl	800fd80 <ld_word>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d001      	beq.n	8010dea <cmp_lfn+0x1e>
 8010de6:	2300      	movs	r3, #0
 8010de8:	e059      	b.n	8010e9e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010df2:	1e5a      	subs	r2, r3, #1
 8010df4:	4613      	mov	r3, r2
 8010df6:	005b      	lsls	r3, r3, #1
 8010df8:	4413      	add	r3, r2
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	4413      	add	r3, r2
 8010dfe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010e00:	2301      	movs	r3, #1
 8010e02:	81fb      	strh	r3, [r7, #14]
 8010e04:	2300      	movs	r3, #0
 8010e06:	613b      	str	r3, [r7, #16]
 8010e08:	e033      	b.n	8010e72 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8010e0a:	4a27      	ldr	r2, [pc, #156]	; (8010ea8 <cmp_lfn+0xdc>)
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	4413      	add	r3, r2
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	461a      	mov	r2, r3
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	4413      	add	r3, r2
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe ffb1 	bl	800fd80 <ld_word>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010e22:	89fb      	ldrh	r3, [r7, #14]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d01a      	beq.n	8010e5e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	2bfe      	cmp	r3, #254	; 0xfe
 8010e2c:	d812      	bhi.n	8010e54 <cmp_lfn+0x88>
 8010e2e:	89bb      	ldrh	r3, [r7, #12]
 8010e30:	4618      	mov	r0, r3
 8010e32:	f002 f8dd 	bl	8012ff0 <ff_wtoupper>
 8010e36:	4603      	mov	r3, r0
 8010e38:	461c      	mov	r4, r3
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	1c5a      	adds	r2, r3, #1
 8010e3e:	617a      	str	r2, [r7, #20]
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	4413      	add	r3, r2
 8010e46:	881b      	ldrh	r3, [r3, #0]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f002 f8d1 	bl	8012ff0 <ff_wtoupper>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	429c      	cmp	r4, r3
 8010e52:	d001      	beq.n	8010e58 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010e54:	2300      	movs	r3, #0
 8010e56:	e022      	b.n	8010e9e <cmp_lfn+0xd2>
			}
			wc = uc;
 8010e58:	89bb      	ldrh	r3, [r7, #12]
 8010e5a:	81fb      	strh	r3, [r7, #14]
 8010e5c:	e006      	b.n	8010e6c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010e5e:	89bb      	ldrh	r3, [r7, #12]
 8010e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d001      	beq.n	8010e6c <cmp_lfn+0xa0>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	e018      	b.n	8010e9e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	613b      	str	r3, [r7, #16]
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	2b0c      	cmp	r3, #12
 8010e76:	d9c8      	bls.n	8010e0a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00b      	beq.n	8010e9c <cmp_lfn+0xd0>
 8010e84:	89fb      	ldrh	r3, [r7, #14]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d008      	beq.n	8010e9c <cmp_lfn+0xd0>
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	4413      	add	r3, r2
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d001      	beq.n	8010e9c <cmp_lfn+0xd0>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	e000      	b.n	8010e9e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010e9c:	2301      	movs	r3, #1
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	371c      	adds	r7, #28
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd90      	pop	{r4, r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	08019dd0 	.word	0x08019dd0

08010eac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b088      	sub	sp, #32
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	461a      	mov	r2, r3
 8010eba:	460b      	mov	r3, r1
 8010ebc:	71fb      	strb	r3, [r7, #7]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	330d      	adds	r3, #13
 8010ec6:	79ba      	ldrb	r2, [r7, #6]
 8010ec8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	330b      	adds	r3, #11
 8010ece:	220f      	movs	r2, #15
 8010ed0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	330c      	adds	r3, #12
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	331a      	adds	r3, #26
 8010ede:	2100      	movs	r1, #0
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fe ff88 	bl	800fdf6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010ee6:	79fb      	ldrb	r3, [r7, #7]
 8010ee8:	1e5a      	subs	r2, r3, #1
 8010eea:	4613      	mov	r3, r2
 8010eec:	005b      	lsls	r3, r3, #1
 8010eee:	4413      	add	r3, r2
 8010ef0:	009b      	lsls	r3, r3, #2
 8010ef2:	4413      	add	r3, r2
 8010ef4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	82fb      	strh	r3, [r7, #22]
 8010efa:	2300      	movs	r3, #0
 8010efc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010efe:	8afb      	ldrh	r3, [r7, #22]
 8010f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d007      	beq.n	8010f18 <put_lfn+0x6c>
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	1c5a      	adds	r2, r3, #1
 8010f0c:	61fa      	str	r2, [r7, #28]
 8010f0e:	005b      	lsls	r3, r3, #1
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	4413      	add	r3, r2
 8010f14:	881b      	ldrh	r3, [r3, #0]
 8010f16:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010f18:	4a17      	ldr	r2, [pc, #92]	; (8010f78 <put_lfn+0xcc>)
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	461a      	mov	r2, r3
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	4413      	add	r3, r2
 8010f26:	8afa      	ldrh	r2, [r7, #22]
 8010f28:	4611      	mov	r1, r2
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7fe ff63 	bl	800fdf6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010f30:	8afb      	ldrh	r3, [r7, #22]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d102      	bne.n	8010f3c <put_lfn+0x90>
 8010f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f3a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	61bb      	str	r3, [r7, #24]
 8010f42:	69bb      	ldr	r3, [r7, #24]
 8010f44:	2b0c      	cmp	r3, #12
 8010f46:	d9da      	bls.n	8010efe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010f48:	8afb      	ldrh	r3, [r7, #22]
 8010f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d006      	beq.n	8010f60 <put_lfn+0xb4>
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	005b      	lsls	r3, r3, #1
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	4413      	add	r3, r2
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d103      	bne.n	8010f68 <put_lfn+0xbc>
 8010f60:	79fb      	ldrb	r3, [r7, #7]
 8010f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f66:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	79fa      	ldrb	r2, [r7, #7]
 8010f6c:	701a      	strb	r2, [r3, #0]
}
 8010f6e:	bf00      	nop
 8010f70:	3720      	adds	r7, #32
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	08019dd0 	.word	0x08019dd0

08010f7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b08c      	sub	sp, #48	; 0x30
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
 8010f88:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8010f8a:	220b      	movs	r2, #11
 8010f8c:	68b9      	ldr	r1, [r7, #8]
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f7fe ff78 	bl	800fe84 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	2b05      	cmp	r3, #5
 8010f98:	d92b      	bls.n	8010ff2 <gen_numname+0x76>
		sr = seq;
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8010f9e:	e022      	b.n	8010fe6 <gen_numname+0x6a>
			wc = *lfn++;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	1c9a      	adds	r2, r3, #2
 8010fa4:	607a      	str	r2, [r7, #4]
 8010fa6:	881b      	ldrh	r3, [r3, #0]
 8010fa8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8010faa:	2300      	movs	r3, #0
 8010fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fae:	e017      	b.n	8010fe0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	005a      	lsls	r2, r3, #1
 8010fb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fb6:	f003 0301 	and.w	r3, r3, #1
 8010fba:	4413      	add	r3, r2
 8010fbc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8010fbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fc0:	085b      	lsrs	r3, r3, #1
 8010fc2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d005      	beq.n	8010fda <gen_numname+0x5e>
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8010fd4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8010fd8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fdc:	3301      	adds	r3, #1
 8010fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe2:	2b0f      	cmp	r3, #15
 8010fe4:	d9e4      	bls.n	8010fb0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d1d8      	bne.n	8010fa0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8010ff2:	2307      	movs	r3, #7
 8010ff4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	f003 030f 	and.w	r3, r3, #15
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	3330      	adds	r3, #48	; 0x30
 8011002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801100a:	2b39      	cmp	r3, #57	; 0x39
 801100c:	d904      	bls.n	8011018 <gen_numname+0x9c>
 801100e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011012:	3307      	adds	r3, #7
 8011014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101a:	1e5a      	subs	r2, r3, #1
 801101c:	62ba      	str	r2, [r7, #40]	; 0x28
 801101e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011022:	4413      	add	r3, r2
 8011024:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011028:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	091b      	lsrs	r3, r3, #4
 8011030:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d1de      	bne.n	8010ff6 <gen_numname+0x7a>
	ns[i] = '~';
 8011038:	f107 0214 	add.w	r2, r7, #20
 801103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801103e:	4413      	add	r3, r2
 8011040:	227e      	movs	r2, #126	; 0x7e
 8011042:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011044:	2300      	movs	r3, #0
 8011046:	627b      	str	r3, [r7, #36]	; 0x24
 8011048:	e002      	b.n	8011050 <gen_numname+0xd4>
 801104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104c:	3301      	adds	r3, #1
 801104e:	627b      	str	r3, [r7, #36]	; 0x24
 8011050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011054:	429a      	cmp	r2, r3
 8011056:	d205      	bcs.n	8011064 <gen_numname+0xe8>
 8011058:	68fa      	ldr	r2, [r7, #12]
 801105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105c:	4413      	add	r3, r2
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	2b20      	cmp	r3, #32
 8011062:	d1f2      	bne.n	801104a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011066:	2b07      	cmp	r3, #7
 8011068:	d808      	bhi.n	801107c <gen_numname+0x100>
 801106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106c:	1c5a      	adds	r2, r3, #1
 801106e:	62ba      	str	r2, [r7, #40]	; 0x28
 8011070:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011074:	4413      	add	r3, r2
 8011076:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801107a:	e000      	b.n	801107e <gen_numname+0x102>
 801107c:	2120      	movs	r1, #32
 801107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011080:	1c5a      	adds	r2, r3, #1
 8011082:	627a      	str	r2, [r7, #36]	; 0x24
 8011084:	68fa      	ldr	r2, [r7, #12]
 8011086:	4413      	add	r3, r2
 8011088:	460a      	mov	r2, r1
 801108a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108e:	2b07      	cmp	r3, #7
 8011090:	d9e8      	bls.n	8011064 <gen_numname+0xe8>
}
 8011092:	bf00      	nop
 8011094:	bf00      	nop
 8011096:	3730      	adds	r7, #48	; 0x30
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801109c:	b480      	push	{r7}
 801109e:	b085      	sub	sp, #20
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80110a4:	2300      	movs	r3, #0
 80110a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80110a8:	230b      	movs	r3, #11
 80110aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80110ac:	7bfb      	ldrb	r3, [r7, #15]
 80110ae:	b2da      	uxtb	r2, r3
 80110b0:	0852      	lsrs	r2, r2, #1
 80110b2:	01db      	lsls	r3, r3, #7
 80110b4:	4313      	orrs	r3, r2
 80110b6:	b2da      	uxtb	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	1c59      	adds	r1, r3, #1
 80110bc:	6079      	str	r1, [r7, #4]
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	4413      	add	r3, r2
 80110c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	3b01      	subs	r3, #1
 80110c8:	60bb      	str	r3, [r7, #8]
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d1ed      	bne.n	80110ac <sum_sfn+0x10>
	return sum;
 80110d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3714      	adds	r7, #20
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr

080110de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b086      	sub	sp, #24
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80110ec:	2100      	movs	r1, #0
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7ff fca5 	bl	8010a3e <dir_sdi>
 80110f4:	4603      	mov	r3, r0
 80110f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80110f8:	7dfb      	ldrb	r3, [r7, #23]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d001      	beq.n	8011102 <dir_find+0x24>
 80110fe:	7dfb      	ldrb	r3, [r7, #23]
 8011100:	e0a9      	b.n	8011256 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011102:	23ff      	movs	r3, #255	; 0xff
 8011104:	753b      	strb	r3, [r7, #20]
 8011106:	7d3b      	ldrb	r3, [r7, #20]
 8011108:	757b      	strb	r3, [r7, #21]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f04f 32ff 	mov.w	r2, #4294967295
 8011110:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	69db      	ldr	r3, [r3, #28]
 8011116:	4619      	mov	r1, r3
 8011118:	6938      	ldr	r0, [r7, #16]
 801111a:	f7ff f8e1 	bl	80102e0 <move_window>
 801111e:	4603      	mov	r3, r0
 8011120:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011122:	7dfb      	ldrb	r3, [r7, #23]
 8011124:	2b00      	cmp	r3, #0
 8011126:	f040 8090 	bne.w	801124a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6a1b      	ldr	r3, [r3, #32]
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011132:	7dbb      	ldrb	r3, [r7, #22]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d102      	bne.n	801113e <dir_find+0x60>
 8011138:	2304      	movs	r3, #4
 801113a:	75fb      	strb	r3, [r7, #23]
 801113c:	e08a      	b.n	8011254 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6a1b      	ldr	r3, [r3, #32]
 8011142:	330b      	adds	r3, #11
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801114a:	73fb      	strb	r3, [r7, #15]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	7bfa      	ldrb	r2, [r7, #15]
 8011150:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011152:	7dbb      	ldrb	r3, [r7, #22]
 8011154:	2be5      	cmp	r3, #229	; 0xe5
 8011156:	d007      	beq.n	8011168 <dir_find+0x8a>
 8011158:	7bfb      	ldrb	r3, [r7, #15]
 801115a:	f003 0308 	and.w	r3, r3, #8
 801115e:	2b00      	cmp	r3, #0
 8011160:	d009      	beq.n	8011176 <dir_find+0x98>
 8011162:	7bfb      	ldrb	r3, [r7, #15]
 8011164:	2b0f      	cmp	r3, #15
 8011166:	d006      	beq.n	8011176 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011168:	23ff      	movs	r3, #255	; 0xff
 801116a:	757b      	strb	r3, [r7, #21]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f04f 32ff 	mov.w	r2, #4294967295
 8011172:	631a      	str	r2, [r3, #48]	; 0x30
 8011174:	e05e      	b.n	8011234 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011176:	7bfb      	ldrb	r3, [r7, #15]
 8011178:	2b0f      	cmp	r3, #15
 801117a:	d136      	bne.n	80111ea <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011186:	2b00      	cmp	r3, #0
 8011188:	d154      	bne.n	8011234 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801118a:	7dbb      	ldrb	r3, [r7, #22]
 801118c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011190:	2b00      	cmp	r3, #0
 8011192:	d00d      	beq.n	80111b0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6a1b      	ldr	r3, [r3, #32]
 8011198:	7b5b      	ldrb	r3, [r3, #13]
 801119a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801119c:	7dbb      	ldrb	r3, [r7, #22]
 801119e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111a2:	75bb      	strb	r3, [r7, #22]
 80111a4:	7dbb      	ldrb	r3, [r7, #22]
 80111a6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	695a      	ldr	r2, [r3, #20]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80111b0:	7dba      	ldrb	r2, [r7, #22]
 80111b2:	7d7b      	ldrb	r3, [r7, #21]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d115      	bne.n	80111e4 <dir_find+0x106>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6a1b      	ldr	r3, [r3, #32]
 80111bc:	330d      	adds	r3, #13
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	7d3a      	ldrb	r2, [r7, #20]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d10e      	bne.n	80111e4 <dir_find+0x106>
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	68da      	ldr	r2, [r3, #12]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6a1b      	ldr	r3, [r3, #32]
 80111ce:	4619      	mov	r1, r3
 80111d0:	4610      	mov	r0, r2
 80111d2:	f7ff fdfb 	bl	8010dcc <cmp_lfn>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d003      	beq.n	80111e4 <dir_find+0x106>
 80111dc:	7d7b      	ldrb	r3, [r7, #21]
 80111de:	3b01      	subs	r3, #1
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	e000      	b.n	80111e6 <dir_find+0x108>
 80111e4:	23ff      	movs	r3, #255	; 0xff
 80111e6:	757b      	strb	r3, [r7, #21]
 80111e8:	e024      	b.n	8011234 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80111ea:	7d7b      	ldrb	r3, [r7, #21]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d109      	bne.n	8011204 <dir_find+0x126>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6a1b      	ldr	r3, [r3, #32]
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7ff ff51 	bl	801109c <sum_sfn>
 80111fa:	4603      	mov	r3, r0
 80111fc:	461a      	mov	r2, r3
 80111fe:	7d3b      	ldrb	r3, [r7, #20]
 8011200:	4293      	cmp	r3, r2
 8011202:	d024      	beq.n	801124e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801120a:	f003 0301 	and.w	r3, r3, #1
 801120e:	2b00      	cmp	r3, #0
 8011210:	d10a      	bne.n	8011228 <dir_find+0x14a>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6a18      	ldr	r0, [r3, #32]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	3324      	adds	r3, #36	; 0x24
 801121a:	220b      	movs	r2, #11
 801121c:	4619      	mov	r1, r3
 801121e:	f7fe fe6d 	bl	800fefc <mem_cmp>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d014      	beq.n	8011252 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011228:	23ff      	movs	r3, #255	; 0xff
 801122a:	757b      	strb	r3, [r7, #21]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f04f 32ff 	mov.w	r2, #4294967295
 8011232:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011234:	2100      	movs	r1, #0
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7ff fc7c 	bl	8010b34 <dir_next>
 801123c:	4603      	mov	r3, r0
 801123e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011240:	7dfb      	ldrb	r3, [r7, #23]
 8011242:	2b00      	cmp	r3, #0
 8011244:	f43f af65 	beq.w	8011112 <dir_find+0x34>
 8011248:	e004      	b.n	8011254 <dir_find+0x176>
		if (res != FR_OK) break;
 801124a:	bf00      	nop
 801124c:	e002      	b.n	8011254 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801124e:	bf00      	nop
 8011250:	e000      	b.n	8011254 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011252:	bf00      	nop

	return res;
 8011254:	7dfb      	ldrb	r3, [r7, #23]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3718      	adds	r7, #24
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
	...

08011260 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b08c      	sub	sp, #48	; 0x30
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011274:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d001      	beq.n	8011280 <dir_register+0x20>
 801127c:	2306      	movs	r3, #6
 801127e:	e0e0      	b.n	8011442 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011280:	2300      	movs	r3, #0
 8011282:	627b      	str	r3, [r7, #36]	; 0x24
 8011284:	e002      	b.n	801128c <dir_register+0x2c>
 8011286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011288:	3301      	adds	r3, #1
 801128a:	627b      	str	r3, [r7, #36]	; 0x24
 801128c:	69fb      	ldr	r3, [r7, #28]
 801128e:	68da      	ldr	r2, [r3, #12]
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	4413      	add	r3, r2
 8011296:	881b      	ldrh	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d1f4      	bne.n	8011286 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80112a2:	f107 030c 	add.w	r3, r7, #12
 80112a6:	220c      	movs	r2, #12
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fe fdeb 	bl	800fe84 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80112ae:	7dfb      	ldrb	r3, [r7, #23]
 80112b0:	f003 0301 	and.w	r3, r3, #1
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d032      	beq.n	801131e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2240      	movs	r2, #64	; 0x40
 80112bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80112c0:	2301      	movs	r3, #1
 80112c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80112c4:	e016      	b.n	80112f4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80112cc:	69fb      	ldr	r3, [r7, #28]
 80112ce:	68da      	ldr	r2, [r3, #12]
 80112d0:	f107 010c 	add.w	r1, r7, #12
 80112d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d6:	f7ff fe51 	bl	8010f7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f7ff feff 	bl	80110de <dir_find>
 80112e0:	4603      	mov	r3, r0
 80112e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80112e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d106      	bne.n	80112fc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80112ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f0:	3301      	adds	r3, #1
 80112f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80112f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f6:	2b63      	cmp	r3, #99	; 0x63
 80112f8:	d9e5      	bls.n	80112c6 <dir_register+0x66>
 80112fa:	e000      	b.n	80112fe <dir_register+0x9e>
			if (res != FR_OK) break;
 80112fc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80112fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011300:	2b64      	cmp	r3, #100	; 0x64
 8011302:	d101      	bne.n	8011308 <dir_register+0xa8>
 8011304:	2307      	movs	r3, #7
 8011306:	e09c      	b.n	8011442 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801130c:	2b04      	cmp	r3, #4
 801130e:	d002      	beq.n	8011316 <dir_register+0xb6>
 8011310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011314:	e095      	b.n	8011442 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011316:	7dfa      	ldrb	r2, [r7, #23]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801131e:	7dfb      	ldrb	r3, [r7, #23]
 8011320:	f003 0302 	and.w	r3, r3, #2
 8011324:	2b00      	cmp	r3, #0
 8011326:	d007      	beq.n	8011338 <dir_register+0xd8>
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	330c      	adds	r3, #12
 801132c:	4a47      	ldr	r2, [pc, #284]	; (801144c <dir_register+0x1ec>)
 801132e:	fba2 2303 	umull	r2, r3, r2, r3
 8011332:	089b      	lsrs	r3, r3, #2
 8011334:	3301      	adds	r3, #1
 8011336:	e000      	b.n	801133a <dir_register+0xda>
 8011338:	2301      	movs	r3, #1
 801133a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801133c:	6a39      	ldr	r1, [r7, #32]
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f7ff fcbd 	bl	8010cbe <dir_alloc>
 8011344:	4603      	mov	r3, r0
 8011346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801134a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801134e:	2b00      	cmp	r3, #0
 8011350:	d148      	bne.n	80113e4 <dir_register+0x184>
 8011352:	6a3b      	ldr	r3, [r7, #32]
 8011354:	3b01      	subs	r3, #1
 8011356:	623b      	str	r3, [r7, #32]
 8011358:	6a3b      	ldr	r3, [r7, #32]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d042      	beq.n	80113e4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	695a      	ldr	r2, [r3, #20]
 8011362:	6a3b      	ldr	r3, [r7, #32]
 8011364:	015b      	lsls	r3, r3, #5
 8011366:	1ad3      	subs	r3, r2, r3
 8011368:	4619      	mov	r1, r3
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f7ff fb67 	bl	8010a3e <dir_sdi>
 8011370:	4603      	mov	r3, r0
 8011372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8011376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801137a:	2b00      	cmp	r3, #0
 801137c:	d132      	bne.n	80113e4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	3324      	adds	r3, #36	; 0x24
 8011382:	4618      	mov	r0, r3
 8011384:	f7ff fe8a 	bl	801109c <sum_sfn>
 8011388:	4603      	mov	r3, r0
 801138a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	69db      	ldr	r3, [r3, #28]
 8011390:	4619      	mov	r1, r3
 8011392:	69f8      	ldr	r0, [r7, #28]
 8011394:	f7fe ffa4 	bl	80102e0 <move_window>
 8011398:	4603      	mov	r3, r0
 801139a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801139e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d11d      	bne.n	80113e2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80113a6:	69fb      	ldr	r3, [r7, #28]
 80113a8:	68d8      	ldr	r0, [r3, #12]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a19      	ldr	r1, [r3, #32]
 80113ae:	6a3b      	ldr	r3, [r7, #32]
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	7efb      	ldrb	r3, [r7, #27]
 80113b4:	f7ff fd7a 	bl	8010eac <put_lfn>
				fs->wflag = 1;
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	2201      	movs	r2, #1
 80113bc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80113be:	2100      	movs	r1, #0
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f7ff fbb7 	bl	8010b34 <dir_next>
 80113c6:	4603      	mov	r3, r0
 80113c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80113cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d107      	bne.n	80113e4 <dir_register+0x184>
 80113d4:	6a3b      	ldr	r3, [r7, #32]
 80113d6:	3b01      	subs	r3, #1
 80113d8:	623b      	str	r3, [r7, #32]
 80113da:	6a3b      	ldr	r3, [r7, #32]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d1d5      	bne.n	801138c <dir_register+0x12c>
 80113e0:	e000      	b.n	80113e4 <dir_register+0x184>
				if (res != FR_OK) break;
 80113e2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80113e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d128      	bne.n	801143e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	69db      	ldr	r3, [r3, #28]
 80113f0:	4619      	mov	r1, r3
 80113f2:	69f8      	ldr	r0, [r7, #28]
 80113f4:	f7fe ff74 	bl	80102e0 <move_window>
 80113f8:	4603      	mov	r3, r0
 80113fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80113fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011402:	2b00      	cmp	r3, #0
 8011404:	d11b      	bne.n	801143e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6a1b      	ldr	r3, [r3, #32]
 801140a:	2220      	movs	r2, #32
 801140c:	2100      	movs	r1, #0
 801140e:	4618      	mov	r0, r3
 8011410:	f7fe fd59 	bl	800fec6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6a18      	ldr	r0, [r3, #32]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	3324      	adds	r3, #36	; 0x24
 801141c:	220b      	movs	r2, #11
 801141e:	4619      	mov	r1, r3
 8011420:	f7fe fd30 	bl	800fe84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a1b      	ldr	r3, [r3, #32]
 801142e:	330c      	adds	r3, #12
 8011430:	f002 0218 	and.w	r2, r2, #24
 8011434:	b2d2      	uxtb	r2, r2
 8011436:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	2201      	movs	r2, #1
 801143c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801143e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011442:	4618      	mov	r0, r3
 8011444:	3730      	adds	r7, #48	; 0x30
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	4ec4ec4f 	.word	0x4ec4ec4f

08011450 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b08a      	sub	sp, #40	; 0x28
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	613b      	str	r3, [r7, #16]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	60fb      	str	r3, [r7, #12]
 8011468:	2300      	movs	r3, #0
 801146a:	617b      	str	r3, [r7, #20]
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	1c5a      	adds	r2, r3, #1
 8011474:	61ba      	str	r2, [r7, #24]
 8011476:	693a      	ldr	r2, [r7, #16]
 8011478:	4413      	add	r3, r2
 801147a:	781b      	ldrb	r3, [r3, #0]
 801147c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801147e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011480:	2b1f      	cmp	r3, #31
 8011482:	d940      	bls.n	8011506 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011486:	2b2f      	cmp	r3, #47	; 0x2f
 8011488:	d006      	beq.n	8011498 <create_name+0x48>
 801148a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801148c:	2b5c      	cmp	r3, #92	; 0x5c
 801148e:	d110      	bne.n	80114b2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011490:	e002      	b.n	8011498 <create_name+0x48>
 8011492:	69bb      	ldr	r3, [r7, #24]
 8011494:	3301      	adds	r3, #1
 8011496:	61bb      	str	r3, [r7, #24]
 8011498:	693a      	ldr	r2, [r7, #16]
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	4413      	add	r3, r2
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	2b2f      	cmp	r3, #47	; 0x2f
 80114a2:	d0f6      	beq.n	8011492 <create_name+0x42>
 80114a4:	693a      	ldr	r2, [r7, #16]
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	4413      	add	r3, r2
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	2b5c      	cmp	r3, #92	; 0x5c
 80114ae:	d0f0      	beq.n	8011492 <create_name+0x42>
			break;
 80114b0:	e02a      	b.n	8011508 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	2bfe      	cmp	r3, #254	; 0xfe
 80114b6:	d901      	bls.n	80114bc <create_name+0x6c>
 80114b8:	2306      	movs	r3, #6
 80114ba:	e177      	b.n	80117ac <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80114bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114be:	b2db      	uxtb	r3, r3
 80114c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80114c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114c4:	2101      	movs	r1, #1
 80114c6:	4618      	mov	r0, r3
 80114c8:	f001 fd56 	bl	8012f78 <ff_convert>
 80114cc:	4603      	mov	r3, r0
 80114ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80114d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d101      	bne.n	80114da <create_name+0x8a>
 80114d6:	2306      	movs	r3, #6
 80114d8:	e168      	b.n	80117ac <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80114da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114dc:	2b7f      	cmp	r3, #127	; 0x7f
 80114de:	d809      	bhi.n	80114f4 <create_name+0xa4>
 80114e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114e2:	4619      	mov	r1, r3
 80114e4:	48b3      	ldr	r0, [pc, #716]	; (80117b4 <create_name+0x364>)
 80114e6:	f7fe fd30 	bl	800ff4a <chk_chr>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d001      	beq.n	80114f4 <create_name+0xa4>
 80114f0:	2306      	movs	r3, #6
 80114f2:	e15b      	b.n	80117ac <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	1c5a      	adds	r2, r3, #1
 80114f8:	617a      	str	r2, [r7, #20]
 80114fa:	005b      	lsls	r3, r3, #1
 80114fc:	68fa      	ldr	r2, [r7, #12]
 80114fe:	4413      	add	r3, r2
 8011500:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011502:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011504:	e7b4      	b.n	8011470 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8011506:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011508:	693a      	ldr	r2, [r7, #16]
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	441a      	add	r2, r3
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011514:	2b1f      	cmp	r3, #31
 8011516:	d801      	bhi.n	801151c <create_name+0xcc>
 8011518:	2304      	movs	r3, #4
 801151a:	e000      	b.n	801151e <create_name+0xce>
 801151c:	2300      	movs	r3, #0
 801151e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011522:	e011      	b.n	8011548 <create_name+0xf8>
		w = lfn[di - 1];
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801152a:	3b01      	subs	r3, #1
 801152c:	005b      	lsls	r3, r3, #1
 801152e:	68fa      	ldr	r2, [r7, #12]
 8011530:	4413      	add	r3, r2
 8011532:	881b      	ldrh	r3, [r3, #0]
 8011534:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8011536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011538:	2b20      	cmp	r3, #32
 801153a:	d002      	beq.n	8011542 <create_name+0xf2>
 801153c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801153e:	2b2e      	cmp	r3, #46	; 0x2e
 8011540:	d106      	bne.n	8011550 <create_name+0x100>
		di--;
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	3b01      	subs	r3, #1
 8011546:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d1ea      	bne.n	8011524 <create_name+0xd4>
 801154e:	e000      	b.n	8011552 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8011550:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	005b      	lsls	r3, r3, #1
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	4413      	add	r3, r2
 801155a:	2200      	movs	r2, #0
 801155c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d101      	bne.n	8011568 <create_name+0x118>
 8011564:	2306      	movs	r3, #6
 8011566:	e121      	b.n	80117ac <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	3324      	adds	r3, #36	; 0x24
 801156c:	220b      	movs	r2, #11
 801156e:	2120      	movs	r1, #32
 8011570:	4618      	mov	r0, r3
 8011572:	f7fe fca8 	bl	800fec6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011576:	2300      	movs	r3, #0
 8011578:	61bb      	str	r3, [r7, #24]
 801157a:	e002      	b.n	8011582 <create_name+0x132>
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	3301      	adds	r3, #1
 8011580:	61bb      	str	r3, [r7, #24]
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	005b      	lsls	r3, r3, #1
 8011586:	68fa      	ldr	r2, [r7, #12]
 8011588:	4413      	add	r3, r2
 801158a:	881b      	ldrh	r3, [r3, #0]
 801158c:	2b20      	cmp	r3, #32
 801158e:	d0f5      	beq.n	801157c <create_name+0x12c>
 8011590:	69bb      	ldr	r3, [r7, #24]
 8011592:	005b      	lsls	r3, r3, #1
 8011594:	68fa      	ldr	r2, [r7, #12]
 8011596:	4413      	add	r3, r2
 8011598:	881b      	ldrh	r3, [r3, #0]
 801159a:	2b2e      	cmp	r3, #46	; 0x2e
 801159c:	d0ee      	beq.n	801157c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d009      	beq.n	80115b8 <create_name+0x168>
 80115a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115a8:	f043 0303 	orr.w	r3, r3, #3
 80115ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80115b0:	e002      	b.n	80115b8 <create_name+0x168>
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	3b01      	subs	r3, #1
 80115b6:	617b      	str	r3, [r7, #20]
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d009      	beq.n	80115d2 <create_name+0x182>
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80115c4:	3b01      	subs	r3, #1
 80115c6:	005b      	lsls	r3, r3, #1
 80115c8:	68fa      	ldr	r2, [r7, #12]
 80115ca:	4413      	add	r3, r2
 80115cc:	881b      	ldrh	r3, [r3, #0]
 80115ce:	2b2e      	cmp	r3, #46	; 0x2e
 80115d0:	d1ef      	bne.n	80115b2 <create_name+0x162>

	i = b = 0; ni = 8;
 80115d2:	2300      	movs	r3, #0
 80115d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80115d8:	2300      	movs	r3, #0
 80115da:	623b      	str	r3, [r7, #32]
 80115dc:	2308      	movs	r3, #8
 80115de:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	1c5a      	adds	r2, r3, #1
 80115e4:	61ba      	str	r2, [r7, #24]
 80115e6:	005b      	lsls	r3, r3, #1
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	4413      	add	r3, r2
 80115ec:	881b      	ldrh	r3, [r3, #0]
 80115ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80115f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	f000 8090 	beq.w	8011718 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80115f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80115fa:	2b20      	cmp	r3, #32
 80115fc:	d006      	beq.n	801160c <create_name+0x1bc>
 80115fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011600:	2b2e      	cmp	r3, #46	; 0x2e
 8011602:	d10a      	bne.n	801161a <create_name+0x1ca>
 8011604:	69ba      	ldr	r2, [r7, #24]
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	429a      	cmp	r2, r3
 801160a:	d006      	beq.n	801161a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801160c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011610:	f043 0303 	orr.w	r3, r3, #3
 8011614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011618:	e07d      	b.n	8011716 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801161a:	6a3a      	ldr	r2, [r7, #32]
 801161c:	69fb      	ldr	r3, [r7, #28]
 801161e:	429a      	cmp	r2, r3
 8011620:	d203      	bcs.n	801162a <create_name+0x1da>
 8011622:	69ba      	ldr	r2, [r7, #24]
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	429a      	cmp	r2, r3
 8011628:	d123      	bne.n	8011672 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	2b0b      	cmp	r3, #11
 801162e:	d106      	bne.n	801163e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8011630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011634:	f043 0303 	orr.w	r3, r3, #3
 8011638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801163c:	e06f      	b.n	801171e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801163e:	69ba      	ldr	r2, [r7, #24]
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	429a      	cmp	r2, r3
 8011644:	d005      	beq.n	8011652 <create_name+0x202>
 8011646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801164a:	f043 0303 	orr.w	r3, r3, #3
 801164e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8011652:	69ba      	ldr	r2, [r7, #24]
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	429a      	cmp	r2, r3
 8011658:	d860      	bhi.n	801171c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	61bb      	str	r3, [r7, #24]
 801165e:	2308      	movs	r3, #8
 8011660:	623b      	str	r3, [r7, #32]
 8011662:	230b      	movs	r3, #11
 8011664:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8011666:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011670:	e051      	b.n	8011716 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011674:	2b7f      	cmp	r3, #127	; 0x7f
 8011676:	d914      	bls.n	80116a2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8011678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801167a:	2100      	movs	r1, #0
 801167c:	4618      	mov	r0, r3
 801167e:	f001 fc7b 	bl	8012f78 <ff_convert>
 8011682:	4603      	mov	r3, r0
 8011684:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8011686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011688:	2b00      	cmp	r3, #0
 801168a:	d004      	beq.n	8011696 <create_name+0x246>
 801168c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801168e:	3b80      	subs	r3, #128	; 0x80
 8011690:	4a49      	ldr	r2, [pc, #292]	; (80117b8 <create_name+0x368>)
 8011692:	5cd3      	ldrb	r3, [r2, r3]
 8011694:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8011696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801169a:	f043 0302 	orr.w	r3, r3, #2
 801169e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80116a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d007      	beq.n	80116b8 <create_name+0x268>
 80116a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116aa:	4619      	mov	r1, r3
 80116ac:	4843      	ldr	r0, [pc, #268]	; (80117bc <create_name+0x36c>)
 80116ae:	f7fe fc4c 	bl	800ff4a <chk_chr>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d008      	beq.n	80116ca <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80116b8:	235f      	movs	r3, #95	; 0x5f
 80116ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80116bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116c0:	f043 0303 	orr.w	r3, r3, #3
 80116c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116c8:	e01b      	b.n	8011702 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80116ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116cc:	2b40      	cmp	r3, #64	; 0x40
 80116ce:	d909      	bls.n	80116e4 <create_name+0x294>
 80116d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116d2:	2b5a      	cmp	r3, #90	; 0x5a
 80116d4:	d806      	bhi.n	80116e4 <create_name+0x294>
					b |= 2;
 80116d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80116da:	f043 0302 	orr.w	r3, r3, #2
 80116de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80116e2:	e00e      	b.n	8011702 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80116e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116e6:	2b60      	cmp	r3, #96	; 0x60
 80116e8:	d90b      	bls.n	8011702 <create_name+0x2b2>
 80116ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116ec:	2b7a      	cmp	r3, #122	; 0x7a
 80116ee:	d808      	bhi.n	8011702 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80116f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80116f4:	f043 0301 	orr.w	r3, r3, #1
 80116f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80116fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116fe:	3b20      	subs	r3, #32
 8011700:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8011702:	6a3b      	ldr	r3, [r7, #32]
 8011704:	1c5a      	adds	r2, r3, #1
 8011706:	623a      	str	r2, [r7, #32]
 8011708:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801170a:	b2d1      	uxtb	r1, r2
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	4413      	add	r3, r2
 8011710:	460a      	mov	r2, r1
 8011712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011716:	e763      	b.n	80115e0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8011718:	bf00      	nop
 801171a:	e000      	b.n	801171e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801171c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011724:	2be5      	cmp	r3, #229	; 0xe5
 8011726:	d103      	bne.n	8011730 <create_name+0x2e0>
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2205      	movs	r2, #5
 801172c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	2b08      	cmp	r3, #8
 8011734:	d104      	bne.n	8011740 <create_name+0x2f0>
 8011736:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801173a:	009b      	lsls	r3, r3, #2
 801173c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011744:	f003 030c 	and.w	r3, r3, #12
 8011748:	2b0c      	cmp	r3, #12
 801174a:	d005      	beq.n	8011758 <create_name+0x308>
 801174c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011750:	f003 0303 	and.w	r3, r3, #3
 8011754:	2b03      	cmp	r3, #3
 8011756:	d105      	bne.n	8011764 <create_name+0x314>
 8011758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801175c:	f043 0302 	orr.w	r3, r3, #2
 8011760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011768:	f003 0302 	and.w	r3, r3, #2
 801176c:	2b00      	cmp	r3, #0
 801176e:	d117      	bne.n	80117a0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8011770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011774:	f003 0303 	and.w	r3, r3, #3
 8011778:	2b01      	cmp	r3, #1
 801177a:	d105      	bne.n	8011788 <create_name+0x338>
 801177c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011780:	f043 0310 	orr.w	r3, r3, #16
 8011784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801178c:	f003 030c 	and.w	r3, r3, #12
 8011790:	2b04      	cmp	r3, #4
 8011792:	d105      	bne.n	80117a0 <create_name+0x350>
 8011794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011798:	f043 0308 	orr.w	r3, r3, #8
 801179c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80117a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80117aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3728      	adds	r7, #40	; 0x28
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	08019c88 	.word	0x08019c88
 80117b8:	08019d50 	.word	0x08019d50
 80117bc:	08019c94 	.word	0x08019c94

080117c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b086      	sub	sp, #24
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80117d4:	e002      	b.n	80117dc <follow_path+0x1c>
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	3301      	adds	r3, #1
 80117da:	603b      	str	r3, [r7, #0]
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	2b2f      	cmp	r3, #47	; 0x2f
 80117e2:	d0f8      	beq.n	80117d6 <follow_path+0x16>
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	2b5c      	cmp	r3, #92	; 0x5c
 80117ea:	d0f4      	beq.n	80117d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	2200      	movs	r2, #0
 80117f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	2b1f      	cmp	r3, #31
 80117f8:	d80a      	bhi.n	8011810 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2280      	movs	r2, #128	; 0x80
 80117fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011802:	2100      	movs	r1, #0
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f7ff f91a 	bl	8010a3e <dir_sdi>
 801180a:	4603      	mov	r3, r0
 801180c:	75fb      	strb	r3, [r7, #23]
 801180e:	e043      	b.n	8011898 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011810:	463b      	mov	r3, r7
 8011812:	4619      	mov	r1, r3
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f7ff fe1b 	bl	8011450 <create_name>
 801181a:	4603      	mov	r3, r0
 801181c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801181e:	7dfb      	ldrb	r3, [r7, #23]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d134      	bne.n	801188e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f7ff fc5a 	bl	80110de <dir_find>
 801182a:	4603      	mov	r3, r0
 801182c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011834:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011836:	7dfb      	ldrb	r3, [r7, #23]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d00a      	beq.n	8011852 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801183c:	7dfb      	ldrb	r3, [r7, #23]
 801183e:	2b04      	cmp	r3, #4
 8011840:	d127      	bne.n	8011892 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011842:	7afb      	ldrb	r3, [r7, #11]
 8011844:	f003 0304 	and.w	r3, r3, #4
 8011848:	2b00      	cmp	r3, #0
 801184a:	d122      	bne.n	8011892 <follow_path+0xd2>
 801184c:	2305      	movs	r3, #5
 801184e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011850:	e01f      	b.n	8011892 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011852:	7afb      	ldrb	r3, [r7, #11]
 8011854:	f003 0304 	and.w	r3, r3, #4
 8011858:	2b00      	cmp	r3, #0
 801185a:	d11c      	bne.n	8011896 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	799b      	ldrb	r3, [r3, #6]
 8011860:	f003 0310 	and.w	r3, r3, #16
 8011864:	2b00      	cmp	r3, #0
 8011866:	d102      	bne.n	801186e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011868:	2305      	movs	r3, #5
 801186a:	75fb      	strb	r3, [r7, #23]
 801186c:	e014      	b.n	8011898 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	695b      	ldr	r3, [r3, #20]
 8011878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801187c:	4413      	add	r3, r2
 801187e:	4619      	mov	r1, r3
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f7ff fa63 	bl	8010d4c <ld_clust>
 8011886:	4602      	mov	r2, r0
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801188c:	e7c0      	b.n	8011810 <follow_path+0x50>
			if (res != FR_OK) break;
 801188e:	bf00      	nop
 8011890:	e002      	b.n	8011898 <follow_path+0xd8>
				break;
 8011892:	bf00      	nop
 8011894:	e000      	b.n	8011898 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011896:	bf00      	nop
			}
		}
	}

	return res;
 8011898:	7dfb      	ldrb	r3, [r7, #23]
}
 801189a:	4618      	mov	r0, r3
 801189c:	3718      	adds	r7, #24
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80118a2:	b480      	push	{r7}
 80118a4:	b087      	sub	sp, #28
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295
 80118ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d031      	beq.n	801191c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	617b      	str	r3, [r7, #20]
 80118be:	e002      	b.n	80118c6 <get_ldnumber+0x24>
 80118c0:	697b      	ldr	r3, [r7, #20]
 80118c2:	3301      	adds	r3, #1
 80118c4:	617b      	str	r3, [r7, #20]
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	2b1f      	cmp	r3, #31
 80118cc:	d903      	bls.n	80118d6 <get_ldnumber+0x34>
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	2b3a      	cmp	r3, #58	; 0x3a
 80118d4:	d1f4      	bne.n	80118c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	2b3a      	cmp	r3, #58	; 0x3a
 80118dc:	d11c      	bne.n	8011918 <get_ldnumber+0x76>
			tp = *path;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	1c5a      	adds	r2, r3, #1
 80118e8:	60fa      	str	r2, [r7, #12]
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	3b30      	subs	r3, #48	; 0x30
 80118ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	2b09      	cmp	r3, #9
 80118f4:	d80e      	bhi.n	8011914 <get_ldnumber+0x72>
 80118f6:	68fa      	ldr	r2, [r7, #12]
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d10a      	bne.n	8011914 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d107      	bne.n	8011914 <get_ldnumber+0x72>
					vol = (int)i;
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	3301      	adds	r3, #1
 801190c:	617b      	str	r3, [r7, #20]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	697a      	ldr	r2, [r7, #20]
 8011912:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	e002      	b.n	801191e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011918:	2300      	movs	r3, #0
 801191a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801191c:	693b      	ldr	r3, [r7, #16]
}
 801191e:	4618      	mov	r0, r3
 8011920:	371c      	adds	r7, #28
 8011922:	46bd      	mov	sp, r7
 8011924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011928:	4770      	bx	lr
	...

0801192c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2200      	movs	r2, #0
 801193a:	70da      	strb	r2, [r3, #3]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f04f 32ff 	mov.w	r2, #4294967295
 8011942:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011944:	6839      	ldr	r1, [r7, #0]
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f7fe fcca 	bl	80102e0 <move_window>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d001      	beq.n	8011956 <check_fs+0x2a>
 8011952:	2304      	movs	r3, #4
 8011954:	e038      	b.n	80119c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	3334      	adds	r3, #52	; 0x34
 801195a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801195e:	4618      	mov	r0, r3
 8011960:	f7fe fa0e 	bl	800fd80 <ld_word>
 8011964:	4603      	mov	r3, r0
 8011966:	461a      	mov	r2, r3
 8011968:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801196c:	429a      	cmp	r2, r3
 801196e:	d001      	beq.n	8011974 <check_fs+0x48>
 8011970:	2303      	movs	r3, #3
 8011972:	e029      	b.n	80119c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801197a:	2be9      	cmp	r3, #233	; 0xe9
 801197c:	d009      	beq.n	8011992 <check_fs+0x66>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011984:	2beb      	cmp	r3, #235	; 0xeb
 8011986:	d11e      	bne.n	80119c6 <check_fs+0x9a>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801198e:	2b90      	cmp	r3, #144	; 0x90
 8011990:	d119      	bne.n	80119c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	3334      	adds	r3, #52	; 0x34
 8011996:	3336      	adds	r3, #54	; 0x36
 8011998:	4618      	mov	r0, r3
 801199a:	f7fe fa09 	bl	800fdb0 <ld_dword>
 801199e:	4603      	mov	r3, r0
 80119a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80119a4:	4a0a      	ldr	r2, [pc, #40]	; (80119d0 <check_fs+0xa4>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d101      	bne.n	80119ae <check_fs+0x82>
 80119aa:	2300      	movs	r3, #0
 80119ac:	e00c      	b.n	80119c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	3334      	adds	r3, #52	; 0x34
 80119b2:	3352      	adds	r3, #82	; 0x52
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7fe f9fb 	bl	800fdb0 <ld_dword>
 80119ba:	4603      	mov	r3, r0
 80119bc:	4a05      	ldr	r2, [pc, #20]	; (80119d4 <check_fs+0xa8>)
 80119be:	4293      	cmp	r3, r2
 80119c0:	d101      	bne.n	80119c6 <check_fs+0x9a>
 80119c2:	2300      	movs	r3, #0
 80119c4:	e000      	b.n	80119c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80119c6:	2302      	movs	r3, #2
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	00544146 	.word	0x00544146
 80119d4:	33544146 	.word	0x33544146

080119d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b096      	sub	sp, #88	; 0x58
 80119dc:	af00      	add	r7, sp, #0
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	4613      	mov	r3, r2
 80119e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	2200      	movs	r2, #0
 80119ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80119ec:	68f8      	ldr	r0, [r7, #12]
 80119ee:	f7ff ff58 	bl	80118a2 <get_ldnumber>
 80119f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80119f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	da01      	bge.n	80119fe <find_volume+0x26>
 80119fa:	230b      	movs	r3, #11
 80119fc:	e231      	b.n	8011e62 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80119fe:	4aa8      	ldr	r2, [pc, #672]	; (8011ca0 <find_volume+0x2c8>)
 8011a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d101      	bne.n	8011a12 <find_volume+0x3a>
 8011a0e:	230c      	movs	r3, #12
 8011a10:	e227      	b.n	8011e62 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011a18:	79fb      	ldrb	r3, [r7, #7]
 8011a1a:	f023 0301 	bic.w	r3, r3, #1
 8011a1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d01a      	beq.n	8011a5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a2a:	785b      	ldrb	r3, [r3, #1]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fe f909 	bl	800fc44 <disk_status>
 8011a32:	4603      	mov	r3, r0
 8011a34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011a38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a3c:	f003 0301 	and.w	r3, r3, #1
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d10c      	bne.n	8011a5e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011a44:	79fb      	ldrb	r3, [r7, #7]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d007      	beq.n	8011a5a <find_volume+0x82>
 8011a4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a4e:	f003 0304 	and.w	r3, r3, #4
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d001      	beq.n	8011a5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011a56:	230a      	movs	r3, #10
 8011a58:	e203      	b.n	8011e62 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	e201      	b.n	8011e62 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a60:	2200      	movs	r2, #0
 8011a62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a66:	b2da      	uxtb	r2, r3
 8011a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a6e:	785b      	ldrb	r3, [r3, #1]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7fe f901 	bl	800fc78 <disk_initialize>
 8011a76:	4603      	mov	r3, r0
 8011a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a80:	f003 0301 	and.w	r3, r3, #1
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d001      	beq.n	8011a8c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011a88:	2303      	movs	r3, #3
 8011a8a:	e1ea      	b.n	8011e62 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011a8c:	79fb      	ldrb	r3, [r7, #7]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d007      	beq.n	8011aa2 <find_volume+0xca>
 8011a92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a96:	f003 0304 	and.w	r3, r3, #4
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d001      	beq.n	8011aa2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011a9e:	230a      	movs	r3, #10
 8011aa0:	e1df      	b.n	8011e62 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011aa6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011aa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011aaa:	f7ff ff3f 	bl	801192c <check_fs>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ab8:	2b02      	cmp	r3, #2
 8011aba:	d14b      	bne.n	8011b54 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011abc:	2300      	movs	r3, #0
 8011abe:	643b      	str	r3, [r7, #64]	; 0x40
 8011ac0:	e01f      	b.n	8011b02 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011aca:	011b      	lsls	r3, r3, #4
 8011acc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011ad0:	4413      	add	r3, r2
 8011ad2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d006      	beq.n	8011aec <find_volume+0x114>
 8011ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae0:	3308      	adds	r3, #8
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fe f964 	bl	800fdb0 <ld_dword>
 8011ae8:	4602      	mov	r2, r0
 8011aea:	e000      	b.n	8011aee <find_volume+0x116>
 8011aec:	2200      	movs	r2, #0
 8011aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011af0:	009b      	lsls	r3, r3, #2
 8011af2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011af6:	440b      	add	r3, r1
 8011af8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011afe:	3301      	adds	r3, #1
 8011b00:	643b      	str	r3, [r7, #64]	; 0x40
 8011b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b04:	2b03      	cmp	r3, #3
 8011b06:	d9dc      	bls.n	8011ac2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011b08:	2300      	movs	r3, #0
 8011b0a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d002      	beq.n	8011b18 <find_volume+0x140>
 8011b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b14:	3b01      	subs	r3, #1
 8011b16:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011b20:	4413      	add	r3, r2
 8011b22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011b26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d005      	beq.n	8011b3a <find_volume+0x162>
 8011b2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b32:	f7ff fefb 	bl	801192c <check_fs>
 8011b36:	4603      	mov	r3, r0
 8011b38:	e000      	b.n	8011b3c <find_volume+0x164>
 8011b3a:	2303      	movs	r3, #3
 8011b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011b40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d905      	bls.n	8011b54 <find_volume+0x17c>
 8011b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8011b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b50:	2b03      	cmp	r3, #3
 8011b52:	d9e1      	bls.n	8011b18 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b58:	2b04      	cmp	r3, #4
 8011b5a:	d101      	bne.n	8011b60 <find_volume+0x188>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e180      	b.n	8011e62 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d901      	bls.n	8011b6c <find_volume+0x194>
 8011b68:	230d      	movs	r3, #13
 8011b6a:	e17a      	b.n	8011e62 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b6e:	3334      	adds	r3, #52	; 0x34
 8011b70:	330b      	adds	r3, #11
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fe f904 	bl	800fd80 <ld_word>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b7e:	d001      	beq.n	8011b84 <find_volume+0x1ac>
 8011b80:	230d      	movs	r3, #13
 8011b82:	e16e      	b.n	8011e62 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b86:	3334      	adds	r3, #52	; 0x34
 8011b88:	3316      	adds	r3, #22
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7fe f8f8 	bl	800fd80 <ld_word>
 8011b90:	4603      	mov	r3, r0
 8011b92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d106      	bne.n	8011ba8 <find_volume+0x1d0>
 8011b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9c:	3334      	adds	r3, #52	; 0x34
 8011b9e:	3324      	adds	r3, #36	; 0x24
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fe f905 	bl	800fdb0 <ld_dword>
 8011ba6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011bac:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bba:	789b      	ldrb	r3, [r3, #2]
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d005      	beq.n	8011bcc <find_volume+0x1f4>
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc2:	789b      	ldrb	r3, [r3, #2]
 8011bc4:	2b02      	cmp	r3, #2
 8011bc6:	d001      	beq.n	8011bcc <find_volume+0x1f4>
 8011bc8:	230d      	movs	r3, #13
 8011bca:	e14a      	b.n	8011e62 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bce:	789b      	ldrb	r3, [r3, #2]
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bd4:	fb02 f303 	mul.w	r3, r2, r3
 8011bd8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011be0:	b29a      	uxth	r2, r3
 8011be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be8:	895b      	ldrh	r3, [r3, #10]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d008      	beq.n	8011c00 <find_volume+0x228>
 8011bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf0:	895b      	ldrh	r3, [r3, #10]
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf6:	895b      	ldrh	r3, [r3, #10]
 8011bf8:	3b01      	subs	r3, #1
 8011bfa:	4013      	ands	r3, r2
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d001      	beq.n	8011c04 <find_volume+0x22c>
 8011c00:	230d      	movs	r3, #13
 8011c02:	e12e      	b.n	8011e62 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c06:	3334      	adds	r3, #52	; 0x34
 8011c08:	3311      	adds	r3, #17
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fe f8b8 	bl	800fd80 <ld_word>
 8011c10:	4603      	mov	r3, r0
 8011c12:	461a      	mov	r2, r3
 8011c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1a:	891b      	ldrh	r3, [r3, #8]
 8011c1c:	f003 030f 	and.w	r3, r3, #15
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d001      	beq.n	8011c2a <find_volume+0x252>
 8011c26:	230d      	movs	r3, #13
 8011c28:	e11b      	b.n	8011e62 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2c:	3334      	adds	r3, #52	; 0x34
 8011c2e:	3313      	adds	r3, #19
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7fe f8a5 	bl	800fd80 <ld_word>
 8011c36:	4603      	mov	r3, r0
 8011c38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d106      	bne.n	8011c4e <find_volume+0x276>
 8011c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c42:	3334      	adds	r3, #52	; 0x34
 8011c44:	3320      	adds	r3, #32
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fe f8b2 	bl	800fdb0 <ld_dword>
 8011c4c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c50:	3334      	adds	r3, #52	; 0x34
 8011c52:	330e      	adds	r3, #14
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fe f893 	bl	800fd80 <ld_word>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011c5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d101      	bne.n	8011c68 <find_volume+0x290>
 8011c64:	230d      	movs	r3, #13
 8011c66:	e0fc      	b.n	8011e62 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011c68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c6c:	4413      	add	r3, r2
 8011c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c70:	8912      	ldrh	r2, [r2, #8]
 8011c72:	0912      	lsrs	r2, r2, #4
 8011c74:	b292      	uxth	r2, r2
 8011c76:	4413      	add	r3, r2
 8011c78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d201      	bcs.n	8011c86 <find_volume+0x2ae>
 8011c82:	230d      	movs	r3, #13
 8011c84:	e0ed      	b.n	8011e62 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c8a:	1ad3      	subs	r3, r2, r3
 8011c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c8e:	8952      	ldrh	r2, [r2, #10]
 8011c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c94:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d103      	bne.n	8011ca4 <find_volume+0x2cc>
 8011c9c:	230d      	movs	r3, #13
 8011c9e:	e0e0      	b.n	8011e62 <find_volume+0x48a>
 8011ca0:	200005b0 	.word	0x200005b0
		fmt = FS_FAT32;
 8011ca4:	2303      	movs	r3, #3
 8011ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d802      	bhi.n	8011cba <find_volume+0x2e2>
 8011cb4:	2302      	movs	r3, #2
 8011cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d802      	bhi.n	8011cca <find_volume+0x2f2>
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ccc:	1c9a      	adds	r2, r3, #2
 8011cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011cd6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011cd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cdc:	441a      	add	r2, r3
 8011cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011ce2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce6:	441a      	add	r2, r3
 8011ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cea:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cf0:	2b03      	cmp	r3, #3
 8011cf2:	d11e      	bne.n	8011d32 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf6:	3334      	adds	r3, #52	; 0x34
 8011cf8:	332a      	adds	r3, #42	; 0x2a
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fe f840 	bl	800fd80 <ld_word>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d001      	beq.n	8011d0a <find_volume+0x332>
 8011d06:	230d      	movs	r3, #13
 8011d08:	e0ab      	b.n	8011e62 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0c:	891b      	ldrh	r3, [r3, #8]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d001      	beq.n	8011d16 <find_volume+0x33e>
 8011d12:	230d      	movs	r3, #13
 8011d14:	e0a5      	b.n	8011e62 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d18:	3334      	adds	r3, #52	; 0x34
 8011d1a:	332c      	adds	r3, #44	; 0x2c
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fe f847 	bl	800fdb0 <ld_dword>
 8011d22:	4602      	mov	r2, r0
 8011d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d26:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2a:	699b      	ldr	r3, [r3, #24]
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8011d30:	e01f      	b.n	8011d72 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d34:	891b      	ldrh	r3, [r3, #8]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <find_volume+0x366>
 8011d3a:	230d      	movs	r3, #13
 8011d3c:	e091      	b.n	8011e62 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d44:	441a      	add	r2, r3
 8011d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d48:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d4e:	2b02      	cmp	r3, #2
 8011d50:	d103      	bne.n	8011d5a <find_volume+0x382>
 8011d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d54:	699b      	ldr	r3, [r3, #24]
 8011d56:	005b      	lsls	r3, r3, #1
 8011d58:	e00a      	b.n	8011d70 <find_volume+0x398>
 8011d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5c:	699a      	ldr	r2, [r3, #24]
 8011d5e:	4613      	mov	r3, r2
 8011d60:	005b      	lsls	r3, r3, #1
 8011d62:	4413      	add	r3, r2
 8011d64:	085a      	lsrs	r2, r3, #1
 8011d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d68:	699b      	ldr	r3, [r3, #24]
 8011d6a:	f003 0301 	and.w	r3, r3, #1
 8011d6e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011d70:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d74:	69da      	ldr	r2, [r3, #28]
 8011d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011d7c:	0a5b      	lsrs	r3, r3, #9
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d201      	bcs.n	8011d86 <find_volume+0x3ae>
 8011d82:	230d      	movs	r3, #13
 8011d84:	e06d      	b.n	8011e62 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d88:	f04f 32ff 	mov.w	r2, #4294967295
 8011d8c:	615a      	str	r2, [r3, #20]
 8011d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d90:	695a      	ldr	r2, [r3, #20]
 8011d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d94:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d98:	2280      	movs	r2, #128	; 0x80
 8011d9a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011d9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011da0:	2b03      	cmp	r3, #3
 8011da2:	d149      	bne.n	8011e38 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da6:	3334      	adds	r3, #52	; 0x34
 8011da8:	3330      	adds	r3, #48	; 0x30
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7fd ffe8 	bl	800fd80 <ld_word>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b01      	cmp	r3, #1
 8011db4:	d140      	bne.n	8011e38 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011db8:	3301      	adds	r3, #1
 8011dba:	4619      	mov	r1, r3
 8011dbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011dbe:	f7fe fa8f 	bl	80102e0 <move_window>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d137      	bne.n	8011e38 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dca:	2200      	movs	r2, #0
 8011dcc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd0:	3334      	adds	r3, #52	; 0x34
 8011dd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fd ffd2 	bl	800fd80 <ld_word>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	461a      	mov	r2, r3
 8011de0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d127      	bne.n	8011e38 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dea:	3334      	adds	r3, #52	; 0x34
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7fd ffdf 	bl	800fdb0 <ld_dword>
 8011df2:	4603      	mov	r3, r0
 8011df4:	4a1d      	ldr	r2, [pc, #116]	; (8011e6c <find_volume+0x494>)
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d11e      	bne.n	8011e38 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfc:	3334      	adds	r3, #52	; 0x34
 8011dfe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fd ffd4 	bl	800fdb0 <ld_dword>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	4a19      	ldr	r2, [pc, #100]	; (8011e70 <find_volume+0x498>)
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d113      	bne.n	8011e38 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e12:	3334      	adds	r3, #52	; 0x34
 8011e14:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7fd ffc9 	bl	800fdb0 <ld_dword>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e22:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e26:	3334      	adds	r3, #52	; 0x34
 8011e28:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7fd ffbf 	bl	800fdb0 <ld_dword>
 8011e32:	4602      	mov	r2, r0
 8011e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e36:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e3a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011e3e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011e40:	4b0c      	ldr	r3, [pc, #48]	; (8011e74 <find_volume+0x49c>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	3301      	adds	r3, #1
 8011e46:	b29a      	uxth	r2, r3
 8011e48:	4b0a      	ldr	r3, [pc, #40]	; (8011e74 <find_volume+0x49c>)
 8011e4a:	801a      	strh	r2, [r3, #0]
 8011e4c:	4b09      	ldr	r3, [pc, #36]	; (8011e74 <find_volume+0x49c>)
 8011e4e:	881a      	ldrh	r2, [r3, #0]
 8011e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e52:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e56:	4a08      	ldr	r2, [pc, #32]	; (8011e78 <find_volume+0x4a0>)
 8011e58:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011e5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e5c:	f7fe f9d8 	bl	8010210 <clear_lock>
#endif
	return FR_OK;
 8011e60:	2300      	movs	r3, #0
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3758      	adds	r7, #88	; 0x58
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	41615252 	.word	0x41615252
 8011e70:	61417272 	.word	0x61417272
 8011e74:	200005b4 	.word	0x200005b4
 8011e78:	200005d8 	.word	0x200005d8

08011e7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011e86:	2309      	movs	r3, #9
 8011e88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d01c      	beq.n	8011eca <validate+0x4e>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d018      	beq.n	8011eca <validate+0x4e>
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d013      	beq.n	8011eca <validate+0x4e>
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	889a      	ldrh	r2, [r3, #4]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	88db      	ldrh	r3, [r3, #6]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d10c      	bne.n	8011eca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	785b      	ldrb	r3, [r3, #1]
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fd fec4 	bl	800fc44 <disk_status>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	f003 0301 	and.w	r3, r3, #1
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d101      	bne.n	8011eca <validate+0x4e>
			res = FR_OK;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011eca:	7bfb      	ldrb	r3, [r7, #15]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d102      	bne.n	8011ed6 <validate+0x5a>
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	e000      	b.n	8011ed8 <validate+0x5c>
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	683a      	ldr	r2, [r7, #0]
 8011eda:	6013      	str	r3, [r2, #0]
	return res;
 8011edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3710      	adds	r7, #16
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
	...

08011ee8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b088      	sub	sp, #32
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	60b9      	str	r1, [r7, #8]
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011efa:	f107 0310 	add.w	r3, r7, #16
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7ff fccf 	bl	80118a2 <get_ldnumber>
 8011f04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	da01      	bge.n	8011f10 <f_mount+0x28>
 8011f0c:	230b      	movs	r3, #11
 8011f0e:	e02b      	b.n	8011f68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011f10:	4a17      	ldr	r2, [pc, #92]	; (8011f70 <f_mount+0x88>)
 8011f12:	69fb      	ldr	r3, [r7, #28]
 8011f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011f1a:	69bb      	ldr	r3, [r7, #24]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d005      	beq.n	8011f2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011f20:	69b8      	ldr	r0, [r7, #24]
 8011f22:	f7fe f975 	bl	8010210 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d002      	beq.n	8011f38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	2200      	movs	r2, #0
 8011f36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011f38:	68fa      	ldr	r2, [r7, #12]
 8011f3a:	490d      	ldr	r1, [pc, #52]	; (8011f70 <f_mount+0x88>)
 8011f3c:	69fb      	ldr	r3, [r7, #28]
 8011f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d002      	beq.n	8011f4e <f_mount+0x66>
 8011f48:	79fb      	ldrb	r3, [r7, #7]
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d001      	beq.n	8011f52 <f_mount+0x6a>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	e00a      	b.n	8011f68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011f52:	f107 010c 	add.w	r1, r7, #12
 8011f56:	f107 0308 	add.w	r3, r7, #8
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7ff fd3b 	bl	80119d8 <find_volume>
 8011f62:	4603      	mov	r3, r0
 8011f64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3720      	adds	r7, #32
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	200005b0 	.word	0x200005b0

08011f74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b09a      	sub	sp, #104	; 0x68
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	4613      	mov	r3, r2
 8011f80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d101      	bne.n	8011f8c <f_open+0x18>
 8011f88:	2309      	movs	r3, #9
 8011f8a:	e1ac      	b.n	80122e6 <f_open+0x372>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011f8c:	79fb      	ldrb	r3, [r7, #7]
 8011f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011f94:	79fa      	ldrb	r2, [r7, #7]
 8011f96:	f107 0114 	add.w	r1, r7, #20
 8011f9a:	f107 0308 	add.w	r3, r7, #8
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7ff fd1a 	bl	80119d8 <find_volume>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8011faa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	f040 8190 	bne.w	80122d4 <f_open+0x360>
		dj.obj.fs = fs;
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011fb8:	68ba      	ldr	r2, [r7, #8]
 8011fba:	f107 0318 	add.w	r3, r7, #24
 8011fbe:	4611      	mov	r1, r2
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7ff fbfd 	bl	80117c0 <follow_path>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011fcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d11a      	bne.n	801200a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011fd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011fd8:	b25b      	sxtb	r3, r3
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	da03      	bge.n	8011fe6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8011fde:	2306      	movs	r3, #6
 8011fe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011fe4:	e011      	b.n	801200a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011fe6:	79fb      	ldrb	r3, [r7, #7]
 8011fe8:	f023 0301 	bic.w	r3, r3, #1
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	bf14      	ite	ne
 8011ff0:	2301      	movne	r3, #1
 8011ff2:	2300      	moveq	r3, #0
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	f107 0318 	add.w	r3, r7, #24
 8011ffc:	4611      	mov	r1, r2
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7fd ffbe 	bl	800ff80 <chk_lock>
 8012004:	4603      	mov	r3, r0
 8012006:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801200a:	79fb      	ldrb	r3, [r7, #7]
 801200c:	f003 031c 	and.w	r3, r3, #28
 8012010:	2b00      	cmp	r3, #0
 8012012:	d07e      	beq.n	8012112 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012014:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012018:	2b00      	cmp	r3, #0
 801201a:	d017      	beq.n	801204c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801201c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012020:	2b04      	cmp	r3, #4
 8012022:	d10e      	bne.n	8012042 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012024:	f7fe f808 	bl	8010038 <enq_lock>
 8012028:	4603      	mov	r3, r0
 801202a:	2b00      	cmp	r3, #0
 801202c:	d006      	beq.n	801203c <f_open+0xc8>
 801202e:	f107 0318 	add.w	r3, r7, #24
 8012032:	4618      	mov	r0, r3
 8012034:	f7ff f914 	bl	8011260 <dir_register>
 8012038:	4603      	mov	r3, r0
 801203a:	e000      	b.n	801203e <f_open+0xca>
 801203c:	2312      	movs	r3, #18
 801203e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012042:	79fb      	ldrb	r3, [r7, #7]
 8012044:	f043 0308 	orr.w	r3, r3, #8
 8012048:	71fb      	strb	r3, [r7, #7]
 801204a:	e010      	b.n	801206e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801204c:	7fbb      	ldrb	r3, [r7, #30]
 801204e:	f003 0311 	and.w	r3, r3, #17
 8012052:	2b00      	cmp	r3, #0
 8012054:	d003      	beq.n	801205e <f_open+0xea>
					res = FR_DENIED;
 8012056:	2307      	movs	r3, #7
 8012058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801205c:	e007      	b.n	801206e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801205e:	79fb      	ldrb	r3, [r7, #7]
 8012060:	f003 0304 	and.w	r3, r3, #4
 8012064:	2b00      	cmp	r3, #0
 8012066:	d002      	beq.n	801206e <f_open+0xfa>
 8012068:	2308      	movs	r3, #8
 801206a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801206e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012072:	2b00      	cmp	r3, #0
 8012074:	d167      	bne.n	8012146 <f_open+0x1d2>
 8012076:	79fb      	ldrb	r3, [r7, #7]
 8012078:	f003 0308 	and.w	r3, r3, #8
 801207c:	2b00      	cmp	r3, #0
 801207e:	d062      	beq.n	8012146 <f_open+0x1d2>
				dw = GET_FATTIME();
 8012080:	4b9b      	ldr	r3, [pc, #620]	; (80122f0 <f_open+0x37c>)
 8012082:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012086:	330e      	adds	r3, #14
 8012088:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801208a:	4618      	mov	r0, r3
 801208c:	f7fd fece 	bl	800fe2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012092:	3316      	adds	r3, #22
 8012094:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012096:	4618      	mov	r0, r3
 8012098:	f7fd fec8 	bl	800fe2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209e:	330b      	adds	r3, #11
 80120a0:	2220      	movs	r2, #32
 80120a2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120a8:	4611      	mov	r1, r2
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fe fe4e 	bl	8010d4c <ld_clust>
 80120b0:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80120b6:	2200      	movs	r2, #0
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7fe fe66 	bl	8010d8a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80120be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c0:	331c      	adds	r3, #28
 80120c2:	2100      	movs	r1, #0
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7fd feb1 	bl	800fe2c <st_dword>
					fs->wflag = 1;
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	2201      	movs	r2, #1
 80120ce:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80120d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d037      	beq.n	8012146 <f_open+0x1d2>
						dw = fs->winsect;
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120da:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80120dc:	f107 0318 	add.w	r3, r7, #24
 80120e0:	2200      	movs	r2, #0
 80120e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7fe fb4a 	bl	801077e <remove_chain>
 80120ea:	4603      	mov	r3, r0
 80120ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80120f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d126      	bne.n	8012146 <f_open+0x1d2>
							res = move_window(fs, dw);
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fe f8ef 	bl	80102e0 <move_window>
 8012102:	4603      	mov	r3, r0
 8012104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801210c:	3a01      	subs	r2, #1
 801210e:	611a      	str	r2, [r3, #16]
 8012110:	e019      	b.n	8012146 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012112:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012116:	2b00      	cmp	r3, #0
 8012118:	d115      	bne.n	8012146 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801211a:	7fbb      	ldrb	r3, [r7, #30]
 801211c:	f003 0310 	and.w	r3, r3, #16
 8012120:	2b00      	cmp	r3, #0
 8012122:	d003      	beq.n	801212c <f_open+0x1b8>
					res = FR_NO_FILE;
 8012124:	2304      	movs	r3, #4
 8012126:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801212a:	e00c      	b.n	8012146 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801212c:	79fb      	ldrb	r3, [r7, #7]
 801212e:	f003 0302 	and.w	r3, r3, #2
 8012132:	2b00      	cmp	r3, #0
 8012134:	d007      	beq.n	8012146 <f_open+0x1d2>
 8012136:	7fbb      	ldrb	r3, [r7, #30]
 8012138:	f003 0301 	and.w	r3, r3, #1
 801213c:	2b00      	cmp	r3, #0
 801213e:	d002      	beq.n	8012146 <f_open+0x1d2>
						res = FR_DENIED;
 8012140:	2307      	movs	r3, #7
 8012142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801214a:	2b00      	cmp	r3, #0
 801214c:	d128      	bne.n	80121a0 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801214e:	79fb      	ldrb	r3, [r7, #7]
 8012150:	f003 0308 	and.w	r3, r3, #8
 8012154:	2b00      	cmp	r3, #0
 8012156:	d003      	beq.n	8012160 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012158:	79fb      	ldrb	r3, [r7, #7]
 801215a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801215e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801216e:	79fb      	ldrb	r3, [r7, #7]
 8012170:	f023 0301 	bic.w	r3, r3, #1
 8012174:	2b00      	cmp	r3, #0
 8012176:	bf14      	ite	ne
 8012178:	2301      	movne	r3, #1
 801217a:	2300      	moveq	r3, #0
 801217c:	b2db      	uxtb	r3, r3
 801217e:	461a      	mov	r2, r3
 8012180:	f107 0318 	add.w	r3, r7, #24
 8012184:	4611      	mov	r1, r2
 8012186:	4618      	mov	r0, r3
 8012188:	f7fd ff78 	bl	801007c <inc_lock>
 801218c:	4602      	mov	r2, r0
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	691b      	ldr	r3, [r3, #16]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d102      	bne.n	80121a0 <f_open+0x22c>
 801219a:	2302      	movs	r3, #2
 801219c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80121a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	f040 8095 	bne.w	80122d4 <f_open+0x360>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121ae:	4611      	mov	r1, r2
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fe fdcb 	bl	8010d4c <ld_clust>
 80121b6:	4602      	mov	r2, r0
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80121bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121be:	331c      	adds	r3, #28
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7fd fdf5 	bl	800fdb0 <ld_dword>
 80121c6:	4602      	mov	r2, r0
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2200      	movs	r2, #0
 80121d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80121d2:	697a      	ldr	r2, [r7, #20]
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	88da      	ldrh	r2, [r3, #6]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	79fa      	ldrb	r2, [r7, #7]
 80121e4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	2200      	movs	r2, #0
 80121ea:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2200      	movs	r2, #0
 80121f0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2200      	movs	r2, #0
 80121f6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	3330      	adds	r3, #48	; 0x30
 80121fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012200:	2100      	movs	r1, #0
 8012202:	4618      	mov	r0, r3
 8012204:	f7fd fe5f 	bl	800fec6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012208:	79fb      	ldrb	r3, [r7, #7]
 801220a:	f003 0320 	and.w	r3, r3, #32
 801220e:	2b00      	cmp	r3, #0
 8012210:	d060      	beq.n	80122d4 <f_open+0x360>
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d05c      	beq.n	80122d4 <f_open+0x360>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	68da      	ldr	r2, [r3, #12]
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	895b      	ldrh	r3, [r3, #10]
 8012226:	025b      	lsls	r3, r3, #9
 8012228:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	689b      	ldr	r3, [r3, #8]
 801222e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012236:	e016      	b.n	8012266 <f_open+0x2f2>
					clst = get_fat(&fp->obj, clst);
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801223c:	4618      	mov	r0, r3
 801223e:	f7fe f90a 	bl	8010456 <get_fat>
 8012242:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012246:	2b01      	cmp	r3, #1
 8012248:	d802      	bhi.n	8012250 <f_open+0x2dc>
 801224a:	2302      	movs	r3, #2
 801224c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012256:	d102      	bne.n	801225e <f_open+0x2ea>
 8012258:	2301      	movs	r3, #1
 801225a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801225e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012262:	1ad3      	subs	r3, r2, r3
 8012264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012266:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801226a:	2b00      	cmp	r3, #0
 801226c:	d103      	bne.n	8012276 <f_open+0x302>
 801226e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012272:	429a      	cmp	r2, r3
 8012274:	d8e0      	bhi.n	8012238 <f_open+0x2c4>
				}
				fp->clust = clst;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801227a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801227c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012280:	2b00      	cmp	r3, #0
 8012282:	d127      	bne.n	80122d4 <f_open+0x360>
 8012284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801228a:	2b00      	cmp	r3, #0
 801228c:	d022      	beq.n	80122d4 <f_open+0x360>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012292:	4618      	mov	r0, r3
 8012294:	f7fe f8c0 	bl	8010418 <clust2sect>
 8012298:	64f8      	str	r0, [r7, #76]	; 0x4c
 801229a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801229c:	2b00      	cmp	r3, #0
 801229e:	d103      	bne.n	80122a8 <f_open+0x334>
						res = FR_INT_ERR;
 80122a0:	2302      	movs	r3, #2
 80122a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80122a6:	e015      	b.n	80122d4 <f_open+0x360>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80122a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80122aa:	0a5a      	lsrs	r2, r3, #9
 80122ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ae:	441a      	add	r2, r3
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	7858      	ldrb	r0, [r3, #1]
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	6a1a      	ldr	r2, [r3, #32]
 80122c2:	2301      	movs	r3, #1
 80122c4:	f7fd fcfe 	bl	800fcc4 <disk_read>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d002      	beq.n	80122d4 <f_open+0x360>
 80122ce:	2301      	movs	r3, #1
 80122d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80122d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d002      	beq.n	80122e2 <f_open+0x36e>
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2200      	movs	r2, #0
 80122e0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80122e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3768      	adds	r7, #104	; 0x68
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	46c40000 	.word	0x46c40000

080122f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b08c      	sub	sp, #48	; 0x30
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
 8012300:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	2200      	movs	r2, #0
 801230a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	f107 0210 	add.w	r2, r7, #16
 8012312:	4611      	mov	r1, r2
 8012314:	4618      	mov	r0, r3
 8012316:	f7ff fdb1 	bl	8011e7c <validate>
 801231a:	4603      	mov	r3, r0
 801231c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012324:	2b00      	cmp	r3, #0
 8012326:	d107      	bne.n	8012338 <f_write+0x44>
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	7d5b      	ldrb	r3, [r3, #21]
 801232c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012334:	2b00      	cmp	r3, #0
 8012336:	d002      	beq.n	801233e <f_write+0x4a>
 8012338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801233c:	e14b      	b.n	80125d6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	7d1b      	ldrb	r3, [r3, #20]
 8012342:	f003 0302 	and.w	r3, r3, #2
 8012346:	2b00      	cmp	r3, #0
 8012348:	d101      	bne.n	801234e <f_write+0x5a>
 801234a:	2307      	movs	r3, #7
 801234c:	e143      	b.n	80125d6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	699a      	ldr	r2, [r3, #24]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	441a      	add	r2, r3
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	699b      	ldr	r3, [r3, #24]
 801235a:	429a      	cmp	r2, r3
 801235c:	f080 812d 	bcs.w	80125ba <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	699b      	ldr	r3, [r3, #24]
 8012364:	43db      	mvns	r3, r3
 8012366:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012368:	e127      	b.n	80125ba <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	699b      	ldr	r3, [r3, #24]
 801236e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012372:	2b00      	cmp	r3, #0
 8012374:	f040 80e3 	bne.w	801253e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	699b      	ldr	r3, [r3, #24]
 801237c:	0a5b      	lsrs	r3, r3, #9
 801237e:	693a      	ldr	r2, [r7, #16]
 8012380:	8952      	ldrh	r2, [r2, #10]
 8012382:	3a01      	subs	r2, #1
 8012384:	4013      	ands	r3, r2
 8012386:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d143      	bne.n	8012416 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	699b      	ldr	r3, [r3, #24]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d10c      	bne.n	80123b0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	689b      	ldr	r3, [r3, #8]
 801239a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d11a      	bne.n	80123d8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2100      	movs	r1, #0
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fe fa7d 	bl	80108a6 <create_chain>
 80123ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80123ae:	e013      	b.n	80123d8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d007      	beq.n	80123c8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	699b      	ldr	r3, [r3, #24]
 80123bc:	4619      	mov	r1, r3
 80123be:	68f8      	ldr	r0, [r7, #12]
 80123c0:	f7fe fb09 	bl	80109d6 <clmt_clust>
 80123c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80123c6:	e007      	b.n	80123d8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80123c8:	68fa      	ldr	r2, [r7, #12]
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	69db      	ldr	r3, [r3, #28]
 80123ce:	4619      	mov	r1, r3
 80123d0:	4610      	mov	r0, r2
 80123d2:	f7fe fa68 	bl	80108a6 <create_chain>
 80123d6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80123d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123da:	2b00      	cmp	r3, #0
 80123dc:	f000 80f2 	beq.w	80125c4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80123e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d104      	bne.n	80123f0 <f_write+0xfc>
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2202      	movs	r2, #2
 80123ea:	755a      	strb	r2, [r3, #21]
 80123ec:	2302      	movs	r3, #2
 80123ee:	e0f2      	b.n	80125d6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80123f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123f6:	d104      	bne.n	8012402 <f_write+0x10e>
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	2201      	movs	r2, #1
 80123fc:	755a      	strb	r2, [r3, #21]
 80123fe:	2301      	movs	r3, #1
 8012400:	e0e9      	b.n	80125d6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012406:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	689b      	ldr	r3, [r3, #8]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d102      	bne.n	8012416 <f_write+0x122>
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012414:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	7d1b      	ldrb	r3, [r3, #20]
 801241a:	b25b      	sxtb	r3, r3
 801241c:	2b00      	cmp	r3, #0
 801241e:	da18      	bge.n	8012452 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	7858      	ldrb	r0, [r3, #1]
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	6a1a      	ldr	r2, [r3, #32]
 801242e:	2301      	movs	r3, #1
 8012430:	f7fd fc68 	bl	800fd04 <disk_write>
 8012434:	4603      	mov	r3, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	d004      	beq.n	8012444 <f_write+0x150>
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2201      	movs	r2, #1
 801243e:	755a      	strb	r2, [r3, #21]
 8012440:	2301      	movs	r3, #1
 8012442:	e0c8      	b.n	80125d6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	7d1b      	ldrb	r3, [r3, #20]
 8012448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801244c:	b2da      	uxtb	r2, r3
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012452:	693a      	ldr	r2, [r7, #16]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	69db      	ldr	r3, [r3, #28]
 8012458:	4619      	mov	r1, r3
 801245a:	4610      	mov	r0, r2
 801245c:	f7fd ffdc 	bl	8010418 <clust2sect>
 8012460:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d104      	bne.n	8012472 <f_write+0x17e>
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	2202      	movs	r2, #2
 801246c:	755a      	strb	r2, [r3, #21]
 801246e:	2302      	movs	r3, #2
 8012470:	e0b1      	b.n	80125d6 <f_write+0x2e2>
			sect += csect;
 8012472:	697a      	ldr	r2, [r7, #20]
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	4413      	add	r3, r2
 8012478:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	0a5b      	lsrs	r3, r3, #9
 801247e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012480:	6a3b      	ldr	r3, [r7, #32]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d03c      	beq.n	8012500 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012486:	69ba      	ldr	r2, [r7, #24]
 8012488:	6a3b      	ldr	r3, [r7, #32]
 801248a:	4413      	add	r3, r2
 801248c:	693a      	ldr	r2, [r7, #16]
 801248e:	8952      	ldrh	r2, [r2, #10]
 8012490:	4293      	cmp	r3, r2
 8012492:	d905      	bls.n	80124a0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	895b      	ldrh	r3, [r3, #10]
 8012498:	461a      	mov	r2, r3
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	1ad3      	subs	r3, r2, r3
 801249e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	7858      	ldrb	r0, [r3, #1]
 80124a4:	6a3b      	ldr	r3, [r7, #32]
 80124a6:	697a      	ldr	r2, [r7, #20]
 80124a8:	69f9      	ldr	r1, [r7, #28]
 80124aa:	f7fd fc2b 	bl	800fd04 <disk_write>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d004      	beq.n	80124be <f_write+0x1ca>
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2201      	movs	r2, #1
 80124b8:	755a      	strb	r2, [r3, #21]
 80124ba:	2301      	movs	r3, #1
 80124bc:	e08b      	b.n	80125d6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	6a1a      	ldr	r2, [r3, #32]
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	1ad3      	subs	r3, r2, r3
 80124c6:	6a3a      	ldr	r2, [r7, #32]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d915      	bls.n	80124f8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	6a1a      	ldr	r2, [r3, #32]
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	1ad3      	subs	r3, r2, r3
 80124da:	025b      	lsls	r3, r3, #9
 80124dc:	69fa      	ldr	r2, [r7, #28]
 80124de:	4413      	add	r3, r2
 80124e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124e4:	4619      	mov	r1, r3
 80124e6:	f7fd fccd 	bl	800fe84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	7d1b      	ldrb	r3, [r3, #20]
 80124ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124f2:	b2da      	uxtb	r2, r3
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80124f8:	6a3b      	ldr	r3, [r7, #32]
 80124fa:	025b      	lsls	r3, r3, #9
 80124fc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80124fe:	e03f      	b.n	8012580 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	6a1b      	ldr	r3, [r3, #32]
 8012504:	697a      	ldr	r2, [r7, #20]
 8012506:	429a      	cmp	r2, r3
 8012508:	d016      	beq.n	8012538 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	699a      	ldr	r2, [r3, #24]
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012512:	429a      	cmp	r2, r3
 8012514:	d210      	bcs.n	8012538 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	7858      	ldrb	r0, [r3, #1]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012520:	2301      	movs	r3, #1
 8012522:	697a      	ldr	r2, [r7, #20]
 8012524:	f7fd fbce 	bl	800fcc4 <disk_read>
 8012528:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801252a:	2b00      	cmp	r3, #0
 801252c:	d004      	beq.n	8012538 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2201      	movs	r2, #1
 8012532:	755a      	strb	r2, [r3, #21]
 8012534:	2301      	movs	r3, #1
 8012536:	e04e      	b.n	80125d6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	697a      	ldr	r2, [r7, #20]
 801253c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	699b      	ldr	r3, [r3, #24]
 8012542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012546:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801254a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	429a      	cmp	r2, r3
 8012552:	d901      	bls.n	8012558 <f_write+0x264>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	699b      	ldr	r3, [r3, #24]
 8012562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012566:	4413      	add	r3, r2
 8012568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801256a:	69f9      	ldr	r1, [r7, #28]
 801256c:	4618      	mov	r0, r3
 801256e:	f7fd fc89 	bl	800fe84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	7d1b      	ldrb	r3, [r3, #20]
 8012576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801257a:	b2da      	uxtb	r2, r3
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012580:	69fa      	ldr	r2, [r7, #28]
 8012582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012584:	4413      	add	r3, r2
 8012586:	61fb      	str	r3, [r7, #28]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	699a      	ldr	r2, [r3, #24]
 801258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258e:	441a      	add	r2, r3
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	619a      	str	r2, [r3, #24]
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	68da      	ldr	r2, [r3, #12]
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	699b      	ldr	r3, [r3, #24]
 801259c:	429a      	cmp	r2, r3
 801259e:	bf38      	it	cc
 80125a0:	461a      	movcc	r2, r3
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	60da      	str	r2, [r3, #12]
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	681a      	ldr	r2, [r3, #0]
 80125aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ac:	441a      	add	r2, r3
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	601a      	str	r2, [r3, #0]
 80125b2:	687a      	ldr	r2, [r7, #4]
 80125b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b6:	1ad3      	subs	r3, r2, r3
 80125b8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	f47f aed4 	bne.w	801236a <f_write+0x76>
 80125c2:	e000      	b.n	80125c6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80125c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	7d1b      	ldrb	r3, [r3, #20]
 80125ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125ce:	b2da      	uxtb	r2, r3
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80125d4:	2300      	movs	r3, #0
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3730      	adds	r7, #48	; 0x30
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}
	...

080125e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b086      	sub	sp, #24
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f107 0208 	add.w	r2, r7, #8
 80125ee:	4611      	mov	r1, r2
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7ff fc43 	bl	8011e7c <validate>
 80125f6:	4603      	mov	r3, r0
 80125f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80125fa:	7dfb      	ldrb	r3, [r7, #23]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d167      	bne.n	80126d0 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	7d1b      	ldrb	r3, [r3, #20]
 8012604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012608:	2b00      	cmp	r3, #0
 801260a:	d061      	beq.n	80126d0 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	7d1b      	ldrb	r3, [r3, #20]
 8012610:	b25b      	sxtb	r3, r3
 8012612:	2b00      	cmp	r3, #0
 8012614:	da15      	bge.n	8012642 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	7858      	ldrb	r0, [r3, #1]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6a1a      	ldr	r2, [r3, #32]
 8012624:	2301      	movs	r3, #1
 8012626:	f7fd fb6d 	bl	800fd04 <disk_write>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d001      	beq.n	8012634 <f_sync+0x54>
 8012630:	2301      	movs	r3, #1
 8012632:	e04e      	b.n	80126d2 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	7d1b      	ldrb	r3, [r3, #20]
 8012638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801263c:	b2da      	uxtb	r2, r3
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012642:	4b26      	ldr	r3, [pc, #152]	; (80126dc <f_sync+0xfc>)
 8012644:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012646:	68ba      	ldr	r2, [r7, #8]
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801264c:	4619      	mov	r1, r3
 801264e:	4610      	mov	r0, r2
 8012650:	f7fd fe46 	bl	80102e0 <move_window>
 8012654:	4603      	mov	r3, r0
 8012656:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012658:	7dfb      	ldrb	r3, [r7, #23]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d138      	bne.n	80126d0 <f_sync+0xf0>
					dir = fp->dir_ptr;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012662:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	330b      	adds	r3, #11
 8012668:	781a      	ldrb	r2, [r3, #0]
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	330b      	adds	r3, #11
 801266e:	f042 0220 	orr.w	r2, r2, #32
 8012672:	b2d2      	uxtb	r2, r2
 8012674:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6818      	ldr	r0, [r3, #0]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	689b      	ldr	r3, [r3, #8]
 801267e:	461a      	mov	r2, r3
 8012680:	68f9      	ldr	r1, [r7, #12]
 8012682:	f7fe fb82 	bl	8010d8a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	f103 021c 	add.w	r2, r3, #28
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	4619      	mov	r1, r3
 8012692:	4610      	mov	r0, r2
 8012694:	f7fd fbca 	bl	800fe2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	3316      	adds	r3, #22
 801269c:	6939      	ldr	r1, [r7, #16]
 801269e:	4618      	mov	r0, r3
 80126a0:	f7fd fbc4 	bl	800fe2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	3312      	adds	r3, #18
 80126a8:	2100      	movs	r1, #0
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7fd fba3 	bl	800fdf6 <st_word>
					fs->wflag = 1;
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	2201      	movs	r2, #1
 80126b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7fd fe3f 	bl	801033c <sync_fs>
 80126be:	4603      	mov	r3, r0
 80126c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	7d1b      	ldrb	r3, [r3, #20]
 80126c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80126ca:	b2da      	uxtb	r2, r3
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80126d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3718      	adds	r7, #24
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	46c40000 	.word	0x46c40000

080126e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f7ff ff79 	bl	80125e0 <f_sync>
 80126ee:	4603      	mov	r3, r0
 80126f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80126f2:	7bfb      	ldrb	r3, [r7, #15]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d118      	bne.n	801272a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f107 0208 	add.w	r2, r7, #8
 80126fe:	4611      	mov	r1, r2
 8012700:	4618      	mov	r0, r3
 8012702:	f7ff fbbb 	bl	8011e7c <validate>
 8012706:	4603      	mov	r3, r0
 8012708:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801270a:	7bfb      	ldrb	r3, [r7, #15]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d10c      	bne.n	801272a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	691b      	ldr	r3, [r3, #16]
 8012714:	4618      	mov	r0, r3
 8012716:	f7fd fd3f 	bl	8010198 <dec_lock>
 801271a:	4603      	mov	r3, r0
 801271c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801271e:	7bfb      	ldrb	r3, [r7, #15]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d102      	bne.n	801272a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2200      	movs	r2, #0
 8012728:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801272a:	7bfb      	ldrb	r3, [r7, #15]
}
 801272c:	4618      	mov	r0, r3
 801272e:	3710      	adds	r7, #16
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b090      	sub	sp, #64	; 0x40
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f107 0208 	add.w	r2, r7, #8
 8012744:	4611      	mov	r1, r2
 8012746:	4618      	mov	r0, r3
 8012748:	f7ff fb98 	bl	8011e7c <validate>
 801274c:	4603      	mov	r3, r0
 801274e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012752:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012756:	2b00      	cmp	r3, #0
 8012758:	d103      	bne.n	8012762 <f_lseek+0x2e>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	7d5b      	ldrb	r3, [r3, #21]
 801275e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012762:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012766:	2b00      	cmp	r3, #0
 8012768:	d002      	beq.n	8012770 <f_lseek+0x3c>
 801276a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801276e:	e1e6      	b.n	8012b3e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012774:	2b00      	cmp	r3, #0
 8012776:	f000 80d1 	beq.w	801291c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012780:	d15a      	bne.n	8012838 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012786:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	1d1a      	adds	r2, r3, #4
 801278c:	627a      	str	r2, [r7, #36]	; 0x24
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	617b      	str	r3, [r7, #20]
 8012792:	2302      	movs	r3, #2
 8012794:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	689b      	ldr	r3, [r3, #8]
 801279a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d03a      	beq.n	8012818 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80127a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a4:	613b      	str	r3, [r7, #16]
 80127a6:	2300      	movs	r3, #0
 80127a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	3302      	adds	r3, #2
 80127ae:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80127b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b2:	60fb      	str	r3, [r7, #12]
 80127b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b6:	3301      	adds	r3, #1
 80127b8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80127be:	4618      	mov	r0, r3
 80127c0:	f7fd fe49 	bl	8010456 <get_fat>
 80127c4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80127c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	d804      	bhi.n	80127d6 <f_lseek+0xa2>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2202      	movs	r2, #2
 80127d0:	755a      	strb	r2, [r3, #21]
 80127d2:	2302      	movs	r3, #2
 80127d4:	e1b3      	b.n	8012b3e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80127d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127dc:	d104      	bne.n	80127e8 <f_lseek+0xb4>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2201      	movs	r2, #1
 80127e2:	755a      	strb	r2, [r3, #21]
 80127e4:	2301      	movs	r3, #1
 80127e6:	e1aa      	b.n	8012b3e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	3301      	adds	r3, #1
 80127ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d0de      	beq.n	80127b0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80127f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d809      	bhi.n	801280e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80127fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fc:	1d1a      	adds	r2, r3, #4
 80127fe:	627a      	str	r2, [r7, #36]	; 0x24
 8012800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012802:	601a      	str	r2, [r3, #0]
 8012804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012806:	1d1a      	adds	r2, r3, #4
 8012808:	627a      	str	r2, [r7, #36]	; 0x24
 801280a:	693a      	ldr	r2, [r7, #16]
 801280c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	699b      	ldr	r3, [r3, #24]
 8012812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012814:	429a      	cmp	r2, r3
 8012816:	d3c4      	bcc.n	80127a2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801281c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801281e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	429a      	cmp	r2, r3
 8012826:	d803      	bhi.n	8012830 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282a:	2200      	movs	r2, #0
 801282c:	601a      	str	r2, [r3, #0]
 801282e:	e184      	b.n	8012b3a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012830:	2311      	movs	r3, #17
 8012832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012836:	e180      	b.n	8012b3a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	683a      	ldr	r2, [r7, #0]
 801283e:	429a      	cmp	r2, r3
 8012840:	d902      	bls.n	8012848 <f_lseek+0x114>
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	68db      	ldr	r3, [r3, #12]
 8012846:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	683a      	ldr	r2, [r7, #0]
 801284c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	f000 8172 	beq.w	8012b3a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	3b01      	subs	r3, #1
 801285a:	4619      	mov	r1, r3
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f7fe f8ba 	bl	80109d6 <clmt_clust>
 8012862:	4602      	mov	r2, r0
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012868:	68ba      	ldr	r2, [r7, #8]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	69db      	ldr	r3, [r3, #28]
 801286e:	4619      	mov	r1, r3
 8012870:	4610      	mov	r0, r2
 8012872:	f7fd fdd1 	bl	8010418 <clust2sect>
 8012876:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d104      	bne.n	8012888 <f_lseek+0x154>
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2202      	movs	r2, #2
 8012882:	755a      	strb	r2, [r3, #21]
 8012884:	2302      	movs	r3, #2
 8012886:	e15a      	b.n	8012b3e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	3b01      	subs	r3, #1
 801288c:	0a5b      	lsrs	r3, r3, #9
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	8952      	ldrh	r2, [r2, #10]
 8012892:	3a01      	subs	r2, #1
 8012894:	4013      	ands	r3, r2
 8012896:	69ba      	ldr	r2, [r7, #24]
 8012898:	4413      	add	r3, r2
 801289a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	699b      	ldr	r3, [r3, #24]
 80128a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	f000 8148 	beq.w	8012b3a <f_lseek+0x406>
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6a1b      	ldr	r3, [r3, #32]
 80128ae:	69ba      	ldr	r2, [r7, #24]
 80128b0:	429a      	cmp	r2, r3
 80128b2:	f000 8142 	beq.w	8012b3a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	7d1b      	ldrb	r3, [r3, #20]
 80128ba:	b25b      	sxtb	r3, r3
 80128bc:	2b00      	cmp	r3, #0
 80128be:	da18      	bge.n	80128f2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	7858      	ldrb	r0, [r3, #1]
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6a1a      	ldr	r2, [r3, #32]
 80128ce:	2301      	movs	r3, #1
 80128d0:	f7fd fa18 	bl	800fd04 <disk_write>
 80128d4:	4603      	mov	r3, r0
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d004      	beq.n	80128e4 <f_lseek+0x1b0>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2201      	movs	r2, #1
 80128de:	755a      	strb	r2, [r3, #21]
 80128e0:	2301      	movs	r3, #1
 80128e2:	e12c      	b.n	8012b3e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	7d1b      	ldrb	r3, [r3, #20]
 80128e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128ec:	b2da      	uxtb	r2, r3
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	7858      	ldrb	r0, [r3, #1]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128fc:	2301      	movs	r3, #1
 80128fe:	69ba      	ldr	r2, [r7, #24]
 8012900:	f7fd f9e0 	bl	800fcc4 <disk_read>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d004      	beq.n	8012914 <f_lseek+0x1e0>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2201      	movs	r2, #1
 801290e:	755a      	strb	r2, [r3, #21]
 8012910:	2301      	movs	r3, #1
 8012912:	e114      	b.n	8012b3e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	69ba      	ldr	r2, [r7, #24]
 8012918:	621a      	str	r2, [r3, #32]
 801291a:	e10e      	b.n	8012b3a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	68db      	ldr	r3, [r3, #12]
 8012920:	683a      	ldr	r2, [r7, #0]
 8012922:	429a      	cmp	r2, r3
 8012924:	d908      	bls.n	8012938 <f_lseek+0x204>
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	7d1b      	ldrb	r3, [r3, #20]
 801292a:	f003 0302 	and.w	r3, r3, #2
 801292e:	2b00      	cmp	r3, #0
 8012930:	d102      	bne.n	8012938 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	68db      	ldr	r3, [r3, #12]
 8012936:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	699b      	ldr	r3, [r3, #24]
 801293c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801293e:	2300      	movs	r3, #0
 8012940:	637b      	str	r3, [r7, #52]	; 0x34
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012946:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	f000 80a7 	beq.w	8012a9e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	895b      	ldrh	r3, [r3, #10]
 8012954:	025b      	lsls	r3, r3, #9
 8012956:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012958:	6a3b      	ldr	r3, [r7, #32]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d01b      	beq.n	8012996 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	1e5a      	subs	r2, r3, #1
 8012962:	69fb      	ldr	r3, [r7, #28]
 8012964:	fbb2 f2f3 	udiv	r2, r2, r3
 8012968:	6a3b      	ldr	r3, [r7, #32]
 801296a:	1e59      	subs	r1, r3, #1
 801296c:	69fb      	ldr	r3, [r7, #28]
 801296e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012972:	429a      	cmp	r2, r3
 8012974:	d30f      	bcc.n	8012996 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012976:	6a3b      	ldr	r3, [r7, #32]
 8012978:	1e5a      	subs	r2, r3, #1
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	425b      	negs	r3, r3
 801297e:	401a      	ands	r2, r3
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	699b      	ldr	r3, [r3, #24]
 8012988:	683a      	ldr	r2, [r7, #0]
 801298a:	1ad3      	subs	r3, r2, r3
 801298c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	69db      	ldr	r3, [r3, #28]
 8012992:	63bb      	str	r3, [r7, #56]	; 0x38
 8012994:	e022      	b.n	80129dc <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d119      	bne.n	80129d6 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2100      	movs	r1, #0
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7fd ff7d 	bl	80108a6 <create_chain>
 80129ac:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80129ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d104      	bne.n	80129be <f_lseek+0x28a>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2202      	movs	r2, #2
 80129b8:	755a      	strb	r2, [r3, #21]
 80129ba:	2302      	movs	r3, #2
 80129bc:	e0bf      	b.n	8012b3e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80129be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129c4:	d104      	bne.n	80129d0 <f_lseek+0x29c>
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2201      	movs	r2, #1
 80129ca:	755a      	strb	r2, [r3, #21]
 80129cc:	2301      	movs	r3, #1
 80129ce:	e0b6      	b.n	8012b3e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129d4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129da:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80129dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d05d      	beq.n	8012a9e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80129e2:	e03a      	b.n	8012a5a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80129e4:	683a      	ldr	r2, [r7, #0]
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	1ad3      	subs	r3, r2, r3
 80129ea:	603b      	str	r3, [r7, #0]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	699a      	ldr	r2, [r3, #24]
 80129f0:	69fb      	ldr	r3, [r7, #28]
 80129f2:	441a      	add	r2, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	7d1b      	ldrb	r3, [r3, #20]
 80129fc:	f003 0302 	and.w	r3, r3, #2
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00b      	beq.n	8012a1c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f7fd ff4c 	bl	80108a6 <create_chain>
 8012a0e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d108      	bne.n	8012a28 <f_lseek+0x2f4>
							ofs = 0; break;
 8012a16:	2300      	movs	r3, #0
 8012a18:	603b      	str	r3, [r7, #0]
 8012a1a:	e022      	b.n	8012a62 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7fd fd18 	bl	8010456 <get_fat>
 8012a26:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a2e:	d104      	bne.n	8012a3a <f_lseek+0x306>
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2201      	movs	r2, #1
 8012a34:	755a      	strb	r2, [r3, #21]
 8012a36:	2301      	movs	r3, #1
 8012a38:	e081      	b.n	8012b3e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3c:	2b01      	cmp	r3, #1
 8012a3e:	d904      	bls.n	8012a4a <f_lseek+0x316>
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	699b      	ldr	r3, [r3, #24]
 8012a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d304      	bcc.n	8012a54 <f_lseek+0x320>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2202      	movs	r2, #2
 8012a4e:	755a      	strb	r2, [r3, #21]
 8012a50:	2302      	movs	r3, #2
 8012a52:	e074      	b.n	8012b3e <f_lseek+0x40a>
					fp->clust = clst;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a58:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012a5a:	683a      	ldr	r2, [r7, #0]
 8012a5c:	69fb      	ldr	r3, [r7, #28]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d8c0      	bhi.n	80129e4 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	699a      	ldr	r2, [r3, #24]
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	441a      	add	r2, r3
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d012      	beq.n	8012a9e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7fd fccb 	bl	8010418 <clust2sect>
 8012a82:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d104      	bne.n	8012a94 <f_lseek+0x360>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2202      	movs	r2, #2
 8012a8e:	755a      	strb	r2, [r3, #21]
 8012a90:	2302      	movs	r3, #2
 8012a92:	e054      	b.n	8012b3e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	0a5b      	lsrs	r3, r3, #9
 8012a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a9a:	4413      	add	r3, r2
 8012a9c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	699a      	ldr	r2, [r3, #24]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	68db      	ldr	r3, [r3, #12]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d90a      	bls.n	8012ac0 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	699a      	ldr	r2, [r3, #24]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	7d1b      	ldrb	r3, [r3, #20]
 8012ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012aba:	b2da      	uxtb	r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	699b      	ldr	r3, [r3, #24]
 8012ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d036      	beq.n	8012b3a <f_lseek+0x406>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6a1b      	ldr	r3, [r3, #32]
 8012ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d031      	beq.n	8012b3a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	7d1b      	ldrb	r3, [r3, #20]
 8012ada:	b25b      	sxtb	r3, r3
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	da18      	bge.n	8012b12 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	7858      	ldrb	r0, [r3, #1]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6a1a      	ldr	r2, [r3, #32]
 8012aee:	2301      	movs	r3, #1
 8012af0:	f7fd f908 	bl	800fd04 <disk_write>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d004      	beq.n	8012b04 <f_lseek+0x3d0>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2201      	movs	r2, #1
 8012afe:	755a      	strb	r2, [r3, #21]
 8012b00:	2301      	movs	r3, #1
 8012b02:	e01c      	b.n	8012b3e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	7d1b      	ldrb	r3, [r3, #20]
 8012b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b0c:	b2da      	uxtb	r2, r3
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	7858      	ldrb	r0, [r3, #1]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b20:	f7fd f8d0 	bl	800fcc4 <disk_read>
 8012b24:	4603      	mov	r3, r0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d004      	beq.n	8012b34 <f_lseek+0x400>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	755a      	strb	r2, [r3, #21]
 8012b30:	2301      	movs	r3, #1
 8012b32:	e004      	b.n	8012b3e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b38:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012b3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3740      	adds	r7, #64	; 0x40
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8012b46:	b580      	push	{r7, lr}
 8012b48:	b092      	sub	sp, #72	; 0x48
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	60f8      	str	r0, [r7, #12]
 8012b4e:	60b9      	str	r1, [r7, #8]
 8012b50:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012b52:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8012b56:	f107 030c 	add.w	r3, r7, #12
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7fe ff3b 	bl	80119d8 <find_volume>
 8012b62:	4603      	mov	r3, r0
 8012b64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8012b68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	f040 8099 	bne.w	8012ca4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8012b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8012b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7a:	695a      	ldr	r2, [r3, #20]
 8012b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7e:	699b      	ldr	r3, [r3, #24]
 8012b80:	3b02      	subs	r3, #2
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d804      	bhi.n	8012b90 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8012b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b88:	695a      	ldr	r2, [r3, #20]
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	601a      	str	r2, [r3, #0]
 8012b8e:	e089      	b.n	8012ca4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8012b90:	2300      	movs	r3, #0
 8012b92:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8012b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	2b01      	cmp	r3, #1
 8012b9a:	d128      	bne.n	8012bee <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8012b9c:	2302      	movs	r3, #2
 8012b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8012ba4:	f107 0314 	add.w	r3, r7, #20
 8012ba8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7fd fc53 	bl	8010456 <get_fat>
 8012bb0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8012bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bb8:	d103      	bne.n	8012bc2 <f_getfree+0x7c>
 8012bba:	2301      	movs	r3, #1
 8012bbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012bc0:	e063      	b.n	8012c8a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8012bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d103      	bne.n	8012bd0 <f_getfree+0x8a>
 8012bc8:	2302      	movs	r3, #2
 8012bca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012bce:	e05c      	b.n	8012c8a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8012bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d102      	bne.n	8012bdc <f_getfree+0x96>
 8012bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bd8:	3301      	adds	r3, #1
 8012bda:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8012bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bde:	3301      	adds	r3, #1
 8012be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be4:	699b      	ldr	r3, [r3, #24]
 8012be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d3db      	bcc.n	8012ba4 <f_getfree+0x5e>
 8012bec:	e04d      	b.n	8012c8a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8012bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf0:	699b      	ldr	r3, [r3, #24]
 8012bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8012bfe:	2300      	movs	r3, #0
 8012c00:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8012c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d113      	bne.n	8012c30 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8012c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0c:	1c5a      	adds	r2, r3, #1
 8012c0e:	63ba      	str	r2, [r7, #56]	; 0x38
 8012c10:	4619      	mov	r1, r3
 8012c12:	f7fd fb65 	bl	80102e0 <move_window>
 8012c16:	4603      	mov	r3, r0
 8012c18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8012c1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d131      	bne.n	8012c88 <f_getfree+0x142>
							p = fs->win;
 8012c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c26:	3334      	adds	r3, #52	; 0x34
 8012c28:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8012c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c2e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8012c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	2b02      	cmp	r3, #2
 8012c36:	d10f      	bne.n	8012c58 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8012c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c3a:	f7fd f8a1 	bl	800fd80 <ld_word>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d102      	bne.n	8012c4a <f_getfree+0x104>
 8012c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c46:	3301      	adds	r3, #1
 8012c48:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8012c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4c:	3302      	adds	r3, #2
 8012c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8012c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c52:	3b02      	subs	r3, #2
 8012c54:	637b      	str	r3, [r7, #52]	; 0x34
 8012c56:	e010      	b.n	8012c7a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8012c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c5a:	f7fd f8a9 	bl	800fdb0 <ld_dword>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d102      	bne.n	8012c6e <f_getfree+0x128>
 8012c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8012c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c70:	3304      	adds	r3, #4
 8012c72:	633b      	str	r3, [r7, #48]	; 0x30
 8012c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c76:	3b04      	subs	r3, #4
 8012c78:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8012c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c7c:	3b01      	subs	r3, #1
 8012c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d1bd      	bne.n	8012c02 <f_getfree+0xbc>
 8012c86:	e000      	b.n	8012c8a <f_getfree+0x144>
							if (res != FR_OK) break;
 8012c88:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c8e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8012c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c94:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8012c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c98:	791a      	ldrb	r2, [r3, #4]
 8012c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9c:	f042 0201 	orr.w	r2, r2, #1
 8012ca0:	b2d2      	uxtb	r2, r2
 8012ca2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8012ca4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3748      	adds	r7, #72	; 0x48
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b098      	sub	sp, #96	; 0x60
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012cb8:	f107 010c 	add.w	r1, r7, #12
 8012cbc:	1d3b      	adds	r3, r7, #4
 8012cbe:	2202      	movs	r2, #2
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7fe fe89 	bl	80119d8 <find_volume>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8012cd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f040 80eb 	bne.w	8012eb0 <f_mkdir+0x200>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012cda:	687a      	ldr	r2, [r7, #4]
 8012cdc:	f107 0310 	add.w	r3, r7, #16
 8012ce0:	4611      	mov	r1, r2
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7fe fd6c 	bl	80117c0 <follow_path>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012cee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d102      	bne.n	8012cfc <f_mkdir+0x4c>
 8012cf6:	2308      	movs	r3, #8
 8012cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d00:	2b04      	cmp	r3, #4
 8012d02:	f040 80d5 	bne.w	8012eb0 <f_mkdir+0x200>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012d06:	f107 0310 	add.w	r3, r7, #16
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7fd fdca 	bl	80108a6 <create_chain>
 8012d12:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	895b      	ldrh	r3, [r3, #10]
 8012d18:	025b      	lsls	r3, r3, #9
 8012d1a:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d102      	bne.n	8012d2e <f_mkdir+0x7e>
 8012d28:	2307      	movs	r3, #7
 8012d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8012d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d30:	2b01      	cmp	r3, #1
 8012d32:	d102      	bne.n	8012d3a <f_mkdir+0x8a>
 8012d34:	2302      	movs	r3, #2
 8012d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d40:	d102      	bne.n	8012d48 <f_mkdir+0x98>
 8012d42:	2301      	movs	r3, #1
 8012d44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d106      	bne.n	8012d5e <f_mkdir+0xae>
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7fd fa80 	bl	8010258 <sync_window>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8012d5e:	4b57      	ldr	r3, [pc, #348]	; (8012ebc <f_mkdir+0x20c>)
 8012d60:	64bb      	str	r3, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d16a      	bne.n	8012e40 <f_mkdir+0x190>
				dsc = clust2sect(fs, dcl);
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7fd fb52 	bl	8010418 <clust2sect>
 8012d74:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	3334      	adds	r3, #52	; 0x34
 8012d7a:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8012d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d80:	2100      	movs	r1, #0
 8012d82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012d84:	f7fd f89f 	bl	800fec6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012d88:	220b      	movs	r2, #11
 8012d8a:	2120      	movs	r1, #32
 8012d8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012d8e:	f7fd f89a 	bl	800fec6 <mem_set>
					dir[DIR_Name] = '.';
 8012d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d94:	222e      	movs	r2, #46	; 0x2e
 8012d96:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d9a:	330b      	adds	r3, #11
 8012d9c:	2210      	movs	r2, #16
 8012d9e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012da2:	3316      	adds	r3, #22
 8012da4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7fd f840 	bl	800fe2c <st_dword>
					st_clust(fs, dir, dcl);
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012db0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7fd ffe9 	bl	8010d8a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dba:	3320      	adds	r3, #32
 8012dbc:	2220      	movs	r2, #32
 8012dbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fd f85f 	bl	800fe84 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dc8:	3321      	adds	r3, #33	; 0x21
 8012dca:	222e      	movs	r2, #46	; 0x2e
 8012dcc:	701a      	strb	r2, [r3, #0]
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	2b03      	cmp	r3, #3
 8012dd8:	d106      	bne.n	8012de8 <f_mkdir+0x138>
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d101      	bne.n	8012de8 <f_mkdir+0x138>
 8012de4:	2300      	movs	r3, #0
 8012de6:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8012de8:	68f8      	ldr	r0, [r7, #12]
 8012dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dec:	3320      	adds	r3, #32
 8012dee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012df0:	4619      	mov	r1, r3
 8012df2:	f7fd ffca 	bl	8010d8a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	895b      	ldrh	r3, [r3, #10]
 8012dfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8012dfc:	e01b      	b.n	8012e36 <f_mkdir+0x186>
					fs->winsect = dsc++;
 8012dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e00:	1c5a      	adds	r2, r3, #1
 8012e02:	657a      	str	r2, [r7, #84]	; 0x54
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7fd fa21 	bl	8010258 <sync_window>
 8012e16:	4603      	mov	r3, r0
 8012e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8012e1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d10c      	bne.n	8012e3e <f_mkdir+0x18e>
					mem_set(dir, 0, SS(fs));
 8012e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e28:	2100      	movs	r1, #0
 8012e2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012e2c:	f7fd f84b 	bl	800fec6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e32:	3b01      	subs	r3, #1
 8012e34:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d1e0      	bne.n	8012dfe <f_mkdir+0x14e>
 8012e3c:	e000      	b.n	8012e40 <f_mkdir+0x190>
					if (res != FR_OK) break;
 8012e3e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012e40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d107      	bne.n	8012e58 <f_mkdir+0x1a8>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8012e48:	f107 0310 	add.w	r3, r7, #16
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7fe fa07 	bl	8011260 <dir_register>
 8012e52:	4603      	mov	r3, r0
 8012e54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8012e58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d120      	bne.n	8012ea2 <f_mkdir+0x1f2>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e62:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e66:	3316      	adds	r3, #22
 8012e68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7fc ffde 	bl	800fe2c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7fd ff87 	bl	8010d8a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e7e:	330b      	adds	r3, #11
 8012e80:	2210      	movs	r2, #16
 8012e82:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2201      	movs	r2, #1
 8012e88:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d10e      	bne.n	8012eb0 <f_mkdir+0x200>
					res = sync_fs(fs);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7fd fa51 	bl	801033c <sync_fs>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012ea0:	e006      	b.n	8012eb0 <f_mkdir+0x200>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012ea2:	f107 0310 	add.w	r3, r7, #16
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7fd fc67 	bl	801077e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012eb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3760      	adds	r7, #96	; 0x60
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	46c40000 	.word	0x46c40000

08012ec0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b087      	sub	sp, #28
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	4613      	mov	r3, r2
 8012ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012ed6:	4b1f      	ldr	r3, [pc, #124]	; (8012f54 <FATFS_LinkDriverEx+0x94>)
 8012ed8:	7a5b      	ldrb	r3, [r3, #9]
 8012eda:	b2db      	uxtb	r3, r3
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d131      	bne.n	8012f44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012ee0:	4b1c      	ldr	r3, [pc, #112]	; (8012f54 <FATFS_LinkDriverEx+0x94>)
 8012ee2:	7a5b      	ldrb	r3, [r3, #9]
 8012ee4:	b2db      	uxtb	r3, r3
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	4b1a      	ldr	r3, [pc, #104]	; (8012f54 <FATFS_LinkDriverEx+0x94>)
 8012eea:	2100      	movs	r1, #0
 8012eec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012eee:	4b19      	ldr	r3, [pc, #100]	; (8012f54 <FATFS_LinkDriverEx+0x94>)
 8012ef0:	7a5b      	ldrb	r3, [r3, #9]
 8012ef2:	b2db      	uxtb	r3, r3
 8012ef4:	4a17      	ldr	r2, [pc, #92]	; (8012f54 <FATFS_LinkDriverEx+0x94>)
 8012ef6:	009b      	lsls	r3, r3, #2
 8012ef8:	4413      	add	r3, r2
 8012efa:	68fa      	ldr	r2, [r7, #12]
 8012efc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012efe:	4b15      	ldr	r3, [pc, #84]	; (8012f54 <FATFS_LinkDriverEx+0x94>)
 8012f00:	7a5b      	ldrb	r3, [r3, #9]
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	461a      	mov	r2, r3
 8012f06:	4b13      	ldr	r3, [pc, #76]	; (8012f54 <FATFS_LinkDriverEx+0x94>)
 8012f08:	4413      	add	r3, r2
 8012f0a:	79fa      	ldrb	r2, [r7, #7]
 8012f0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012f0e:	4b11      	ldr	r3, [pc, #68]	; (8012f54 <FATFS_LinkDriverEx+0x94>)
 8012f10:	7a5b      	ldrb	r3, [r3, #9]
 8012f12:	b2db      	uxtb	r3, r3
 8012f14:	1c5a      	adds	r2, r3, #1
 8012f16:	b2d1      	uxtb	r1, r2
 8012f18:	4a0e      	ldr	r2, [pc, #56]	; (8012f54 <FATFS_LinkDriverEx+0x94>)
 8012f1a:	7251      	strb	r1, [r2, #9]
 8012f1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012f1e:	7dbb      	ldrb	r3, [r7, #22]
 8012f20:	3330      	adds	r3, #48	; 0x30
 8012f22:	b2da      	uxtb	r2, r3
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	223a      	movs	r2, #58	; 0x3a
 8012f2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	3302      	adds	r3, #2
 8012f34:	222f      	movs	r2, #47	; 0x2f
 8012f36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	3303      	adds	r3, #3
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012f40:	2300      	movs	r3, #0
 8012f42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	371c      	adds	r7, #28
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr
 8012f52:	bf00      	nop
 8012f54:	200007d8 	.word	0x200007d8

08012f58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012f62:	2200      	movs	r2, #0
 8012f64:	6839      	ldr	r1, [r7, #0]
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f7ff ffaa 	bl	8012ec0 <FATFS_LinkDriverEx>
 8012f6c:	4603      	mov	r3, r0
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
	...

08012f78 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012f78:	b480      	push	{r7}
 8012f7a:	b085      	sub	sp, #20
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	4603      	mov	r3, r0
 8012f80:	6039      	str	r1, [r7, #0]
 8012f82:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012f84:	88fb      	ldrh	r3, [r7, #6]
 8012f86:	2b7f      	cmp	r3, #127	; 0x7f
 8012f88:	d802      	bhi.n	8012f90 <ff_convert+0x18>
		c = chr;
 8012f8a:	88fb      	ldrh	r3, [r7, #6]
 8012f8c:	81fb      	strh	r3, [r7, #14]
 8012f8e:	e025      	b.n	8012fdc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d00b      	beq.n	8012fae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012f96:	88fb      	ldrh	r3, [r7, #6]
 8012f98:	2bff      	cmp	r3, #255	; 0xff
 8012f9a:	d805      	bhi.n	8012fa8 <ff_convert+0x30>
 8012f9c:	88fb      	ldrh	r3, [r7, #6]
 8012f9e:	3b80      	subs	r3, #128	; 0x80
 8012fa0:	4a12      	ldr	r2, [pc, #72]	; (8012fec <ff_convert+0x74>)
 8012fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fa6:	e000      	b.n	8012faa <ff_convert+0x32>
 8012fa8:	2300      	movs	r3, #0
 8012faa:	81fb      	strh	r3, [r7, #14]
 8012fac:	e016      	b.n	8012fdc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012fae:	2300      	movs	r3, #0
 8012fb0:	81fb      	strh	r3, [r7, #14]
 8012fb2:	e009      	b.n	8012fc8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012fb4:	89fb      	ldrh	r3, [r7, #14]
 8012fb6:	4a0d      	ldr	r2, [pc, #52]	; (8012fec <ff_convert+0x74>)
 8012fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fbc:	88fa      	ldrh	r2, [r7, #6]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d006      	beq.n	8012fd0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012fc2:	89fb      	ldrh	r3, [r7, #14]
 8012fc4:	3301      	adds	r3, #1
 8012fc6:	81fb      	strh	r3, [r7, #14]
 8012fc8:	89fb      	ldrh	r3, [r7, #14]
 8012fca:	2b7f      	cmp	r3, #127	; 0x7f
 8012fcc:	d9f2      	bls.n	8012fb4 <ff_convert+0x3c>
 8012fce:	e000      	b.n	8012fd2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012fd0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012fd2:	89fb      	ldrh	r3, [r7, #14]
 8012fd4:	3380      	adds	r3, #128	; 0x80
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012fdc:	89fb      	ldrh	r3, [r7, #14]
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3714      	adds	r7, #20
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop
 8012fec:	08019de0 	.word	0x08019de0

08012ff0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b087      	sub	sp, #28
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012ffa:	88fb      	ldrh	r3, [r7, #6]
 8012ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013000:	d201      	bcs.n	8013006 <ff_wtoupper+0x16>
 8013002:	4b3e      	ldr	r3, [pc, #248]	; (80130fc <ff_wtoupper+0x10c>)
 8013004:	e000      	b.n	8013008 <ff_wtoupper+0x18>
 8013006:	4b3e      	ldr	r3, [pc, #248]	; (8013100 <ff_wtoupper+0x110>)
 8013008:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	1c9a      	adds	r2, r3, #2
 801300e:	617a      	str	r2, [r7, #20]
 8013010:	881b      	ldrh	r3, [r3, #0]
 8013012:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8013014:	8a7b      	ldrh	r3, [r7, #18]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d068      	beq.n	80130ec <ff_wtoupper+0xfc>
 801301a:	88fa      	ldrh	r2, [r7, #6]
 801301c:	8a7b      	ldrh	r3, [r7, #18]
 801301e:	429a      	cmp	r2, r3
 8013020:	d364      	bcc.n	80130ec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	1c9a      	adds	r2, r3, #2
 8013026:	617a      	str	r2, [r7, #20]
 8013028:	881b      	ldrh	r3, [r3, #0]
 801302a:	823b      	strh	r3, [r7, #16]
 801302c:	8a3b      	ldrh	r3, [r7, #16]
 801302e:	0a1b      	lsrs	r3, r3, #8
 8013030:	81fb      	strh	r3, [r7, #14]
 8013032:	8a3b      	ldrh	r3, [r7, #16]
 8013034:	b2db      	uxtb	r3, r3
 8013036:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8013038:	88fa      	ldrh	r2, [r7, #6]
 801303a:	8a79      	ldrh	r1, [r7, #18]
 801303c:	8a3b      	ldrh	r3, [r7, #16]
 801303e:	440b      	add	r3, r1
 8013040:	429a      	cmp	r2, r3
 8013042:	da49      	bge.n	80130d8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8013044:	89fb      	ldrh	r3, [r7, #14]
 8013046:	2b08      	cmp	r3, #8
 8013048:	d84f      	bhi.n	80130ea <ff_wtoupper+0xfa>
 801304a:	a201      	add	r2, pc, #4	; (adr r2, 8013050 <ff_wtoupper+0x60>)
 801304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013050:	08013075 	.word	0x08013075
 8013054:	08013087 	.word	0x08013087
 8013058:	0801309d 	.word	0x0801309d
 801305c:	080130a5 	.word	0x080130a5
 8013060:	080130ad 	.word	0x080130ad
 8013064:	080130b5 	.word	0x080130b5
 8013068:	080130bd 	.word	0x080130bd
 801306c:	080130c5 	.word	0x080130c5
 8013070:	080130cd 	.word	0x080130cd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013074:	88fa      	ldrh	r2, [r7, #6]
 8013076:	8a7b      	ldrh	r3, [r7, #18]
 8013078:	1ad3      	subs	r3, r2, r3
 801307a:	005b      	lsls	r3, r3, #1
 801307c:	697a      	ldr	r2, [r7, #20]
 801307e:	4413      	add	r3, r2
 8013080:	881b      	ldrh	r3, [r3, #0]
 8013082:	80fb      	strh	r3, [r7, #6]
 8013084:	e027      	b.n	80130d6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8013086:	88fa      	ldrh	r2, [r7, #6]
 8013088:	8a7b      	ldrh	r3, [r7, #18]
 801308a:	1ad3      	subs	r3, r2, r3
 801308c:	b29b      	uxth	r3, r3
 801308e:	f003 0301 	and.w	r3, r3, #1
 8013092:	b29b      	uxth	r3, r3
 8013094:	88fa      	ldrh	r2, [r7, #6]
 8013096:	1ad3      	subs	r3, r2, r3
 8013098:	80fb      	strh	r3, [r7, #6]
 801309a:	e01c      	b.n	80130d6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801309c:	88fb      	ldrh	r3, [r7, #6]
 801309e:	3b10      	subs	r3, #16
 80130a0:	80fb      	strh	r3, [r7, #6]
 80130a2:	e018      	b.n	80130d6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80130a4:	88fb      	ldrh	r3, [r7, #6]
 80130a6:	3b20      	subs	r3, #32
 80130a8:	80fb      	strh	r3, [r7, #6]
 80130aa:	e014      	b.n	80130d6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80130ac:	88fb      	ldrh	r3, [r7, #6]
 80130ae:	3b30      	subs	r3, #48	; 0x30
 80130b0:	80fb      	strh	r3, [r7, #6]
 80130b2:	e010      	b.n	80130d6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80130b4:	88fb      	ldrh	r3, [r7, #6]
 80130b6:	3b1a      	subs	r3, #26
 80130b8:	80fb      	strh	r3, [r7, #6]
 80130ba:	e00c      	b.n	80130d6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80130bc:	88fb      	ldrh	r3, [r7, #6]
 80130be:	3308      	adds	r3, #8
 80130c0:	80fb      	strh	r3, [r7, #6]
 80130c2:	e008      	b.n	80130d6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80130c4:	88fb      	ldrh	r3, [r7, #6]
 80130c6:	3b50      	subs	r3, #80	; 0x50
 80130c8:	80fb      	strh	r3, [r7, #6]
 80130ca:	e004      	b.n	80130d6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80130cc:	88fb      	ldrh	r3, [r7, #6]
 80130ce:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80130d2:	80fb      	strh	r3, [r7, #6]
 80130d4:	bf00      	nop
			}
			break;
 80130d6:	e008      	b.n	80130ea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80130d8:	89fb      	ldrh	r3, [r7, #14]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d195      	bne.n	801300a <ff_wtoupper+0x1a>
 80130de:	8a3b      	ldrh	r3, [r7, #16]
 80130e0:	005b      	lsls	r3, r3, #1
 80130e2:	697a      	ldr	r2, [r7, #20]
 80130e4:	4413      	add	r3, r2
 80130e6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80130e8:	e78f      	b.n	801300a <ff_wtoupper+0x1a>
			break;
 80130ea:	bf00      	nop
	}

	return chr;
 80130ec:	88fb      	ldrh	r3, [r7, #6]
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	371c      	adds	r7, #28
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	08019ee0 	.word	0x08019ee0
 8013100:	0801a0d4 	.word	0x0801a0d4

08013104 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013108:	2200      	movs	r2, #0
 801310a:	4912      	ldr	r1, [pc, #72]	; (8013154 <MX_USB_DEVICE_Init+0x50>)
 801310c:	4812      	ldr	r0, [pc, #72]	; (8013158 <MX_USB_DEVICE_Init+0x54>)
 801310e:	f7fb fc2f 	bl	800e970 <USBD_Init>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d001      	beq.n	801311c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013118:	f7f0 fe0e 	bl	8003d38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801311c:	490f      	ldr	r1, [pc, #60]	; (801315c <MX_USB_DEVICE_Init+0x58>)
 801311e:	480e      	ldr	r0, [pc, #56]	; (8013158 <MX_USB_DEVICE_Init+0x54>)
 8013120:	f7fb fc56 	bl	800e9d0 <USBD_RegisterClass>
 8013124:	4603      	mov	r3, r0
 8013126:	2b00      	cmp	r3, #0
 8013128:	d001      	beq.n	801312e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801312a:	f7f0 fe05 	bl	8003d38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801312e:	490c      	ldr	r1, [pc, #48]	; (8013160 <MX_USB_DEVICE_Init+0x5c>)
 8013130:	4809      	ldr	r0, [pc, #36]	; (8013158 <MX_USB_DEVICE_Init+0x54>)
 8013132:	f7fb fb77 	bl	800e824 <USBD_CDC_RegisterInterface>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d001      	beq.n	8013140 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801313c:	f7f0 fdfc 	bl	8003d38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013140:	4805      	ldr	r0, [pc, #20]	; (8013158 <MX_USB_DEVICE_Init+0x54>)
 8013142:	f7fb fc6c 	bl	800ea1e <USBD_Start>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d001      	beq.n	8013150 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801314c:	f7f0 fdf4 	bl	8003d38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013150:	bf00      	nop
 8013152:	bd80      	pop	{r7, pc}
 8013154:	20000130 	.word	0x20000130
 8013158:	20001c54 	.word	0x20001c54
 801315c:	20000018 	.word	0x20000018
 8013160:	2000011c 	.word	0x2000011c

08013164 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013168:	2200      	movs	r2, #0
 801316a:	4905      	ldr	r1, [pc, #20]	; (8013180 <CDC_Init_FS+0x1c>)
 801316c:	4805      	ldr	r0, [pc, #20]	; (8013184 <CDC_Init_FS+0x20>)
 801316e:	f7fb fb6e 	bl	800e84e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013172:	4905      	ldr	r1, [pc, #20]	; (8013188 <CDC_Init_FS+0x24>)
 8013174:	4803      	ldr	r0, [pc, #12]	; (8013184 <CDC_Init_FS+0x20>)
 8013176:	f7fb fb88 	bl	800e88a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801317a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801317c:	4618      	mov	r0, r3
 801317e:	bd80      	pop	{r7, pc}
 8013180:	20002724 	.word	0x20002724
 8013184:	20001c54 	.word	0x20001c54
 8013188:	20001f24 	.word	0x20001f24

0801318c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801318c:	b480      	push	{r7}
 801318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013190:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013192:	4618      	mov	r0, r3
 8013194:	46bd      	mov	sp, r7
 8013196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319a:	4770      	bx	lr

0801319c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	4603      	mov	r3, r0
 80131a4:	6039      	str	r1, [r7, #0]
 80131a6:	71fb      	strb	r3, [r7, #7]
 80131a8:	4613      	mov	r3, r2
 80131aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80131ac:	79fb      	ldrb	r3, [r7, #7]
 80131ae:	2b23      	cmp	r3, #35	; 0x23
 80131b0:	d84a      	bhi.n	8013248 <CDC_Control_FS+0xac>
 80131b2:	a201      	add	r2, pc, #4	; (adr r2, 80131b8 <CDC_Control_FS+0x1c>)
 80131b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b8:	08013249 	.word	0x08013249
 80131bc:	08013249 	.word	0x08013249
 80131c0:	08013249 	.word	0x08013249
 80131c4:	08013249 	.word	0x08013249
 80131c8:	08013249 	.word	0x08013249
 80131cc:	08013249 	.word	0x08013249
 80131d0:	08013249 	.word	0x08013249
 80131d4:	08013249 	.word	0x08013249
 80131d8:	08013249 	.word	0x08013249
 80131dc:	08013249 	.word	0x08013249
 80131e0:	08013249 	.word	0x08013249
 80131e4:	08013249 	.word	0x08013249
 80131e8:	08013249 	.word	0x08013249
 80131ec:	08013249 	.word	0x08013249
 80131f0:	08013249 	.word	0x08013249
 80131f4:	08013249 	.word	0x08013249
 80131f8:	08013249 	.word	0x08013249
 80131fc:	08013249 	.word	0x08013249
 8013200:	08013249 	.word	0x08013249
 8013204:	08013249 	.word	0x08013249
 8013208:	08013249 	.word	0x08013249
 801320c:	08013249 	.word	0x08013249
 8013210:	08013249 	.word	0x08013249
 8013214:	08013249 	.word	0x08013249
 8013218:	08013249 	.word	0x08013249
 801321c:	08013249 	.word	0x08013249
 8013220:	08013249 	.word	0x08013249
 8013224:	08013249 	.word	0x08013249
 8013228:	08013249 	.word	0x08013249
 801322c:	08013249 	.word	0x08013249
 8013230:	08013249 	.word	0x08013249
 8013234:	08013249 	.word	0x08013249
 8013238:	08013249 	.word	0x08013249
 801323c:	08013249 	.word	0x08013249
 8013240:	08013249 	.word	0x08013249
 8013244:	08013249 	.word	0x08013249
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013248:	bf00      	nop
  }

  return (USBD_OK);
 801324a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801324c:	4618      	mov	r0, r3
 801324e:	370c      	adds	r7, #12
 8013250:	46bd      	mov	sp, r7
 8013252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013256:	4770      	bx	lr

08013258 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013262:	6879      	ldr	r1, [r7, #4]
 8013264:	4805      	ldr	r0, [pc, #20]	; (801327c <CDC_Receive_FS+0x24>)
 8013266:	f7fb fb10 	bl	800e88a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801326a:	4804      	ldr	r0, [pc, #16]	; (801327c <CDC_Receive_FS+0x24>)
 801326c:	f7fb fb56 	bl	800e91c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013270:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013272:	4618      	mov	r0, r3
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	20001c54 	.word	0x20001c54

08013280 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b084      	sub	sp, #16
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	460b      	mov	r3, r1
 801328a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801328c:	2300      	movs	r3, #0
 801328e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013290:	4b0d      	ldr	r3, [pc, #52]	; (80132c8 <CDC_Transmit_FS+0x48>)
 8013292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013296:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d001      	beq.n	80132a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80132a2:	2301      	movs	r3, #1
 80132a4:	e00b      	b.n	80132be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80132a6:	887b      	ldrh	r3, [r7, #2]
 80132a8:	461a      	mov	r2, r3
 80132aa:	6879      	ldr	r1, [r7, #4]
 80132ac:	4806      	ldr	r0, [pc, #24]	; (80132c8 <CDC_Transmit_FS+0x48>)
 80132ae:	f7fb face 	bl	800e84e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80132b2:	4805      	ldr	r0, [pc, #20]	; (80132c8 <CDC_Transmit_FS+0x48>)
 80132b4:	f7fb fb02 	bl	800e8bc <USBD_CDC_TransmitPacket>
 80132b8:	4603      	mov	r3, r0
 80132ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80132bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3710      	adds	r7, #16
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	20001c54 	.word	0x20001c54

080132cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80132cc:	b480      	push	{r7}
 80132ce:	b087      	sub	sp, #28
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	4613      	mov	r3, r2
 80132d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80132da:	2300      	movs	r3, #0
 80132dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80132de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	371c      	adds	r7, #28
 80132e6:	46bd      	mov	sp, r7
 80132e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ec:	4770      	bx	lr
	...

080132f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80132f0:	b480      	push	{r7}
 80132f2:	b083      	sub	sp, #12
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	4603      	mov	r3, r0
 80132f8:	6039      	str	r1, [r7, #0]
 80132fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	2212      	movs	r2, #18
 8013300:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013302:	4b03      	ldr	r3, [pc, #12]	; (8013310 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013304:	4618      	mov	r0, r3
 8013306:	370c      	adds	r7, #12
 8013308:	46bd      	mov	sp, r7
 801330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330e:	4770      	bx	lr
 8013310:	2000014c 	.word	0x2000014c

08013314 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013314:	b480      	push	{r7}
 8013316:	b083      	sub	sp, #12
 8013318:	af00      	add	r7, sp, #0
 801331a:	4603      	mov	r3, r0
 801331c:	6039      	str	r1, [r7, #0]
 801331e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	2204      	movs	r2, #4
 8013324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013326:	4b03      	ldr	r3, [pc, #12]	; (8013334 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013328:	4618      	mov	r0, r3
 801332a:	370c      	adds	r7, #12
 801332c:	46bd      	mov	sp, r7
 801332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013332:	4770      	bx	lr
 8013334:	20000160 	.word	0x20000160

08013338 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	4603      	mov	r3, r0
 8013340:	6039      	str	r1, [r7, #0]
 8013342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013344:	79fb      	ldrb	r3, [r7, #7]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d105      	bne.n	8013356 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801334a:	683a      	ldr	r2, [r7, #0]
 801334c:	4907      	ldr	r1, [pc, #28]	; (801336c <USBD_FS_ProductStrDescriptor+0x34>)
 801334e:	4808      	ldr	r0, [pc, #32]	; (8013370 <USBD_FS_ProductStrDescriptor+0x38>)
 8013350:	f7fc fb97 	bl	800fa82 <USBD_GetString>
 8013354:	e004      	b.n	8013360 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013356:	683a      	ldr	r2, [r7, #0]
 8013358:	4904      	ldr	r1, [pc, #16]	; (801336c <USBD_FS_ProductStrDescriptor+0x34>)
 801335a:	4805      	ldr	r0, [pc, #20]	; (8013370 <USBD_FS_ProductStrDescriptor+0x38>)
 801335c:	f7fc fb91 	bl	800fa82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013360:	4b02      	ldr	r3, [pc, #8]	; (801336c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013362:	4618      	mov	r0, r3
 8013364:	3708      	adds	r7, #8
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
 801336a:	bf00      	nop
 801336c:	20002f24 	.word	0x20002f24
 8013370:	08019cd0 	.word	0x08019cd0

08013374 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	4603      	mov	r3, r0
 801337c:	6039      	str	r1, [r7, #0]
 801337e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013380:	683a      	ldr	r2, [r7, #0]
 8013382:	4904      	ldr	r1, [pc, #16]	; (8013394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013384:	4804      	ldr	r0, [pc, #16]	; (8013398 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013386:	f7fc fb7c 	bl	800fa82 <USBD_GetString>
  return USBD_StrDesc;
 801338a:	4b02      	ldr	r3, [pc, #8]	; (8013394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801338c:	4618      	mov	r0, r3
 801338e:	3708      	adds	r7, #8
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	20002f24 	.word	0x20002f24
 8013398:	08019ce0 	.word	0x08019ce0

0801339c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	4603      	mov	r3, r0
 80133a4:	6039      	str	r1, [r7, #0]
 80133a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	221a      	movs	r2, #26
 80133ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80133ae:	f000 f843 	bl	8013438 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80133b2:	4b02      	ldr	r3, [pc, #8]	; (80133bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	20000164 	.word	0x20000164

080133c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	4603      	mov	r3, r0
 80133c8:	6039      	str	r1, [r7, #0]
 80133ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80133cc:	79fb      	ldrb	r3, [r7, #7]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d105      	bne.n	80133de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80133d2:	683a      	ldr	r2, [r7, #0]
 80133d4:	4907      	ldr	r1, [pc, #28]	; (80133f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80133d6:	4808      	ldr	r0, [pc, #32]	; (80133f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80133d8:	f7fc fb53 	bl	800fa82 <USBD_GetString>
 80133dc:	e004      	b.n	80133e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80133de:	683a      	ldr	r2, [r7, #0]
 80133e0:	4904      	ldr	r1, [pc, #16]	; (80133f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80133e2:	4805      	ldr	r0, [pc, #20]	; (80133f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80133e4:	f7fc fb4d 	bl	800fa82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80133e8:	4b02      	ldr	r3, [pc, #8]	; (80133f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3708      	adds	r7, #8
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	20002f24 	.word	0x20002f24
 80133f8:	08019d00 	.word	0x08019d00

080133fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0
 8013402:	4603      	mov	r3, r0
 8013404:	6039      	str	r1, [r7, #0]
 8013406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013408:	79fb      	ldrb	r3, [r7, #7]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d105      	bne.n	801341a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801340e:	683a      	ldr	r2, [r7, #0]
 8013410:	4907      	ldr	r1, [pc, #28]	; (8013430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013412:	4808      	ldr	r0, [pc, #32]	; (8013434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013414:	f7fc fb35 	bl	800fa82 <USBD_GetString>
 8013418:	e004      	b.n	8013424 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801341a:	683a      	ldr	r2, [r7, #0]
 801341c:	4904      	ldr	r1, [pc, #16]	; (8013430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801341e:	4805      	ldr	r0, [pc, #20]	; (8013434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013420:	f7fc fb2f 	bl	800fa82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013424:	4b02      	ldr	r3, [pc, #8]	; (8013430 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013426:	4618      	mov	r0, r3
 8013428:	3708      	adds	r7, #8
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
 801342e:	bf00      	nop
 8013430:	20002f24 	.word	0x20002f24
 8013434:	08019d0c 	.word	0x08019d0c

08013438 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b084      	sub	sp, #16
 801343c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801343e:	4b0f      	ldr	r3, [pc, #60]	; (801347c <Get_SerialNum+0x44>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013444:	4b0e      	ldr	r3, [pc, #56]	; (8013480 <Get_SerialNum+0x48>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801344a:	4b0e      	ldr	r3, [pc, #56]	; (8013484 <Get_SerialNum+0x4c>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013450:	68fa      	ldr	r2, [r7, #12]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4413      	add	r3, r2
 8013456:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d009      	beq.n	8013472 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801345e:	2208      	movs	r2, #8
 8013460:	4909      	ldr	r1, [pc, #36]	; (8013488 <Get_SerialNum+0x50>)
 8013462:	68f8      	ldr	r0, [r7, #12]
 8013464:	f000 f814 	bl	8013490 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013468:	2204      	movs	r2, #4
 801346a:	4908      	ldr	r1, [pc, #32]	; (801348c <Get_SerialNum+0x54>)
 801346c:	68b8      	ldr	r0, [r7, #8]
 801346e:	f000 f80f 	bl	8013490 <IntToUnicode>
  }
}
 8013472:	bf00      	nop
 8013474:	3710      	adds	r7, #16
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	1fff7a10 	.word	0x1fff7a10
 8013480:	1fff7a14 	.word	0x1fff7a14
 8013484:	1fff7a18 	.word	0x1fff7a18
 8013488:	20000166 	.word	0x20000166
 801348c:	20000176 	.word	0x20000176

08013490 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013490:	b480      	push	{r7}
 8013492:	b087      	sub	sp, #28
 8013494:	af00      	add	r7, sp, #0
 8013496:	60f8      	str	r0, [r7, #12]
 8013498:	60b9      	str	r1, [r7, #8]
 801349a:	4613      	mov	r3, r2
 801349c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801349e:	2300      	movs	r3, #0
 80134a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80134a2:	2300      	movs	r3, #0
 80134a4:	75fb      	strb	r3, [r7, #23]
 80134a6:	e027      	b.n	80134f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	0f1b      	lsrs	r3, r3, #28
 80134ac:	2b09      	cmp	r3, #9
 80134ae:	d80b      	bhi.n	80134c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	0f1b      	lsrs	r3, r3, #28
 80134b4:	b2da      	uxtb	r2, r3
 80134b6:	7dfb      	ldrb	r3, [r7, #23]
 80134b8:	005b      	lsls	r3, r3, #1
 80134ba:	4619      	mov	r1, r3
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	440b      	add	r3, r1
 80134c0:	3230      	adds	r2, #48	; 0x30
 80134c2:	b2d2      	uxtb	r2, r2
 80134c4:	701a      	strb	r2, [r3, #0]
 80134c6:	e00a      	b.n	80134de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	0f1b      	lsrs	r3, r3, #28
 80134cc:	b2da      	uxtb	r2, r3
 80134ce:	7dfb      	ldrb	r3, [r7, #23]
 80134d0:	005b      	lsls	r3, r3, #1
 80134d2:	4619      	mov	r1, r3
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	440b      	add	r3, r1
 80134d8:	3237      	adds	r2, #55	; 0x37
 80134da:	b2d2      	uxtb	r2, r2
 80134dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	011b      	lsls	r3, r3, #4
 80134e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80134e4:	7dfb      	ldrb	r3, [r7, #23]
 80134e6:	005b      	lsls	r3, r3, #1
 80134e8:	3301      	adds	r3, #1
 80134ea:	68ba      	ldr	r2, [r7, #8]
 80134ec:	4413      	add	r3, r2
 80134ee:	2200      	movs	r2, #0
 80134f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80134f2:	7dfb      	ldrb	r3, [r7, #23]
 80134f4:	3301      	adds	r3, #1
 80134f6:	75fb      	strb	r3, [r7, #23]
 80134f8:	7dfa      	ldrb	r2, [r7, #23]
 80134fa:	79fb      	ldrb	r3, [r7, #7]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d3d3      	bcc.n	80134a8 <IntToUnicode+0x18>
  }
}
 8013500:	bf00      	nop
 8013502:	bf00      	nop
 8013504:	371c      	adds	r7, #28
 8013506:	46bd      	mov	sp, r7
 8013508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350c:	4770      	bx	lr
	...

08013510 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b08a      	sub	sp, #40	; 0x28
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013518:	f107 0314 	add.w	r3, r7, #20
 801351c:	2200      	movs	r2, #0
 801351e:	601a      	str	r2, [r3, #0]
 8013520:	605a      	str	r2, [r3, #4]
 8013522:	609a      	str	r2, [r3, #8]
 8013524:	60da      	str	r2, [r3, #12]
 8013526:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013530:	d13a      	bne.n	80135a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013532:	2300      	movs	r3, #0
 8013534:	613b      	str	r3, [r7, #16]
 8013536:	4b1e      	ldr	r3, [pc, #120]	; (80135b0 <HAL_PCD_MspInit+0xa0>)
 8013538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801353a:	4a1d      	ldr	r2, [pc, #116]	; (80135b0 <HAL_PCD_MspInit+0xa0>)
 801353c:	f043 0301 	orr.w	r3, r3, #1
 8013540:	6313      	str	r3, [r2, #48]	; 0x30
 8013542:	4b1b      	ldr	r3, [pc, #108]	; (80135b0 <HAL_PCD_MspInit+0xa0>)
 8013544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013546:	f003 0301 	and.w	r3, r3, #1
 801354a:	613b      	str	r3, [r7, #16]
 801354c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801354e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013554:	2302      	movs	r3, #2
 8013556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013558:	2300      	movs	r3, #0
 801355a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801355c:	2303      	movs	r3, #3
 801355e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013560:	230a      	movs	r3, #10
 8013562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013564:	f107 0314 	add.w	r3, r7, #20
 8013568:	4619      	mov	r1, r3
 801356a:	4812      	ldr	r0, [pc, #72]	; (80135b4 <HAL_PCD_MspInit+0xa4>)
 801356c:	f7f2 fba2 	bl	8005cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013570:	4b0f      	ldr	r3, [pc, #60]	; (80135b0 <HAL_PCD_MspInit+0xa0>)
 8013572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013574:	4a0e      	ldr	r2, [pc, #56]	; (80135b0 <HAL_PCD_MspInit+0xa0>)
 8013576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801357a:	6353      	str	r3, [r2, #52]	; 0x34
 801357c:	2300      	movs	r3, #0
 801357e:	60fb      	str	r3, [r7, #12]
 8013580:	4b0b      	ldr	r3, [pc, #44]	; (80135b0 <HAL_PCD_MspInit+0xa0>)
 8013582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013584:	4a0a      	ldr	r2, [pc, #40]	; (80135b0 <HAL_PCD_MspInit+0xa0>)
 8013586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801358a:	6453      	str	r3, [r2, #68]	; 0x44
 801358c:	4b08      	ldr	r3, [pc, #32]	; (80135b0 <HAL_PCD_MspInit+0xa0>)
 801358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013594:	60fb      	str	r3, [r7, #12]
 8013596:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013598:	2200      	movs	r2, #0
 801359a:	2100      	movs	r1, #0
 801359c:	2043      	movs	r0, #67	; 0x43
 801359e:	f7f1 ff44 	bl	800542a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80135a2:	2043      	movs	r0, #67	; 0x43
 80135a4:	f7f1 ff5d 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80135a8:	bf00      	nop
 80135aa:	3728      	adds	r7, #40	; 0x28
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	40023800 	.word	0x40023800
 80135b4:	40020000 	.word	0x40020000

080135b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80135cc:	4619      	mov	r1, r3
 80135ce:	4610      	mov	r0, r2
 80135d0:	f7fb fa70 	bl	800eab4 <USBD_LL_SetupStage>
}
 80135d4:	bf00      	nop
 80135d6:	3708      	adds	r7, #8
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}

080135dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	460b      	mov	r3, r1
 80135e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80135ee:	78fa      	ldrb	r2, [r7, #3]
 80135f0:	6879      	ldr	r1, [r7, #4]
 80135f2:	4613      	mov	r3, r2
 80135f4:	00db      	lsls	r3, r3, #3
 80135f6:	1a9b      	subs	r3, r3, r2
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	440b      	add	r3, r1
 80135fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013600:	681a      	ldr	r2, [r3, #0]
 8013602:	78fb      	ldrb	r3, [r7, #3]
 8013604:	4619      	mov	r1, r3
 8013606:	f7fb faaa 	bl	800eb5e <USBD_LL_DataOutStage>
}
 801360a:	bf00      	nop
 801360c:	3708      	adds	r7, #8
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}

08013612 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013612:	b580      	push	{r7, lr}
 8013614:	b082      	sub	sp, #8
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	460b      	mov	r3, r1
 801361c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013624:	78fa      	ldrb	r2, [r7, #3]
 8013626:	6879      	ldr	r1, [r7, #4]
 8013628:	4613      	mov	r3, r2
 801362a:	00db      	lsls	r3, r3, #3
 801362c:	1a9b      	subs	r3, r3, r2
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	440b      	add	r3, r1
 8013632:	3348      	adds	r3, #72	; 0x48
 8013634:	681a      	ldr	r2, [r3, #0]
 8013636:	78fb      	ldrb	r3, [r7, #3]
 8013638:	4619      	mov	r1, r3
 801363a:	f7fb faf3 	bl	800ec24 <USBD_LL_DataInStage>
}
 801363e:	bf00      	nop
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013646:	b580      	push	{r7, lr}
 8013648:	b082      	sub	sp, #8
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013654:	4618      	mov	r0, r3
 8013656:	f7fb fc07 	bl	800ee68 <USBD_LL_SOF>
}
 801365a:	bf00      	nop
 801365c:	3708      	adds	r7, #8
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}

08013662 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013662:	b580      	push	{r7, lr}
 8013664:	b084      	sub	sp, #16
 8013666:	af00      	add	r7, sp, #0
 8013668:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801366a:	2301      	movs	r3, #1
 801366c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	68db      	ldr	r3, [r3, #12]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d102      	bne.n	801367c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013676:	2300      	movs	r3, #0
 8013678:	73fb      	strb	r3, [r7, #15]
 801367a:	e008      	b.n	801368e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	68db      	ldr	r3, [r3, #12]
 8013680:	2b02      	cmp	r3, #2
 8013682:	d102      	bne.n	801368a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013684:	2301      	movs	r3, #1
 8013686:	73fb      	strb	r3, [r7, #15]
 8013688:	e001      	b.n	801368e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801368a:	f7f0 fb55 	bl	8003d38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013694:	7bfa      	ldrb	r2, [r7, #15]
 8013696:	4611      	mov	r1, r2
 8013698:	4618      	mov	r0, r3
 801369a:	f7fb fba7 	bl	800edec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7fb fb53 	bl	800ed50 <USBD_LL_Reset>
}
 80136aa:	bf00      	nop
 80136ac:	3710      	adds	r7, #16
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
	...

080136b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b082      	sub	sp, #8
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7fb fba2 	bl	800ee0c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	6812      	ldr	r2, [r2, #0]
 80136d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80136da:	f043 0301 	orr.w	r3, r3, #1
 80136de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6a1b      	ldr	r3, [r3, #32]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d005      	beq.n	80136f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80136e8:	4b04      	ldr	r3, [pc, #16]	; (80136fc <HAL_PCD_SuspendCallback+0x48>)
 80136ea:	691b      	ldr	r3, [r3, #16]
 80136ec:	4a03      	ldr	r2, [pc, #12]	; (80136fc <HAL_PCD_SuspendCallback+0x48>)
 80136ee:	f043 0306 	orr.w	r3, r3, #6
 80136f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80136f4:	bf00      	nop
 80136f6:	3708      	adds	r7, #8
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	e000ed00 	.word	0xe000ed00

08013700 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801370e:	4618      	mov	r0, r3
 8013710:	f7fb fb92 	bl	800ee38 <USBD_LL_Resume>
}
 8013714:	bf00      	nop
 8013716:	3708      	adds	r7, #8
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	460b      	mov	r3, r1
 8013726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801372e:	78fa      	ldrb	r2, [r7, #3]
 8013730:	4611      	mov	r1, r2
 8013732:	4618      	mov	r0, r3
 8013734:	f7fb fbe0 	bl	800eef8 <USBD_LL_IsoOUTIncomplete>
}
 8013738:	bf00      	nop
 801373a:	3708      	adds	r7, #8
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b082      	sub	sp, #8
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	460b      	mov	r3, r1
 801374a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013752:	78fa      	ldrb	r2, [r7, #3]
 8013754:	4611      	mov	r1, r2
 8013756:	4618      	mov	r0, r3
 8013758:	f7fb fba8 	bl	800eeac <USBD_LL_IsoINIncomplete>
}
 801375c:	bf00      	nop
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013772:	4618      	mov	r0, r3
 8013774:	f7fb fbe6 	bl	800ef44 <USBD_LL_DevConnected>
}
 8013778:	bf00      	nop
 801377a:	3708      	adds	r7, #8
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801378e:	4618      	mov	r0, r3
 8013790:	f7fb fbe3 	bl	800ef5a <USBD_LL_DevDisconnected>
}
 8013794:	bf00      	nop
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d13c      	bne.n	8013826 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80137ac:	4a20      	ldr	r2, [pc, #128]	; (8013830 <USBD_LL_Init+0x94>)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	4a1e      	ldr	r2, [pc, #120]	; (8013830 <USBD_LL_Init+0x94>)
 80137b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80137bc:	4b1c      	ldr	r3, [pc, #112]	; (8013830 <USBD_LL_Init+0x94>)
 80137be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80137c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80137c4:	4b1a      	ldr	r3, [pc, #104]	; (8013830 <USBD_LL_Init+0x94>)
 80137c6:	2204      	movs	r2, #4
 80137c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80137ca:	4b19      	ldr	r3, [pc, #100]	; (8013830 <USBD_LL_Init+0x94>)
 80137cc:	2202      	movs	r2, #2
 80137ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80137d0:	4b17      	ldr	r3, [pc, #92]	; (8013830 <USBD_LL_Init+0x94>)
 80137d2:	2200      	movs	r2, #0
 80137d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80137d6:	4b16      	ldr	r3, [pc, #88]	; (8013830 <USBD_LL_Init+0x94>)
 80137d8:	2202      	movs	r2, #2
 80137da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80137dc:	4b14      	ldr	r3, [pc, #80]	; (8013830 <USBD_LL_Init+0x94>)
 80137de:	2200      	movs	r2, #0
 80137e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80137e2:	4b13      	ldr	r3, [pc, #76]	; (8013830 <USBD_LL_Init+0x94>)
 80137e4:	2200      	movs	r2, #0
 80137e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80137e8:	4b11      	ldr	r3, [pc, #68]	; (8013830 <USBD_LL_Init+0x94>)
 80137ea:	2200      	movs	r2, #0
 80137ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80137ee:	4b10      	ldr	r3, [pc, #64]	; (8013830 <USBD_LL_Init+0x94>)
 80137f0:	2200      	movs	r2, #0
 80137f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80137f4:	4b0e      	ldr	r3, [pc, #56]	; (8013830 <USBD_LL_Init+0x94>)
 80137f6:	2200      	movs	r2, #0
 80137f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80137fa:	480d      	ldr	r0, [pc, #52]	; (8013830 <USBD_LL_Init+0x94>)
 80137fc:	f7f3 fcb8 	bl	8007170 <HAL_PCD_Init>
 8013800:	4603      	mov	r3, r0
 8013802:	2b00      	cmp	r3, #0
 8013804:	d001      	beq.n	801380a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013806:	f7f0 fa97 	bl	8003d38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801380a:	2180      	movs	r1, #128	; 0x80
 801380c:	4808      	ldr	r0, [pc, #32]	; (8013830 <USBD_LL_Init+0x94>)
 801380e:	f7f4 fe16 	bl	800843e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013812:	2240      	movs	r2, #64	; 0x40
 8013814:	2100      	movs	r1, #0
 8013816:	4806      	ldr	r0, [pc, #24]	; (8013830 <USBD_LL_Init+0x94>)
 8013818:	f7f4 fdca 	bl	80083b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801381c:	2280      	movs	r2, #128	; 0x80
 801381e:	2101      	movs	r1, #1
 8013820:	4803      	ldr	r0, [pc, #12]	; (8013830 <USBD_LL_Init+0x94>)
 8013822:	f7f4 fdc5 	bl	80083b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013826:	2300      	movs	r3, #0
}
 8013828:	4618      	mov	r0, r3
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}
 8013830:	20003124 	.word	0x20003124

08013834 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b084      	sub	sp, #16
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801383c:	2300      	movs	r3, #0
 801383e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013840:	2300      	movs	r3, #0
 8013842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801384a:	4618      	mov	r0, r3
 801384c:	f7f3 fdad 	bl	80073aa <HAL_PCD_Start>
 8013850:	4603      	mov	r3, r0
 8013852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013854:	7bfb      	ldrb	r3, [r7, #15]
 8013856:	4618      	mov	r0, r3
 8013858:	f000 f942 	bl	8013ae0 <USBD_Get_USB_Status>
 801385c:	4603      	mov	r3, r0
 801385e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013860:	7bbb      	ldrb	r3, [r7, #14]
}
 8013862:	4618      	mov	r0, r3
 8013864:	3710      	adds	r7, #16
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}

0801386a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801386a:	b580      	push	{r7, lr}
 801386c:	b084      	sub	sp, #16
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
 8013872:	4608      	mov	r0, r1
 8013874:	4611      	mov	r1, r2
 8013876:	461a      	mov	r2, r3
 8013878:	4603      	mov	r3, r0
 801387a:	70fb      	strb	r3, [r7, #3]
 801387c:	460b      	mov	r3, r1
 801387e:	70bb      	strb	r3, [r7, #2]
 8013880:	4613      	mov	r3, r2
 8013882:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013884:	2300      	movs	r3, #0
 8013886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013888:	2300      	movs	r3, #0
 801388a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013892:	78bb      	ldrb	r3, [r7, #2]
 8013894:	883a      	ldrh	r2, [r7, #0]
 8013896:	78f9      	ldrb	r1, [r7, #3]
 8013898:	f7f4 f991 	bl	8007bbe <HAL_PCD_EP_Open>
 801389c:	4603      	mov	r3, r0
 801389e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138a0:	7bfb      	ldrb	r3, [r7, #15]
 80138a2:	4618      	mov	r0, r3
 80138a4:	f000 f91c 	bl	8013ae0 <USBD_Get_USB_Status>
 80138a8:	4603      	mov	r3, r0
 80138aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3710      	adds	r7, #16
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}

080138b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80138b6:	b580      	push	{r7, lr}
 80138b8:	b084      	sub	sp, #16
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	6078      	str	r0, [r7, #4]
 80138be:	460b      	mov	r3, r1
 80138c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138c2:	2300      	movs	r3, #0
 80138c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138c6:	2300      	movs	r3, #0
 80138c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80138d0:	78fa      	ldrb	r2, [r7, #3]
 80138d2:	4611      	mov	r1, r2
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7f4 f9da 	bl	8007c8e <HAL_PCD_EP_Close>
 80138da:	4603      	mov	r3, r0
 80138dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138de:	7bfb      	ldrb	r3, [r7, #15]
 80138e0:	4618      	mov	r0, r3
 80138e2:	f000 f8fd 	bl	8013ae0 <USBD_Get_USB_Status>
 80138e6:	4603      	mov	r3, r0
 80138e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3710      	adds	r7, #16
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	460b      	mov	r3, r1
 80138fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013900:	2300      	movs	r3, #0
 8013902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013904:	2300      	movs	r3, #0
 8013906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801390e:	78fa      	ldrb	r2, [r7, #3]
 8013910:	4611      	mov	r1, r2
 8013912:	4618      	mov	r0, r3
 8013914:	f7f4 fab2 	bl	8007e7c <HAL_PCD_EP_SetStall>
 8013918:	4603      	mov	r3, r0
 801391a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801391c:	7bfb      	ldrb	r3, [r7, #15]
 801391e:	4618      	mov	r0, r3
 8013920:	f000 f8de 	bl	8013ae0 <USBD_Get_USB_Status>
 8013924:	4603      	mov	r3, r0
 8013926:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013928:	7bbb      	ldrb	r3, [r7, #14]
}
 801392a:	4618      	mov	r0, r3
 801392c:	3710      	adds	r7, #16
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}

08013932 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013932:	b580      	push	{r7, lr}
 8013934:	b084      	sub	sp, #16
 8013936:	af00      	add	r7, sp, #0
 8013938:	6078      	str	r0, [r7, #4]
 801393a:	460b      	mov	r3, r1
 801393c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801393e:	2300      	movs	r3, #0
 8013940:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013942:	2300      	movs	r3, #0
 8013944:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801394c:	78fa      	ldrb	r2, [r7, #3]
 801394e:	4611      	mov	r1, r2
 8013950:	4618      	mov	r0, r3
 8013952:	f7f4 faf7 	bl	8007f44 <HAL_PCD_EP_ClrStall>
 8013956:	4603      	mov	r3, r0
 8013958:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801395a:	7bfb      	ldrb	r3, [r7, #15]
 801395c:	4618      	mov	r0, r3
 801395e:	f000 f8bf 	bl	8013ae0 <USBD_Get_USB_Status>
 8013962:	4603      	mov	r3, r0
 8013964:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013966:	7bbb      	ldrb	r3, [r7, #14]
}
 8013968:	4618      	mov	r0, r3
 801396a:	3710      	adds	r7, #16
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}

08013970 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013970:	b480      	push	{r7}
 8013972:	b085      	sub	sp, #20
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	460b      	mov	r3, r1
 801397a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013982:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013988:	2b00      	cmp	r3, #0
 801398a:	da0b      	bge.n	80139a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801398c:	78fb      	ldrb	r3, [r7, #3]
 801398e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013992:	68f9      	ldr	r1, [r7, #12]
 8013994:	4613      	mov	r3, r2
 8013996:	00db      	lsls	r3, r3, #3
 8013998:	1a9b      	subs	r3, r3, r2
 801399a:	009b      	lsls	r3, r3, #2
 801399c:	440b      	add	r3, r1
 801399e:	333e      	adds	r3, #62	; 0x3e
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	e00b      	b.n	80139bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80139a4:	78fb      	ldrb	r3, [r7, #3]
 80139a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80139aa:	68f9      	ldr	r1, [r7, #12]
 80139ac:	4613      	mov	r3, r2
 80139ae:	00db      	lsls	r3, r3, #3
 80139b0:	1a9b      	subs	r3, r3, r2
 80139b2:	009b      	lsls	r3, r3, #2
 80139b4:	440b      	add	r3, r1
 80139b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80139ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80139bc:	4618      	mov	r0, r3
 80139be:	3714      	adds	r7, #20
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr

080139c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	460b      	mov	r3, r1
 80139d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139d4:	2300      	movs	r3, #0
 80139d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139d8:	2300      	movs	r3, #0
 80139da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80139e2:	78fa      	ldrb	r2, [r7, #3]
 80139e4:	4611      	mov	r1, r2
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7f4 f8c4 	bl	8007b74 <HAL_PCD_SetAddress>
 80139ec:	4603      	mov	r3, r0
 80139ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139f0:	7bfb      	ldrb	r3, [r7, #15]
 80139f2:	4618      	mov	r0, r3
 80139f4:	f000 f874 	bl	8013ae0 <USBD_Get_USB_Status>
 80139f8:	4603      	mov	r3, r0
 80139fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3710      	adds	r7, #16
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}

08013a06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013a06:	b580      	push	{r7, lr}
 8013a08:	b086      	sub	sp, #24
 8013a0a:	af00      	add	r7, sp, #0
 8013a0c:	60f8      	str	r0, [r7, #12]
 8013a0e:	607a      	str	r2, [r7, #4]
 8013a10:	603b      	str	r3, [r7, #0]
 8013a12:	460b      	mov	r3, r1
 8013a14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a16:	2300      	movs	r3, #0
 8013a18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013a24:	7af9      	ldrb	r1, [r7, #11]
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	687a      	ldr	r2, [r7, #4]
 8013a2a:	f7f4 f9dd 	bl	8007de8 <HAL_PCD_EP_Transmit>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a32:	7dfb      	ldrb	r3, [r7, #23]
 8013a34:	4618      	mov	r0, r3
 8013a36:	f000 f853 	bl	8013ae0 <USBD_Get_USB_Status>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013a3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3718      	adds	r7, #24
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b086      	sub	sp, #24
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	607a      	str	r2, [r7, #4]
 8013a52:	603b      	str	r3, [r7, #0]
 8013a54:	460b      	mov	r3, r1
 8013a56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013a66:	7af9      	ldrb	r1, [r7, #11]
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	687a      	ldr	r2, [r7, #4]
 8013a6c:	f7f4 f959 	bl	8007d22 <HAL_PCD_EP_Receive>
 8013a70:	4603      	mov	r3, r0
 8013a72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a74:	7dfb      	ldrb	r3, [r7, #23]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f000 f832 	bl	8013ae0 <USBD_Get_USB_Status>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013a80:	7dbb      	ldrb	r3, [r7, #22]
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3718      	adds	r7, #24
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}

08013a8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a8a:	b580      	push	{r7, lr}
 8013a8c:	b082      	sub	sp, #8
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	6078      	str	r0, [r7, #4]
 8013a92:	460b      	mov	r3, r1
 8013a94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013a9c:	78fa      	ldrb	r2, [r7, #3]
 8013a9e:	4611      	mov	r1, r2
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7f4 f989 	bl	8007db8 <HAL_PCD_EP_GetRxCount>
 8013aa6:	4603      	mov	r3, r0
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3708      	adds	r7, #8
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}

08013ab0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b083      	sub	sp, #12
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013ab8:	4b03      	ldr	r3, [pc, #12]	; (8013ac8 <USBD_static_malloc+0x18>)
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	370c      	adds	r7, #12
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac4:	4770      	bx	lr
 8013ac6:	bf00      	nop
 8013ac8:	200007e4 	.word	0x200007e4

08013acc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013acc:	b480      	push	{r7}
 8013ace:	b083      	sub	sp, #12
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]

}
 8013ad4:	bf00      	nop
 8013ad6:	370c      	adds	r7, #12
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ade:	4770      	bx	lr

08013ae0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	b085      	sub	sp, #20
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013aea:	2300      	movs	r3, #0
 8013aec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013aee:	79fb      	ldrb	r3, [r7, #7]
 8013af0:	2b03      	cmp	r3, #3
 8013af2:	d817      	bhi.n	8013b24 <USBD_Get_USB_Status+0x44>
 8013af4:	a201      	add	r2, pc, #4	; (adr r2, 8013afc <USBD_Get_USB_Status+0x1c>)
 8013af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013afa:	bf00      	nop
 8013afc:	08013b0d 	.word	0x08013b0d
 8013b00:	08013b13 	.word	0x08013b13
 8013b04:	08013b19 	.word	0x08013b19
 8013b08:	08013b1f 	.word	0x08013b1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8013b10:	e00b      	b.n	8013b2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013b12:	2303      	movs	r3, #3
 8013b14:	73fb      	strb	r3, [r7, #15]
    break;
 8013b16:	e008      	b.n	8013b2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8013b1c:	e005      	b.n	8013b2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013b1e:	2303      	movs	r3, #3
 8013b20:	73fb      	strb	r3, [r7, #15]
    break;
 8013b22:	e002      	b.n	8013b2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013b24:	2303      	movs	r3, #3
 8013b26:	73fb      	strb	r3, [r7, #15]
    break;
 8013b28:	bf00      	nop
  }
  return usb_status;
 8013b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3714      	adds	r7, #20
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr

08013b38 <__errno>:
 8013b38:	4b01      	ldr	r3, [pc, #4]	; (8013b40 <__errno+0x8>)
 8013b3a:	6818      	ldr	r0, [r3, #0]
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	20000180 	.word	0x20000180

08013b44 <__libc_init_array>:
 8013b44:	b570      	push	{r4, r5, r6, lr}
 8013b46:	4d0d      	ldr	r5, [pc, #52]	; (8013b7c <__libc_init_array+0x38>)
 8013b48:	4c0d      	ldr	r4, [pc, #52]	; (8013b80 <__libc_init_array+0x3c>)
 8013b4a:	1b64      	subs	r4, r4, r5
 8013b4c:	10a4      	asrs	r4, r4, #2
 8013b4e:	2600      	movs	r6, #0
 8013b50:	42a6      	cmp	r6, r4
 8013b52:	d109      	bne.n	8013b68 <__libc_init_array+0x24>
 8013b54:	4d0b      	ldr	r5, [pc, #44]	; (8013b84 <__libc_init_array+0x40>)
 8013b56:	4c0c      	ldr	r4, [pc, #48]	; (8013b88 <__libc_init_array+0x44>)
 8013b58:	f005 fdb4 	bl	80196c4 <_init>
 8013b5c:	1b64      	subs	r4, r4, r5
 8013b5e:	10a4      	asrs	r4, r4, #2
 8013b60:	2600      	movs	r6, #0
 8013b62:	42a6      	cmp	r6, r4
 8013b64:	d105      	bne.n	8013b72 <__libc_init_array+0x2e>
 8013b66:	bd70      	pop	{r4, r5, r6, pc}
 8013b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b6c:	4798      	blx	r3
 8013b6e:	3601      	adds	r6, #1
 8013b70:	e7ee      	b.n	8013b50 <__libc_init_array+0xc>
 8013b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b76:	4798      	blx	r3
 8013b78:	3601      	adds	r6, #1
 8013b7a:	e7f2      	b.n	8013b62 <__libc_init_array+0x1e>
 8013b7c:	0801a690 	.word	0x0801a690
 8013b80:	0801a690 	.word	0x0801a690
 8013b84:	0801a690 	.word	0x0801a690
 8013b88:	0801a694 	.word	0x0801a694

08013b8c <memcpy>:
 8013b8c:	440a      	add	r2, r1
 8013b8e:	4291      	cmp	r1, r2
 8013b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8013b94:	d100      	bne.n	8013b98 <memcpy+0xc>
 8013b96:	4770      	bx	lr
 8013b98:	b510      	push	{r4, lr}
 8013b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ba2:	4291      	cmp	r1, r2
 8013ba4:	d1f9      	bne.n	8013b9a <memcpy+0xe>
 8013ba6:	bd10      	pop	{r4, pc}

08013ba8 <memset>:
 8013ba8:	4402      	add	r2, r0
 8013baa:	4603      	mov	r3, r0
 8013bac:	4293      	cmp	r3, r2
 8013bae:	d100      	bne.n	8013bb2 <memset+0xa>
 8013bb0:	4770      	bx	lr
 8013bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8013bb6:	e7f9      	b.n	8013bac <memset+0x4>

08013bb8 <__cvt>:
 8013bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bbc:	ec55 4b10 	vmov	r4, r5, d0
 8013bc0:	2d00      	cmp	r5, #0
 8013bc2:	460e      	mov	r6, r1
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	462b      	mov	r3, r5
 8013bc8:	bfbb      	ittet	lt
 8013bca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013bce:	461d      	movlt	r5, r3
 8013bd0:	2300      	movge	r3, #0
 8013bd2:	232d      	movlt	r3, #45	; 0x2d
 8013bd4:	700b      	strb	r3, [r1, #0]
 8013bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013bdc:	4691      	mov	r9, r2
 8013bde:	f023 0820 	bic.w	r8, r3, #32
 8013be2:	bfbc      	itt	lt
 8013be4:	4622      	movlt	r2, r4
 8013be6:	4614      	movlt	r4, r2
 8013be8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013bec:	d005      	beq.n	8013bfa <__cvt+0x42>
 8013bee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013bf2:	d100      	bne.n	8013bf6 <__cvt+0x3e>
 8013bf4:	3601      	adds	r6, #1
 8013bf6:	2102      	movs	r1, #2
 8013bf8:	e000      	b.n	8013bfc <__cvt+0x44>
 8013bfa:	2103      	movs	r1, #3
 8013bfc:	ab03      	add	r3, sp, #12
 8013bfe:	9301      	str	r3, [sp, #4]
 8013c00:	ab02      	add	r3, sp, #8
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	ec45 4b10 	vmov	d0, r4, r5
 8013c08:	4653      	mov	r3, sl
 8013c0a:	4632      	mov	r2, r6
 8013c0c:	f001 ffcc 	bl	8015ba8 <_dtoa_r>
 8013c10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013c14:	4607      	mov	r7, r0
 8013c16:	d102      	bne.n	8013c1e <__cvt+0x66>
 8013c18:	f019 0f01 	tst.w	r9, #1
 8013c1c:	d022      	beq.n	8013c64 <__cvt+0xac>
 8013c1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013c22:	eb07 0906 	add.w	r9, r7, r6
 8013c26:	d110      	bne.n	8013c4a <__cvt+0x92>
 8013c28:	783b      	ldrb	r3, [r7, #0]
 8013c2a:	2b30      	cmp	r3, #48	; 0x30
 8013c2c:	d10a      	bne.n	8013c44 <__cvt+0x8c>
 8013c2e:	2200      	movs	r2, #0
 8013c30:	2300      	movs	r3, #0
 8013c32:	4620      	mov	r0, r4
 8013c34:	4629      	mov	r1, r5
 8013c36:	f7ec ff57 	bl	8000ae8 <__aeabi_dcmpeq>
 8013c3a:	b918      	cbnz	r0, 8013c44 <__cvt+0x8c>
 8013c3c:	f1c6 0601 	rsb	r6, r6, #1
 8013c40:	f8ca 6000 	str.w	r6, [sl]
 8013c44:	f8da 3000 	ldr.w	r3, [sl]
 8013c48:	4499      	add	r9, r3
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	4620      	mov	r0, r4
 8013c50:	4629      	mov	r1, r5
 8013c52:	f7ec ff49 	bl	8000ae8 <__aeabi_dcmpeq>
 8013c56:	b108      	cbz	r0, 8013c5c <__cvt+0xa4>
 8013c58:	f8cd 900c 	str.w	r9, [sp, #12]
 8013c5c:	2230      	movs	r2, #48	; 0x30
 8013c5e:	9b03      	ldr	r3, [sp, #12]
 8013c60:	454b      	cmp	r3, r9
 8013c62:	d307      	bcc.n	8013c74 <__cvt+0xbc>
 8013c64:	9b03      	ldr	r3, [sp, #12]
 8013c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c68:	1bdb      	subs	r3, r3, r7
 8013c6a:	4638      	mov	r0, r7
 8013c6c:	6013      	str	r3, [r2, #0]
 8013c6e:	b004      	add	sp, #16
 8013c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c74:	1c59      	adds	r1, r3, #1
 8013c76:	9103      	str	r1, [sp, #12]
 8013c78:	701a      	strb	r2, [r3, #0]
 8013c7a:	e7f0      	b.n	8013c5e <__cvt+0xa6>

08013c7c <__exponent>:
 8013c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2900      	cmp	r1, #0
 8013c82:	bfb8      	it	lt
 8013c84:	4249      	neglt	r1, r1
 8013c86:	f803 2b02 	strb.w	r2, [r3], #2
 8013c8a:	bfb4      	ite	lt
 8013c8c:	222d      	movlt	r2, #45	; 0x2d
 8013c8e:	222b      	movge	r2, #43	; 0x2b
 8013c90:	2909      	cmp	r1, #9
 8013c92:	7042      	strb	r2, [r0, #1]
 8013c94:	dd2a      	ble.n	8013cec <__exponent+0x70>
 8013c96:	f10d 0407 	add.w	r4, sp, #7
 8013c9a:	46a4      	mov	ip, r4
 8013c9c:	270a      	movs	r7, #10
 8013c9e:	46a6      	mov	lr, r4
 8013ca0:	460a      	mov	r2, r1
 8013ca2:	fb91 f6f7 	sdiv	r6, r1, r7
 8013ca6:	fb07 1516 	mls	r5, r7, r6, r1
 8013caa:	3530      	adds	r5, #48	; 0x30
 8013cac:	2a63      	cmp	r2, #99	; 0x63
 8013cae:	f104 34ff 	add.w	r4, r4, #4294967295
 8013cb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013cb6:	4631      	mov	r1, r6
 8013cb8:	dcf1      	bgt.n	8013c9e <__exponent+0x22>
 8013cba:	3130      	adds	r1, #48	; 0x30
 8013cbc:	f1ae 0502 	sub.w	r5, lr, #2
 8013cc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013cc4:	1c44      	adds	r4, r0, #1
 8013cc6:	4629      	mov	r1, r5
 8013cc8:	4561      	cmp	r1, ip
 8013cca:	d30a      	bcc.n	8013ce2 <__exponent+0x66>
 8013ccc:	f10d 0209 	add.w	r2, sp, #9
 8013cd0:	eba2 020e 	sub.w	r2, r2, lr
 8013cd4:	4565      	cmp	r5, ip
 8013cd6:	bf88      	it	hi
 8013cd8:	2200      	movhi	r2, #0
 8013cda:	4413      	add	r3, r2
 8013cdc:	1a18      	subs	r0, r3, r0
 8013cde:	b003      	add	sp, #12
 8013ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ce6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013cea:	e7ed      	b.n	8013cc8 <__exponent+0x4c>
 8013cec:	2330      	movs	r3, #48	; 0x30
 8013cee:	3130      	adds	r1, #48	; 0x30
 8013cf0:	7083      	strb	r3, [r0, #2]
 8013cf2:	70c1      	strb	r1, [r0, #3]
 8013cf4:	1d03      	adds	r3, r0, #4
 8013cf6:	e7f1      	b.n	8013cdc <__exponent+0x60>

08013cf8 <_printf_float>:
 8013cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cfc:	ed2d 8b02 	vpush	{d8}
 8013d00:	b08d      	sub	sp, #52	; 0x34
 8013d02:	460c      	mov	r4, r1
 8013d04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013d08:	4616      	mov	r6, r2
 8013d0a:	461f      	mov	r7, r3
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	f003 fa5d 	bl	80171cc <_localeconv_r>
 8013d12:	f8d0 a000 	ldr.w	sl, [r0]
 8013d16:	4650      	mov	r0, sl
 8013d18:	f7ec fa6a 	bl	80001f0 <strlen>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8013d20:	6823      	ldr	r3, [r4, #0]
 8013d22:	9305      	str	r3, [sp, #20]
 8013d24:	f8d8 3000 	ldr.w	r3, [r8]
 8013d28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013d2c:	3307      	adds	r3, #7
 8013d2e:	f023 0307 	bic.w	r3, r3, #7
 8013d32:	f103 0208 	add.w	r2, r3, #8
 8013d36:	f8c8 2000 	str.w	r2, [r8]
 8013d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013d42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013d46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013d4a:	9307      	str	r3, [sp, #28]
 8013d4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8013d50:	ee08 0a10 	vmov	s16, r0
 8013d54:	4b9f      	ldr	r3, [pc, #636]	; (8013fd4 <_printf_float+0x2dc>)
 8013d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d5e:	f7ec fef5 	bl	8000b4c <__aeabi_dcmpun>
 8013d62:	bb88      	cbnz	r0, 8013dc8 <_printf_float+0xd0>
 8013d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d68:	4b9a      	ldr	r3, [pc, #616]	; (8013fd4 <_printf_float+0x2dc>)
 8013d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d6e:	f7ec fecf 	bl	8000b10 <__aeabi_dcmple>
 8013d72:	bb48      	cbnz	r0, 8013dc8 <_printf_float+0xd0>
 8013d74:	2200      	movs	r2, #0
 8013d76:	2300      	movs	r3, #0
 8013d78:	4640      	mov	r0, r8
 8013d7a:	4649      	mov	r1, r9
 8013d7c:	f7ec febe 	bl	8000afc <__aeabi_dcmplt>
 8013d80:	b110      	cbz	r0, 8013d88 <_printf_float+0x90>
 8013d82:	232d      	movs	r3, #45	; 0x2d
 8013d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d88:	4b93      	ldr	r3, [pc, #588]	; (8013fd8 <_printf_float+0x2e0>)
 8013d8a:	4894      	ldr	r0, [pc, #592]	; (8013fdc <_printf_float+0x2e4>)
 8013d8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013d90:	bf94      	ite	ls
 8013d92:	4698      	movls	r8, r3
 8013d94:	4680      	movhi	r8, r0
 8013d96:	2303      	movs	r3, #3
 8013d98:	6123      	str	r3, [r4, #16]
 8013d9a:	9b05      	ldr	r3, [sp, #20]
 8013d9c:	f023 0204 	bic.w	r2, r3, #4
 8013da0:	6022      	str	r2, [r4, #0]
 8013da2:	f04f 0900 	mov.w	r9, #0
 8013da6:	9700      	str	r7, [sp, #0]
 8013da8:	4633      	mov	r3, r6
 8013daa:	aa0b      	add	r2, sp, #44	; 0x2c
 8013dac:	4621      	mov	r1, r4
 8013dae:	4628      	mov	r0, r5
 8013db0:	f000 f9d8 	bl	8014164 <_printf_common>
 8013db4:	3001      	adds	r0, #1
 8013db6:	f040 8090 	bne.w	8013eda <_printf_float+0x1e2>
 8013dba:	f04f 30ff 	mov.w	r0, #4294967295
 8013dbe:	b00d      	add	sp, #52	; 0x34
 8013dc0:	ecbd 8b02 	vpop	{d8}
 8013dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dc8:	4642      	mov	r2, r8
 8013dca:	464b      	mov	r3, r9
 8013dcc:	4640      	mov	r0, r8
 8013dce:	4649      	mov	r1, r9
 8013dd0:	f7ec febc 	bl	8000b4c <__aeabi_dcmpun>
 8013dd4:	b140      	cbz	r0, 8013de8 <_printf_float+0xf0>
 8013dd6:	464b      	mov	r3, r9
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	bfbc      	itt	lt
 8013ddc:	232d      	movlt	r3, #45	; 0x2d
 8013dde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013de2:	487f      	ldr	r0, [pc, #508]	; (8013fe0 <_printf_float+0x2e8>)
 8013de4:	4b7f      	ldr	r3, [pc, #508]	; (8013fe4 <_printf_float+0x2ec>)
 8013de6:	e7d1      	b.n	8013d8c <_printf_float+0x94>
 8013de8:	6863      	ldr	r3, [r4, #4]
 8013dea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013dee:	9206      	str	r2, [sp, #24]
 8013df0:	1c5a      	adds	r2, r3, #1
 8013df2:	d13f      	bne.n	8013e74 <_printf_float+0x17c>
 8013df4:	2306      	movs	r3, #6
 8013df6:	6063      	str	r3, [r4, #4]
 8013df8:	9b05      	ldr	r3, [sp, #20]
 8013dfa:	6861      	ldr	r1, [r4, #4]
 8013dfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013e00:	2300      	movs	r3, #0
 8013e02:	9303      	str	r3, [sp, #12]
 8013e04:	ab0a      	add	r3, sp, #40	; 0x28
 8013e06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013e0a:	ab09      	add	r3, sp, #36	; 0x24
 8013e0c:	ec49 8b10 	vmov	d0, r8, r9
 8013e10:	9300      	str	r3, [sp, #0]
 8013e12:	6022      	str	r2, [r4, #0]
 8013e14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013e18:	4628      	mov	r0, r5
 8013e1a:	f7ff fecd 	bl	8013bb8 <__cvt>
 8013e1e:	9b06      	ldr	r3, [sp, #24]
 8013e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e22:	2b47      	cmp	r3, #71	; 0x47
 8013e24:	4680      	mov	r8, r0
 8013e26:	d108      	bne.n	8013e3a <_printf_float+0x142>
 8013e28:	1cc8      	adds	r0, r1, #3
 8013e2a:	db02      	blt.n	8013e32 <_printf_float+0x13a>
 8013e2c:	6863      	ldr	r3, [r4, #4]
 8013e2e:	4299      	cmp	r1, r3
 8013e30:	dd41      	ble.n	8013eb6 <_printf_float+0x1be>
 8013e32:	f1ab 0b02 	sub.w	fp, fp, #2
 8013e36:	fa5f fb8b 	uxtb.w	fp, fp
 8013e3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013e3e:	d820      	bhi.n	8013e82 <_printf_float+0x18a>
 8013e40:	3901      	subs	r1, #1
 8013e42:	465a      	mov	r2, fp
 8013e44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013e48:	9109      	str	r1, [sp, #36]	; 0x24
 8013e4a:	f7ff ff17 	bl	8013c7c <__exponent>
 8013e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e50:	1813      	adds	r3, r2, r0
 8013e52:	2a01      	cmp	r2, #1
 8013e54:	4681      	mov	r9, r0
 8013e56:	6123      	str	r3, [r4, #16]
 8013e58:	dc02      	bgt.n	8013e60 <_printf_float+0x168>
 8013e5a:	6822      	ldr	r2, [r4, #0]
 8013e5c:	07d2      	lsls	r2, r2, #31
 8013e5e:	d501      	bpl.n	8013e64 <_printf_float+0x16c>
 8013e60:	3301      	adds	r3, #1
 8013e62:	6123      	str	r3, [r4, #16]
 8013e64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d09c      	beq.n	8013da6 <_printf_float+0xae>
 8013e6c:	232d      	movs	r3, #45	; 0x2d
 8013e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e72:	e798      	b.n	8013da6 <_printf_float+0xae>
 8013e74:	9a06      	ldr	r2, [sp, #24]
 8013e76:	2a47      	cmp	r2, #71	; 0x47
 8013e78:	d1be      	bne.n	8013df8 <_printf_float+0x100>
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d1bc      	bne.n	8013df8 <_printf_float+0x100>
 8013e7e:	2301      	movs	r3, #1
 8013e80:	e7b9      	b.n	8013df6 <_printf_float+0xfe>
 8013e82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013e86:	d118      	bne.n	8013eba <_printf_float+0x1c2>
 8013e88:	2900      	cmp	r1, #0
 8013e8a:	6863      	ldr	r3, [r4, #4]
 8013e8c:	dd0b      	ble.n	8013ea6 <_printf_float+0x1ae>
 8013e8e:	6121      	str	r1, [r4, #16]
 8013e90:	b913      	cbnz	r3, 8013e98 <_printf_float+0x1a0>
 8013e92:	6822      	ldr	r2, [r4, #0]
 8013e94:	07d0      	lsls	r0, r2, #31
 8013e96:	d502      	bpl.n	8013e9e <_printf_float+0x1a6>
 8013e98:	3301      	adds	r3, #1
 8013e9a:	440b      	add	r3, r1
 8013e9c:	6123      	str	r3, [r4, #16]
 8013e9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013ea0:	f04f 0900 	mov.w	r9, #0
 8013ea4:	e7de      	b.n	8013e64 <_printf_float+0x16c>
 8013ea6:	b913      	cbnz	r3, 8013eae <_printf_float+0x1b6>
 8013ea8:	6822      	ldr	r2, [r4, #0]
 8013eaa:	07d2      	lsls	r2, r2, #31
 8013eac:	d501      	bpl.n	8013eb2 <_printf_float+0x1ba>
 8013eae:	3302      	adds	r3, #2
 8013eb0:	e7f4      	b.n	8013e9c <_printf_float+0x1a4>
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	e7f2      	b.n	8013e9c <_printf_float+0x1a4>
 8013eb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ebc:	4299      	cmp	r1, r3
 8013ebe:	db05      	blt.n	8013ecc <_printf_float+0x1d4>
 8013ec0:	6823      	ldr	r3, [r4, #0]
 8013ec2:	6121      	str	r1, [r4, #16]
 8013ec4:	07d8      	lsls	r0, r3, #31
 8013ec6:	d5ea      	bpl.n	8013e9e <_printf_float+0x1a6>
 8013ec8:	1c4b      	adds	r3, r1, #1
 8013eca:	e7e7      	b.n	8013e9c <_printf_float+0x1a4>
 8013ecc:	2900      	cmp	r1, #0
 8013ece:	bfd4      	ite	le
 8013ed0:	f1c1 0202 	rsble	r2, r1, #2
 8013ed4:	2201      	movgt	r2, #1
 8013ed6:	4413      	add	r3, r2
 8013ed8:	e7e0      	b.n	8013e9c <_printf_float+0x1a4>
 8013eda:	6823      	ldr	r3, [r4, #0]
 8013edc:	055a      	lsls	r2, r3, #21
 8013ede:	d407      	bmi.n	8013ef0 <_printf_float+0x1f8>
 8013ee0:	6923      	ldr	r3, [r4, #16]
 8013ee2:	4642      	mov	r2, r8
 8013ee4:	4631      	mov	r1, r6
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	47b8      	blx	r7
 8013eea:	3001      	adds	r0, #1
 8013eec:	d12c      	bne.n	8013f48 <_printf_float+0x250>
 8013eee:	e764      	b.n	8013dba <_printf_float+0xc2>
 8013ef0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013ef4:	f240 80e0 	bls.w	80140b8 <_printf_float+0x3c0>
 8013ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013efc:	2200      	movs	r2, #0
 8013efe:	2300      	movs	r3, #0
 8013f00:	f7ec fdf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	d034      	beq.n	8013f72 <_printf_float+0x27a>
 8013f08:	4a37      	ldr	r2, [pc, #220]	; (8013fe8 <_printf_float+0x2f0>)
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	4631      	mov	r1, r6
 8013f0e:	4628      	mov	r0, r5
 8013f10:	47b8      	blx	r7
 8013f12:	3001      	adds	r0, #1
 8013f14:	f43f af51 	beq.w	8013dba <_printf_float+0xc2>
 8013f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	db02      	blt.n	8013f26 <_printf_float+0x22e>
 8013f20:	6823      	ldr	r3, [r4, #0]
 8013f22:	07d8      	lsls	r0, r3, #31
 8013f24:	d510      	bpl.n	8013f48 <_printf_float+0x250>
 8013f26:	ee18 3a10 	vmov	r3, s16
 8013f2a:	4652      	mov	r2, sl
 8013f2c:	4631      	mov	r1, r6
 8013f2e:	4628      	mov	r0, r5
 8013f30:	47b8      	blx	r7
 8013f32:	3001      	adds	r0, #1
 8013f34:	f43f af41 	beq.w	8013dba <_printf_float+0xc2>
 8013f38:	f04f 0800 	mov.w	r8, #0
 8013f3c:	f104 091a 	add.w	r9, r4, #26
 8013f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f42:	3b01      	subs	r3, #1
 8013f44:	4543      	cmp	r3, r8
 8013f46:	dc09      	bgt.n	8013f5c <_printf_float+0x264>
 8013f48:	6823      	ldr	r3, [r4, #0]
 8013f4a:	079b      	lsls	r3, r3, #30
 8013f4c:	f100 8105 	bmi.w	801415a <_printf_float+0x462>
 8013f50:	68e0      	ldr	r0, [r4, #12]
 8013f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f54:	4298      	cmp	r0, r3
 8013f56:	bfb8      	it	lt
 8013f58:	4618      	movlt	r0, r3
 8013f5a:	e730      	b.n	8013dbe <_printf_float+0xc6>
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	464a      	mov	r2, r9
 8013f60:	4631      	mov	r1, r6
 8013f62:	4628      	mov	r0, r5
 8013f64:	47b8      	blx	r7
 8013f66:	3001      	adds	r0, #1
 8013f68:	f43f af27 	beq.w	8013dba <_printf_float+0xc2>
 8013f6c:	f108 0801 	add.w	r8, r8, #1
 8013f70:	e7e6      	b.n	8013f40 <_printf_float+0x248>
 8013f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	dc39      	bgt.n	8013fec <_printf_float+0x2f4>
 8013f78:	4a1b      	ldr	r2, [pc, #108]	; (8013fe8 <_printf_float+0x2f0>)
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	4631      	mov	r1, r6
 8013f7e:	4628      	mov	r0, r5
 8013f80:	47b8      	blx	r7
 8013f82:	3001      	adds	r0, #1
 8013f84:	f43f af19 	beq.w	8013dba <_printf_float+0xc2>
 8013f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f8c:	4313      	orrs	r3, r2
 8013f8e:	d102      	bne.n	8013f96 <_printf_float+0x29e>
 8013f90:	6823      	ldr	r3, [r4, #0]
 8013f92:	07d9      	lsls	r1, r3, #31
 8013f94:	d5d8      	bpl.n	8013f48 <_printf_float+0x250>
 8013f96:	ee18 3a10 	vmov	r3, s16
 8013f9a:	4652      	mov	r2, sl
 8013f9c:	4631      	mov	r1, r6
 8013f9e:	4628      	mov	r0, r5
 8013fa0:	47b8      	blx	r7
 8013fa2:	3001      	adds	r0, #1
 8013fa4:	f43f af09 	beq.w	8013dba <_printf_float+0xc2>
 8013fa8:	f04f 0900 	mov.w	r9, #0
 8013fac:	f104 0a1a 	add.w	sl, r4, #26
 8013fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fb2:	425b      	negs	r3, r3
 8013fb4:	454b      	cmp	r3, r9
 8013fb6:	dc01      	bgt.n	8013fbc <_printf_float+0x2c4>
 8013fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fba:	e792      	b.n	8013ee2 <_printf_float+0x1ea>
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	4652      	mov	r2, sl
 8013fc0:	4631      	mov	r1, r6
 8013fc2:	4628      	mov	r0, r5
 8013fc4:	47b8      	blx	r7
 8013fc6:	3001      	adds	r0, #1
 8013fc8:	f43f aef7 	beq.w	8013dba <_printf_float+0xc2>
 8013fcc:	f109 0901 	add.w	r9, r9, #1
 8013fd0:	e7ee      	b.n	8013fb0 <_printf_float+0x2b8>
 8013fd2:	bf00      	nop
 8013fd4:	7fefffff 	.word	0x7fefffff
 8013fd8:	0801a194 	.word	0x0801a194
 8013fdc:	0801a198 	.word	0x0801a198
 8013fe0:	0801a1a0 	.word	0x0801a1a0
 8013fe4:	0801a19c 	.word	0x0801a19c
 8013fe8:	0801a1a4 	.word	0x0801a1a4
 8013fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	bfa8      	it	ge
 8013ff4:	461a      	movge	r2, r3
 8013ff6:	2a00      	cmp	r2, #0
 8013ff8:	4691      	mov	r9, r2
 8013ffa:	dc37      	bgt.n	801406c <_printf_float+0x374>
 8013ffc:	f04f 0b00 	mov.w	fp, #0
 8014000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014004:	f104 021a 	add.w	r2, r4, #26
 8014008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801400a:	9305      	str	r3, [sp, #20]
 801400c:	eba3 0309 	sub.w	r3, r3, r9
 8014010:	455b      	cmp	r3, fp
 8014012:	dc33      	bgt.n	801407c <_printf_float+0x384>
 8014014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014018:	429a      	cmp	r2, r3
 801401a:	db3b      	blt.n	8014094 <_printf_float+0x39c>
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	07da      	lsls	r2, r3, #31
 8014020:	d438      	bmi.n	8014094 <_printf_float+0x39c>
 8014022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014024:	9b05      	ldr	r3, [sp, #20]
 8014026:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014028:	1ad3      	subs	r3, r2, r3
 801402a:	eba2 0901 	sub.w	r9, r2, r1
 801402e:	4599      	cmp	r9, r3
 8014030:	bfa8      	it	ge
 8014032:	4699      	movge	r9, r3
 8014034:	f1b9 0f00 	cmp.w	r9, #0
 8014038:	dc35      	bgt.n	80140a6 <_printf_float+0x3ae>
 801403a:	f04f 0800 	mov.w	r8, #0
 801403e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014042:	f104 0a1a 	add.w	sl, r4, #26
 8014046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801404a:	1a9b      	subs	r3, r3, r2
 801404c:	eba3 0309 	sub.w	r3, r3, r9
 8014050:	4543      	cmp	r3, r8
 8014052:	f77f af79 	ble.w	8013f48 <_printf_float+0x250>
 8014056:	2301      	movs	r3, #1
 8014058:	4652      	mov	r2, sl
 801405a:	4631      	mov	r1, r6
 801405c:	4628      	mov	r0, r5
 801405e:	47b8      	blx	r7
 8014060:	3001      	adds	r0, #1
 8014062:	f43f aeaa 	beq.w	8013dba <_printf_float+0xc2>
 8014066:	f108 0801 	add.w	r8, r8, #1
 801406a:	e7ec      	b.n	8014046 <_printf_float+0x34e>
 801406c:	4613      	mov	r3, r2
 801406e:	4631      	mov	r1, r6
 8014070:	4642      	mov	r2, r8
 8014072:	4628      	mov	r0, r5
 8014074:	47b8      	blx	r7
 8014076:	3001      	adds	r0, #1
 8014078:	d1c0      	bne.n	8013ffc <_printf_float+0x304>
 801407a:	e69e      	b.n	8013dba <_printf_float+0xc2>
 801407c:	2301      	movs	r3, #1
 801407e:	4631      	mov	r1, r6
 8014080:	4628      	mov	r0, r5
 8014082:	9205      	str	r2, [sp, #20]
 8014084:	47b8      	blx	r7
 8014086:	3001      	adds	r0, #1
 8014088:	f43f ae97 	beq.w	8013dba <_printf_float+0xc2>
 801408c:	9a05      	ldr	r2, [sp, #20]
 801408e:	f10b 0b01 	add.w	fp, fp, #1
 8014092:	e7b9      	b.n	8014008 <_printf_float+0x310>
 8014094:	ee18 3a10 	vmov	r3, s16
 8014098:	4652      	mov	r2, sl
 801409a:	4631      	mov	r1, r6
 801409c:	4628      	mov	r0, r5
 801409e:	47b8      	blx	r7
 80140a0:	3001      	adds	r0, #1
 80140a2:	d1be      	bne.n	8014022 <_printf_float+0x32a>
 80140a4:	e689      	b.n	8013dba <_printf_float+0xc2>
 80140a6:	9a05      	ldr	r2, [sp, #20]
 80140a8:	464b      	mov	r3, r9
 80140aa:	4442      	add	r2, r8
 80140ac:	4631      	mov	r1, r6
 80140ae:	4628      	mov	r0, r5
 80140b0:	47b8      	blx	r7
 80140b2:	3001      	adds	r0, #1
 80140b4:	d1c1      	bne.n	801403a <_printf_float+0x342>
 80140b6:	e680      	b.n	8013dba <_printf_float+0xc2>
 80140b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140ba:	2a01      	cmp	r2, #1
 80140bc:	dc01      	bgt.n	80140c2 <_printf_float+0x3ca>
 80140be:	07db      	lsls	r3, r3, #31
 80140c0:	d538      	bpl.n	8014134 <_printf_float+0x43c>
 80140c2:	2301      	movs	r3, #1
 80140c4:	4642      	mov	r2, r8
 80140c6:	4631      	mov	r1, r6
 80140c8:	4628      	mov	r0, r5
 80140ca:	47b8      	blx	r7
 80140cc:	3001      	adds	r0, #1
 80140ce:	f43f ae74 	beq.w	8013dba <_printf_float+0xc2>
 80140d2:	ee18 3a10 	vmov	r3, s16
 80140d6:	4652      	mov	r2, sl
 80140d8:	4631      	mov	r1, r6
 80140da:	4628      	mov	r0, r5
 80140dc:	47b8      	blx	r7
 80140de:	3001      	adds	r0, #1
 80140e0:	f43f ae6b 	beq.w	8013dba <_printf_float+0xc2>
 80140e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80140e8:	2200      	movs	r2, #0
 80140ea:	2300      	movs	r3, #0
 80140ec:	f7ec fcfc 	bl	8000ae8 <__aeabi_dcmpeq>
 80140f0:	b9d8      	cbnz	r0, 801412a <_printf_float+0x432>
 80140f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140f4:	f108 0201 	add.w	r2, r8, #1
 80140f8:	3b01      	subs	r3, #1
 80140fa:	4631      	mov	r1, r6
 80140fc:	4628      	mov	r0, r5
 80140fe:	47b8      	blx	r7
 8014100:	3001      	adds	r0, #1
 8014102:	d10e      	bne.n	8014122 <_printf_float+0x42a>
 8014104:	e659      	b.n	8013dba <_printf_float+0xc2>
 8014106:	2301      	movs	r3, #1
 8014108:	4652      	mov	r2, sl
 801410a:	4631      	mov	r1, r6
 801410c:	4628      	mov	r0, r5
 801410e:	47b8      	blx	r7
 8014110:	3001      	adds	r0, #1
 8014112:	f43f ae52 	beq.w	8013dba <_printf_float+0xc2>
 8014116:	f108 0801 	add.w	r8, r8, #1
 801411a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801411c:	3b01      	subs	r3, #1
 801411e:	4543      	cmp	r3, r8
 8014120:	dcf1      	bgt.n	8014106 <_printf_float+0x40e>
 8014122:	464b      	mov	r3, r9
 8014124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014128:	e6dc      	b.n	8013ee4 <_printf_float+0x1ec>
 801412a:	f04f 0800 	mov.w	r8, #0
 801412e:	f104 0a1a 	add.w	sl, r4, #26
 8014132:	e7f2      	b.n	801411a <_printf_float+0x422>
 8014134:	2301      	movs	r3, #1
 8014136:	4642      	mov	r2, r8
 8014138:	e7df      	b.n	80140fa <_printf_float+0x402>
 801413a:	2301      	movs	r3, #1
 801413c:	464a      	mov	r2, r9
 801413e:	4631      	mov	r1, r6
 8014140:	4628      	mov	r0, r5
 8014142:	47b8      	blx	r7
 8014144:	3001      	adds	r0, #1
 8014146:	f43f ae38 	beq.w	8013dba <_printf_float+0xc2>
 801414a:	f108 0801 	add.w	r8, r8, #1
 801414e:	68e3      	ldr	r3, [r4, #12]
 8014150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014152:	1a5b      	subs	r3, r3, r1
 8014154:	4543      	cmp	r3, r8
 8014156:	dcf0      	bgt.n	801413a <_printf_float+0x442>
 8014158:	e6fa      	b.n	8013f50 <_printf_float+0x258>
 801415a:	f04f 0800 	mov.w	r8, #0
 801415e:	f104 0919 	add.w	r9, r4, #25
 8014162:	e7f4      	b.n	801414e <_printf_float+0x456>

08014164 <_printf_common>:
 8014164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014168:	4616      	mov	r6, r2
 801416a:	4699      	mov	r9, r3
 801416c:	688a      	ldr	r2, [r1, #8]
 801416e:	690b      	ldr	r3, [r1, #16]
 8014170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014174:	4293      	cmp	r3, r2
 8014176:	bfb8      	it	lt
 8014178:	4613      	movlt	r3, r2
 801417a:	6033      	str	r3, [r6, #0]
 801417c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014180:	4607      	mov	r7, r0
 8014182:	460c      	mov	r4, r1
 8014184:	b10a      	cbz	r2, 801418a <_printf_common+0x26>
 8014186:	3301      	adds	r3, #1
 8014188:	6033      	str	r3, [r6, #0]
 801418a:	6823      	ldr	r3, [r4, #0]
 801418c:	0699      	lsls	r1, r3, #26
 801418e:	bf42      	ittt	mi
 8014190:	6833      	ldrmi	r3, [r6, #0]
 8014192:	3302      	addmi	r3, #2
 8014194:	6033      	strmi	r3, [r6, #0]
 8014196:	6825      	ldr	r5, [r4, #0]
 8014198:	f015 0506 	ands.w	r5, r5, #6
 801419c:	d106      	bne.n	80141ac <_printf_common+0x48>
 801419e:	f104 0a19 	add.w	sl, r4, #25
 80141a2:	68e3      	ldr	r3, [r4, #12]
 80141a4:	6832      	ldr	r2, [r6, #0]
 80141a6:	1a9b      	subs	r3, r3, r2
 80141a8:	42ab      	cmp	r3, r5
 80141aa:	dc26      	bgt.n	80141fa <_printf_common+0x96>
 80141ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80141b0:	1e13      	subs	r3, r2, #0
 80141b2:	6822      	ldr	r2, [r4, #0]
 80141b4:	bf18      	it	ne
 80141b6:	2301      	movne	r3, #1
 80141b8:	0692      	lsls	r2, r2, #26
 80141ba:	d42b      	bmi.n	8014214 <_printf_common+0xb0>
 80141bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80141c0:	4649      	mov	r1, r9
 80141c2:	4638      	mov	r0, r7
 80141c4:	47c0      	blx	r8
 80141c6:	3001      	adds	r0, #1
 80141c8:	d01e      	beq.n	8014208 <_printf_common+0xa4>
 80141ca:	6823      	ldr	r3, [r4, #0]
 80141cc:	68e5      	ldr	r5, [r4, #12]
 80141ce:	6832      	ldr	r2, [r6, #0]
 80141d0:	f003 0306 	and.w	r3, r3, #6
 80141d4:	2b04      	cmp	r3, #4
 80141d6:	bf08      	it	eq
 80141d8:	1aad      	subeq	r5, r5, r2
 80141da:	68a3      	ldr	r3, [r4, #8]
 80141dc:	6922      	ldr	r2, [r4, #16]
 80141de:	bf0c      	ite	eq
 80141e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80141e4:	2500      	movne	r5, #0
 80141e6:	4293      	cmp	r3, r2
 80141e8:	bfc4      	itt	gt
 80141ea:	1a9b      	subgt	r3, r3, r2
 80141ec:	18ed      	addgt	r5, r5, r3
 80141ee:	2600      	movs	r6, #0
 80141f0:	341a      	adds	r4, #26
 80141f2:	42b5      	cmp	r5, r6
 80141f4:	d11a      	bne.n	801422c <_printf_common+0xc8>
 80141f6:	2000      	movs	r0, #0
 80141f8:	e008      	b.n	801420c <_printf_common+0xa8>
 80141fa:	2301      	movs	r3, #1
 80141fc:	4652      	mov	r2, sl
 80141fe:	4649      	mov	r1, r9
 8014200:	4638      	mov	r0, r7
 8014202:	47c0      	blx	r8
 8014204:	3001      	adds	r0, #1
 8014206:	d103      	bne.n	8014210 <_printf_common+0xac>
 8014208:	f04f 30ff 	mov.w	r0, #4294967295
 801420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014210:	3501      	adds	r5, #1
 8014212:	e7c6      	b.n	80141a2 <_printf_common+0x3e>
 8014214:	18e1      	adds	r1, r4, r3
 8014216:	1c5a      	adds	r2, r3, #1
 8014218:	2030      	movs	r0, #48	; 0x30
 801421a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801421e:	4422      	add	r2, r4
 8014220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014228:	3302      	adds	r3, #2
 801422a:	e7c7      	b.n	80141bc <_printf_common+0x58>
 801422c:	2301      	movs	r3, #1
 801422e:	4622      	mov	r2, r4
 8014230:	4649      	mov	r1, r9
 8014232:	4638      	mov	r0, r7
 8014234:	47c0      	blx	r8
 8014236:	3001      	adds	r0, #1
 8014238:	d0e6      	beq.n	8014208 <_printf_common+0xa4>
 801423a:	3601      	adds	r6, #1
 801423c:	e7d9      	b.n	80141f2 <_printf_common+0x8e>
	...

08014240 <_printf_i>:
 8014240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014244:	460c      	mov	r4, r1
 8014246:	4691      	mov	r9, r2
 8014248:	7e27      	ldrb	r7, [r4, #24]
 801424a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801424c:	2f78      	cmp	r7, #120	; 0x78
 801424e:	4680      	mov	r8, r0
 8014250:	469a      	mov	sl, r3
 8014252:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014256:	d807      	bhi.n	8014268 <_printf_i+0x28>
 8014258:	2f62      	cmp	r7, #98	; 0x62
 801425a:	d80a      	bhi.n	8014272 <_printf_i+0x32>
 801425c:	2f00      	cmp	r7, #0
 801425e:	f000 80d8 	beq.w	8014412 <_printf_i+0x1d2>
 8014262:	2f58      	cmp	r7, #88	; 0x58
 8014264:	f000 80a3 	beq.w	80143ae <_printf_i+0x16e>
 8014268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801426c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014270:	e03a      	b.n	80142e8 <_printf_i+0xa8>
 8014272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014276:	2b15      	cmp	r3, #21
 8014278:	d8f6      	bhi.n	8014268 <_printf_i+0x28>
 801427a:	a001      	add	r0, pc, #4	; (adr r0, 8014280 <_printf_i+0x40>)
 801427c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014280:	080142d9 	.word	0x080142d9
 8014284:	080142ed 	.word	0x080142ed
 8014288:	08014269 	.word	0x08014269
 801428c:	08014269 	.word	0x08014269
 8014290:	08014269 	.word	0x08014269
 8014294:	08014269 	.word	0x08014269
 8014298:	080142ed 	.word	0x080142ed
 801429c:	08014269 	.word	0x08014269
 80142a0:	08014269 	.word	0x08014269
 80142a4:	08014269 	.word	0x08014269
 80142a8:	08014269 	.word	0x08014269
 80142ac:	080143f9 	.word	0x080143f9
 80142b0:	0801431d 	.word	0x0801431d
 80142b4:	080143db 	.word	0x080143db
 80142b8:	08014269 	.word	0x08014269
 80142bc:	08014269 	.word	0x08014269
 80142c0:	0801441b 	.word	0x0801441b
 80142c4:	08014269 	.word	0x08014269
 80142c8:	0801431d 	.word	0x0801431d
 80142cc:	08014269 	.word	0x08014269
 80142d0:	08014269 	.word	0x08014269
 80142d4:	080143e3 	.word	0x080143e3
 80142d8:	680b      	ldr	r3, [r1, #0]
 80142da:	1d1a      	adds	r2, r3, #4
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	600a      	str	r2, [r1, #0]
 80142e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80142e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80142e8:	2301      	movs	r3, #1
 80142ea:	e0a3      	b.n	8014434 <_printf_i+0x1f4>
 80142ec:	6825      	ldr	r5, [r4, #0]
 80142ee:	6808      	ldr	r0, [r1, #0]
 80142f0:	062e      	lsls	r6, r5, #24
 80142f2:	f100 0304 	add.w	r3, r0, #4
 80142f6:	d50a      	bpl.n	801430e <_printf_i+0xce>
 80142f8:	6805      	ldr	r5, [r0, #0]
 80142fa:	600b      	str	r3, [r1, #0]
 80142fc:	2d00      	cmp	r5, #0
 80142fe:	da03      	bge.n	8014308 <_printf_i+0xc8>
 8014300:	232d      	movs	r3, #45	; 0x2d
 8014302:	426d      	negs	r5, r5
 8014304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014308:	485e      	ldr	r0, [pc, #376]	; (8014484 <_printf_i+0x244>)
 801430a:	230a      	movs	r3, #10
 801430c:	e019      	b.n	8014342 <_printf_i+0x102>
 801430e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014312:	6805      	ldr	r5, [r0, #0]
 8014314:	600b      	str	r3, [r1, #0]
 8014316:	bf18      	it	ne
 8014318:	b22d      	sxthne	r5, r5
 801431a:	e7ef      	b.n	80142fc <_printf_i+0xbc>
 801431c:	680b      	ldr	r3, [r1, #0]
 801431e:	6825      	ldr	r5, [r4, #0]
 8014320:	1d18      	adds	r0, r3, #4
 8014322:	6008      	str	r0, [r1, #0]
 8014324:	0628      	lsls	r0, r5, #24
 8014326:	d501      	bpl.n	801432c <_printf_i+0xec>
 8014328:	681d      	ldr	r5, [r3, #0]
 801432a:	e002      	b.n	8014332 <_printf_i+0xf2>
 801432c:	0669      	lsls	r1, r5, #25
 801432e:	d5fb      	bpl.n	8014328 <_printf_i+0xe8>
 8014330:	881d      	ldrh	r5, [r3, #0]
 8014332:	4854      	ldr	r0, [pc, #336]	; (8014484 <_printf_i+0x244>)
 8014334:	2f6f      	cmp	r7, #111	; 0x6f
 8014336:	bf0c      	ite	eq
 8014338:	2308      	moveq	r3, #8
 801433a:	230a      	movne	r3, #10
 801433c:	2100      	movs	r1, #0
 801433e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014342:	6866      	ldr	r6, [r4, #4]
 8014344:	60a6      	str	r6, [r4, #8]
 8014346:	2e00      	cmp	r6, #0
 8014348:	bfa2      	ittt	ge
 801434a:	6821      	ldrge	r1, [r4, #0]
 801434c:	f021 0104 	bicge.w	r1, r1, #4
 8014350:	6021      	strge	r1, [r4, #0]
 8014352:	b90d      	cbnz	r5, 8014358 <_printf_i+0x118>
 8014354:	2e00      	cmp	r6, #0
 8014356:	d04d      	beq.n	80143f4 <_printf_i+0x1b4>
 8014358:	4616      	mov	r6, r2
 801435a:	fbb5 f1f3 	udiv	r1, r5, r3
 801435e:	fb03 5711 	mls	r7, r3, r1, r5
 8014362:	5dc7      	ldrb	r7, [r0, r7]
 8014364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014368:	462f      	mov	r7, r5
 801436a:	42bb      	cmp	r3, r7
 801436c:	460d      	mov	r5, r1
 801436e:	d9f4      	bls.n	801435a <_printf_i+0x11a>
 8014370:	2b08      	cmp	r3, #8
 8014372:	d10b      	bne.n	801438c <_printf_i+0x14c>
 8014374:	6823      	ldr	r3, [r4, #0]
 8014376:	07df      	lsls	r7, r3, #31
 8014378:	d508      	bpl.n	801438c <_printf_i+0x14c>
 801437a:	6923      	ldr	r3, [r4, #16]
 801437c:	6861      	ldr	r1, [r4, #4]
 801437e:	4299      	cmp	r1, r3
 8014380:	bfde      	ittt	le
 8014382:	2330      	movle	r3, #48	; 0x30
 8014384:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014388:	f106 36ff 	addle.w	r6, r6, #4294967295
 801438c:	1b92      	subs	r2, r2, r6
 801438e:	6122      	str	r2, [r4, #16]
 8014390:	f8cd a000 	str.w	sl, [sp]
 8014394:	464b      	mov	r3, r9
 8014396:	aa03      	add	r2, sp, #12
 8014398:	4621      	mov	r1, r4
 801439a:	4640      	mov	r0, r8
 801439c:	f7ff fee2 	bl	8014164 <_printf_common>
 80143a0:	3001      	adds	r0, #1
 80143a2:	d14c      	bne.n	801443e <_printf_i+0x1fe>
 80143a4:	f04f 30ff 	mov.w	r0, #4294967295
 80143a8:	b004      	add	sp, #16
 80143aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143ae:	4835      	ldr	r0, [pc, #212]	; (8014484 <_printf_i+0x244>)
 80143b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80143b4:	6823      	ldr	r3, [r4, #0]
 80143b6:	680e      	ldr	r6, [r1, #0]
 80143b8:	061f      	lsls	r7, r3, #24
 80143ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80143be:	600e      	str	r6, [r1, #0]
 80143c0:	d514      	bpl.n	80143ec <_printf_i+0x1ac>
 80143c2:	07d9      	lsls	r1, r3, #31
 80143c4:	bf44      	itt	mi
 80143c6:	f043 0320 	orrmi.w	r3, r3, #32
 80143ca:	6023      	strmi	r3, [r4, #0]
 80143cc:	b91d      	cbnz	r5, 80143d6 <_printf_i+0x196>
 80143ce:	6823      	ldr	r3, [r4, #0]
 80143d0:	f023 0320 	bic.w	r3, r3, #32
 80143d4:	6023      	str	r3, [r4, #0]
 80143d6:	2310      	movs	r3, #16
 80143d8:	e7b0      	b.n	801433c <_printf_i+0xfc>
 80143da:	6823      	ldr	r3, [r4, #0]
 80143dc:	f043 0320 	orr.w	r3, r3, #32
 80143e0:	6023      	str	r3, [r4, #0]
 80143e2:	2378      	movs	r3, #120	; 0x78
 80143e4:	4828      	ldr	r0, [pc, #160]	; (8014488 <_printf_i+0x248>)
 80143e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80143ea:	e7e3      	b.n	80143b4 <_printf_i+0x174>
 80143ec:	065e      	lsls	r6, r3, #25
 80143ee:	bf48      	it	mi
 80143f0:	b2ad      	uxthmi	r5, r5
 80143f2:	e7e6      	b.n	80143c2 <_printf_i+0x182>
 80143f4:	4616      	mov	r6, r2
 80143f6:	e7bb      	b.n	8014370 <_printf_i+0x130>
 80143f8:	680b      	ldr	r3, [r1, #0]
 80143fa:	6826      	ldr	r6, [r4, #0]
 80143fc:	6960      	ldr	r0, [r4, #20]
 80143fe:	1d1d      	adds	r5, r3, #4
 8014400:	600d      	str	r5, [r1, #0]
 8014402:	0635      	lsls	r5, r6, #24
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	d501      	bpl.n	801440c <_printf_i+0x1cc>
 8014408:	6018      	str	r0, [r3, #0]
 801440a:	e002      	b.n	8014412 <_printf_i+0x1d2>
 801440c:	0671      	lsls	r1, r6, #25
 801440e:	d5fb      	bpl.n	8014408 <_printf_i+0x1c8>
 8014410:	8018      	strh	r0, [r3, #0]
 8014412:	2300      	movs	r3, #0
 8014414:	6123      	str	r3, [r4, #16]
 8014416:	4616      	mov	r6, r2
 8014418:	e7ba      	b.n	8014390 <_printf_i+0x150>
 801441a:	680b      	ldr	r3, [r1, #0]
 801441c:	1d1a      	adds	r2, r3, #4
 801441e:	600a      	str	r2, [r1, #0]
 8014420:	681e      	ldr	r6, [r3, #0]
 8014422:	6862      	ldr	r2, [r4, #4]
 8014424:	2100      	movs	r1, #0
 8014426:	4630      	mov	r0, r6
 8014428:	f7eb feea 	bl	8000200 <memchr>
 801442c:	b108      	cbz	r0, 8014432 <_printf_i+0x1f2>
 801442e:	1b80      	subs	r0, r0, r6
 8014430:	6060      	str	r0, [r4, #4]
 8014432:	6863      	ldr	r3, [r4, #4]
 8014434:	6123      	str	r3, [r4, #16]
 8014436:	2300      	movs	r3, #0
 8014438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801443c:	e7a8      	b.n	8014390 <_printf_i+0x150>
 801443e:	6923      	ldr	r3, [r4, #16]
 8014440:	4632      	mov	r2, r6
 8014442:	4649      	mov	r1, r9
 8014444:	4640      	mov	r0, r8
 8014446:	47d0      	blx	sl
 8014448:	3001      	adds	r0, #1
 801444a:	d0ab      	beq.n	80143a4 <_printf_i+0x164>
 801444c:	6823      	ldr	r3, [r4, #0]
 801444e:	079b      	lsls	r3, r3, #30
 8014450:	d413      	bmi.n	801447a <_printf_i+0x23a>
 8014452:	68e0      	ldr	r0, [r4, #12]
 8014454:	9b03      	ldr	r3, [sp, #12]
 8014456:	4298      	cmp	r0, r3
 8014458:	bfb8      	it	lt
 801445a:	4618      	movlt	r0, r3
 801445c:	e7a4      	b.n	80143a8 <_printf_i+0x168>
 801445e:	2301      	movs	r3, #1
 8014460:	4632      	mov	r2, r6
 8014462:	4649      	mov	r1, r9
 8014464:	4640      	mov	r0, r8
 8014466:	47d0      	blx	sl
 8014468:	3001      	adds	r0, #1
 801446a:	d09b      	beq.n	80143a4 <_printf_i+0x164>
 801446c:	3501      	adds	r5, #1
 801446e:	68e3      	ldr	r3, [r4, #12]
 8014470:	9903      	ldr	r1, [sp, #12]
 8014472:	1a5b      	subs	r3, r3, r1
 8014474:	42ab      	cmp	r3, r5
 8014476:	dcf2      	bgt.n	801445e <_printf_i+0x21e>
 8014478:	e7eb      	b.n	8014452 <_printf_i+0x212>
 801447a:	2500      	movs	r5, #0
 801447c:	f104 0619 	add.w	r6, r4, #25
 8014480:	e7f5      	b.n	801446e <_printf_i+0x22e>
 8014482:	bf00      	nop
 8014484:	0801a1a6 	.word	0x0801a1a6
 8014488:	0801a1b7 	.word	0x0801a1b7

0801448c <_scanf_float>:
 801448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014490:	b087      	sub	sp, #28
 8014492:	4617      	mov	r7, r2
 8014494:	9303      	str	r3, [sp, #12]
 8014496:	688b      	ldr	r3, [r1, #8]
 8014498:	1e5a      	subs	r2, r3, #1
 801449a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801449e:	bf83      	ittte	hi
 80144a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80144a4:	195b      	addhi	r3, r3, r5
 80144a6:	9302      	strhi	r3, [sp, #8]
 80144a8:	2300      	movls	r3, #0
 80144aa:	bf86      	itte	hi
 80144ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80144b0:	608b      	strhi	r3, [r1, #8]
 80144b2:	9302      	strls	r3, [sp, #8]
 80144b4:	680b      	ldr	r3, [r1, #0]
 80144b6:	468b      	mov	fp, r1
 80144b8:	2500      	movs	r5, #0
 80144ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80144be:	f84b 3b1c 	str.w	r3, [fp], #28
 80144c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80144c6:	4680      	mov	r8, r0
 80144c8:	460c      	mov	r4, r1
 80144ca:	465e      	mov	r6, fp
 80144cc:	46aa      	mov	sl, r5
 80144ce:	46a9      	mov	r9, r5
 80144d0:	9501      	str	r5, [sp, #4]
 80144d2:	68a2      	ldr	r2, [r4, #8]
 80144d4:	b152      	cbz	r2, 80144ec <_scanf_float+0x60>
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	2b4e      	cmp	r3, #78	; 0x4e
 80144dc:	d864      	bhi.n	80145a8 <_scanf_float+0x11c>
 80144de:	2b40      	cmp	r3, #64	; 0x40
 80144e0:	d83c      	bhi.n	801455c <_scanf_float+0xd0>
 80144e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80144e6:	b2c8      	uxtb	r0, r1
 80144e8:	280e      	cmp	r0, #14
 80144ea:	d93a      	bls.n	8014562 <_scanf_float+0xd6>
 80144ec:	f1b9 0f00 	cmp.w	r9, #0
 80144f0:	d003      	beq.n	80144fa <_scanf_float+0x6e>
 80144f2:	6823      	ldr	r3, [r4, #0]
 80144f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80144f8:	6023      	str	r3, [r4, #0]
 80144fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144fe:	f1ba 0f01 	cmp.w	sl, #1
 8014502:	f200 8113 	bhi.w	801472c <_scanf_float+0x2a0>
 8014506:	455e      	cmp	r6, fp
 8014508:	f200 8105 	bhi.w	8014716 <_scanf_float+0x28a>
 801450c:	2501      	movs	r5, #1
 801450e:	4628      	mov	r0, r5
 8014510:	b007      	add	sp, #28
 8014512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014516:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801451a:	2a0d      	cmp	r2, #13
 801451c:	d8e6      	bhi.n	80144ec <_scanf_float+0x60>
 801451e:	a101      	add	r1, pc, #4	; (adr r1, 8014524 <_scanf_float+0x98>)
 8014520:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014524:	08014663 	.word	0x08014663
 8014528:	080144ed 	.word	0x080144ed
 801452c:	080144ed 	.word	0x080144ed
 8014530:	080144ed 	.word	0x080144ed
 8014534:	080146c3 	.word	0x080146c3
 8014538:	0801469b 	.word	0x0801469b
 801453c:	080144ed 	.word	0x080144ed
 8014540:	080144ed 	.word	0x080144ed
 8014544:	08014671 	.word	0x08014671
 8014548:	080144ed 	.word	0x080144ed
 801454c:	080144ed 	.word	0x080144ed
 8014550:	080144ed 	.word	0x080144ed
 8014554:	080144ed 	.word	0x080144ed
 8014558:	08014629 	.word	0x08014629
 801455c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014560:	e7db      	b.n	801451a <_scanf_float+0x8e>
 8014562:	290e      	cmp	r1, #14
 8014564:	d8c2      	bhi.n	80144ec <_scanf_float+0x60>
 8014566:	a001      	add	r0, pc, #4	; (adr r0, 801456c <_scanf_float+0xe0>)
 8014568:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801456c:	0801461b 	.word	0x0801461b
 8014570:	080144ed 	.word	0x080144ed
 8014574:	0801461b 	.word	0x0801461b
 8014578:	080146af 	.word	0x080146af
 801457c:	080144ed 	.word	0x080144ed
 8014580:	080145c9 	.word	0x080145c9
 8014584:	08014605 	.word	0x08014605
 8014588:	08014605 	.word	0x08014605
 801458c:	08014605 	.word	0x08014605
 8014590:	08014605 	.word	0x08014605
 8014594:	08014605 	.word	0x08014605
 8014598:	08014605 	.word	0x08014605
 801459c:	08014605 	.word	0x08014605
 80145a0:	08014605 	.word	0x08014605
 80145a4:	08014605 	.word	0x08014605
 80145a8:	2b6e      	cmp	r3, #110	; 0x6e
 80145aa:	d809      	bhi.n	80145c0 <_scanf_float+0x134>
 80145ac:	2b60      	cmp	r3, #96	; 0x60
 80145ae:	d8b2      	bhi.n	8014516 <_scanf_float+0x8a>
 80145b0:	2b54      	cmp	r3, #84	; 0x54
 80145b2:	d077      	beq.n	80146a4 <_scanf_float+0x218>
 80145b4:	2b59      	cmp	r3, #89	; 0x59
 80145b6:	d199      	bne.n	80144ec <_scanf_float+0x60>
 80145b8:	2d07      	cmp	r5, #7
 80145ba:	d197      	bne.n	80144ec <_scanf_float+0x60>
 80145bc:	2508      	movs	r5, #8
 80145be:	e029      	b.n	8014614 <_scanf_float+0x188>
 80145c0:	2b74      	cmp	r3, #116	; 0x74
 80145c2:	d06f      	beq.n	80146a4 <_scanf_float+0x218>
 80145c4:	2b79      	cmp	r3, #121	; 0x79
 80145c6:	e7f6      	b.n	80145b6 <_scanf_float+0x12a>
 80145c8:	6821      	ldr	r1, [r4, #0]
 80145ca:	05c8      	lsls	r0, r1, #23
 80145cc:	d51a      	bpl.n	8014604 <_scanf_float+0x178>
 80145ce:	9b02      	ldr	r3, [sp, #8]
 80145d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80145d4:	6021      	str	r1, [r4, #0]
 80145d6:	f109 0901 	add.w	r9, r9, #1
 80145da:	b11b      	cbz	r3, 80145e4 <_scanf_float+0x158>
 80145dc:	3b01      	subs	r3, #1
 80145de:	3201      	adds	r2, #1
 80145e0:	9302      	str	r3, [sp, #8]
 80145e2:	60a2      	str	r2, [r4, #8]
 80145e4:	68a3      	ldr	r3, [r4, #8]
 80145e6:	3b01      	subs	r3, #1
 80145e8:	60a3      	str	r3, [r4, #8]
 80145ea:	6923      	ldr	r3, [r4, #16]
 80145ec:	3301      	adds	r3, #1
 80145ee:	6123      	str	r3, [r4, #16]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	3b01      	subs	r3, #1
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	607b      	str	r3, [r7, #4]
 80145f8:	f340 8084 	ble.w	8014704 <_scanf_float+0x278>
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	3301      	adds	r3, #1
 8014600:	603b      	str	r3, [r7, #0]
 8014602:	e766      	b.n	80144d2 <_scanf_float+0x46>
 8014604:	eb1a 0f05 	cmn.w	sl, r5
 8014608:	f47f af70 	bne.w	80144ec <_scanf_float+0x60>
 801460c:	6822      	ldr	r2, [r4, #0]
 801460e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014612:	6022      	str	r2, [r4, #0]
 8014614:	f806 3b01 	strb.w	r3, [r6], #1
 8014618:	e7e4      	b.n	80145e4 <_scanf_float+0x158>
 801461a:	6822      	ldr	r2, [r4, #0]
 801461c:	0610      	lsls	r0, r2, #24
 801461e:	f57f af65 	bpl.w	80144ec <_scanf_float+0x60>
 8014622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014626:	e7f4      	b.n	8014612 <_scanf_float+0x186>
 8014628:	f1ba 0f00 	cmp.w	sl, #0
 801462c:	d10e      	bne.n	801464c <_scanf_float+0x1c0>
 801462e:	f1b9 0f00 	cmp.w	r9, #0
 8014632:	d10e      	bne.n	8014652 <_scanf_float+0x1c6>
 8014634:	6822      	ldr	r2, [r4, #0]
 8014636:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801463a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801463e:	d108      	bne.n	8014652 <_scanf_float+0x1c6>
 8014640:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014644:	6022      	str	r2, [r4, #0]
 8014646:	f04f 0a01 	mov.w	sl, #1
 801464a:	e7e3      	b.n	8014614 <_scanf_float+0x188>
 801464c:	f1ba 0f02 	cmp.w	sl, #2
 8014650:	d055      	beq.n	80146fe <_scanf_float+0x272>
 8014652:	2d01      	cmp	r5, #1
 8014654:	d002      	beq.n	801465c <_scanf_float+0x1d0>
 8014656:	2d04      	cmp	r5, #4
 8014658:	f47f af48 	bne.w	80144ec <_scanf_float+0x60>
 801465c:	3501      	adds	r5, #1
 801465e:	b2ed      	uxtb	r5, r5
 8014660:	e7d8      	b.n	8014614 <_scanf_float+0x188>
 8014662:	f1ba 0f01 	cmp.w	sl, #1
 8014666:	f47f af41 	bne.w	80144ec <_scanf_float+0x60>
 801466a:	f04f 0a02 	mov.w	sl, #2
 801466e:	e7d1      	b.n	8014614 <_scanf_float+0x188>
 8014670:	b97d      	cbnz	r5, 8014692 <_scanf_float+0x206>
 8014672:	f1b9 0f00 	cmp.w	r9, #0
 8014676:	f47f af3c 	bne.w	80144f2 <_scanf_float+0x66>
 801467a:	6822      	ldr	r2, [r4, #0]
 801467c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014680:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014684:	f47f af39 	bne.w	80144fa <_scanf_float+0x6e>
 8014688:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801468c:	6022      	str	r2, [r4, #0]
 801468e:	2501      	movs	r5, #1
 8014690:	e7c0      	b.n	8014614 <_scanf_float+0x188>
 8014692:	2d03      	cmp	r5, #3
 8014694:	d0e2      	beq.n	801465c <_scanf_float+0x1d0>
 8014696:	2d05      	cmp	r5, #5
 8014698:	e7de      	b.n	8014658 <_scanf_float+0x1cc>
 801469a:	2d02      	cmp	r5, #2
 801469c:	f47f af26 	bne.w	80144ec <_scanf_float+0x60>
 80146a0:	2503      	movs	r5, #3
 80146a2:	e7b7      	b.n	8014614 <_scanf_float+0x188>
 80146a4:	2d06      	cmp	r5, #6
 80146a6:	f47f af21 	bne.w	80144ec <_scanf_float+0x60>
 80146aa:	2507      	movs	r5, #7
 80146ac:	e7b2      	b.n	8014614 <_scanf_float+0x188>
 80146ae:	6822      	ldr	r2, [r4, #0]
 80146b0:	0591      	lsls	r1, r2, #22
 80146b2:	f57f af1b 	bpl.w	80144ec <_scanf_float+0x60>
 80146b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80146ba:	6022      	str	r2, [r4, #0]
 80146bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80146c0:	e7a8      	b.n	8014614 <_scanf_float+0x188>
 80146c2:	6822      	ldr	r2, [r4, #0]
 80146c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80146c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80146cc:	d006      	beq.n	80146dc <_scanf_float+0x250>
 80146ce:	0550      	lsls	r0, r2, #21
 80146d0:	f57f af0c 	bpl.w	80144ec <_scanf_float+0x60>
 80146d4:	f1b9 0f00 	cmp.w	r9, #0
 80146d8:	f43f af0f 	beq.w	80144fa <_scanf_float+0x6e>
 80146dc:	0591      	lsls	r1, r2, #22
 80146de:	bf58      	it	pl
 80146e0:	9901      	ldrpl	r1, [sp, #4]
 80146e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80146e6:	bf58      	it	pl
 80146e8:	eba9 0101 	subpl.w	r1, r9, r1
 80146ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80146f0:	bf58      	it	pl
 80146f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80146f6:	6022      	str	r2, [r4, #0]
 80146f8:	f04f 0900 	mov.w	r9, #0
 80146fc:	e78a      	b.n	8014614 <_scanf_float+0x188>
 80146fe:	f04f 0a03 	mov.w	sl, #3
 8014702:	e787      	b.n	8014614 <_scanf_float+0x188>
 8014704:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014708:	4639      	mov	r1, r7
 801470a:	4640      	mov	r0, r8
 801470c:	4798      	blx	r3
 801470e:	2800      	cmp	r0, #0
 8014710:	f43f aedf 	beq.w	80144d2 <_scanf_float+0x46>
 8014714:	e6ea      	b.n	80144ec <_scanf_float+0x60>
 8014716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801471a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801471e:	463a      	mov	r2, r7
 8014720:	4640      	mov	r0, r8
 8014722:	4798      	blx	r3
 8014724:	6923      	ldr	r3, [r4, #16]
 8014726:	3b01      	subs	r3, #1
 8014728:	6123      	str	r3, [r4, #16]
 801472a:	e6ec      	b.n	8014506 <_scanf_float+0x7a>
 801472c:	1e6b      	subs	r3, r5, #1
 801472e:	2b06      	cmp	r3, #6
 8014730:	d825      	bhi.n	801477e <_scanf_float+0x2f2>
 8014732:	2d02      	cmp	r5, #2
 8014734:	d836      	bhi.n	80147a4 <_scanf_float+0x318>
 8014736:	455e      	cmp	r6, fp
 8014738:	f67f aee8 	bls.w	801450c <_scanf_float+0x80>
 801473c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014740:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014744:	463a      	mov	r2, r7
 8014746:	4640      	mov	r0, r8
 8014748:	4798      	blx	r3
 801474a:	6923      	ldr	r3, [r4, #16]
 801474c:	3b01      	subs	r3, #1
 801474e:	6123      	str	r3, [r4, #16]
 8014750:	e7f1      	b.n	8014736 <_scanf_float+0x2aa>
 8014752:	9802      	ldr	r0, [sp, #8]
 8014754:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014758:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801475c:	9002      	str	r0, [sp, #8]
 801475e:	463a      	mov	r2, r7
 8014760:	4640      	mov	r0, r8
 8014762:	4798      	blx	r3
 8014764:	6923      	ldr	r3, [r4, #16]
 8014766:	3b01      	subs	r3, #1
 8014768:	6123      	str	r3, [r4, #16]
 801476a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801476e:	fa5f fa8a 	uxtb.w	sl, sl
 8014772:	f1ba 0f02 	cmp.w	sl, #2
 8014776:	d1ec      	bne.n	8014752 <_scanf_float+0x2c6>
 8014778:	3d03      	subs	r5, #3
 801477a:	b2ed      	uxtb	r5, r5
 801477c:	1b76      	subs	r6, r6, r5
 801477e:	6823      	ldr	r3, [r4, #0]
 8014780:	05da      	lsls	r2, r3, #23
 8014782:	d52f      	bpl.n	80147e4 <_scanf_float+0x358>
 8014784:	055b      	lsls	r3, r3, #21
 8014786:	d510      	bpl.n	80147aa <_scanf_float+0x31e>
 8014788:	455e      	cmp	r6, fp
 801478a:	f67f aebf 	bls.w	801450c <_scanf_float+0x80>
 801478e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014792:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014796:	463a      	mov	r2, r7
 8014798:	4640      	mov	r0, r8
 801479a:	4798      	blx	r3
 801479c:	6923      	ldr	r3, [r4, #16]
 801479e:	3b01      	subs	r3, #1
 80147a0:	6123      	str	r3, [r4, #16]
 80147a2:	e7f1      	b.n	8014788 <_scanf_float+0x2fc>
 80147a4:	46aa      	mov	sl, r5
 80147a6:	9602      	str	r6, [sp, #8]
 80147a8:	e7df      	b.n	801476a <_scanf_float+0x2de>
 80147aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80147ae:	6923      	ldr	r3, [r4, #16]
 80147b0:	2965      	cmp	r1, #101	; 0x65
 80147b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80147b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80147ba:	6123      	str	r3, [r4, #16]
 80147bc:	d00c      	beq.n	80147d8 <_scanf_float+0x34c>
 80147be:	2945      	cmp	r1, #69	; 0x45
 80147c0:	d00a      	beq.n	80147d8 <_scanf_float+0x34c>
 80147c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80147c6:	463a      	mov	r2, r7
 80147c8:	4640      	mov	r0, r8
 80147ca:	4798      	blx	r3
 80147cc:	6923      	ldr	r3, [r4, #16]
 80147ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80147d2:	3b01      	subs	r3, #1
 80147d4:	1eb5      	subs	r5, r6, #2
 80147d6:	6123      	str	r3, [r4, #16]
 80147d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80147dc:	463a      	mov	r2, r7
 80147de:	4640      	mov	r0, r8
 80147e0:	4798      	blx	r3
 80147e2:	462e      	mov	r6, r5
 80147e4:	6825      	ldr	r5, [r4, #0]
 80147e6:	f015 0510 	ands.w	r5, r5, #16
 80147ea:	d158      	bne.n	801489e <_scanf_float+0x412>
 80147ec:	7035      	strb	r5, [r6, #0]
 80147ee:	6823      	ldr	r3, [r4, #0]
 80147f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80147f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80147f8:	d11c      	bne.n	8014834 <_scanf_float+0x3a8>
 80147fa:	9b01      	ldr	r3, [sp, #4]
 80147fc:	454b      	cmp	r3, r9
 80147fe:	eba3 0209 	sub.w	r2, r3, r9
 8014802:	d124      	bne.n	801484e <_scanf_float+0x3c2>
 8014804:	2200      	movs	r2, #0
 8014806:	4659      	mov	r1, fp
 8014808:	4640      	mov	r0, r8
 801480a:	f000 ff8f 	bl	801572c <_strtod_r>
 801480e:	9b03      	ldr	r3, [sp, #12]
 8014810:	6821      	ldr	r1, [r4, #0]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	f011 0f02 	tst.w	r1, #2
 8014818:	ec57 6b10 	vmov	r6, r7, d0
 801481c:	f103 0204 	add.w	r2, r3, #4
 8014820:	d020      	beq.n	8014864 <_scanf_float+0x3d8>
 8014822:	9903      	ldr	r1, [sp, #12]
 8014824:	600a      	str	r2, [r1, #0]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	e9c3 6700 	strd	r6, r7, [r3]
 801482c:	68e3      	ldr	r3, [r4, #12]
 801482e:	3301      	adds	r3, #1
 8014830:	60e3      	str	r3, [r4, #12]
 8014832:	e66c      	b.n	801450e <_scanf_float+0x82>
 8014834:	9b04      	ldr	r3, [sp, #16]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d0e4      	beq.n	8014804 <_scanf_float+0x378>
 801483a:	9905      	ldr	r1, [sp, #20]
 801483c:	230a      	movs	r3, #10
 801483e:	462a      	mov	r2, r5
 8014840:	3101      	adds	r1, #1
 8014842:	4640      	mov	r0, r8
 8014844:	f001 f856 	bl	80158f4 <_strtol_r>
 8014848:	9b04      	ldr	r3, [sp, #16]
 801484a:	9e05      	ldr	r6, [sp, #20]
 801484c:	1ac2      	subs	r2, r0, r3
 801484e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014852:	429e      	cmp	r6, r3
 8014854:	bf28      	it	cs
 8014856:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801485a:	4912      	ldr	r1, [pc, #72]	; (80148a4 <_scanf_float+0x418>)
 801485c:	4630      	mov	r0, r6
 801485e:	f000 f8ed 	bl	8014a3c <siprintf>
 8014862:	e7cf      	b.n	8014804 <_scanf_float+0x378>
 8014864:	f011 0f04 	tst.w	r1, #4
 8014868:	9903      	ldr	r1, [sp, #12]
 801486a:	600a      	str	r2, [r1, #0]
 801486c:	d1db      	bne.n	8014826 <_scanf_float+0x39a>
 801486e:	f8d3 8000 	ldr.w	r8, [r3]
 8014872:	ee10 2a10 	vmov	r2, s0
 8014876:	ee10 0a10 	vmov	r0, s0
 801487a:	463b      	mov	r3, r7
 801487c:	4639      	mov	r1, r7
 801487e:	f7ec f965 	bl	8000b4c <__aeabi_dcmpun>
 8014882:	b128      	cbz	r0, 8014890 <_scanf_float+0x404>
 8014884:	4808      	ldr	r0, [pc, #32]	; (80148a8 <_scanf_float+0x41c>)
 8014886:	f000 f89f 	bl	80149c8 <nanf>
 801488a:	ed88 0a00 	vstr	s0, [r8]
 801488e:	e7cd      	b.n	801482c <_scanf_float+0x3a0>
 8014890:	4630      	mov	r0, r6
 8014892:	4639      	mov	r1, r7
 8014894:	f7ec f9b8 	bl	8000c08 <__aeabi_d2f>
 8014898:	f8c8 0000 	str.w	r0, [r8]
 801489c:	e7c6      	b.n	801482c <_scanf_float+0x3a0>
 801489e:	2500      	movs	r5, #0
 80148a0:	e635      	b.n	801450e <_scanf_float+0x82>
 80148a2:	bf00      	nop
 80148a4:	0801a1c8 	.word	0x0801a1c8
 80148a8:	0801a640 	.word	0x0801a640

080148ac <iprintf>:
 80148ac:	b40f      	push	{r0, r1, r2, r3}
 80148ae:	4b0a      	ldr	r3, [pc, #40]	; (80148d8 <iprintf+0x2c>)
 80148b0:	b513      	push	{r0, r1, r4, lr}
 80148b2:	681c      	ldr	r4, [r3, #0]
 80148b4:	b124      	cbz	r4, 80148c0 <iprintf+0x14>
 80148b6:	69a3      	ldr	r3, [r4, #24]
 80148b8:	b913      	cbnz	r3, 80148c0 <iprintf+0x14>
 80148ba:	4620      	mov	r0, r4
 80148bc:	f002 f87a 	bl	80169b4 <__sinit>
 80148c0:	ab05      	add	r3, sp, #20
 80148c2:	9a04      	ldr	r2, [sp, #16]
 80148c4:	68a1      	ldr	r1, [r4, #8]
 80148c6:	9301      	str	r3, [sp, #4]
 80148c8:	4620      	mov	r0, r4
 80148ca:	f003 fbff 	bl	80180cc <_vfiprintf_r>
 80148ce:	b002      	add	sp, #8
 80148d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148d4:	b004      	add	sp, #16
 80148d6:	4770      	bx	lr
 80148d8:	20000180 	.word	0x20000180

080148dc <_puts_r>:
 80148dc:	b570      	push	{r4, r5, r6, lr}
 80148de:	460e      	mov	r6, r1
 80148e0:	4605      	mov	r5, r0
 80148e2:	b118      	cbz	r0, 80148ec <_puts_r+0x10>
 80148e4:	6983      	ldr	r3, [r0, #24]
 80148e6:	b90b      	cbnz	r3, 80148ec <_puts_r+0x10>
 80148e8:	f002 f864 	bl	80169b4 <__sinit>
 80148ec:	69ab      	ldr	r3, [r5, #24]
 80148ee:	68ac      	ldr	r4, [r5, #8]
 80148f0:	b913      	cbnz	r3, 80148f8 <_puts_r+0x1c>
 80148f2:	4628      	mov	r0, r5
 80148f4:	f002 f85e 	bl	80169b4 <__sinit>
 80148f8:	4b2c      	ldr	r3, [pc, #176]	; (80149ac <_puts_r+0xd0>)
 80148fa:	429c      	cmp	r4, r3
 80148fc:	d120      	bne.n	8014940 <_puts_r+0x64>
 80148fe:	686c      	ldr	r4, [r5, #4]
 8014900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014902:	07db      	lsls	r3, r3, #31
 8014904:	d405      	bmi.n	8014912 <_puts_r+0x36>
 8014906:	89a3      	ldrh	r3, [r4, #12]
 8014908:	0598      	lsls	r0, r3, #22
 801490a:	d402      	bmi.n	8014912 <_puts_r+0x36>
 801490c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801490e:	f002 fc62 	bl	80171d6 <__retarget_lock_acquire_recursive>
 8014912:	89a3      	ldrh	r3, [r4, #12]
 8014914:	0719      	lsls	r1, r3, #28
 8014916:	d51d      	bpl.n	8014954 <_puts_r+0x78>
 8014918:	6923      	ldr	r3, [r4, #16]
 801491a:	b1db      	cbz	r3, 8014954 <_puts_r+0x78>
 801491c:	3e01      	subs	r6, #1
 801491e:	68a3      	ldr	r3, [r4, #8]
 8014920:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014924:	3b01      	subs	r3, #1
 8014926:	60a3      	str	r3, [r4, #8]
 8014928:	bb39      	cbnz	r1, 801497a <_puts_r+0x9e>
 801492a:	2b00      	cmp	r3, #0
 801492c:	da38      	bge.n	80149a0 <_puts_r+0xc4>
 801492e:	4622      	mov	r2, r4
 8014930:	210a      	movs	r1, #10
 8014932:	4628      	mov	r0, r5
 8014934:	f000 ffea 	bl	801590c <__swbuf_r>
 8014938:	3001      	adds	r0, #1
 801493a:	d011      	beq.n	8014960 <_puts_r+0x84>
 801493c:	250a      	movs	r5, #10
 801493e:	e011      	b.n	8014964 <_puts_r+0x88>
 8014940:	4b1b      	ldr	r3, [pc, #108]	; (80149b0 <_puts_r+0xd4>)
 8014942:	429c      	cmp	r4, r3
 8014944:	d101      	bne.n	801494a <_puts_r+0x6e>
 8014946:	68ac      	ldr	r4, [r5, #8]
 8014948:	e7da      	b.n	8014900 <_puts_r+0x24>
 801494a:	4b1a      	ldr	r3, [pc, #104]	; (80149b4 <_puts_r+0xd8>)
 801494c:	429c      	cmp	r4, r3
 801494e:	bf08      	it	eq
 8014950:	68ec      	ldreq	r4, [r5, #12]
 8014952:	e7d5      	b.n	8014900 <_puts_r+0x24>
 8014954:	4621      	mov	r1, r4
 8014956:	4628      	mov	r0, r5
 8014958:	f001 f82a 	bl	80159b0 <__swsetup_r>
 801495c:	2800      	cmp	r0, #0
 801495e:	d0dd      	beq.n	801491c <_puts_r+0x40>
 8014960:	f04f 35ff 	mov.w	r5, #4294967295
 8014964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014966:	07da      	lsls	r2, r3, #31
 8014968:	d405      	bmi.n	8014976 <_puts_r+0x9a>
 801496a:	89a3      	ldrh	r3, [r4, #12]
 801496c:	059b      	lsls	r3, r3, #22
 801496e:	d402      	bmi.n	8014976 <_puts_r+0x9a>
 8014970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014972:	f002 fc31 	bl	80171d8 <__retarget_lock_release_recursive>
 8014976:	4628      	mov	r0, r5
 8014978:	bd70      	pop	{r4, r5, r6, pc}
 801497a:	2b00      	cmp	r3, #0
 801497c:	da04      	bge.n	8014988 <_puts_r+0xac>
 801497e:	69a2      	ldr	r2, [r4, #24]
 8014980:	429a      	cmp	r2, r3
 8014982:	dc06      	bgt.n	8014992 <_puts_r+0xb6>
 8014984:	290a      	cmp	r1, #10
 8014986:	d004      	beq.n	8014992 <_puts_r+0xb6>
 8014988:	6823      	ldr	r3, [r4, #0]
 801498a:	1c5a      	adds	r2, r3, #1
 801498c:	6022      	str	r2, [r4, #0]
 801498e:	7019      	strb	r1, [r3, #0]
 8014990:	e7c5      	b.n	801491e <_puts_r+0x42>
 8014992:	4622      	mov	r2, r4
 8014994:	4628      	mov	r0, r5
 8014996:	f000 ffb9 	bl	801590c <__swbuf_r>
 801499a:	3001      	adds	r0, #1
 801499c:	d1bf      	bne.n	801491e <_puts_r+0x42>
 801499e:	e7df      	b.n	8014960 <_puts_r+0x84>
 80149a0:	6823      	ldr	r3, [r4, #0]
 80149a2:	250a      	movs	r5, #10
 80149a4:	1c5a      	adds	r2, r3, #1
 80149a6:	6022      	str	r2, [r4, #0]
 80149a8:	701d      	strb	r5, [r3, #0]
 80149aa:	e7db      	b.n	8014964 <_puts_r+0x88>
 80149ac:	0801a3d8 	.word	0x0801a3d8
 80149b0:	0801a3f8 	.word	0x0801a3f8
 80149b4:	0801a3b8 	.word	0x0801a3b8

080149b8 <puts>:
 80149b8:	4b02      	ldr	r3, [pc, #8]	; (80149c4 <puts+0xc>)
 80149ba:	4601      	mov	r1, r0
 80149bc:	6818      	ldr	r0, [r3, #0]
 80149be:	f7ff bf8d 	b.w	80148dc <_puts_r>
 80149c2:	bf00      	nop
 80149c4:	20000180 	.word	0x20000180

080149c8 <nanf>:
 80149c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80149d0 <nanf+0x8>
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop
 80149d0:	7fc00000 	.word	0x7fc00000

080149d4 <sniprintf>:
 80149d4:	b40c      	push	{r2, r3}
 80149d6:	b530      	push	{r4, r5, lr}
 80149d8:	4b17      	ldr	r3, [pc, #92]	; (8014a38 <sniprintf+0x64>)
 80149da:	1e0c      	subs	r4, r1, #0
 80149dc:	681d      	ldr	r5, [r3, #0]
 80149de:	b09d      	sub	sp, #116	; 0x74
 80149e0:	da08      	bge.n	80149f4 <sniprintf+0x20>
 80149e2:	238b      	movs	r3, #139	; 0x8b
 80149e4:	602b      	str	r3, [r5, #0]
 80149e6:	f04f 30ff 	mov.w	r0, #4294967295
 80149ea:	b01d      	add	sp, #116	; 0x74
 80149ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149f0:	b002      	add	sp, #8
 80149f2:	4770      	bx	lr
 80149f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80149f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80149fc:	bf14      	ite	ne
 80149fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014a02:	4623      	moveq	r3, r4
 8014a04:	9304      	str	r3, [sp, #16]
 8014a06:	9307      	str	r3, [sp, #28]
 8014a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014a0c:	9002      	str	r0, [sp, #8]
 8014a0e:	9006      	str	r0, [sp, #24]
 8014a10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014a16:	ab21      	add	r3, sp, #132	; 0x84
 8014a18:	a902      	add	r1, sp, #8
 8014a1a:	4628      	mov	r0, r5
 8014a1c:	9301      	str	r3, [sp, #4]
 8014a1e:	f003 fa2b 	bl	8017e78 <_svfiprintf_r>
 8014a22:	1c43      	adds	r3, r0, #1
 8014a24:	bfbc      	itt	lt
 8014a26:	238b      	movlt	r3, #139	; 0x8b
 8014a28:	602b      	strlt	r3, [r5, #0]
 8014a2a:	2c00      	cmp	r4, #0
 8014a2c:	d0dd      	beq.n	80149ea <sniprintf+0x16>
 8014a2e:	9b02      	ldr	r3, [sp, #8]
 8014a30:	2200      	movs	r2, #0
 8014a32:	701a      	strb	r2, [r3, #0]
 8014a34:	e7d9      	b.n	80149ea <sniprintf+0x16>
 8014a36:	bf00      	nop
 8014a38:	20000180 	.word	0x20000180

08014a3c <siprintf>:
 8014a3c:	b40e      	push	{r1, r2, r3}
 8014a3e:	b500      	push	{lr}
 8014a40:	b09c      	sub	sp, #112	; 0x70
 8014a42:	ab1d      	add	r3, sp, #116	; 0x74
 8014a44:	9002      	str	r0, [sp, #8]
 8014a46:	9006      	str	r0, [sp, #24]
 8014a48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a4c:	4809      	ldr	r0, [pc, #36]	; (8014a74 <siprintf+0x38>)
 8014a4e:	9107      	str	r1, [sp, #28]
 8014a50:	9104      	str	r1, [sp, #16]
 8014a52:	4909      	ldr	r1, [pc, #36]	; (8014a78 <siprintf+0x3c>)
 8014a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a58:	9105      	str	r1, [sp, #20]
 8014a5a:	6800      	ldr	r0, [r0, #0]
 8014a5c:	9301      	str	r3, [sp, #4]
 8014a5e:	a902      	add	r1, sp, #8
 8014a60:	f003 fa0a 	bl	8017e78 <_svfiprintf_r>
 8014a64:	9b02      	ldr	r3, [sp, #8]
 8014a66:	2200      	movs	r2, #0
 8014a68:	701a      	strb	r2, [r3, #0]
 8014a6a:	b01c      	add	sp, #112	; 0x70
 8014a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a70:	b003      	add	sp, #12
 8014a72:	4770      	bx	lr
 8014a74:	20000180 	.word	0x20000180
 8014a78:	ffff0208 	.word	0xffff0208

08014a7c <strchr>:
 8014a7c:	b2c9      	uxtb	r1, r1
 8014a7e:	4603      	mov	r3, r0
 8014a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a84:	b11a      	cbz	r2, 8014a8e <strchr+0x12>
 8014a86:	428a      	cmp	r2, r1
 8014a88:	d1f9      	bne.n	8014a7e <strchr+0x2>
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	4770      	bx	lr
 8014a8e:	2900      	cmp	r1, #0
 8014a90:	bf18      	it	ne
 8014a92:	2300      	movne	r3, #0
 8014a94:	e7f9      	b.n	8014a8a <strchr+0xe>

08014a96 <strncmp>:
 8014a96:	b510      	push	{r4, lr}
 8014a98:	b16a      	cbz	r2, 8014ab6 <strncmp+0x20>
 8014a9a:	3901      	subs	r1, #1
 8014a9c:	1884      	adds	r4, r0, r2
 8014a9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014aa2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d103      	bne.n	8014ab2 <strncmp+0x1c>
 8014aaa:	42a0      	cmp	r0, r4
 8014aac:	d001      	beq.n	8014ab2 <strncmp+0x1c>
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d1f5      	bne.n	8014a9e <strncmp+0x8>
 8014ab2:	1a98      	subs	r0, r3, r2
 8014ab4:	bd10      	pop	{r4, pc}
 8014ab6:	4610      	mov	r0, r2
 8014ab8:	e7fc      	b.n	8014ab4 <strncmp+0x1e>

08014aba <strncpy>:
 8014aba:	b510      	push	{r4, lr}
 8014abc:	3901      	subs	r1, #1
 8014abe:	4603      	mov	r3, r0
 8014ac0:	b132      	cbz	r2, 8014ad0 <strncpy+0x16>
 8014ac2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014ac6:	f803 4b01 	strb.w	r4, [r3], #1
 8014aca:	3a01      	subs	r2, #1
 8014acc:	2c00      	cmp	r4, #0
 8014ace:	d1f7      	bne.n	8014ac0 <strncpy+0x6>
 8014ad0:	441a      	add	r2, r3
 8014ad2:	2100      	movs	r1, #0
 8014ad4:	4293      	cmp	r3, r2
 8014ad6:	d100      	bne.n	8014ada <strncpy+0x20>
 8014ad8:	bd10      	pop	{r4, pc}
 8014ada:	f803 1b01 	strb.w	r1, [r3], #1
 8014ade:	e7f9      	b.n	8014ad4 <strncpy+0x1a>

08014ae0 <sulp>:
 8014ae0:	b570      	push	{r4, r5, r6, lr}
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	460d      	mov	r5, r1
 8014ae6:	ec45 4b10 	vmov	d0, r4, r5
 8014aea:	4616      	mov	r6, r2
 8014aec:	f002 ff60 	bl	80179b0 <__ulp>
 8014af0:	ec51 0b10 	vmov	r0, r1, d0
 8014af4:	b17e      	cbz	r6, 8014b16 <sulp+0x36>
 8014af6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014afa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	dd09      	ble.n	8014b16 <sulp+0x36>
 8014b02:	051b      	lsls	r3, r3, #20
 8014b04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014b08:	2400      	movs	r4, #0
 8014b0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014b0e:	4622      	mov	r2, r4
 8014b10:	462b      	mov	r3, r5
 8014b12:	f7eb fd81 	bl	8000618 <__aeabi_dmul>
 8014b16:	bd70      	pop	{r4, r5, r6, pc}

08014b18 <_strtod_l>:
 8014b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b1c:	b0a3      	sub	sp, #140	; 0x8c
 8014b1e:	461f      	mov	r7, r3
 8014b20:	2300      	movs	r3, #0
 8014b22:	931e      	str	r3, [sp, #120]	; 0x78
 8014b24:	4ba4      	ldr	r3, [pc, #656]	; (8014db8 <_strtod_l+0x2a0>)
 8014b26:	9219      	str	r2, [sp, #100]	; 0x64
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	9307      	str	r3, [sp, #28]
 8014b2c:	4604      	mov	r4, r0
 8014b2e:	4618      	mov	r0, r3
 8014b30:	4688      	mov	r8, r1
 8014b32:	f7eb fb5d 	bl	80001f0 <strlen>
 8014b36:	f04f 0a00 	mov.w	sl, #0
 8014b3a:	4605      	mov	r5, r0
 8014b3c:	f04f 0b00 	mov.w	fp, #0
 8014b40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014b44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014b46:	781a      	ldrb	r2, [r3, #0]
 8014b48:	2a2b      	cmp	r2, #43	; 0x2b
 8014b4a:	d04c      	beq.n	8014be6 <_strtod_l+0xce>
 8014b4c:	d839      	bhi.n	8014bc2 <_strtod_l+0xaa>
 8014b4e:	2a0d      	cmp	r2, #13
 8014b50:	d832      	bhi.n	8014bb8 <_strtod_l+0xa0>
 8014b52:	2a08      	cmp	r2, #8
 8014b54:	d832      	bhi.n	8014bbc <_strtod_l+0xa4>
 8014b56:	2a00      	cmp	r2, #0
 8014b58:	d03c      	beq.n	8014bd4 <_strtod_l+0xbc>
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8014b5e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014b60:	7833      	ldrb	r3, [r6, #0]
 8014b62:	2b30      	cmp	r3, #48	; 0x30
 8014b64:	f040 80b4 	bne.w	8014cd0 <_strtod_l+0x1b8>
 8014b68:	7873      	ldrb	r3, [r6, #1]
 8014b6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014b6e:	2b58      	cmp	r3, #88	; 0x58
 8014b70:	d16c      	bne.n	8014c4c <_strtod_l+0x134>
 8014b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b74:	9301      	str	r3, [sp, #4]
 8014b76:	ab1e      	add	r3, sp, #120	; 0x78
 8014b78:	9702      	str	r7, [sp, #8]
 8014b7a:	9300      	str	r3, [sp, #0]
 8014b7c:	4a8f      	ldr	r2, [pc, #572]	; (8014dbc <_strtod_l+0x2a4>)
 8014b7e:	ab1f      	add	r3, sp, #124	; 0x7c
 8014b80:	a91d      	add	r1, sp, #116	; 0x74
 8014b82:	4620      	mov	r0, r4
 8014b84:	f002 f81a 	bl	8016bbc <__gethex>
 8014b88:	f010 0707 	ands.w	r7, r0, #7
 8014b8c:	4605      	mov	r5, r0
 8014b8e:	d005      	beq.n	8014b9c <_strtod_l+0x84>
 8014b90:	2f06      	cmp	r7, #6
 8014b92:	d12a      	bne.n	8014bea <_strtod_l+0xd2>
 8014b94:	3601      	adds	r6, #1
 8014b96:	2300      	movs	r3, #0
 8014b98:	961d      	str	r6, [sp, #116]	; 0x74
 8014b9a:	930e      	str	r3, [sp, #56]	; 0x38
 8014b9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f040 8596 	bne.w	80156d0 <_strtod_l+0xbb8>
 8014ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ba6:	b1db      	cbz	r3, 8014be0 <_strtod_l+0xc8>
 8014ba8:	4652      	mov	r2, sl
 8014baa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014bae:	ec43 2b10 	vmov	d0, r2, r3
 8014bb2:	b023      	add	sp, #140	; 0x8c
 8014bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bb8:	2a20      	cmp	r2, #32
 8014bba:	d1ce      	bne.n	8014b5a <_strtod_l+0x42>
 8014bbc:	3301      	adds	r3, #1
 8014bbe:	931d      	str	r3, [sp, #116]	; 0x74
 8014bc0:	e7c0      	b.n	8014b44 <_strtod_l+0x2c>
 8014bc2:	2a2d      	cmp	r2, #45	; 0x2d
 8014bc4:	d1c9      	bne.n	8014b5a <_strtod_l+0x42>
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	920e      	str	r2, [sp, #56]	; 0x38
 8014bca:	1c5a      	adds	r2, r3, #1
 8014bcc:	921d      	str	r2, [sp, #116]	; 0x74
 8014bce:	785b      	ldrb	r3, [r3, #1]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d1c4      	bne.n	8014b5e <_strtod_l+0x46>
 8014bd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014bd6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	f040 8576 	bne.w	80156cc <_strtod_l+0xbb4>
 8014be0:	4652      	mov	r2, sl
 8014be2:	465b      	mov	r3, fp
 8014be4:	e7e3      	b.n	8014bae <_strtod_l+0x96>
 8014be6:	2200      	movs	r2, #0
 8014be8:	e7ee      	b.n	8014bc8 <_strtod_l+0xb0>
 8014bea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014bec:	b13a      	cbz	r2, 8014bfe <_strtod_l+0xe6>
 8014bee:	2135      	movs	r1, #53	; 0x35
 8014bf0:	a820      	add	r0, sp, #128	; 0x80
 8014bf2:	f002 ffe8 	bl	8017bc6 <__copybits>
 8014bf6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f002 fbad 	bl	8017358 <_Bfree>
 8014bfe:	3f01      	subs	r7, #1
 8014c00:	2f05      	cmp	r7, #5
 8014c02:	d807      	bhi.n	8014c14 <_strtod_l+0xfc>
 8014c04:	e8df f007 	tbb	[pc, r7]
 8014c08:	1d180b0e 	.word	0x1d180b0e
 8014c0c:	030e      	.short	0x030e
 8014c0e:	f04f 0b00 	mov.w	fp, #0
 8014c12:	46da      	mov	sl, fp
 8014c14:	0728      	lsls	r0, r5, #28
 8014c16:	d5c1      	bpl.n	8014b9c <_strtod_l+0x84>
 8014c18:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014c1c:	e7be      	b.n	8014b9c <_strtod_l+0x84>
 8014c1e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8014c22:	e7f7      	b.n	8014c14 <_strtod_l+0xfc>
 8014c24:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8014c28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014c2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014c2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014c32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014c36:	e7ed      	b.n	8014c14 <_strtod_l+0xfc>
 8014c38:	f8df b184 	ldr.w	fp, [pc, #388]	; 8014dc0 <_strtod_l+0x2a8>
 8014c3c:	f04f 0a00 	mov.w	sl, #0
 8014c40:	e7e8      	b.n	8014c14 <_strtod_l+0xfc>
 8014c42:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014c46:	f04f 3aff 	mov.w	sl, #4294967295
 8014c4a:	e7e3      	b.n	8014c14 <_strtod_l+0xfc>
 8014c4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014c4e:	1c5a      	adds	r2, r3, #1
 8014c50:	921d      	str	r2, [sp, #116]	; 0x74
 8014c52:	785b      	ldrb	r3, [r3, #1]
 8014c54:	2b30      	cmp	r3, #48	; 0x30
 8014c56:	d0f9      	beq.n	8014c4c <_strtod_l+0x134>
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d09f      	beq.n	8014b9c <_strtod_l+0x84>
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	f04f 0900 	mov.w	r9, #0
 8014c62:	9304      	str	r3, [sp, #16]
 8014c64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014c66:	930a      	str	r3, [sp, #40]	; 0x28
 8014c68:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014c6c:	464f      	mov	r7, r9
 8014c6e:	220a      	movs	r2, #10
 8014c70:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014c72:	7806      	ldrb	r6, [r0, #0]
 8014c74:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014c78:	b2d9      	uxtb	r1, r3
 8014c7a:	2909      	cmp	r1, #9
 8014c7c:	d92a      	bls.n	8014cd4 <_strtod_l+0x1bc>
 8014c7e:	9907      	ldr	r1, [sp, #28]
 8014c80:	462a      	mov	r2, r5
 8014c82:	f7ff ff08 	bl	8014a96 <strncmp>
 8014c86:	b398      	cbz	r0, 8014cf0 <_strtod_l+0x1d8>
 8014c88:	2000      	movs	r0, #0
 8014c8a:	4633      	mov	r3, r6
 8014c8c:	463d      	mov	r5, r7
 8014c8e:	9007      	str	r0, [sp, #28]
 8014c90:	4602      	mov	r2, r0
 8014c92:	2b65      	cmp	r3, #101	; 0x65
 8014c94:	d001      	beq.n	8014c9a <_strtod_l+0x182>
 8014c96:	2b45      	cmp	r3, #69	; 0x45
 8014c98:	d118      	bne.n	8014ccc <_strtod_l+0x1b4>
 8014c9a:	b91d      	cbnz	r5, 8014ca4 <_strtod_l+0x18c>
 8014c9c:	9b04      	ldr	r3, [sp, #16]
 8014c9e:	4303      	orrs	r3, r0
 8014ca0:	d098      	beq.n	8014bd4 <_strtod_l+0xbc>
 8014ca2:	2500      	movs	r5, #0
 8014ca4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8014ca8:	f108 0301 	add.w	r3, r8, #1
 8014cac:	931d      	str	r3, [sp, #116]	; 0x74
 8014cae:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014cb2:	2b2b      	cmp	r3, #43	; 0x2b
 8014cb4:	d075      	beq.n	8014da2 <_strtod_l+0x28a>
 8014cb6:	2b2d      	cmp	r3, #45	; 0x2d
 8014cb8:	d07b      	beq.n	8014db2 <_strtod_l+0x29a>
 8014cba:	f04f 0c00 	mov.w	ip, #0
 8014cbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014cc2:	2909      	cmp	r1, #9
 8014cc4:	f240 8082 	bls.w	8014dcc <_strtod_l+0x2b4>
 8014cc8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014ccc:	2600      	movs	r6, #0
 8014cce:	e09d      	b.n	8014e0c <_strtod_l+0x2f4>
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	e7c4      	b.n	8014c5e <_strtod_l+0x146>
 8014cd4:	2f08      	cmp	r7, #8
 8014cd6:	bfd8      	it	le
 8014cd8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014cda:	f100 0001 	add.w	r0, r0, #1
 8014cde:	bfda      	itte	le
 8014ce0:	fb02 3301 	mlale	r3, r2, r1, r3
 8014ce4:	9309      	strle	r3, [sp, #36]	; 0x24
 8014ce6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014cea:	3701      	adds	r7, #1
 8014cec:	901d      	str	r0, [sp, #116]	; 0x74
 8014cee:	e7bf      	b.n	8014c70 <_strtod_l+0x158>
 8014cf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014cf2:	195a      	adds	r2, r3, r5
 8014cf4:	921d      	str	r2, [sp, #116]	; 0x74
 8014cf6:	5d5b      	ldrb	r3, [r3, r5]
 8014cf8:	2f00      	cmp	r7, #0
 8014cfa:	d037      	beq.n	8014d6c <_strtod_l+0x254>
 8014cfc:	9007      	str	r0, [sp, #28]
 8014cfe:	463d      	mov	r5, r7
 8014d00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014d04:	2a09      	cmp	r2, #9
 8014d06:	d912      	bls.n	8014d2e <_strtod_l+0x216>
 8014d08:	2201      	movs	r2, #1
 8014d0a:	e7c2      	b.n	8014c92 <_strtod_l+0x17a>
 8014d0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014d0e:	1c5a      	adds	r2, r3, #1
 8014d10:	921d      	str	r2, [sp, #116]	; 0x74
 8014d12:	785b      	ldrb	r3, [r3, #1]
 8014d14:	3001      	adds	r0, #1
 8014d16:	2b30      	cmp	r3, #48	; 0x30
 8014d18:	d0f8      	beq.n	8014d0c <_strtod_l+0x1f4>
 8014d1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014d1e:	2a08      	cmp	r2, #8
 8014d20:	f200 84db 	bhi.w	80156da <_strtod_l+0xbc2>
 8014d24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014d26:	9007      	str	r0, [sp, #28]
 8014d28:	2000      	movs	r0, #0
 8014d2a:	920a      	str	r2, [sp, #40]	; 0x28
 8014d2c:	4605      	mov	r5, r0
 8014d2e:	3b30      	subs	r3, #48	; 0x30
 8014d30:	f100 0201 	add.w	r2, r0, #1
 8014d34:	d014      	beq.n	8014d60 <_strtod_l+0x248>
 8014d36:	9907      	ldr	r1, [sp, #28]
 8014d38:	4411      	add	r1, r2
 8014d3a:	9107      	str	r1, [sp, #28]
 8014d3c:	462a      	mov	r2, r5
 8014d3e:	eb00 0e05 	add.w	lr, r0, r5
 8014d42:	210a      	movs	r1, #10
 8014d44:	4572      	cmp	r2, lr
 8014d46:	d113      	bne.n	8014d70 <_strtod_l+0x258>
 8014d48:	182a      	adds	r2, r5, r0
 8014d4a:	2a08      	cmp	r2, #8
 8014d4c:	f105 0501 	add.w	r5, r5, #1
 8014d50:	4405      	add	r5, r0
 8014d52:	dc1c      	bgt.n	8014d8e <_strtod_l+0x276>
 8014d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d56:	220a      	movs	r2, #10
 8014d58:	fb02 3301 	mla	r3, r2, r1, r3
 8014d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d5e:	2200      	movs	r2, #0
 8014d60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014d62:	1c59      	adds	r1, r3, #1
 8014d64:	911d      	str	r1, [sp, #116]	; 0x74
 8014d66:	785b      	ldrb	r3, [r3, #1]
 8014d68:	4610      	mov	r0, r2
 8014d6a:	e7c9      	b.n	8014d00 <_strtod_l+0x1e8>
 8014d6c:	4638      	mov	r0, r7
 8014d6e:	e7d2      	b.n	8014d16 <_strtod_l+0x1fe>
 8014d70:	2a08      	cmp	r2, #8
 8014d72:	dc04      	bgt.n	8014d7e <_strtod_l+0x266>
 8014d74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014d76:	434e      	muls	r6, r1
 8014d78:	9609      	str	r6, [sp, #36]	; 0x24
 8014d7a:	3201      	adds	r2, #1
 8014d7c:	e7e2      	b.n	8014d44 <_strtod_l+0x22c>
 8014d7e:	f102 0c01 	add.w	ip, r2, #1
 8014d82:	f1bc 0f10 	cmp.w	ip, #16
 8014d86:	bfd8      	it	le
 8014d88:	fb01 f909 	mulle.w	r9, r1, r9
 8014d8c:	e7f5      	b.n	8014d7a <_strtod_l+0x262>
 8014d8e:	2d10      	cmp	r5, #16
 8014d90:	bfdc      	itt	le
 8014d92:	220a      	movle	r2, #10
 8014d94:	fb02 3909 	mlale	r9, r2, r9, r3
 8014d98:	e7e1      	b.n	8014d5e <_strtod_l+0x246>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	9307      	str	r3, [sp, #28]
 8014d9e:	2201      	movs	r2, #1
 8014da0:	e77c      	b.n	8014c9c <_strtod_l+0x184>
 8014da2:	f04f 0c00 	mov.w	ip, #0
 8014da6:	f108 0302 	add.w	r3, r8, #2
 8014daa:	931d      	str	r3, [sp, #116]	; 0x74
 8014dac:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014db0:	e785      	b.n	8014cbe <_strtod_l+0x1a6>
 8014db2:	f04f 0c01 	mov.w	ip, #1
 8014db6:	e7f6      	b.n	8014da6 <_strtod_l+0x28e>
 8014db8:	0801a484 	.word	0x0801a484
 8014dbc:	0801a1d0 	.word	0x0801a1d0
 8014dc0:	7ff00000 	.word	0x7ff00000
 8014dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014dc6:	1c59      	adds	r1, r3, #1
 8014dc8:	911d      	str	r1, [sp, #116]	; 0x74
 8014dca:	785b      	ldrb	r3, [r3, #1]
 8014dcc:	2b30      	cmp	r3, #48	; 0x30
 8014dce:	d0f9      	beq.n	8014dc4 <_strtod_l+0x2ac>
 8014dd0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8014dd4:	2908      	cmp	r1, #8
 8014dd6:	f63f af79 	bhi.w	8014ccc <_strtod_l+0x1b4>
 8014dda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014dde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014de0:	9308      	str	r3, [sp, #32]
 8014de2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014de4:	1c59      	adds	r1, r3, #1
 8014de6:	911d      	str	r1, [sp, #116]	; 0x74
 8014de8:	785b      	ldrb	r3, [r3, #1]
 8014dea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8014dee:	2e09      	cmp	r6, #9
 8014df0:	d937      	bls.n	8014e62 <_strtod_l+0x34a>
 8014df2:	9e08      	ldr	r6, [sp, #32]
 8014df4:	1b89      	subs	r1, r1, r6
 8014df6:	2908      	cmp	r1, #8
 8014df8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014dfc:	dc02      	bgt.n	8014e04 <_strtod_l+0x2ec>
 8014dfe:	4576      	cmp	r6, lr
 8014e00:	bfa8      	it	ge
 8014e02:	4676      	movge	r6, lr
 8014e04:	f1bc 0f00 	cmp.w	ip, #0
 8014e08:	d000      	beq.n	8014e0c <_strtod_l+0x2f4>
 8014e0a:	4276      	negs	r6, r6
 8014e0c:	2d00      	cmp	r5, #0
 8014e0e:	d14f      	bne.n	8014eb0 <_strtod_l+0x398>
 8014e10:	9904      	ldr	r1, [sp, #16]
 8014e12:	4301      	orrs	r1, r0
 8014e14:	f47f aec2 	bne.w	8014b9c <_strtod_l+0x84>
 8014e18:	2a00      	cmp	r2, #0
 8014e1a:	f47f aedb 	bne.w	8014bd4 <_strtod_l+0xbc>
 8014e1e:	2b69      	cmp	r3, #105	; 0x69
 8014e20:	d027      	beq.n	8014e72 <_strtod_l+0x35a>
 8014e22:	dc24      	bgt.n	8014e6e <_strtod_l+0x356>
 8014e24:	2b49      	cmp	r3, #73	; 0x49
 8014e26:	d024      	beq.n	8014e72 <_strtod_l+0x35a>
 8014e28:	2b4e      	cmp	r3, #78	; 0x4e
 8014e2a:	f47f aed3 	bne.w	8014bd4 <_strtod_l+0xbc>
 8014e2e:	499e      	ldr	r1, [pc, #632]	; (80150a8 <_strtod_l+0x590>)
 8014e30:	a81d      	add	r0, sp, #116	; 0x74
 8014e32:	f002 f91b 	bl	801706c <__match>
 8014e36:	2800      	cmp	r0, #0
 8014e38:	f43f aecc 	beq.w	8014bd4 <_strtod_l+0xbc>
 8014e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014e3e:	781b      	ldrb	r3, [r3, #0]
 8014e40:	2b28      	cmp	r3, #40	; 0x28
 8014e42:	d12d      	bne.n	8014ea0 <_strtod_l+0x388>
 8014e44:	4999      	ldr	r1, [pc, #612]	; (80150ac <_strtod_l+0x594>)
 8014e46:	aa20      	add	r2, sp, #128	; 0x80
 8014e48:	a81d      	add	r0, sp, #116	; 0x74
 8014e4a:	f002 f923 	bl	8017094 <__hexnan>
 8014e4e:	2805      	cmp	r0, #5
 8014e50:	d126      	bne.n	8014ea0 <_strtod_l+0x388>
 8014e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e54:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8014e58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014e5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014e60:	e69c      	b.n	8014b9c <_strtod_l+0x84>
 8014e62:	210a      	movs	r1, #10
 8014e64:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014e68:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014e6c:	e7b9      	b.n	8014de2 <_strtod_l+0x2ca>
 8014e6e:	2b6e      	cmp	r3, #110	; 0x6e
 8014e70:	e7db      	b.n	8014e2a <_strtod_l+0x312>
 8014e72:	498f      	ldr	r1, [pc, #572]	; (80150b0 <_strtod_l+0x598>)
 8014e74:	a81d      	add	r0, sp, #116	; 0x74
 8014e76:	f002 f8f9 	bl	801706c <__match>
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	f43f aeaa 	beq.w	8014bd4 <_strtod_l+0xbc>
 8014e80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014e82:	498c      	ldr	r1, [pc, #560]	; (80150b4 <_strtod_l+0x59c>)
 8014e84:	3b01      	subs	r3, #1
 8014e86:	a81d      	add	r0, sp, #116	; 0x74
 8014e88:	931d      	str	r3, [sp, #116]	; 0x74
 8014e8a:	f002 f8ef 	bl	801706c <__match>
 8014e8e:	b910      	cbnz	r0, 8014e96 <_strtod_l+0x37e>
 8014e90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014e92:	3301      	adds	r3, #1
 8014e94:	931d      	str	r3, [sp, #116]	; 0x74
 8014e96:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80150c4 <_strtod_l+0x5ac>
 8014e9a:	f04f 0a00 	mov.w	sl, #0
 8014e9e:	e67d      	b.n	8014b9c <_strtod_l+0x84>
 8014ea0:	4885      	ldr	r0, [pc, #532]	; (80150b8 <_strtod_l+0x5a0>)
 8014ea2:	f003 fa45 	bl	8018330 <nan>
 8014ea6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014eaa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014eae:	e675      	b.n	8014b9c <_strtod_l+0x84>
 8014eb0:	9b07      	ldr	r3, [sp, #28]
 8014eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014eb4:	1af3      	subs	r3, r6, r3
 8014eb6:	2f00      	cmp	r7, #0
 8014eb8:	bf08      	it	eq
 8014eba:	462f      	moveq	r7, r5
 8014ebc:	2d10      	cmp	r5, #16
 8014ebe:	9308      	str	r3, [sp, #32]
 8014ec0:	46a8      	mov	r8, r5
 8014ec2:	bfa8      	it	ge
 8014ec4:	f04f 0810 	movge.w	r8, #16
 8014ec8:	f7eb fb2c 	bl	8000524 <__aeabi_ui2d>
 8014ecc:	2d09      	cmp	r5, #9
 8014ece:	4682      	mov	sl, r0
 8014ed0:	468b      	mov	fp, r1
 8014ed2:	dd13      	ble.n	8014efc <_strtod_l+0x3e4>
 8014ed4:	4b79      	ldr	r3, [pc, #484]	; (80150bc <_strtod_l+0x5a4>)
 8014ed6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014eda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014ede:	f7eb fb9b 	bl	8000618 <__aeabi_dmul>
 8014ee2:	4682      	mov	sl, r0
 8014ee4:	4648      	mov	r0, r9
 8014ee6:	468b      	mov	fp, r1
 8014ee8:	f7eb fb1c 	bl	8000524 <__aeabi_ui2d>
 8014eec:	4602      	mov	r2, r0
 8014eee:	460b      	mov	r3, r1
 8014ef0:	4650      	mov	r0, sl
 8014ef2:	4659      	mov	r1, fp
 8014ef4:	f7eb f9da 	bl	80002ac <__adddf3>
 8014ef8:	4682      	mov	sl, r0
 8014efa:	468b      	mov	fp, r1
 8014efc:	2d0f      	cmp	r5, #15
 8014efe:	dc38      	bgt.n	8014f72 <_strtod_l+0x45a>
 8014f00:	9b08      	ldr	r3, [sp, #32]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	f43f ae4a 	beq.w	8014b9c <_strtod_l+0x84>
 8014f08:	dd24      	ble.n	8014f54 <_strtod_l+0x43c>
 8014f0a:	2b16      	cmp	r3, #22
 8014f0c:	dc0b      	bgt.n	8014f26 <_strtod_l+0x40e>
 8014f0e:	4d6b      	ldr	r5, [pc, #428]	; (80150bc <_strtod_l+0x5a4>)
 8014f10:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8014f14:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014f18:	4652      	mov	r2, sl
 8014f1a:	465b      	mov	r3, fp
 8014f1c:	f7eb fb7c 	bl	8000618 <__aeabi_dmul>
 8014f20:	4682      	mov	sl, r0
 8014f22:	468b      	mov	fp, r1
 8014f24:	e63a      	b.n	8014b9c <_strtod_l+0x84>
 8014f26:	9a08      	ldr	r2, [sp, #32]
 8014f28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8014f2c:	4293      	cmp	r3, r2
 8014f2e:	db20      	blt.n	8014f72 <_strtod_l+0x45a>
 8014f30:	4c62      	ldr	r4, [pc, #392]	; (80150bc <_strtod_l+0x5a4>)
 8014f32:	f1c5 050f 	rsb	r5, r5, #15
 8014f36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014f3a:	4652      	mov	r2, sl
 8014f3c:	465b      	mov	r3, fp
 8014f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f42:	f7eb fb69 	bl	8000618 <__aeabi_dmul>
 8014f46:	9b08      	ldr	r3, [sp, #32]
 8014f48:	1b5d      	subs	r5, r3, r5
 8014f4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014f4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014f52:	e7e3      	b.n	8014f1c <_strtod_l+0x404>
 8014f54:	9b08      	ldr	r3, [sp, #32]
 8014f56:	3316      	adds	r3, #22
 8014f58:	db0b      	blt.n	8014f72 <_strtod_l+0x45a>
 8014f5a:	9b07      	ldr	r3, [sp, #28]
 8014f5c:	4a57      	ldr	r2, [pc, #348]	; (80150bc <_strtod_l+0x5a4>)
 8014f5e:	1b9e      	subs	r6, r3, r6
 8014f60:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014f64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014f68:	4650      	mov	r0, sl
 8014f6a:	4659      	mov	r1, fp
 8014f6c:	f7eb fc7e 	bl	800086c <__aeabi_ddiv>
 8014f70:	e7d6      	b.n	8014f20 <_strtod_l+0x408>
 8014f72:	9b08      	ldr	r3, [sp, #32]
 8014f74:	eba5 0808 	sub.w	r8, r5, r8
 8014f78:	4498      	add	r8, r3
 8014f7a:	f1b8 0f00 	cmp.w	r8, #0
 8014f7e:	dd71      	ble.n	8015064 <_strtod_l+0x54c>
 8014f80:	f018 030f 	ands.w	r3, r8, #15
 8014f84:	d00a      	beq.n	8014f9c <_strtod_l+0x484>
 8014f86:	494d      	ldr	r1, [pc, #308]	; (80150bc <_strtod_l+0x5a4>)
 8014f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014f8c:	4652      	mov	r2, sl
 8014f8e:	465b      	mov	r3, fp
 8014f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f94:	f7eb fb40 	bl	8000618 <__aeabi_dmul>
 8014f98:	4682      	mov	sl, r0
 8014f9a:	468b      	mov	fp, r1
 8014f9c:	f038 080f 	bics.w	r8, r8, #15
 8014fa0:	d04d      	beq.n	801503e <_strtod_l+0x526>
 8014fa2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014fa6:	dd22      	ble.n	8014fee <_strtod_l+0x4d6>
 8014fa8:	2500      	movs	r5, #0
 8014faa:	462e      	mov	r6, r5
 8014fac:	9509      	str	r5, [sp, #36]	; 0x24
 8014fae:	9507      	str	r5, [sp, #28]
 8014fb0:	2322      	movs	r3, #34	; 0x22
 8014fb2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80150c4 <_strtod_l+0x5ac>
 8014fb6:	6023      	str	r3, [r4, #0]
 8014fb8:	f04f 0a00 	mov.w	sl, #0
 8014fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	f43f adec 	beq.w	8014b9c <_strtod_l+0x84>
 8014fc4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	f002 f9c6 	bl	8017358 <_Bfree>
 8014fcc:	9907      	ldr	r1, [sp, #28]
 8014fce:	4620      	mov	r0, r4
 8014fd0:	f002 f9c2 	bl	8017358 <_Bfree>
 8014fd4:	4631      	mov	r1, r6
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	f002 f9be 	bl	8017358 <_Bfree>
 8014fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f002 f9ba 	bl	8017358 <_Bfree>
 8014fe4:	4629      	mov	r1, r5
 8014fe6:	4620      	mov	r0, r4
 8014fe8:	f002 f9b6 	bl	8017358 <_Bfree>
 8014fec:	e5d6      	b.n	8014b9c <_strtod_l+0x84>
 8014fee:	2300      	movs	r3, #0
 8014ff0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014ff4:	4650      	mov	r0, sl
 8014ff6:	4659      	mov	r1, fp
 8014ff8:	4699      	mov	r9, r3
 8014ffa:	f1b8 0f01 	cmp.w	r8, #1
 8014ffe:	dc21      	bgt.n	8015044 <_strtod_l+0x52c>
 8015000:	b10b      	cbz	r3, 8015006 <_strtod_l+0x4ee>
 8015002:	4682      	mov	sl, r0
 8015004:	468b      	mov	fp, r1
 8015006:	4b2e      	ldr	r3, [pc, #184]	; (80150c0 <_strtod_l+0x5a8>)
 8015008:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801500c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8015010:	4652      	mov	r2, sl
 8015012:	465b      	mov	r3, fp
 8015014:	e9d9 0100 	ldrd	r0, r1, [r9]
 8015018:	f7eb fafe 	bl	8000618 <__aeabi_dmul>
 801501c:	4b29      	ldr	r3, [pc, #164]	; (80150c4 <_strtod_l+0x5ac>)
 801501e:	460a      	mov	r2, r1
 8015020:	400b      	ands	r3, r1
 8015022:	4929      	ldr	r1, [pc, #164]	; (80150c8 <_strtod_l+0x5b0>)
 8015024:	428b      	cmp	r3, r1
 8015026:	4682      	mov	sl, r0
 8015028:	d8be      	bhi.n	8014fa8 <_strtod_l+0x490>
 801502a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801502e:	428b      	cmp	r3, r1
 8015030:	bf86      	itte	hi
 8015032:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80150cc <_strtod_l+0x5b4>
 8015036:	f04f 3aff 	movhi.w	sl, #4294967295
 801503a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801503e:	2300      	movs	r3, #0
 8015040:	9304      	str	r3, [sp, #16]
 8015042:	e081      	b.n	8015148 <_strtod_l+0x630>
 8015044:	f018 0f01 	tst.w	r8, #1
 8015048:	d007      	beq.n	801505a <_strtod_l+0x542>
 801504a:	4b1d      	ldr	r3, [pc, #116]	; (80150c0 <_strtod_l+0x5a8>)
 801504c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8015050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015054:	f7eb fae0 	bl	8000618 <__aeabi_dmul>
 8015058:	2301      	movs	r3, #1
 801505a:	f109 0901 	add.w	r9, r9, #1
 801505e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015062:	e7ca      	b.n	8014ffa <_strtod_l+0x4e2>
 8015064:	d0eb      	beq.n	801503e <_strtod_l+0x526>
 8015066:	f1c8 0800 	rsb	r8, r8, #0
 801506a:	f018 020f 	ands.w	r2, r8, #15
 801506e:	d00a      	beq.n	8015086 <_strtod_l+0x56e>
 8015070:	4b12      	ldr	r3, [pc, #72]	; (80150bc <_strtod_l+0x5a4>)
 8015072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015076:	4650      	mov	r0, sl
 8015078:	4659      	mov	r1, fp
 801507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507e:	f7eb fbf5 	bl	800086c <__aeabi_ddiv>
 8015082:	4682      	mov	sl, r0
 8015084:	468b      	mov	fp, r1
 8015086:	ea5f 1828 	movs.w	r8, r8, asr #4
 801508a:	d0d8      	beq.n	801503e <_strtod_l+0x526>
 801508c:	f1b8 0f1f 	cmp.w	r8, #31
 8015090:	dd1e      	ble.n	80150d0 <_strtod_l+0x5b8>
 8015092:	2500      	movs	r5, #0
 8015094:	462e      	mov	r6, r5
 8015096:	9509      	str	r5, [sp, #36]	; 0x24
 8015098:	9507      	str	r5, [sp, #28]
 801509a:	2322      	movs	r3, #34	; 0x22
 801509c:	f04f 0a00 	mov.w	sl, #0
 80150a0:	f04f 0b00 	mov.w	fp, #0
 80150a4:	6023      	str	r3, [r4, #0]
 80150a6:	e789      	b.n	8014fbc <_strtod_l+0x4a4>
 80150a8:	0801a1a1 	.word	0x0801a1a1
 80150ac:	0801a1e4 	.word	0x0801a1e4
 80150b0:	0801a199 	.word	0x0801a199
 80150b4:	0801a324 	.word	0x0801a324
 80150b8:	0801a640 	.word	0x0801a640
 80150bc:	0801a520 	.word	0x0801a520
 80150c0:	0801a4f8 	.word	0x0801a4f8
 80150c4:	7ff00000 	.word	0x7ff00000
 80150c8:	7ca00000 	.word	0x7ca00000
 80150cc:	7fefffff 	.word	0x7fefffff
 80150d0:	f018 0310 	ands.w	r3, r8, #16
 80150d4:	bf18      	it	ne
 80150d6:	236a      	movne	r3, #106	; 0x6a
 80150d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8015490 <_strtod_l+0x978>
 80150dc:	9304      	str	r3, [sp, #16]
 80150de:	4650      	mov	r0, sl
 80150e0:	4659      	mov	r1, fp
 80150e2:	2300      	movs	r3, #0
 80150e4:	f018 0f01 	tst.w	r8, #1
 80150e8:	d004      	beq.n	80150f4 <_strtod_l+0x5dc>
 80150ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80150ee:	f7eb fa93 	bl	8000618 <__aeabi_dmul>
 80150f2:	2301      	movs	r3, #1
 80150f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80150f8:	f109 0908 	add.w	r9, r9, #8
 80150fc:	d1f2      	bne.n	80150e4 <_strtod_l+0x5cc>
 80150fe:	b10b      	cbz	r3, 8015104 <_strtod_l+0x5ec>
 8015100:	4682      	mov	sl, r0
 8015102:	468b      	mov	fp, r1
 8015104:	9b04      	ldr	r3, [sp, #16]
 8015106:	b1bb      	cbz	r3, 8015138 <_strtod_l+0x620>
 8015108:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801510c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015110:	2b00      	cmp	r3, #0
 8015112:	4659      	mov	r1, fp
 8015114:	dd10      	ble.n	8015138 <_strtod_l+0x620>
 8015116:	2b1f      	cmp	r3, #31
 8015118:	f340 8128 	ble.w	801536c <_strtod_l+0x854>
 801511c:	2b34      	cmp	r3, #52	; 0x34
 801511e:	bfde      	ittt	le
 8015120:	3b20      	suble	r3, #32
 8015122:	f04f 32ff 	movle.w	r2, #4294967295
 8015126:	fa02 f303 	lslle.w	r3, r2, r3
 801512a:	f04f 0a00 	mov.w	sl, #0
 801512e:	bfcc      	ite	gt
 8015130:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015134:	ea03 0b01 	andle.w	fp, r3, r1
 8015138:	2200      	movs	r2, #0
 801513a:	2300      	movs	r3, #0
 801513c:	4650      	mov	r0, sl
 801513e:	4659      	mov	r1, fp
 8015140:	f7eb fcd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8015144:	2800      	cmp	r0, #0
 8015146:	d1a4      	bne.n	8015092 <_strtod_l+0x57a>
 8015148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801514e:	462b      	mov	r3, r5
 8015150:	463a      	mov	r2, r7
 8015152:	4620      	mov	r0, r4
 8015154:	f002 f96c 	bl	8017430 <__s2b>
 8015158:	9009      	str	r0, [sp, #36]	; 0x24
 801515a:	2800      	cmp	r0, #0
 801515c:	f43f af24 	beq.w	8014fa8 <_strtod_l+0x490>
 8015160:	9b07      	ldr	r3, [sp, #28]
 8015162:	1b9e      	subs	r6, r3, r6
 8015164:	9b08      	ldr	r3, [sp, #32]
 8015166:	2b00      	cmp	r3, #0
 8015168:	bfb4      	ite	lt
 801516a:	4633      	movlt	r3, r6
 801516c:	2300      	movge	r3, #0
 801516e:	9310      	str	r3, [sp, #64]	; 0x40
 8015170:	9b08      	ldr	r3, [sp, #32]
 8015172:	2500      	movs	r5, #0
 8015174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015178:	9318      	str	r3, [sp, #96]	; 0x60
 801517a:	462e      	mov	r6, r5
 801517c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801517e:	4620      	mov	r0, r4
 8015180:	6859      	ldr	r1, [r3, #4]
 8015182:	f002 f8a9 	bl	80172d8 <_Balloc>
 8015186:	9007      	str	r0, [sp, #28]
 8015188:	2800      	cmp	r0, #0
 801518a:	f43f af11 	beq.w	8014fb0 <_strtod_l+0x498>
 801518e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015190:	691a      	ldr	r2, [r3, #16]
 8015192:	3202      	adds	r2, #2
 8015194:	f103 010c 	add.w	r1, r3, #12
 8015198:	0092      	lsls	r2, r2, #2
 801519a:	300c      	adds	r0, #12
 801519c:	f7fe fcf6 	bl	8013b8c <memcpy>
 80151a0:	ec4b ab10 	vmov	d0, sl, fp
 80151a4:	aa20      	add	r2, sp, #128	; 0x80
 80151a6:	a91f      	add	r1, sp, #124	; 0x7c
 80151a8:	4620      	mov	r0, r4
 80151aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80151ae:	f002 fc7b 	bl	8017aa8 <__d2b>
 80151b2:	901e      	str	r0, [sp, #120]	; 0x78
 80151b4:	2800      	cmp	r0, #0
 80151b6:	f43f aefb 	beq.w	8014fb0 <_strtod_l+0x498>
 80151ba:	2101      	movs	r1, #1
 80151bc:	4620      	mov	r0, r4
 80151be:	f002 f9d1 	bl	8017564 <__i2b>
 80151c2:	4606      	mov	r6, r0
 80151c4:	2800      	cmp	r0, #0
 80151c6:	f43f aef3 	beq.w	8014fb0 <_strtod_l+0x498>
 80151ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80151cc:	9904      	ldr	r1, [sp, #16]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	bfab      	itete	ge
 80151d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80151d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80151d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80151d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80151dc:	bfac      	ite	ge
 80151de:	eb03 0902 	addge.w	r9, r3, r2
 80151e2:	1ad7      	sublt	r7, r2, r3
 80151e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80151e6:	eba3 0801 	sub.w	r8, r3, r1
 80151ea:	4490      	add	r8, r2
 80151ec:	4ba3      	ldr	r3, [pc, #652]	; (801547c <_strtod_l+0x964>)
 80151ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80151f2:	4598      	cmp	r8, r3
 80151f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80151f8:	f280 80cc 	bge.w	8015394 <_strtod_l+0x87c>
 80151fc:	eba3 0308 	sub.w	r3, r3, r8
 8015200:	2b1f      	cmp	r3, #31
 8015202:	eba2 0203 	sub.w	r2, r2, r3
 8015206:	f04f 0101 	mov.w	r1, #1
 801520a:	f300 80b6 	bgt.w	801537a <_strtod_l+0x862>
 801520e:	fa01 f303 	lsl.w	r3, r1, r3
 8015212:	9311      	str	r3, [sp, #68]	; 0x44
 8015214:	2300      	movs	r3, #0
 8015216:	930c      	str	r3, [sp, #48]	; 0x30
 8015218:	eb09 0802 	add.w	r8, r9, r2
 801521c:	9b04      	ldr	r3, [sp, #16]
 801521e:	45c1      	cmp	r9, r8
 8015220:	4417      	add	r7, r2
 8015222:	441f      	add	r7, r3
 8015224:	464b      	mov	r3, r9
 8015226:	bfa8      	it	ge
 8015228:	4643      	movge	r3, r8
 801522a:	42bb      	cmp	r3, r7
 801522c:	bfa8      	it	ge
 801522e:	463b      	movge	r3, r7
 8015230:	2b00      	cmp	r3, #0
 8015232:	bfc2      	ittt	gt
 8015234:	eba8 0803 	subgt.w	r8, r8, r3
 8015238:	1aff      	subgt	r7, r7, r3
 801523a:	eba9 0903 	subgt.w	r9, r9, r3
 801523e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015240:	2b00      	cmp	r3, #0
 8015242:	dd17      	ble.n	8015274 <_strtod_l+0x75c>
 8015244:	4631      	mov	r1, r6
 8015246:	461a      	mov	r2, r3
 8015248:	4620      	mov	r0, r4
 801524a:	f002 fa47 	bl	80176dc <__pow5mult>
 801524e:	4606      	mov	r6, r0
 8015250:	2800      	cmp	r0, #0
 8015252:	f43f aead 	beq.w	8014fb0 <_strtod_l+0x498>
 8015256:	4601      	mov	r1, r0
 8015258:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801525a:	4620      	mov	r0, r4
 801525c:	f002 f998 	bl	8017590 <__multiply>
 8015260:	900f      	str	r0, [sp, #60]	; 0x3c
 8015262:	2800      	cmp	r0, #0
 8015264:	f43f aea4 	beq.w	8014fb0 <_strtod_l+0x498>
 8015268:	991e      	ldr	r1, [sp, #120]	; 0x78
 801526a:	4620      	mov	r0, r4
 801526c:	f002 f874 	bl	8017358 <_Bfree>
 8015270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015272:	931e      	str	r3, [sp, #120]	; 0x78
 8015274:	f1b8 0f00 	cmp.w	r8, #0
 8015278:	f300 8091 	bgt.w	801539e <_strtod_l+0x886>
 801527c:	9b08      	ldr	r3, [sp, #32]
 801527e:	2b00      	cmp	r3, #0
 8015280:	dd08      	ble.n	8015294 <_strtod_l+0x77c>
 8015282:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015284:	9907      	ldr	r1, [sp, #28]
 8015286:	4620      	mov	r0, r4
 8015288:	f002 fa28 	bl	80176dc <__pow5mult>
 801528c:	9007      	str	r0, [sp, #28]
 801528e:	2800      	cmp	r0, #0
 8015290:	f43f ae8e 	beq.w	8014fb0 <_strtod_l+0x498>
 8015294:	2f00      	cmp	r7, #0
 8015296:	dd08      	ble.n	80152aa <_strtod_l+0x792>
 8015298:	9907      	ldr	r1, [sp, #28]
 801529a:	463a      	mov	r2, r7
 801529c:	4620      	mov	r0, r4
 801529e:	f002 fa77 	bl	8017790 <__lshift>
 80152a2:	9007      	str	r0, [sp, #28]
 80152a4:	2800      	cmp	r0, #0
 80152a6:	f43f ae83 	beq.w	8014fb0 <_strtod_l+0x498>
 80152aa:	f1b9 0f00 	cmp.w	r9, #0
 80152ae:	dd08      	ble.n	80152c2 <_strtod_l+0x7aa>
 80152b0:	4631      	mov	r1, r6
 80152b2:	464a      	mov	r2, r9
 80152b4:	4620      	mov	r0, r4
 80152b6:	f002 fa6b 	bl	8017790 <__lshift>
 80152ba:	4606      	mov	r6, r0
 80152bc:	2800      	cmp	r0, #0
 80152be:	f43f ae77 	beq.w	8014fb0 <_strtod_l+0x498>
 80152c2:	9a07      	ldr	r2, [sp, #28]
 80152c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80152c6:	4620      	mov	r0, r4
 80152c8:	f002 faea 	bl	80178a0 <__mdiff>
 80152cc:	4605      	mov	r5, r0
 80152ce:	2800      	cmp	r0, #0
 80152d0:	f43f ae6e 	beq.w	8014fb0 <_strtod_l+0x498>
 80152d4:	68c3      	ldr	r3, [r0, #12]
 80152d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80152d8:	2300      	movs	r3, #0
 80152da:	60c3      	str	r3, [r0, #12]
 80152dc:	4631      	mov	r1, r6
 80152de:	f002 fac3 	bl	8017868 <__mcmp>
 80152e2:	2800      	cmp	r0, #0
 80152e4:	da65      	bge.n	80153b2 <_strtod_l+0x89a>
 80152e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152e8:	ea53 030a 	orrs.w	r3, r3, sl
 80152ec:	f040 8087 	bne.w	80153fe <_strtod_l+0x8e6>
 80152f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f040 8082 	bne.w	80153fe <_strtod_l+0x8e6>
 80152fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80152fe:	0d1b      	lsrs	r3, r3, #20
 8015300:	051b      	lsls	r3, r3, #20
 8015302:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015306:	d97a      	bls.n	80153fe <_strtod_l+0x8e6>
 8015308:	696b      	ldr	r3, [r5, #20]
 801530a:	b913      	cbnz	r3, 8015312 <_strtod_l+0x7fa>
 801530c:	692b      	ldr	r3, [r5, #16]
 801530e:	2b01      	cmp	r3, #1
 8015310:	dd75      	ble.n	80153fe <_strtod_l+0x8e6>
 8015312:	4629      	mov	r1, r5
 8015314:	2201      	movs	r2, #1
 8015316:	4620      	mov	r0, r4
 8015318:	f002 fa3a 	bl	8017790 <__lshift>
 801531c:	4631      	mov	r1, r6
 801531e:	4605      	mov	r5, r0
 8015320:	f002 faa2 	bl	8017868 <__mcmp>
 8015324:	2800      	cmp	r0, #0
 8015326:	dd6a      	ble.n	80153fe <_strtod_l+0x8e6>
 8015328:	9904      	ldr	r1, [sp, #16]
 801532a:	4a55      	ldr	r2, [pc, #340]	; (8015480 <_strtod_l+0x968>)
 801532c:	465b      	mov	r3, fp
 801532e:	2900      	cmp	r1, #0
 8015330:	f000 8085 	beq.w	801543e <_strtod_l+0x926>
 8015334:	ea02 010b 	and.w	r1, r2, fp
 8015338:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801533c:	dc7f      	bgt.n	801543e <_strtod_l+0x926>
 801533e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015342:	f77f aeaa 	ble.w	801509a <_strtod_l+0x582>
 8015346:	4a4f      	ldr	r2, [pc, #316]	; (8015484 <_strtod_l+0x96c>)
 8015348:	2300      	movs	r3, #0
 801534a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801534e:	4650      	mov	r0, sl
 8015350:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8015354:	4659      	mov	r1, fp
 8015356:	f7eb f95f 	bl	8000618 <__aeabi_dmul>
 801535a:	460b      	mov	r3, r1
 801535c:	4303      	orrs	r3, r0
 801535e:	bf08      	it	eq
 8015360:	2322      	moveq	r3, #34	; 0x22
 8015362:	4682      	mov	sl, r0
 8015364:	468b      	mov	fp, r1
 8015366:	bf08      	it	eq
 8015368:	6023      	streq	r3, [r4, #0]
 801536a:	e62b      	b.n	8014fc4 <_strtod_l+0x4ac>
 801536c:	f04f 32ff 	mov.w	r2, #4294967295
 8015370:	fa02 f303 	lsl.w	r3, r2, r3
 8015374:	ea03 0a0a 	and.w	sl, r3, sl
 8015378:	e6de      	b.n	8015138 <_strtod_l+0x620>
 801537a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801537e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8015382:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8015386:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801538a:	fa01 f308 	lsl.w	r3, r1, r8
 801538e:	930c      	str	r3, [sp, #48]	; 0x30
 8015390:	9111      	str	r1, [sp, #68]	; 0x44
 8015392:	e741      	b.n	8015218 <_strtod_l+0x700>
 8015394:	2300      	movs	r3, #0
 8015396:	930c      	str	r3, [sp, #48]	; 0x30
 8015398:	2301      	movs	r3, #1
 801539a:	9311      	str	r3, [sp, #68]	; 0x44
 801539c:	e73c      	b.n	8015218 <_strtod_l+0x700>
 801539e:	991e      	ldr	r1, [sp, #120]	; 0x78
 80153a0:	4642      	mov	r2, r8
 80153a2:	4620      	mov	r0, r4
 80153a4:	f002 f9f4 	bl	8017790 <__lshift>
 80153a8:	901e      	str	r0, [sp, #120]	; 0x78
 80153aa:	2800      	cmp	r0, #0
 80153ac:	f47f af66 	bne.w	801527c <_strtod_l+0x764>
 80153b0:	e5fe      	b.n	8014fb0 <_strtod_l+0x498>
 80153b2:	465f      	mov	r7, fp
 80153b4:	d16e      	bne.n	8015494 <_strtod_l+0x97c>
 80153b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80153bc:	b342      	cbz	r2, 8015410 <_strtod_l+0x8f8>
 80153be:	4a32      	ldr	r2, [pc, #200]	; (8015488 <_strtod_l+0x970>)
 80153c0:	4293      	cmp	r3, r2
 80153c2:	d128      	bne.n	8015416 <_strtod_l+0x8fe>
 80153c4:	9b04      	ldr	r3, [sp, #16]
 80153c6:	4650      	mov	r0, sl
 80153c8:	b1eb      	cbz	r3, 8015406 <_strtod_l+0x8ee>
 80153ca:	4a2d      	ldr	r2, [pc, #180]	; (8015480 <_strtod_l+0x968>)
 80153cc:	403a      	ands	r2, r7
 80153ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80153d2:	f04f 31ff 	mov.w	r1, #4294967295
 80153d6:	d819      	bhi.n	801540c <_strtod_l+0x8f4>
 80153d8:	0d12      	lsrs	r2, r2, #20
 80153da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80153de:	fa01 f303 	lsl.w	r3, r1, r3
 80153e2:	4298      	cmp	r0, r3
 80153e4:	d117      	bne.n	8015416 <_strtod_l+0x8fe>
 80153e6:	4b29      	ldr	r3, [pc, #164]	; (801548c <_strtod_l+0x974>)
 80153e8:	429f      	cmp	r7, r3
 80153ea:	d102      	bne.n	80153f2 <_strtod_l+0x8da>
 80153ec:	3001      	adds	r0, #1
 80153ee:	f43f addf 	beq.w	8014fb0 <_strtod_l+0x498>
 80153f2:	4b23      	ldr	r3, [pc, #140]	; (8015480 <_strtod_l+0x968>)
 80153f4:	403b      	ands	r3, r7
 80153f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80153fa:	f04f 0a00 	mov.w	sl, #0
 80153fe:	9b04      	ldr	r3, [sp, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d1a0      	bne.n	8015346 <_strtod_l+0x82e>
 8015404:	e5de      	b.n	8014fc4 <_strtod_l+0x4ac>
 8015406:	f04f 33ff 	mov.w	r3, #4294967295
 801540a:	e7ea      	b.n	80153e2 <_strtod_l+0x8ca>
 801540c:	460b      	mov	r3, r1
 801540e:	e7e8      	b.n	80153e2 <_strtod_l+0x8ca>
 8015410:	ea53 030a 	orrs.w	r3, r3, sl
 8015414:	d088      	beq.n	8015328 <_strtod_l+0x810>
 8015416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015418:	b1db      	cbz	r3, 8015452 <_strtod_l+0x93a>
 801541a:	423b      	tst	r3, r7
 801541c:	d0ef      	beq.n	80153fe <_strtod_l+0x8e6>
 801541e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015420:	9a04      	ldr	r2, [sp, #16]
 8015422:	4650      	mov	r0, sl
 8015424:	4659      	mov	r1, fp
 8015426:	b1c3      	cbz	r3, 801545a <_strtod_l+0x942>
 8015428:	f7ff fb5a 	bl	8014ae0 <sulp>
 801542c:	4602      	mov	r2, r0
 801542e:	460b      	mov	r3, r1
 8015430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015434:	f7ea ff3a 	bl	80002ac <__adddf3>
 8015438:	4682      	mov	sl, r0
 801543a:	468b      	mov	fp, r1
 801543c:	e7df      	b.n	80153fe <_strtod_l+0x8e6>
 801543e:	4013      	ands	r3, r2
 8015440:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015444:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015448:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801544c:	f04f 3aff 	mov.w	sl, #4294967295
 8015450:	e7d5      	b.n	80153fe <_strtod_l+0x8e6>
 8015452:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015454:	ea13 0f0a 	tst.w	r3, sl
 8015458:	e7e0      	b.n	801541c <_strtod_l+0x904>
 801545a:	f7ff fb41 	bl	8014ae0 <sulp>
 801545e:	4602      	mov	r2, r0
 8015460:	460b      	mov	r3, r1
 8015462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015466:	f7ea ff1f 	bl	80002a8 <__aeabi_dsub>
 801546a:	2200      	movs	r2, #0
 801546c:	2300      	movs	r3, #0
 801546e:	4682      	mov	sl, r0
 8015470:	468b      	mov	fp, r1
 8015472:	f7eb fb39 	bl	8000ae8 <__aeabi_dcmpeq>
 8015476:	2800      	cmp	r0, #0
 8015478:	d0c1      	beq.n	80153fe <_strtod_l+0x8e6>
 801547a:	e60e      	b.n	801509a <_strtod_l+0x582>
 801547c:	fffffc02 	.word	0xfffffc02
 8015480:	7ff00000 	.word	0x7ff00000
 8015484:	39500000 	.word	0x39500000
 8015488:	000fffff 	.word	0x000fffff
 801548c:	7fefffff 	.word	0x7fefffff
 8015490:	0801a1f8 	.word	0x0801a1f8
 8015494:	4631      	mov	r1, r6
 8015496:	4628      	mov	r0, r5
 8015498:	f002 fb62 	bl	8017b60 <__ratio>
 801549c:	ec59 8b10 	vmov	r8, r9, d0
 80154a0:	ee10 0a10 	vmov	r0, s0
 80154a4:	2200      	movs	r2, #0
 80154a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80154aa:	4649      	mov	r1, r9
 80154ac:	f7eb fb30 	bl	8000b10 <__aeabi_dcmple>
 80154b0:	2800      	cmp	r0, #0
 80154b2:	d07c      	beq.n	80155ae <_strtod_l+0xa96>
 80154b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d04c      	beq.n	8015554 <_strtod_l+0xa3c>
 80154ba:	4b95      	ldr	r3, [pc, #596]	; (8015710 <_strtod_l+0xbf8>)
 80154bc:	2200      	movs	r2, #0
 80154be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80154c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015710 <_strtod_l+0xbf8>
 80154c6:	f04f 0800 	mov.w	r8, #0
 80154ca:	4b92      	ldr	r3, [pc, #584]	; (8015714 <_strtod_l+0xbfc>)
 80154cc:	403b      	ands	r3, r7
 80154ce:	9311      	str	r3, [sp, #68]	; 0x44
 80154d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80154d2:	4b91      	ldr	r3, [pc, #580]	; (8015718 <_strtod_l+0xc00>)
 80154d4:	429a      	cmp	r2, r3
 80154d6:	f040 80b2 	bne.w	801563e <_strtod_l+0xb26>
 80154da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80154de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80154e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80154e6:	ec4b ab10 	vmov	d0, sl, fp
 80154ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80154ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80154f2:	f002 fa5d 	bl	80179b0 <__ulp>
 80154f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80154fa:	ec53 2b10 	vmov	r2, r3, d0
 80154fe:	f7eb f88b 	bl	8000618 <__aeabi_dmul>
 8015502:	4652      	mov	r2, sl
 8015504:	465b      	mov	r3, fp
 8015506:	f7ea fed1 	bl	80002ac <__adddf3>
 801550a:	460b      	mov	r3, r1
 801550c:	4981      	ldr	r1, [pc, #516]	; (8015714 <_strtod_l+0xbfc>)
 801550e:	4a83      	ldr	r2, [pc, #524]	; (801571c <_strtod_l+0xc04>)
 8015510:	4019      	ands	r1, r3
 8015512:	4291      	cmp	r1, r2
 8015514:	4682      	mov	sl, r0
 8015516:	d95e      	bls.n	80155d6 <_strtod_l+0xabe>
 8015518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801551a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801551e:	4293      	cmp	r3, r2
 8015520:	d103      	bne.n	801552a <_strtod_l+0xa12>
 8015522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015524:	3301      	adds	r3, #1
 8015526:	f43f ad43 	beq.w	8014fb0 <_strtod_l+0x498>
 801552a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8015728 <_strtod_l+0xc10>
 801552e:	f04f 3aff 	mov.w	sl, #4294967295
 8015532:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015534:	4620      	mov	r0, r4
 8015536:	f001 ff0f 	bl	8017358 <_Bfree>
 801553a:	9907      	ldr	r1, [sp, #28]
 801553c:	4620      	mov	r0, r4
 801553e:	f001 ff0b 	bl	8017358 <_Bfree>
 8015542:	4631      	mov	r1, r6
 8015544:	4620      	mov	r0, r4
 8015546:	f001 ff07 	bl	8017358 <_Bfree>
 801554a:	4629      	mov	r1, r5
 801554c:	4620      	mov	r0, r4
 801554e:	f001 ff03 	bl	8017358 <_Bfree>
 8015552:	e613      	b.n	801517c <_strtod_l+0x664>
 8015554:	f1ba 0f00 	cmp.w	sl, #0
 8015558:	d11b      	bne.n	8015592 <_strtod_l+0xa7a>
 801555a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801555e:	b9f3      	cbnz	r3, 801559e <_strtod_l+0xa86>
 8015560:	4b6b      	ldr	r3, [pc, #428]	; (8015710 <_strtod_l+0xbf8>)
 8015562:	2200      	movs	r2, #0
 8015564:	4640      	mov	r0, r8
 8015566:	4649      	mov	r1, r9
 8015568:	f7eb fac8 	bl	8000afc <__aeabi_dcmplt>
 801556c:	b9d0      	cbnz	r0, 80155a4 <_strtod_l+0xa8c>
 801556e:	4640      	mov	r0, r8
 8015570:	4649      	mov	r1, r9
 8015572:	4b6b      	ldr	r3, [pc, #428]	; (8015720 <_strtod_l+0xc08>)
 8015574:	2200      	movs	r2, #0
 8015576:	f7eb f84f 	bl	8000618 <__aeabi_dmul>
 801557a:	4680      	mov	r8, r0
 801557c:	4689      	mov	r9, r1
 801557e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015582:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8015586:	931b      	str	r3, [sp, #108]	; 0x6c
 8015588:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801558c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015590:	e79b      	b.n	80154ca <_strtod_l+0x9b2>
 8015592:	f1ba 0f01 	cmp.w	sl, #1
 8015596:	d102      	bne.n	801559e <_strtod_l+0xa86>
 8015598:	2f00      	cmp	r7, #0
 801559a:	f43f ad7e 	beq.w	801509a <_strtod_l+0x582>
 801559e:	4b61      	ldr	r3, [pc, #388]	; (8015724 <_strtod_l+0xc0c>)
 80155a0:	2200      	movs	r2, #0
 80155a2:	e78c      	b.n	80154be <_strtod_l+0x9a6>
 80155a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015720 <_strtod_l+0xc08>
 80155a8:	f04f 0800 	mov.w	r8, #0
 80155ac:	e7e7      	b.n	801557e <_strtod_l+0xa66>
 80155ae:	4b5c      	ldr	r3, [pc, #368]	; (8015720 <_strtod_l+0xc08>)
 80155b0:	4640      	mov	r0, r8
 80155b2:	4649      	mov	r1, r9
 80155b4:	2200      	movs	r2, #0
 80155b6:	f7eb f82f 	bl	8000618 <__aeabi_dmul>
 80155ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155bc:	4680      	mov	r8, r0
 80155be:	4689      	mov	r9, r1
 80155c0:	b933      	cbnz	r3, 80155d0 <_strtod_l+0xab8>
 80155c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155c6:	9012      	str	r0, [sp, #72]	; 0x48
 80155c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80155ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80155ce:	e7dd      	b.n	801558c <_strtod_l+0xa74>
 80155d0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80155d4:	e7f9      	b.n	80155ca <_strtod_l+0xab2>
 80155d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80155da:	9b04      	ldr	r3, [sp, #16]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d1a8      	bne.n	8015532 <_strtod_l+0xa1a>
 80155e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80155e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80155e6:	0d1b      	lsrs	r3, r3, #20
 80155e8:	051b      	lsls	r3, r3, #20
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d1a1      	bne.n	8015532 <_strtod_l+0xa1a>
 80155ee:	4640      	mov	r0, r8
 80155f0:	4649      	mov	r1, r9
 80155f2:	f7eb fb71 	bl	8000cd8 <__aeabi_d2lz>
 80155f6:	f7ea ffe1 	bl	80005bc <__aeabi_l2d>
 80155fa:	4602      	mov	r2, r0
 80155fc:	460b      	mov	r3, r1
 80155fe:	4640      	mov	r0, r8
 8015600:	4649      	mov	r1, r9
 8015602:	f7ea fe51 	bl	80002a8 <__aeabi_dsub>
 8015606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015608:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801560c:	ea43 030a 	orr.w	r3, r3, sl
 8015610:	4313      	orrs	r3, r2
 8015612:	4680      	mov	r8, r0
 8015614:	4689      	mov	r9, r1
 8015616:	d053      	beq.n	80156c0 <_strtod_l+0xba8>
 8015618:	a335      	add	r3, pc, #212	; (adr r3, 80156f0 <_strtod_l+0xbd8>)
 801561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561e:	f7eb fa6d 	bl	8000afc <__aeabi_dcmplt>
 8015622:	2800      	cmp	r0, #0
 8015624:	f47f acce 	bne.w	8014fc4 <_strtod_l+0x4ac>
 8015628:	a333      	add	r3, pc, #204	; (adr r3, 80156f8 <_strtod_l+0xbe0>)
 801562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801562e:	4640      	mov	r0, r8
 8015630:	4649      	mov	r1, r9
 8015632:	f7eb fa81 	bl	8000b38 <__aeabi_dcmpgt>
 8015636:	2800      	cmp	r0, #0
 8015638:	f43f af7b 	beq.w	8015532 <_strtod_l+0xa1a>
 801563c:	e4c2      	b.n	8014fc4 <_strtod_l+0x4ac>
 801563e:	9b04      	ldr	r3, [sp, #16]
 8015640:	b333      	cbz	r3, 8015690 <_strtod_l+0xb78>
 8015642:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015644:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015648:	d822      	bhi.n	8015690 <_strtod_l+0xb78>
 801564a:	a32d      	add	r3, pc, #180	; (adr r3, 8015700 <_strtod_l+0xbe8>)
 801564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015650:	4640      	mov	r0, r8
 8015652:	4649      	mov	r1, r9
 8015654:	f7eb fa5c 	bl	8000b10 <__aeabi_dcmple>
 8015658:	b1a0      	cbz	r0, 8015684 <_strtod_l+0xb6c>
 801565a:	4649      	mov	r1, r9
 801565c:	4640      	mov	r0, r8
 801565e:	f7eb fab3 	bl	8000bc8 <__aeabi_d2uiz>
 8015662:	2801      	cmp	r0, #1
 8015664:	bf38      	it	cc
 8015666:	2001      	movcc	r0, #1
 8015668:	f7ea ff5c 	bl	8000524 <__aeabi_ui2d>
 801566c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801566e:	4680      	mov	r8, r0
 8015670:	4689      	mov	r9, r1
 8015672:	bb13      	cbnz	r3, 80156ba <_strtod_l+0xba2>
 8015674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015678:	9014      	str	r0, [sp, #80]	; 0x50
 801567a:	9315      	str	r3, [sp, #84]	; 0x54
 801567c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015680:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015686:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015688:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801568c:	1a9b      	subs	r3, r3, r2
 801568e:	930d      	str	r3, [sp, #52]	; 0x34
 8015690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015694:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015698:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801569c:	f002 f988 	bl	80179b0 <__ulp>
 80156a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80156a4:	ec53 2b10 	vmov	r2, r3, d0
 80156a8:	f7ea ffb6 	bl	8000618 <__aeabi_dmul>
 80156ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80156b0:	f7ea fdfc 	bl	80002ac <__adddf3>
 80156b4:	4682      	mov	sl, r0
 80156b6:	468b      	mov	fp, r1
 80156b8:	e78f      	b.n	80155da <_strtod_l+0xac2>
 80156ba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80156be:	e7dd      	b.n	801567c <_strtod_l+0xb64>
 80156c0:	a311      	add	r3, pc, #68	; (adr r3, 8015708 <_strtod_l+0xbf0>)
 80156c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c6:	f7eb fa19 	bl	8000afc <__aeabi_dcmplt>
 80156ca:	e7b4      	b.n	8015636 <_strtod_l+0xb1e>
 80156cc:	2300      	movs	r3, #0
 80156ce:	930e      	str	r3, [sp, #56]	; 0x38
 80156d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80156d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80156d4:	6013      	str	r3, [r2, #0]
 80156d6:	f7ff ba65 	b.w	8014ba4 <_strtod_l+0x8c>
 80156da:	2b65      	cmp	r3, #101	; 0x65
 80156dc:	f43f ab5d 	beq.w	8014d9a <_strtod_l+0x282>
 80156e0:	2b45      	cmp	r3, #69	; 0x45
 80156e2:	f43f ab5a 	beq.w	8014d9a <_strtod_l+0x282>
 80156e6:	2201      	movs	r2, #1
 80156e8:	f7ff bb92 	b.w	8014e10 <_strtod_l+0x2f8>
 80156ec:	f3af 8000 	nop.w
 80156f0:	94a03595 	.word	0x94a03595
 80156f4:	3fdfffff 	.word	0x3fdfffff
 80156f8:	35afe535 	.word	0x35afe535
 80156fc:	3fe00000 	.word	0x3fe00000
 8015700:	ffc00000 	.word	0xffc00000
 8015704:	41dfffff 	.word	0x41dfffff
 8015708:	94a03595 	.word	0x94a03595
 801570c:	3fcfffff 	.word	0x3fcfffff
 8015710:	3ff00000 	.word	0x3ff00000
 8015714:	7ff00000 	.word	0x7ff00000
 8015718:	7fe00000 	.word	0x7fe00000
 801571c:	7c9fffff 	.word	0x7c9fffff
 8015720:	3fe00000 	.word	0x3fe00000
 8015724:	bff00000 	.word	0xbff00000
 8015728:	7fefffff 	.word	0x7fefffff

0801572c <_strtod_r>:
 801572c:	4b01      	ldr	r3, [pc, #4]	; (8015734 <_strtod_r+0x8>)
 801572e:	f7ff b9f3 	b.w	8014b18 <_strtod_l>
 8015732:	bf00      	nop
 8015734:	200001e8 	.word	0x200001e8

08015738 <strtof>:
 8015738:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801573c:	4e26      	ldr	r6, [pc, #152]	; (80157d8 <strtof+0xa0>)
 801573e:	4b27      	ldr	r3, [pc, #156]	; (80157dc <strtof+0xa4>)
 8015740:	460a      	mov	r2, r1
 8015742:	ed2d 8b02 	vpush	{d8}
 8015746:	4601      	mov	r1, r0
 8015748:	6830      	ldr	r0, [r6, #0]
 801574a:	f7ff f9e5 	bl	8014b18 <_strtod_l>
 801574e:	ec55 4b10 	vmov	r4, r5, d0
 8015752:	ee10 2a10 	vmov	r2, s0
 8015756:	ee10 0a10 	vmov	r0, s0
 801575a:	462b      	mov	r3, r5
 801575c:	4629      	mov	r1, r5
 801575e:	f7eb f9f5 	bl	8000b4c <__aeabi_dcmpun>
 8015762:	b190      	cbz	r0, 801578a <strtof+0x52>
 8015764:	2d00      	cmp	r5, #0
 8015766:	481e      	ldr	r0, [pc, #120]	; (80157e0 <strtof+0xa8>)
 8015768:	da09      	bge.n	801577e <strtof+0x46>
 801576a:	f7ff f92d 	bl	80149c8 <nanf>
 801576e:	eeb1 8a40 	vneg.f32	s16, s0
 8015772:	eeb0 0a48 	vmov.f32	s0, s16
 8015776:	ecbd 8b02 	vpop	{d8}
 801577a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801577e:	ecbd 8b02 	vpop	{d8}
 8015782:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8015786:	f7ff b91f 	b.w	80149c8 <nanf>
 801578a:	4620      	mov	r0, r4
 801578c:	4629      	mov	r1, r5
 801578e:	f7eb fa3b 	bl	8000c08 <__aeabi_d2f>
 8015792:	ee08 0a10 	vmov	s16, r0
 8015796:	eddf 7a13 	vldr	s15, [pc, #76]	; 80157e4 <strtof+0xac>
 801579a:	eeb0 7ac8 	vabs.f32	s14, s16
 801579e:	eeb4 7a67 	vcmp.f32	s14, s15
 80157a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157a6:	dde4      	ble.n	8015772 <strtof+0x3a>
 80157a8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 80157ac:	4b0e      	ldr	r3, [pc, #56]	; (80157e8 <strtof+0xb0>)
 80157ae:	f04f 32ff 	mov.w	r2, #4294967295
 80157b2:	4620      	mov	r0, r4
 80157b4:	4649      	mov	r1, r9
 80157b6:	f7eb f9c9 	bl	8000b4c <__aeabi_dcmpun>
 80157ba:	b940      	cbnz	r0, 80157ce <strtof+0x96>
 80157bc:	4b0a      	ldr	r3, [pc, #40]	; (80157e8 <strtof+0xb0>)
 80157be:	f04f 32ff 	mov.w	r2, #4294967295
 80157c2:	4620      	mov	r0, r4
 80157c4:	4649      	mov	r1, r9
 80157c6:	f7eb f9a3 	bl	8000b10 <__aeabi_dcmple>
 80157ca:	2800      	cmp	r0, #0
 80157cc:	d0d1      	beq.n	8015772 <strtof+0x3a>
 80157ce:	6833      	ldr	r3, [r6, #0]
 80157d0:	2222      	movs	r2, #34	; 0x22
 80157d2:	601a      	str	r2, [r3, #0]
 80157d4:	e7cd      	b.n	8015772 <strtof+0x3a>
 80157d6:	bf00      	nop
 80157d8:	20000180 	.word	0x20000180
 80157dc:	200001e8 	.word	0x200001e8
 80157e0:	0801a640 	.word	0x0801a640
 80157e4:	7f7fffff 	.word	0x7f7fffff
 80157e8:	7fefffff 	.word	0x7fefffff

080157ec <_strtol_l.isra.0>:
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157f2:	d001      	beq.n	80157f8 <_strtol_l.isra.0+0xc>
 80157f4:	2b24      	cmp	r3, #36	; 0x24
 80157f6:	d906      	bls.n	8015806 <_strtol_l.isra.0+0x1a>
 80157f8:	f7fe f99e 	bl	8013b38 <__errno>
 80157fc:	2316      	movs	r3, #22
 80157fe:	6003      	str	r3, [r0, #0]
 8015800:	2000      	movs	r0, #0
 8015802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015806:	4f3a      	ldr	r7, [pc, #232]	; (80158f0 <_strtol_l.isra.0+0x104>)
 8015808:	468e      	mov	lr, r1
 801580a:	4676      	mov	r6, lr
 801580c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015810:	5de5      	ldrb	r5, [r4, r7]
 8015812:	f015 0508 	ands.w	r5, r5, #8
 8015816:	d1f8      	bne.n	801580a <_strtol_l.isra.0+0x1e>
 8015818:	2c2d      	cmp	r4, #45	; 0x2d
 801581a:	d134      	bne.n	8015886 <_strtol_l.isra.0+0x9a>
 801581c:	f89e 4000 	ldrb.w	r4, [lr]
 8015820:	f04f 0801 	mov.w	r8, #1
 8015824:	f106 0e02 	add.w	lr, r6, #2
 8015828:	2b00      	cmp	r3, #0
 801582a:	d05c      	beq.n	80158e6 <_strtol_l.isra.0+0xfa>
 801582c:	2b10      	cmp	r3, #16
 801582e:	d10c      	bne.n	801584a <_strtol_l.isra.0+0x5e>
 8015830:	2c30      	cmp	r4, #48	; 0x30
 8015832:	d10a      	bne.n	801584a <_strtol_l.isra.0+0x5e>
 8015834:	f89e 4000 	ldrb.w	r4, [lr]
 8015838:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801583c:	2c58      	cmp	r4, #88	; 0x58
 801583e:	d14d      	bne.n	80158dc <_strtol_l.isra.0+0xf0>
 8015840:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015844:	2310      	movs	r3, #16
 8015846:	f10e 0e02 	add.w	lr, lr, #2
 801584a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801584e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015852:	2600      	movs	r6, #0
 8015854:	fbbc f9f3 	udiv	r9, ip, r3
 8015858:	4635      	mov	r5, r6
 801585a:	fb03 ca19 	mls	sl, r3, r9, ip
 801585e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015862:	2f09      	cmp	r7, #9
 8015864:	d818      	bhi.n	8015898 <_strtol_l.isra.0+0xac>
 8015866:	463c      	mov	r4, r7
 8015868:	42a3      	cmp	r3, r4
 801586a:	dd24      	ble.n	80158b6 <_strtol_l.isra.0+0xca>
 801586c:	2e00      	cmp	r6, #0
 801586e:	db1f      	blt.n	80158b0 <_strtol_l.isra.0+0xc4>
 8015870:	45a9      	cmp	r9, r5
 8015872:	d31d      	bcc.n	80158b0 <_strtol_l.isra.0+0xc4>
 8015874:	d101      	bne.n	801587a <_strtol_l.isra.0+0x8e>
 8015876:	45a2      	cmp	sl, r4
 8015878:	db1a      	blt.n	80158b0 <_strtol_l.isra.0+0xc4>
 801587a:	fb05 4503 	mla	r5, r5, r3, r4
 801587e:	2601      	movs	r6, #1
 8015880:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015884:	e7eb      	b.n	801585e <_strtol_l.isra.0+0x72>
 8015886:	2c2b      	cmp	r4, #43	; 0x2b
 8015888:	bf08      	it	eq
 801588a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801588e:	46a8      	mov	r8, r5
 8015890:	bf08      	it	eq
 8015892:	f106 0e02 	addeq.w	lr, r6, #2
 8015896:	e7c7      	b.n	8015828 <_strtol_l.isra.0+0x3c>
 8015898:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801589c:	2f19      	cmp	r7, #25
 801589e:	d801      	bhi.n	80158a4 <_strtol_l.isra.0+0xb8>
 80158a0:	3c37      	subs	r4, #55	; 0x37
 80158a2:	e7e1      	b.n	8015868 <_strtol_l.isra.0+0x7c>
 80158a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80158a8:	2f19      	cmp	r7, #25
 80158aa:	d804      	bhi.n	80158b6 <_strtol_l.isra.0+0xca>
 80158ac:	3c57      	subs	r4, #87	; 0x57
 80158ae:	e7db      	b.n	8015868 <_strtol_l.isra.0+0x7c>
 80158b0:	f04f 36ff 	mov.w	r6, #4294967295
 80158b4:	e7e4      	b.n	8015880 <_strtol_l.isra.0+0x94>
 80158b6:	2e00      	cmp	r6, #0
 80158b8:	da05      	bge.n	80158c6 <_strtol_l.isra.0+0xda>
 80158ba:	2322      	movs	r3, #34	; 0x22
 80158bc:	6003      	str	r3, [r0, #0]
 80158be:	4665      	mov	r5, ip
 80158c0:	b942      	cbnz	r2, 80158d4 <_strtol_l.isra.0+0xe8>
 80158c2:	4628      	mov	r0, r5
 80158c4:	e79d      	b.n	8015802 <_strtol_l.isra.0+0x16>
 80158c6:	f1b8 0f00 	cmp.w	r8, #0
 80158ca:	d000      	beq.n	80158ce <_strtol_l.isra.0+0xe2>
 80158cc:	426d      	negs	r5, r5
 80158ce:	2a00      	cmp	r2, #0
 80158d0:	d0f7      	beq.n	80158c2 <_strtol_l.isra.0+0xd6>
 80158d2:	b10e      	cbz	r6, 80158d8 <_strtol_l.isra.0+0xec>
 80158d4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80158d8:	6011      	str	r1, [r2, #0]
 80158da:	e7f2      	b.n	80158c2 <_strtol_l.isra.0+0xd6>
 80158dc:	2430      	movs	r4, #48	; 0x30
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d1b3      	bne.n	801584a <_strtol_l.isra.0+0x5e>
 80158e2:	2308      	movs	r3, #8
 80158e4:	e7b1      	b.n	801584a <_strtol_l.isra.0+0x5e>
 80158e6:	2c30      	cmp	r4, #48	; 0x30
 80158e8:	d0a4      	beq.n	8015834 <_strtol_l.isra.0+0x48>
 80158ea:	230a      	movs	r3, #10
 80158ec:	e7ad      	b.n	801584a <_strtol_l.isra.0+0x5e>
 80158ee:	bf00      	nop
 80158f0:	0801a221 	.word	0x0801a221

080158f4 <_strtol_r>:
 80158f4:	f7ff bf7a 	b.w	80157ec <_strtol_l.isra.0>

080158f8 <strtol>:
 80158f8:	4613      	mov	r3, r2
 80158fa:	460a      	mov	r2, r1
 80158fc:	4601      	mov	r1, r0
 80158fe:	4802      	ldr	r0, [pc, #8]	; (8015908 <strtol+0x10>)
 8015900:	6800      	ldr	r0, [r0, #0]
 8015902:	f7ff bf73 	b.w	80157ec <_strtol_l.isra.0>
 8015906:	bf00      	nop
 8015908:	20000180 	.word	0x20000180

0801590c <__swbuf_r>:
 801590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801590e:	460e      	mov	r6, r1
 8015910:	4614      	mov	r4, r2
 8015912:	4605      	mov	r5, r0
 8015914:	b118      	cbz	r0, 801591e <__swbuf_r+0x12>
 8015916:	6983      	ldr	r3, [r0, #24]
 8015918:	b90b      	cbnz	r3, 801591e <__swbuf_r+0x12>
 801591a:	f001 f84b 	bl	80169b4 <__sinit>
 801591e:	4b21      	ldr	r3, [pc, #132]	; (80159a4 <__swbuf_r+0x98>)
 8015920:	429c      	cmp	r4, r3
 8015922:	d12b      	bne.n	801597c <__swbuf_r+0x70>
 8015924:	686c      	ldr	r4, [r5, #4]
 8015926:	69a3      	ldr	r3, [r4, #24]
 8015928:	60a3      	str	r3, [r4, #8]
 801592a:	89a3      	ldrh	r3, [r4, #12]
 801592c:	071a      	lsls	r2, r3, #28
 801592e:	d52f      	bpl.n	8015990 <__swbuf_r+0x84>
 8015930:	6923      	ldr	r3, [r4, #16]
 8015932:	b36b      	cbz	r3, 8015990 <__swbuf_r+0x84>
 8015934:	6923      	ldr	r3, [r4, #16]
 8015936:	6820      	ldr	r0, [r4, #0]
 8015938:	1ac0      	subs	r0, r0, r3
 801593a:	6963      	ldr	r3, [r4, #20]
 801593c:	b2f6      	uxtb	r6, r6
 801593e:	4283      	cmp	r3, r0
 8015940:	4637      	mov	r7, r6
 8015942:	dc04      	bgt.n	801594e <__swbuf_r+0x42>
 8015944:	4621      	mov	r1, r4
 8015946:	4628      	mov	r0, r5
 8015948:	f000 ffa0 	bl	801688c <_fflush_r>
 801594c:	bb30      	cbnz	r0, 801599c <__swbuf_r+0x90>
 801594e:	68a3      	ldr	r3, [r4, #8]
 8015950:	3b01      	subs	r3, #1
 8015952:	60a3      	str	r3, [r4, #8]
 8015954:	6823      	ldr	r3, [r4, #0]
 8015956:	1c5a      	adds	r2, r3, #1
 8015958:	6022      	str	r2, [r4, #0]
 801595a:	701e      	strb	r6, [r3, #0]
 801595c:	6963      	ldr	r3, [r4, #20]
 801595e:	3001      	adds	r0, #1
 8015960:	4283      	cmp	r3, r0
 8015962:	d004      	beq.n	801596e <__swbuf_r+0x62>
 8015964:	89a3      	ldrh	r3, [r4, #12]
 8015966:	07db      	lsls	r3, r3, #31
 8015968:	d506      	bpl.n	8015978 <__swbuf_r+0x6c>
 801596a:	2e0a      	cmp	r6, #10
 801596c:	d104      	bne.n	8015978 <__swbuf_r+0x6c>
 801596e:	4621      	mov	r1, r4
 8015970:	4628      	mov	r0, r5
 8015972:	f000 ff8b 	bl	801688c <_fflush_r>
 8015976:	b988      	cbnz	r0, 801599c <__swbuf_r+0x90>
 8015978:	4638      	mov	r0, r7
 801597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801597c:	4b0a      	ldr	r3, [pc, #40]	; (80159a8 <__swbuf_r+0x9c>)
 801597e:	429c      	cmp	r4, r3
 8015980:	d101      	bne.n	8015986 <__swbuf_r+0x7a>
 8015982:	68ac      	ldr	r4, [r5, #8]
 8015984:	e7cf      	b.n	8015926 <__swbuf_r+0x1a>
 8015986:	4b09      	ldr	r3, [pc, #36]	; (80159ac <__swbuf_r+0xa0>)
 8015988:	429c      	cmp	r4, r3
 801598a:	bf08      	it	eq
 801598c:	68ec      	ldreq	r4, [r5, #12]
 801598e:	e7ca      	b.n	8015926 <__swbuf_r+0x1a>
 8015990:	4621      	mov	r1, r4
 8015992:	4628      	mov	r0, r5
 8015994:	f000 f80c 	bl	80159b0 <__swsetup_r>
 8015998:	2800      	cmp	r0, #0
 801599a:	d0cb      	beq.n	8015934 <__swbuf_r+0x28>
 801599c:	f04f 37ff 	mov.w	r7, #4294967295
 80159a0:	e7ea      	b.n	8015978 <__swbuf_r+0x6c>
 80159a2:	bf00      	nop
 80159a4:	0801a3d8 	.word	0x0801a3d8
 80159a8:	0801a3f8 	.word	0x0801a3f8
 80159ac:	0801a3b8 	.word	0x0801a3b8

080159b0 <__swsetup_r>:
 80159b0:	4b32      	ldr	r3, [pc, #200]	; (8015a7c <__swsetup_r+0xcc>)
 80159b2:	b570      	push	{r4, r5, r6, lr}
 80159b4:	681d      	ldr	r5, [r3, #0]
 80159b6:	4606      	mov	r6, r0
 80159b8:	460c      	mov	r4, r1
 80159ba:	b125      	cbz	r5, 80159c6 <__swsetup_r+0x16>
 80159bc:	69ab      	ldr	r3, [r5, #24]
 80159be:	b913      	cbnz	r3, 80159c6 <__swsetup_r+0x16>
 80159c0:	4628      	mov	r0, r5
 80159c2:	f000 fff7 	bl	80169b4 <__sinit>
 80159c6:	4b2e      	ldr	r3, [pc, #184]	; (8015a80 <__swsetup_r+0xd0>)
 80159c8:	429c      	cmp	r4, r3
 80159ca:	d10f      	bne.n	80159ec <__swsetup_r+0x3c>
 80159cc:	686c      	ldr	r4, [r5, #4]
 80159ce:	89a3      	ldrh	r3, [r4, #12]
 80159d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80159d4:	0719      	lsls	r1, r3, #28
 80159d6:	d42c      	bmi.n	8015a32 <__swsetup_r+0x82>
 80159d8:	06dd      	lsls	r5, r3, #27
 80159da:	d411      	bmi.n	8015a00 <__swsetup_r+0x50>
 80159dc:	2309      	movs	r3, #9
 80159de:	6033      	str	r3, [r6, #0]
 80159e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80159e4:	81a3      	strh	r3, [r4, #12]
 80159e6:	f04f 30ff 	mov.w	r0, #4294967295
 80159ea:	e03e      	b.n	8015a6a <__swsetup_r+0xba>
 80159ec:	4b25      	ldr	r3, [pc, #148]	; (8015a84 <__swsetup_r+0xd4>)
 80159ee:	429c      	cmp	r4, r3
 80159f0:	d101      	bne.n	80159f6 <__swsetup_r+0x46>
 80159f2:	68ac      	ldr	r4, [r5, #8]
 80159f4:	e7eb      	b.n	80159ce <__swsetup_r+0x1e>
 80159f6:	4b24      	ldr	r3, [pc, #144]	; (8015a88 <__swsetup_r+0xd8>)
 80159f8:	429c      	cmp	r4, r3
 80159fa:	bf08      	it	eq
 80159fc:	68ec      	ldreq	r4, [r5, #12]
 80159fe:	e7e6      	b.n	80159ce <__swsetup_r+0x1e>
 8015a00:	0758      	lsls	r0, r3, #29
 8015a02:	d512      	bpl.n	8015a2a <__swsetup_r+0x7a>
 8015a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a06:	b141      	cbz	r1, 8015a1a <__swsetup_r+0x6a>
 8015a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a0c:	4299      	cmp	r1, r3
 8015a0e:	d002      	beq.n	8015a16 <__swsetup_r+0x66>
 8015a10:	4630      	mov	r0, r6
 8015a12:	f002 f92b 	bl	8017c6c <_free_r>
 8015a16:	2300      	movs	r3, #0
 8015a18:	6363      	str	r3, [r4, #52]	; 0x34
 8015a1a:	89a3      	ldrh	r3, [r4, #12]
 8015a1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a20:	81a3      	strh	r3, [r4, #12]
 8015a22:	2300      	movs	r3, #0
 8015a24:	6063      	str	r3, [r4, #4]
 8015a26:	6923      	ldr	r3, [r4, #16]
 8015a28:	6023      	str	r3, [r4, #0]
 8015a2a:	89a3      	ldrh	r3, [r4, #12]
 8015a2c:	f043 0308 	orr.w	r3, r3, #8
 8015a30:	81a3      	strh	r3, [r4, #12]
 8015a32:	6923      	ldr	r3, [r4, #16]
 8015a34:	b94b      	cbnz	r3, 8015a4a <__swsetup_r+0x9a>
 8015a36:	89a3      	ldrh	r3, [r4, #12]
 8015a38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a40:	d003      	beq.n	8015a4a <__swsetup_r+0x9a>
 8015a42:	4621      	mov	r1, r4
 8015a44:	4630      	mov	r0, r6
 8015a46:	f001 fbed 	bl	8017224 <__smakebuf_r>
 8015a4a:	89a0      	ldrh	r0, [r4, #12]
 8015a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a50:	f010 0301 	ands.w	r3, r0, #1
 8015a54:	d00a      	beq.n	8015a6c <__swsetup_r+0xbc>
 8015a56:	2300      	movs	r3, #0
 8015a58:	60a3      	str	r3, [r4, #8]
 8015a5a:	6963      	ldr	r3, [r4, #20]
 8015a5c:	425b      	negs	r3, r3
 8015a5e:	61a3      	str	r3, [r4, #24]
 8015a60:	6923      	ldr	r3, [r4, #16]
 8015a62:	b943      	cbnz	r3, 8015a76 <__swsetup_r+0xc6>
 8015a64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a68:	d1ba      	bne.n	80159e0 <__swsetup_r+0x30>
 8015a6a:	bd70      	pop	{r4, r5, r6, pc}
 8015a6c:	0781      	lsls	r1, r0, #30
 8015a6e:	bf58      	it	pl
 8015a70:	6963      	ldrpl	r3, [r4, #20]
 8015a72:	60a3      	str	r3, [r4, #8]
 8015a74:	e7f4      	b.n	8015a60 <__swsetup_r+0xb0>
 8015a76:	2000      	movs	r0, #0
 8015a78:	e7f7      	b.n	8015a6a <__swsetup_r+0xba>
 8015a7a:	bf00      	nop
 8015a7c:	20000180 	.word	0x20000180
 8015a80:	0801a3d8 	.word	0x0801a3d8
 8015a84:	0801a3f8 	.word	0x0801a3f8
 8015a88:	0801a3b8 	.word	0x0801a3b8

08015a8c <quorem>:
 8015a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a90:	6903      	ldr	r3, [r0, #16]
 8015a92:	690c      	ldr	r4, [r1, #16]
 8015a94:	42a3      	cmp	r3, r4
 8015a96:	4607      	mov	r7, r0
 8015a98:	f2c0 8081 	blt.w	8015b9e <quorem+0x112>
 8015a9c:	3c01      	subs	r4, #1
 8015a9e:	f101 0814 	add.w	r8, r1, #20
 8015aa2:	f100 0514 	add.w	r5, r0, #20
 8015aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015aaa:	9301      	str	r3, [sp, #4]
 8015aac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015ab4:	3301      	adds	r3, #1
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015abc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015ac0:	fbb2 f6f3 	udiv	r6, r2, r3
 8015ac4:	d331      	bcc.n	8015b2a <quorem+0x9e>
 8015ac6:	f04f 0e00 	mov.w	lr, #0
 8015aca:	4640      	mov	r0, r8
 8015acc:	46ac      	mov	ip, r5
 8015ace:	46f2      	mov	sl, lr
 8015ad0:	f850 2b04 	ldr.w	r2, [r0], #4
 8015ad4:	b293      	uxth	r3, r2
 8015ad6:	fb06 e303 	mla	r3, r6, r3, lr
 8015ada:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	ebaa 0303 	sub.w	r3, sl, r3
 8015ae4:	0c12      	lsrs	r2, r2, #16
 8015ae6:	f8dc a000 	ldr.w	sl, [ip]
 8015aea:	fb06 e202 	mla	r2, r6, r2, lr
 8015aee:	fa13 f38a 	uxtah	r3, r3, sl
 8015af2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015af6:	fa1f fa82 	uxth.w	sl, r2
 8015afa:	f8dc 2000 	ldr.w	r2, [ip]
 8015afe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015b02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015b0c:	4581      	cmp	r9, r0
 8015b0e:	f84c 3b04 	str.w	r3, [ip], #4
 8015b12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015b16:	d2db      	bcs.n	8015ad0 <quorem+0x44>
 8015b18:	f855 300b 	ldr.w	r3, [r5, fp]
 8015b1c:	b92b      	cbnz	r3, 8015b2a <quorem+0x9e>
 8015b1e:	9b01      	ldr	r3, [sp, #4]
 8015b20:	3b04      	subs	r3, #4
 8015b22:	429d      	cmp	r5, r3
 8015b24:	461a      	mov	r2, r3
 8015b26:	d32e      	bcc.n	8015b86 <quorem+0xfa>
 8015b28:	613c      	str	r4, [r7, #16]
 8015b2a:	4638      	mov	r0, r7
 8015b2c:	f001 fe9c 	bl	8017868 <__mcmp>
 8015b30:	2800      	cmp	r0, #0
 8015b32:	db24      	blt.n	8015b7e <quorem+0xf2>
 8015b34:	3601      	adds	r6, #1
 8015b36:	4628      	mov	r0, r5
 8015b38:	f04f 0c00 	mov.w	ip, #0
 8015b3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015b40:	f8d0 e000 	ldr.w	lr, [r0]
 8015b44:	b293      	uxth	r3, r2
 8015b46:	ebac 0303 	sub.w	r3, ip, r3
 8015b4a:	0c12      	lsrs	r2, r2, #16
 8015b4c:	fa13 f38e 	uxtah	r3, r3, lr
 8015b50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015b54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015b5e:	45c1      	cmp	r9, r8
 8015b60:	f840 3b04 	str.w	r3, [r0], #4
 8015b64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015b68:	d2e8      	bcs.n	8015b3c <quorem+0xb0>
 8015b6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015b72:	b922      	cbnz	r2, 8015b7e <quorem+0xf2>
 8015b74:	3b04      	subs	r3, #4
 8015b76:	429d      	cmp	r5, r3
 8015b78:	461a      	mov	r2, r3
 8015b7a:	d30a      	bcc.n	8015b92 <quorem+0x106>
 8015b7c:	613c      	str	r4, [r7, #16]
 8015b7e:	4630      	mov	r0, r6
 8015b80:	b003      	add	sp, #12
 8015b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b86:	6812      	ldr	r2, [r2, #0]
 8015b88:	3b04      	subs	r3, #4
 8015b8a:	2a00      	cmp	r2, #0
 8015b8c:	d1cc      	bne.n	8015b28 <quorem+0x9c>
 8015b8e:	3c01      	subs	r4, #1
 8015b90:	e7c7      	b.n	8015b22 <quorem+0x96>
 8015b92:	6812      	ldr	r2, [r2, #0]
 8015b94:	3b04      	subs	r3, #4
 8015b96:	2a00      	cmp	r2, #0
 8015b98:	d1f0      	bne.n	8015b7c <quorem+0xf0>
 8015b9a:	3c01      	subs	r4, #1
 8015b9c:	e7eb      	b.n	8015b76 <quorem+0xea>
 8015b9e:	2000      	movs	r0, #0
 8015ba0:	e7ee      	b.n	8015b80 <quorem+0xf4>
 8015ba2:	0000      	movs	r0, r0
 8015ba4:	0000      	movs	r0, r0
	...

08015ba8 <_dtoa_r>:
 8015ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bac:	ed2d 8b02 	vpush	{d8}
 8015bb0:	ec57 6b10 	vmov	r6, r7, d0
 8015bb4:	b095      	sub	sp, #84	; 0x54
 8015bb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015bb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015bbc:	9105      	str	r1, [sp, #20]
 8015bbe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015bc2:	4604      	mov	r4, r0
 8015bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8015bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8015bc8:	b975      	cbnz	r5, 8015be8 <_dtoa_r+0x40>
 8015bca:	2010      	movs	r0, #16
 8015bcc:	f001 fb6a 	bl	80172a4 <malloc>
 8015bd0:	4602      	mov	r2, r0
 8015bd2:	6260      	str	r0, [r4, #36]	; 0x24
 8015bd4:	b920      	cbnz	r0, 8015be0 <_dtoa_r+0x38>
 8015bd6:	4bb2      	ldr	r3, [pc, #712]	; (8015ea0 <_dtoa_r+0x2f8>)
 8015bd8:	21ea      	movs	r1, #234	; 0xea
 8015bda:	48b2      	ldr	r0, [pc, #712]	; (8015ea4 <_dtoa_r+0x2fc>)
 8015bdc:	f002 fc22 	bl	8018424 <__assert_func>
 8015be0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015be4:	6005      	str	r5, [r0, #0]
 8015be6:	60c5      	str	r5, [r0, #12]
 8015be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bea:	6819      	ldr	r1, [r3, #0]
 8015bec:	b151      	cbz	r1, 8015c04 <_dtoa_r+0x5c>
 8015bee:	685a      	ldr	r2, [r3, #4]
 8015bf0:	604a      	str	r2, [r1, #4]
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	4093      	lsls	r3, r2
 8015bf6:	608b      	str	r3, [r1, #8]
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f001 fbad 	bl	8017358 <_Bfree>
 8015bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c00:	2200      	movs	r2, #0
 8015c02:	601a      	str	r2, [r3, #0]
 8015c04:	1e3b      	subs	r3, r7, #0
 8015c06:	bfb9      	ittee	lt
 8015c08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015c0c:	9303      	strlt	r3, [sp, #12]
 8015c0e:	2300      	movge	r3, #0
 8015c10:	f8c8 3000 	strge.w	r3, [r8]
 8015c14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015c18:	4ba3      	ldr	r3, [pc, #652]	; (8015ea8 <_dtoa_r+0x300>)
 8015c1a:	bfbc      	itt	lt
 8015c1c:	2201      	movlt	r2, #1
 8015c1e:	f8c8 2000 	strlt.w	r2, [r8]
 8015c22:	ea33 0309 	bics.w	r3, r3, r9
 8015c26:	d11b      	bne.n	8015c60 <_dtoa_r+0xb8>
 8015c28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8015c2e:	6013      	str	r3, [r2, #0]
 8015c30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c34:	4333      	orrs	r3, r6
 8015c36:	f000 857a 	beq.w	801672e <_dtoa_r+0xb86>
 8015c3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c3c:	b963      	cbnz	r3, 8015c58 <_dtoa_r+0xb0>
 8015c3e:	4b9b      	ldr	r3, [pc, #620]	; (8015eac <_dtoa_r+0x304>)
 8015c40:	e024      	b.n	8015c8c <_dtoa_r+0xe4>
 8015c42:	4b9b      	ldr	r3, [pc, #620]	; (8015eb0 <_dtoa_r+0x308>)
 8015c44:	9300      	str	r3, [sp, #0]
 8015c46:	3308      	adds	r3, #8
 8015c48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c4a:	6013      	str	r3, [r2, #0]
 8015c4c:	9800      	ldr	r0, [sp, #0]
 8015c4e:	b015      	add	sp, #84	; 0x54
 8015c50:	ecbd 8b02 	vpop	{d8}
 8015c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c58:	4b94      	ldr	r3, [pc, #592]	; (8015eac <_dtoa_r+0x304>)
 8015c5a:	9300      	str	r3, [sp, #0]
 8015c5c:	3303      	adds	r3, #3
 8015c5e:	e7f3      	b.n	8015c48 <_dtoa_r+0xa0>
 8015c60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c64:	2200      	movs	r2, #0
 8015c66:	ec51 0b17 	vmov	r0, r1, d7
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015c70:	f7ea ff3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8015c74:	4680      	mov	r8, r0
 8015c76:	b158      	cbz	r0, 8015c90 <_dtoa_r+0xe8>
 8015c78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	6013      	str	r3, [r2, #0]
 8015c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	f000 8551 	beq.w	8016728 <_dtoa_r+0xb80>
 8015c86:	488b      	ldr	r0, [pc, #556]	; (8015eb4 <_dtoa_r+0x30c>)
 8015c88:	6018      	str	r0, [r3, #0]
 8015c8a:	1e43      	subs	r3, r0, #1
 8015c8c:	9300      	str	r3, [sp, #0]
 8015c8e:	e7dd      	b.n	8015c4c <_dtoa_r+0xa4>
 8015c90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015c94:	aa12      	add	r2, sp, #72	; 0x48
 8015c96:	a913      	add	r1, sp, #76	; 0x4c
 8015c98:	4620      	mov	r0, r4
 8015c9a:	f001 ff05 	bl	8017aa8 <__d2b>
 8015c9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015ca2:	4683      	mov	fp, r0
 8015ca4:	2d00      	cmp	r5, #0
 8015ca6:	d07c      	beq.n	8015da2 <_dtoa_r+0x1fa>
 8015ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015caa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8015cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015cb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015cb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015cba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015cbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015cc2:	4b7d      	ldr	r3, [pc, #500]	; (8015eb8 <_dtoa_r+0x310>)
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	4630      	mov	r0, r6
 8015cc8:	4639      	mov	r1, r7
 8015cca:	f7ea faed 	bl	80002a8 <__aeabi_dsub>
 8015cce:	a36e      	add	r3, pc, #440	; (adr r3, 8015e88 <_dtoa_r+0x2e0>)
 8015cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd4:	f7ea fca0 	bl	8000618 <__aeabi_dmul>
 8015cd8:	a36d      	add	r3, pc, #436	; (adr r3, 8015e90 <_dtoa_r+0x2e8>)
 8015cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cde:	f7ea fae5 	bl	80002ac <__adddf3>
 8015ce2:	4606      	mov	r6, r0
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	460f      	mov	r7, r1
 8015ce8:	f7ea fc2c 	bl	8000544 <__aeabi_i2d>
 8015cec:	a36a      	add	r3, pc, #424	; (adr r3, 8015e98 <_dtoa_r+0x2f0>)
 8015cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf2:	f7ea fc91 	bl	8000618 <__aeabi_dmul>
 8015cf6:	4602      	mov	r2, r0
 8015cf8:	460b      	mov	r3, r1
 8015cfa:	4630      	mov	r0, r6
 8015cfc:	4639      	mov	r1, r7
 8015cfe:	f7ea fad5 	bl	80002ac <__adddf3>
 8015d02:	4606      	mov	r6, r0
 8015d04:	460f      	mov	r7, r1
 8015d06:	f7ea ff37 	bl	8000b78 <__aeabi_d2iz>
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	4682      	mov	sl, r0
 8015d0e:	2300      	movs	r3, #0
 8015d10:	4630      	mov	r0, r6
 8015d12:	4639      	mov	r1, r7
 8015d14:	f7ea fef2 	bl	8000afc <__aeabi_dcmplt>
 8015d18:	b148      	cbz	r0, 8015d2e <_dtoa_r+0x186>
 8015d1a:	4650      	mov	r0, sl
 8015d1c:	f7ea fc12 	bl	8000544 <__aeabi_i2d>
 8015d20:	4632      	mov	r2, r6
 8015d22:	463b      	mov	r3, r7
 8015d24:	f7ea fee0 	bl	8000ae8 <__aeabi_dcmpeq>
 8015d28:	b908      	cbnz	r0, 8015d2e <_dtoa_r+0x186>
 8015d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015d2e:	f1ba 0f16 	cmp.w	sl, #22
 8015d32:	d854      	bhi.n	8015dde <_dtoa_r+0x236>
 8015d34:	4b61      	ldr	r3, [pc, #388]	; (8015ebc <_dtoa_r+0x314>)
 8015d36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015d42:	f7ea fedb 	bl	8000afc <__aeabi_dcmplt>
 8015d46:	2800      	cmp	r0, #0
 8015d48:	d04b      	beq.n	8015de2 <_dtoa_r+0x23a>
 8015d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015d4e:	2300      	movs	r3, #0
 8015d50:	930e      	str	r3, [sp, #56]	; 0x38
 8015d52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d54:	1b5d      	subs	r5, r3, r5
 8015d56:	1e6b      	subs	r3, r5, #1
 8015d58:	9304      	str	r3, [sp, #16]
 8015d5a:	bf43      	ittte	mi
 8015d5c:	2300      	movmi	r3, #0
 8015d5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8015d62:	9304      	strmi	r3, [sp, #16]
 8015d64:	f04f 0800 	movpl.w	r8, #0
 8015d68:	f1ba 0f00 	cmp.w	sl, #0
 8015d6c:	db3b      	blt.n	8015de6 <_dtoa_r+0x23e>
 8015d6e:	9b04      	ldr	r3, [sp, #16]
 8015d70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8015d74:	4453      	add	r3, sl
 8015d76:	9304      	str	r3, [sp, #16]
 8015d78:	2300      	movs	r3, #0
 8015d7a:	9306      	str	r3, [sp, #24]
 8015d7c:	9b05      	ldr	r3, [sp, #20]
 8015d7e:	2b09      	cmp	r3, #9
 8015d80:	d869      	bhi.n	8015e56 <_dtoa_r+0x2ae>
 8015d82:	2b05      	cmp	r3, #5
 8015d84:	bfc4      	itt	gt
 8015d86:	3b04      	subgt	r3, #4
 8015d88:	9305      	strgt	r3, [sp, #20]
 8015d8a:	9b05      	ldr	r3, [sp, #20]
 8015d8c:	f1a3 0302 	sub.w	r3, r3, #2
 8015d90:	bfcc      	ite	gt
 8015d92:	2500      	movgt	r5, #0
 8015d94:	2501      	movle	r5, #1
 8015d96:	2b03      	cmp	r3, #3
 8015d98:	d869      	bhi.n	8015e6e <_dtoa_r+0x2c6>
 8015d9a:	e8df f003 	tbb	[pc, r3]
 8015d9e:	4e2c      	.short	0x4e2c
 8015da0:	5a4c      	.short	0x5a4c
 8015da2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015da6:	441d      	add	r5, r3
 8015da8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015dac:	2b20      	cmp	r3, #32
 8015dae:	bfc1      	itttt	gt
 8015db0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015db4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015db8:	fa09 f303 	lslgt.w	r3, r9, r3
 8015dbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015dc0:	bfda      	itte	le
 8015dc2:	f1c3 0320 	rsble	r3, r3, #32
 8015dc6:	fa06 f003 	lslle.w	r0, r6, r3
 8015dca:	4318      	orrgt	r0, r3
 8015dcc:	f7ea fbaa 	bl	8000524 <__aeabi_ui2d>
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	4606      	mov	r6, r0
 8015dd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015dd8:	3d01      	subs	r5, #1
 8015dda:	9310      	str	r3, [sp, #64]	; 0x40
 8015ddc:	e771      	b.n	8015cc2 <_dtoa_r+0x11a>
 8015dde:	2301      	movs	r3, #1
 8015de0:	e7b6      	b.n	8015d50 <_dtoa_r+0x1a8>
 8015de2:	900e      	str	r0, [sp, #56]	; 0x38
 8015de4:	e7b5      	b.n	8015d52 <_dtoa_r+0x1aa>
 8015de6:	f1ca 0300 	rsb	r3, sl, #0
 8015dea:	9306      	str	r3, [sp, #24]
 8015dec:	2300      	movs	r3, #0
 8015dee:	eba8 080a 	sub.w	r8, r8, sl
 8015df2:	930d      	str	r3, [sp, #52]	; 0x34
 8015df4:	e7c2      	b.n	8015d7c <_dtoa_r+0x1d4>
 8015df6:	2300      	movs	r3, #0
 8015df8:	9308      	str	r3, [sp, #32]
 8015dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	dc39      	bgt.n	8015e74 <_dtoa_r+0x2cc>
 8015e00:	f04f 0901 	mov.w	r9, #1
 8015e04:	f8cd 9004 	str.w	r9, [sp, #4]
 8015e08:	464b      	mov	r3, r9
 8015e0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015e0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015e10:	2200      	movs	r2, #0
 8015e12:	6042      	str	r2, [r0, #4]
 8015e14:	2204      	movs	r2, #4
 8015e16:	f102 0614 	add.w	r6, r2, #20
 8015e1a:	429e      	cmp	r6, r3
 8015e1c:	6841      	ldr	r1, [r0, #4]
 8015e1e:	d92f      	bls.n	8015e80 <_dtoa_r+0x2d8>
 8015e20:	4620      	mov	r0, r4
 8015e22:	f001 fa59 	bl	80172d8 <_Balloc>
 8015e26:	9000      	str	r0, [sp, #0]
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d14b      	bne.n	8015ec4 <_dtoa_r+0x31c>
 8015e2c:	4b24      	ldr	r3, [pc, #144]	; (8015ec0 <_dtoa_r+0x318>)
 8015e2e:	4602      	mov	r2, r0
 8015e30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015e34:	e6d1      	b.n	8015bda <_dtoa_r+0x32>
 8015e36:	2301      	movs	r3, #1
 8015e38:	e7de      	b.n	8015df8 <_dtoa_r+0x250>
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	9308      	str	r3, [sp, #32]
 8015e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e40:	eb0a 0903 	add.w	r9, sl, r3
 8015e44:	f109 0301 	add.w	r3, r9, #1
 8015e48:	2b01      	cmp	r3, #1
 8015e4a:	9301      	str	r3, [sp, #4]
 8015e4c:	bfb8      	it	lt
 8015e4e:	2301      	movlt	r3, #1
 8015e50:	e7dd      	b.n	8015e0e <_dtoa_r+0x266>
 8015e52:	2301      	movs	r3, #1
 8015e54:	e7f2      	b.n	8015e3c <_dtoa_r+0x294>
 8015e56:	2501      	movs	r5, #1
 8015e58:	2300      	movs	r3, #0
 8015e5a:	9305      	str	r3, [sp, #20]
 8015e5c:	9508      	str	r5, [sp, #32]
 8015e5e:	f04f 39ff 	mov.w	r9, #4294967295
 8015e62:	2200      	movs	r2, #0
 8015e64:	f8cd 9004 	str.w	r9, [sp, #4]
 8015e68:	2312      	movs	r3, #18
 8015e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8015e6c:	e7cf      	b.n	8015e0e <_dtoa_r+0x266>
 8015e6e:	2301      	movs	r3, #1
 8015e70:	9308      	str	r3, [sp, #32]
 8015e72:	e7f4      	b.n	8015e5e <_dtoa_r+0x2b6>
 8015e74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015e78:	f8cd 9004 	str.w	r9, [sp, #4]
 8015e7c:	464b      	mov	r3, r9
 8015e7e:	e7c6      	b.n	8015e0e <_dtoa_r+0x266>
 8015e80:	3101      	adds	r1, #1
 8015e82:	6041      	str	r1, [r0, #4]
 8015e84:	0052      	lsls	r2, r2, #1
 8015e86:	e7c6      	b.n	8015e16 <_dtoa_r+0x26e>
 8015e88:	636f4361 	.word	0x636f4361
 8015e8c:	3fd287a7 	.word	0x3fd287a7
 8015e90:	8b60c8b3 	.word	0x8b60c8b3
 8015e94:	3fc68a28 	.word	0x3fc68a28
 8015e98:	509f79fb 	.word	0x509f79fb
 8015e9c:	3fd34413 	.word	0x3fd34413
 8015ea0:	0801a32e 	.word	0x0801a32e
 8015ea4:	0801a345 	.word	0x0801a345
 8015ea8:	7ff00000 	.word	0x7ff00000
 8015eac:	0801a32a 	.word	0x0801a32a
 8015eb0:	0801a321 	.word	0x0801a321
 8015eb4:	0801a1a5 	.word	0x0801a1a5
 8015eb8:	3ff80000 	.word	0x3ff80000
 8015ebc:	0801a520 	.word	0x0801a520
 8015ec0:	0801a3a4 	.word	0x0801a3a4
 8015ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ec6:	9a00      	ldr	r2, [sp, #0]
 8015ec8:	601a      	str	r2, [r3, #0]
 8015eca:	9b01      	ldr	r3, [sp, #4]
 8015ecc:	2b0e      	cmp	r3, #14
 8015ece:	f200 80ad 	bhi.w	801602c <_dtoa_r+0x484>
 8015ed2:	2d00      	cmp	r5, #0
 8015ed4:	f000 80aa 	beq.w	801602c <_dtoa_r+0x484>
 8015ed8:	f1ba 0f00 	cmp.w	sl, #0
 8015edc:	dd36      	ble.n	8015f4c <_dtoa_r+0x3a4>
 8015ede:	4ac3      	ldr	r2, [pc, #780]	; (80161ec <_dtoa_r+0x644>)
 8015ee0:	f00a 030f 	and.w	r3, sl, #15
 8015ee4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015ee8:	ed93 7b00 	vldr	d7, [r3]
 8015eec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015ef0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015ef4:	eeb0 8a47 	vmov.f32	s16, s14
 8015ef8:	eef0 8a67 	vmov.f32	s17, s15
 8015efc:	d016      	beq.n	8015f2c <_dtoa_r+0x384>
 8015efe:	4bbc      	ldr	r3, [pc, #752]	; (80161f0 <_dtoa_r+0x648>)
 8015f00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015f04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015f08:	f7ea fcb0 	bl	800086c <__aeabi_ddiv>
 8015f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f10:	f007 070f 	and.w	r7, r7, #15
 8015f14:	2503      	movs	r5, #3
 8015f16:	4eb6      	ldr	r6, [pc, #728]	; (80161f0 <_dtoa_r+0x648>)
 8015f18:	b957      	cbnz	r7, 8015f30 <_dtoa_r+0x388>
 8015f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f1e:	ec53 2b18 	vmov	r2, r3, d8
 8015f22:	f7ea fca3 	bl	800086c <__aeabi_ddiv>
 8015f26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f2a:	e029      	b.n	8015f80 <_dtoa_r+0x3d8>
 8015f2c:	2502      	movs	r5, #2
 8015f2e:	e7f2      	b.n	8015f16 <_dtoa_r+0x36e>
 8015f30:	07f9      	lsls	r1, r7, #31
 8015f32:	d508      	bpl.n	8015f46 <_dtoa_r+0x39e>
 8015f34:	ec51 0b18 	vmov	r0, r1, d8
 8015f38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015f3c:	f7ea fb6c 	bl	8000618 <__aeabi_dmul>
 8015f40:	ec41 0b18 	vmov	d8, r0, r1
 8015f44:	3501      	adds	r5, #1
 8015f46:	107f      	asrs	r7, r7, #1
 8015f48:	3608      	adds	r6, #8
 8015f4a:	e7e5      	b.n	8015f18 <_dtoa_r+0x370>
 8015f4c:	f000 80a6 	beq.w	801609c <_dtoa_r+0x4f4>
 8015f50:	f1ca 0600 	rsb	r6, sl, #0
 8015f54:	4ba5      	ldr	r3, [pc, #660]	; (80161ec <_dtoa_r+0x644>)
 8015f56:	4fa6      	ldr	r7, [pc, #664]	; (80161f0 <_dtoa_r+0x648>)
 8015f58:	f006 020f 	and.w	r2, r6, #15
 8015f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015f68:	f7ea fb56 	bl	8000618 <__aeabi_dmul>
 8015f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f70:	1136      	asrs	r6, r6, #4
 8015f72:	2300      	movs	r3, #0
 8015f74:	2502      	movs	r5, #2
 8015f76:	2e00      	cmp	r6, #0
 8015f78:	f040 8085 	bne.w	8016086 <_dtoa_r+0x4de>
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d1d2      	bne.n	8015f26 <_dtoa_r+0x37e>
 8015f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	f000 808c 	beq.w	80160a0 <_dtoa_r+0x4f8>
 8015f88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015f8c:	4b99      	ldr	r3, [pc, #612]	; (80161f4 <_dtoa_r+0x64c>)
 8015f8e:	2200      	movs	r2, #0
 8015f90:	4630      	mov	r0, r6
 8015f92:	4639      	mov	r1, r7
 8015f94:	f7ea fdb2 	bl	8000afc <__aeabi_dcmplt>
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	f000 8081 	beq.w	80160a0 <_dtoa_r+0x4f8>
 8015f9e:	9b01      	ldr	r3, [sp, #4]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d07d      	beq.n	80160a0 <_dtoa_r+0x4f8>
 8015fa4:	f1b9 0f00 	cmp.w	r9, #0
 8015fa8:	dd3c      	ble.n	8016024 <_dtoa_r+0x47c>
 8015faa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015fae:	9307      	str	r3, [sp, #28]
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	4b91      	ldr	r3, [pc, #580]	; (80161f8 <_dtoa_r+0x650>)
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	4639      	mov	r1, r7
 8015fb8:	f7ea fb2e 	bl	8000618 <__aeabi_dmul>
 8015fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fc0:	3501      	adds	r5, #1
 8015fc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015fc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015fca:	4628      	mov	r0, r5
 8015fcc:	f7ea faba 	bl	8000544 <__aeabi_i2d>
 8015fd0:	4632      	mov	r2, r6
 8015fd2:	463b      	mov	r3, r7
 8015fd4:	f7ea fb20 	bl	8000618 <__aeabi_dmul>
 8015fd8:	4b88      	ldr	r3, [pc, #544]	; (80161fc <_dtoa_r+0x654>)
 8015fda:	2200      	movs	r2, #0
 8015fdc:	f7ea f966 	bl	80002ac <__adddf3>
 8015fe0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fe8:	9303      	str	r3, [sp, #12]
 8015fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d15c      	bne.n	80160aa <_dtoa_r+0x502>
 8015ff0:	4b83      	ldr	r3, [pc, #524]	; (8016200 <_dtoa_r+0x658>)
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	4630      	mov	r0, r6
 8015ff6:	4639      	mov	r1, r7
 8015ff8:	f7ea f956 	bl	80002a8 <__aeabi_dsub>
 8015ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016000:	4606      	mov	r6, r0
 8016002:	460f      	mov	r7, r1
 8016004:	f7ea fd98 	bl	8000b38 <__aeabi_dcmpgt>
 8016008:	2800      	cmp	r0, #0
 801600a:	f040 8296 	bne.w	801653a <_dtoa_r+0x992>
 801600e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016012:	4630      	mov	r0, r6
 8016014:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016018:	4639      	mov	r1, r7
 801601a:	f7ea fd6f 	bl	8000afc <__aeabi_dcmplt>
 801601e:	2800      	cmp	r0, #0
 8016020:	f040 8288 	bne.w	8016534 <_dtoa_r+0x98c>
 8016024:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016028:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801602c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801602e:	2b00      	cmp	r3, #0
 8016030:	f2c0 8158 	blt.w	80162e4 <_dtoa_r+0x73c>
 8016034:	f1ba 0f0e 	cmp.w	sl, #14
 8016038:	f300 8154 	bgt.w	80162e4 <_dtoa_r+0x73c>
 801603c:	4b6b      	ldr	r3, [pc, #428]	; (80161ec <_dtoa_r+0x644>)
 801603e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016042:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016048:	2b00      	cmp	r3, #0
 801604a:	f280 80e3 	bge.w	8016214 <_dtoa_r+0x66c>
 801604e:	9b01      	ldr	r3, [sp, #4]
 8016050:	2b00      	cmp	r3, #0
 8016052:	f300 80df 	bgt.w	8016214 <_dtoa_r+0x66c>
 8016056:	f040 826d 	bne.w	8016534 <_dtoa_r+0x98c>
 801605a:	4b69      	ldr	r3, [pc, #420]	; (8016200 <_dtoa_r+0x658>)
 801605c:	2200      	movs	r2, #0
 801605e:	4640      	mov	r0, r8
 8016060:	4649      	mov	r1, r9
 8016062:	f7ea fad9 	bl	8000618 <__aeabi_dmul>
 8016066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801606a:	f7ea fd5b 	bl	8000b24 <__aeabi_dcmpge>
 801606e:	9e01      	ldr	r6, [sp, #4]
 8016070:	4637      	mov	r7, r6
 8016072:	2800      	cmp	r0, #0
 8016074:	f040 8243 	bne.w	80164fe <_dtoa_r+0x956>
 8016078:	9d00      	ldr	r5, [sp, #0]
 801607a:	2331      	movs	r3, #49	; 0x31
 801607c:	f805 3b01 	strb.w	r3, [r5], #1
 8016080:	f10a 0a01 	add.w	sl, sl, #1
 8016084:	e23f      	b.n	8016506 <_dtoa_r+0x95e>
 8016086:	07f2      	lsls	r2, r6, #31
 8016088:	d505      	bpl.n	8016096 <_dtoa_r+0x4ee>
 801608a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801608e:	f7ea fac3 	bl	8000618 <__aeabi_dmul>
 8016092:	3501      	adds	r5, #1
 8016094:	2301      	movs	r3, #1
 8016096:	1076      	asrs	r6, r6, #1
 8016098:	3708      	adds	r7, #8
 801609a:	e76c      	b.n	8015f76 <_dtoa_r+0x3ce>
 801609c:	2502      	movs	r5, #2
 801609e:	e76f      	b.n	8015f80 <_dtoa_r+0x3d8>
 80160a0:	9b01      	ldr	r3, [sp, #4]
 80160a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80160a6:	930c      	str	r3, [sp, #48]	; 0x30
 80160a8:	e78d      	b.n	8015fc6 <_dtoa_r+0x41e>
 80160aa:	9900      	ldr	r1, [sp, #0]
 80160ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80160ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160b0:	4b4e      	ldr	r3, [pc, #312]	; (80161ec <_dtoa_r+0x644>)
 80160b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80160b6:	4401      	add	r1, r0
 80160b8:	9102      	str	r1, [sp, #8]
 80160ba:	9908      	ldr	r1, [sp, #32]
 80160bc:	eeb0 8a47 	vmov.f32	s16, s14
 80160c0:	eef0 8a67 	vmov.f32	s17, s15
 80160c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80160c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80160cc:	2900      	cmp	r1, #0
 80160ce:	d045      	beq.n	801615c <_dtoa_r+0x5b4>
 80160d0:	494c      	ldr	r1, [pc, #304]	; (8016204 <_dtoa_r+0x65c>)
 80160d2:	2000      	movs	r0, #0
 80160d4:	f7ea fbca 	bl	800086c <__aeabi_ddiv>
 80160d8:	ec53 2b18 	vmov	r2, r3, d8
 80160dc:	f7ea f8e4 	bl	80002a8 <__aeabi_dsub>
 80160e0:	9d00      	ldr	r5, [sp, #0]
 80160e2:	ec41 0b18 	vmov	d8, r0, r1
 80160e6:	4639      	mov	r1, r7
 80160e8:	4630      	mov	r0, r6
 80160ea:	f7ea fd45 	bl	8000b78 <__aeabi_d2iz>
 80160ee:	900c      	str	r0, [sp, #48]	; 0x30
 80160f0:	f7ea fa28 	bl	8000544 <__aeabi_i2d>
 80160f4:	4602      	mov	r2, r0
 80160f6:	460b      	mov	r3, r1
 80160f8:	4630      	mov	r0, r6
 80160fa:	4639      	mov	r1, r7
 80160fc:	f7ea f8d4 	bl	80002a8 <__aeabi_dsub>
 8016100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016102:	3330      	adds	r3, #48	; 0x30
 8016104:	f805 3b01 	strb.w	r3, [r5], #1
 8016108:	ec53 2b18 	vmov	r2, r3, d8
 801610c:	4606      	mov	r6, r0
 801610e:	460f      	mov	r7, r1
 8016110:	f7ea fcf4 	bl	8000afc <__aeabi_dcmplt>
 8016114:	2800      	cmp	r0, #0
 8016116:	d165      	bne.n	80161e4 <_dtoa_r+0x63c>
 8016118:	4632      	mov	r2, r6
 801611a:	463b      	mov	r3, r7
 801611c:	4935      	ldr	r1, [pc, #212]	; (80161f4 <_dtoa_r+0x64c>)
 801611e:	2000      	movs	r0, #0
 8016120:	f7ea f8c2 	bl	80002a8 <__aeabi_dsub>
 8016124:	ec53 2b18 	vmov	r2, r3, d8
 8016128:	f7ea fce8 	bl	8000afc <__aeabi_dcmplt>
 801612c:	2800      	cmp	r0, #0
 801612e:	f040 80b9 	bne.w	80162a4 <_dtoa_r+0x6fc>
 8016132:	9b02      	ldr	r3, [sp, #8]
 8016134:	429d      	cmp	r5, r3
 8016136:	f43f af75 	beq.w	8016024 <_dtoa_r+0x47c>
 801613a:	4b2f      	ldr	r3, [pc, #188]	; (80161f8 <_dtoa_r+0x650>)
 801613c:	ec51 0b18 	vmov	r0, r1, d8
 8016140:	2200      	movs	r2, #0
 8016142:	f7ea fa69 	bl	8000618 <__aeabi_dmul>
 8016146:	4b2c      	ldr	r3, [pc, #176]	; (80161f8 <_dtoa_r+0x650>)
 8016148:	ec41 0b18 	vmov	d8, r0, r1
 801614c:	2200      	movs	r2, #0
 801614e:	4630      	mov	r0, r6
 8016150:	4639      	mov	r1, r7
 8016152:	f7ea fa61 	bl	8000618 <__aeabi_dmul>
 8016156:	4606      	mov	r6, r0
 8016158:	460f      	mov	r7, r1
 801615a:	e7c4      	b.n	80160e6 <_dtoa_r+0x53e>
 801615c:	ec51 0b17 	vmov	r0, r1, d7
 8016160:	f7ea fa5a 	bl	8000618 <__aeabi_dmul>
 8016164:	9b02      	ldr	r3, [sp, #8]
 8016166:	9d00      	ldr	r5, [sp, #0]
 8016168:	930c      	str	r3, [sp, #48]	; 0x30
 801616a:	ec41 0b18 	vmov	d8, r0, r1
 801616e:	4639      	mov	r1, r7
 8016170:	4630      	mov	r0, r6
 8016172:	f7ea fd01 	bl	8000b78 <__aeabi_d2iz>
 8016176:	9011      	str	r0, [sp, #68]	; 0x44
 8016178:	f7ea f9e4 	bl	8000544 <__aeabi_i2d>
 801617c:	4602      	mov	r2, r0
 801617e:	460b      	mov	r3, r1
 8016180:	4630      	mov	r0, r6
 8016182:	4639      	mov	r1, r7
 8016184:	f7ea f890 	bl	80002a8 <__aeabi_dsub>
 8016188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801618a:	3330      	adds	r3, #48	; 0x30
 801618c:	f805 3b01 	strb.w	r3, [r5], #1
 8016190:	9b02      	ldr	r3, [sp, #8]
 8016192:	429d      	cmp	r5, r3
 8016194:	4606      	mov	r6, r0
 8016196:	460f      	mov	r7, r1
 8016198:	f04f 0200 	mov.w	r2, #0
 801619c:	d134      	bne.n	8016208 <_dtoa_r+0x660>
 801619e:	4b19      	ldr	r3, [pc, #100]	; (8016204 <_dtoa_r+0x65c>)
 80161a0:	ec51 0b18 	vmov	r0, r1, d8
 80161a4:	f7ea f882 	bl	80002ac <__adddf3>
 80161a8:	4602      	mov	r2, r0
 80161aa:	460b      	mov	r3, r1
 80161ac:	4630      	mov	r0, r6
 80161ae:	4639      	mov	r1, r7
 80161b0:	f7ea fcc2 	bl	8000b38 <__aeabi_dcmpgt>
 80161b4:	2800      	cmp	r0, #0
 80161b6:	d175      	bne.n	80162a4 <_dtoa_r+0x6fc>
 80161b8:	ec53 2b18 	vmov	r2, r3, d8
 80161bc:	4911      	ldr	r1, [pc, #68]	; (8016204 <_dtoa_r+0x65c>)
 80161be:	2000      	movs	r0, #0
 80161c0:	f7ea f872 	bl	80002a8 <__aeabi_dsub>
 80161c4:	4602      	mov	r2, r0
 80161c6:	460b      	mov	r3, r1
 80161c8:	4630      	mov	r0, r6
 80161ca:	4639      	mov	r1, r7
 80161cc:	f7ea fc96 	bl	8000afc <__aeabi_dcmplt>
 80161d0:	2800      	cmp	r0, #0
 80161d2:	f43f af27 	beq.w	8016024 <_dtoa_r+0x47c>
 80161d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80161d8:	1e6b      	subs	r3, r5, #1
 80161da:	930c      	str	r3, [sp, #48]	; 0x30
 80161dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80161e0:	2b30      	cmp	r3, #48	; 0x30
 80161e2:	d0f8      	beq.n	80161d6 <_dtoa_r+0x62e>
 80161e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80161e8:	e04a      	b.n	8016280 <_dtoa_r+0x6d8>
 80161ea:	bf00      	nop
 80161ec:	0801a520 	.word	0x0801a520
 80161f0:	0801a4f8 	.word	0x0801a4f8
 80161f4:	3ff00000 	.word	0x3ff00000
 80161f8:	40240000 	.word	0x40240000
 80161fc:	401c0000 	.word	0x401c0000
 8016200:	40140000 	.word	0x40140000
 8016204:	3fe00000 	.word	0x3fe00000
 8016208:	4baf      	ldr	r3, [pc, #700]	; (80164c8 <_dtoa_r+0x920>)
 801620a:	f7ea fa05 	bl	8000618 <__aeabi_dmul>
 801620e:	4606      	mov	r6, r0
 8016210:	460f      	mov	r7, r1
 8016212:	e7ac      	b.n	801616e <_dtoa_r+0x5c6>
 8016214:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016218:	9d00      	ldr	r5, [sp, #0]
 801621a:	4642      	mov	r2, r8
 801621c:	464b      	mov	r3, r9
 801621e:	4630      	mov	r0, r6
 8016220:	4639      	mov	r1, r7
 8016222:	f7ea fb23 	bl	800086c <__aeabi_ddiv>
 8016226:	f7ea fca7 	bl	8000b78 <__aeabi_d2iz>
 801622a:	9002      	str	r0, [sp, #8]
 801622c:	f7ea f98a 	bl	8000544 <__aeabi_i2d>
 8016230:	4642      	mov	r2, r8
 8016232:	464b      	mov	r3, r9
 8016234:	f7ea f9f0 	bl	8000618 <__aeabi_dmul>
 8016238:	4602      	mov	r2, r0
 801623a:	460b      	mov	r3, r1
 801623c:	4630      	mov	r0, r6
 801623e:	4639      	mov	r1, r7
 8016240:	f7ea f832 	bl	80002a8 <__aeabi_dsub>
 8016244:	9e02      	ldr	r6, [sp, #8]
 8016246:	9f01      	ldr	r7, [sp, #4]
 8016248:	3630      	adds	r6, #48	; 0x30
 801624a:	f805 6b01 	strb.w	r6, [r5], #1
 801624e:	9e00      	ldr	r6, [sp, #0]
 8016250:	1bae      	subs	r6, r5, r6
 8016252:	42b7      	cmp	r7, r6
 8016254:	4602      	mov	r2, r0
 8016256:	460b      	mov	r3, r1
 8016258:	d137      	bne.n	80162ca <_dtoa_r+0x722>
 801625a:	f7ea f827 	bl	80002ac <__adddf3>
 801625e:	4642      	mov	r2, r8
 8016260:	464b      	mov	r3, r9
 8016262:	4606      	mov	r6, r0
 8016264:	460f      	mov	r7, r1
 8016266:	f7ea fc67 	bl	8000b38 <__aeabi_dcmpgt>
 801626a:	b9c8      	cbnz	r0, 80162a0 <_dtoa_r+0x6f8>
 801626c:	4642      	mov	r2, r8
 801626e:	464b      	mov	r3, r9
 8016270:	4630      	mov	r0, r6
 8016272:	4639      	mov	r1, r7
 8016274:	f7ea fc38 	bl	8000ae8 <__aeabi_dcmpeq>
 8016278:	b110      	cbz	r0, 8016280 <_dtoa_r+0x6d8>
 801627a:	9b02      	ldr	r3, [sp, #8]
 801627c:	07d9      	lsls	r1, r3, #31
 801627e:	d40f      	bmi.n	80162a0 <_dtoa_r+0x6f8>
 8016280:	4620      	mov	r0, r4
 8016282:	4659      	mov	r1, fp
 8016284:	f001 f868 	bl	8017358 <_Bfree>
 8016288:	2300      	movs	r3, #0
 801628a:	702b      	strb	r3, [r5, #0]
 801628c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801628e:	f10a 0001 	add.w	r0, sl, #1
 8016292:	6018      	str	r0, [r3, #0]
 8016294:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016296:	2b00      	cmp	r3, #0
 8016298:	f43f acd8 	beq.w	8015c4c <_dtoa_r+0xa4>
 801629c:	601d      	str	r5, [r3, #0]
 801629e:	e4d5      	b.n	8015c4c <_dtoa_r+0xa4>
 80162a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80162a4:	462b      	mov	r3, r5
 80162a6:	461d      	mov	r5, r3
 80162a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80162ac:	2a39      	cmp	r2, #57	; 0x39
 80162ae:	d108      	bne.n	80162c2 <_dtoa_r+0x71a>
 80162b0:	9a00      	ldr	r2, [sp, #0]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d1f7      	bne.n	80162a6 <_dtoa_r+0x6fe>
 80162b6:	9a07      	ldr	r2, [sp, #28]
 80162b8:	9900      	ldr	r1, [sp, #0]
 80162ba:	3201      	adds	r2, #1
 80162bc:	9207      	str	r2, [sp, #28]
 80162be:	2230      	movs	r2, #48	; 0x30
 80162c0:	700a      	strb	r2, [r1, #0]
 80162c2:	781a      	ldrb	r2, [r3, #0]
 80162c4:	3201      	adds	r2, #1
 80162c6:	701a      	strb	r2, [r3, #0]
 80162c8:	e78c      	b.n	80161e4 <_dtoa_r+0x63c>
 80162ca:	4b7f      	ldr	r3, [pc, #508]	; (80164c8 <_dtoa_r+0x920>)
 80162cc:	2200      	movs	r2, #0
 80162ce:	f7ea f9a3 	bl	8000618 <__aeabi_dmul>
 80162d2:	2200      	movs	r2, #0
 80162d4:	2300      	movs	r3, #0
 80162d6:	4606      	mov	r6, r0
 80162d8:	460f      	mov	r7, r1
 80162da:	f7ea fc05 	bl	8000ae8 <__aeabi_dcmpeq>
 80162de:	2800      	cmp	r0, #0
 80162e0:	d09b      	beq.n	801621a <_dtoa_r+0x672>
 80162e2:	e7cd      	b.n	8016280 <_dtoa_r+0x6d8>
 80162e4:	9a08      	ldr	r2, [sp, #32]
 80162e6:	2a00      	cmp	r2, #0
 80162e8:	f000 80c4 	beq.w	8016474 <_dtoa_r+0x8cc>
 80162ec:	9a05      	ldr	r2, [sp, #20]
 80162ee:	2a01      	cmp	r2, #1
 80162f0:	f300 80a8 	bgt.w	8016444 <_dtoa_r+0x89c>
 80162f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80162f6:	2a00      	cmp	r2, #0
 80162f8:	f000 80a0 	beq.w	801643c <_dtoa_r+0x894>
 80162fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016300:	9e06      	ldr	r6, [sp, #24]
 8016302:	4645      	mov	r5, r8
 8016304:	9a04      	ldr	r2, [sp, #16]
 8016306:	2101      	movs	r1, #1
 8016308:	441a      	add	r2, r3
 801630a:	4620      	mov	r0, r4
 801630c:	4498      	add	r8, r3
 801630e:	9204      	str	r2, [sp, #16]
 8016310:	f001 f928 	bl	8017564 <__i2b>
 8016314:	4607      	mov	r7, r0
 8016316:	2d00      	cmp	r5, #0
 8016318:	dd0b      	ble.n	8016332 <_dtoa_r+0x78a>
 801631a:	9b04      	ldr	r3, [sp, #16]
 801631c:	2b00      	cmp	r3, #0
 801631e:	dd08      	ble.n	8016332 <_dtoa_r+0x78a>
 8016320:	42ab      	cmp	r3, r5
 8016322:	9a04      	ldr	r2, [sp, #16]
 8016324:	bfa8      	it	ge
 8016326:	462b      	movge	r3, r5
 8016328:	eba8 0803 	sub.w	r8, r8, r3
 801632c:	1aed      	subs	r5, r5, r3
 801632e:	1ad3      	subs	r3, r2, r3
 8016330:	9304      	str	r3, [sp, #16]
 8016332:	9b06      	ldr	r3, [sp, #24]
 8016334:	b1fb      	cbz	r3, 8016376 <_dtoa_r+0x7ce>
 8016336:	9b08      	ldr	r3, [sp, #32]
 8016338:	2b00      	cmp	r3, #0
 801633a:	f000 809f 	beq.w	801647c <_dtoa_r+0x8d4>
 801633e:	2e00      	cmp	r6, #0
 8016340:	dd11      	ble.n	8016366 <_dtoa_r+0x7be>
 8016342:	4639      	mov	r1, r7
 8016344:	4632      	mov	r2, r6
 8016346:	4620      	mov	r0, r4
 8016348:	f001 f9c8 	bl	80176dc <__pow5mult>
 801634c:	465a      	mov	r2, fp
 801634e:	4601      	mov	r1, r0
 8016350:	4607      	mov	r7, r0
 8016352:	4620      	mov	r0, r4
 8016354:	f001 f91c 	bl	8017590 <__multiply>
 8016358:	4659      	mov	r1, fp
 801635a:	9007      	str	r0, [sp, #28]
 801635c:	4620      	mov	r0, r4
 801635e:	f000 fffb 	bl	8017358 <_Bfree>
 8016362:	9b07      	ldr	r3, [sp, #28]
 8016364:	469b      	mov	fp, r3
 8016366:	9b06      	ldr	r3, [sp, #24]
 8016368:	1b9a      	subs	r2, r3, r6
 801636a:	d004      	beq.n	8016376 <_dtoa_r+0x7ce>
 801636c:	4659      	mov	r1, fp
 801636e:	4620      	mov	r0, r4
 8016370:	f001 f9b4 	bl	80176dc <__pow5mult>
 8016374:	4683      	mov	fp, r0
 8016376:	2101      	movs	r1, #1
 8016378:	4620      	mov	r0, r4
 801637a:	f001 f8f3 	bl	8017564 <__i2b>
 801637e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016380:	2b00      	cmp	r3, #0
 8016382:	4606      	mov	r6, r0
 8016384:	dd7c      	ble.n	8016480 <_dtoa_r+0x8d8>
 8016386:	461a      	mov	r2, r3
 8016388:	4601      	mov	r1, r0
 801638a:	4620      	mov	r0, r4
 801638c:	f001 f9a6 	bl	80176dc <__pow5mult>
 8016390:	9b05      	ldr	r3, [sp, #20]
 8016392:	2b01      	cmp	r3, #1
 8016394:	4606      	mov	r6, r0
 8016396:	dd76      	ble.n	8016486 <_dtoa_r+0x8de>
 8016398:	2300      	movs	r3, #0
 801639a:	9306      	str	r3, [sp, #24]
 801639c:	6933      	ldr	r3, [r6, #16]
 801639e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80163a2:	6918      	ldr	r0, [r3, #16]
 80163a4:	f001 f88e 	bl	80174c4 <__hi0bits>
 80163a8:	f1c0 0020 	rsb	r0, r0, #32
 80163ac:	9b04      	ldr	r3, [sp, #16]
 80163ae:	4418      	add	r0, r3
 80163b0:	f010 001f 	ands.w	r0, r0, #31
 80163b4:	f000 8086 	beq.w	80164c4 <_dtoa_r+0x91c>
 80163b8:	f1c0 0320 	rsb	r3, r0, #32
 80163bc:	2b04      	cmp	r3, #4
 80163be:	dd7f      	ble.n	80164c0 <_dtoa_r+0x918>
 80163c0:	f1c0 001c 	rsb	r0, r0, #28
 80163c4:	9b04      	ldr	r3, [sp, #16]
 80163c6:	4403      	add	r3, r0
 80163c8:	4480      	add	r8, r0
 80163ca:	4405      	add	r5, r0
 80163cc:	9304      	str	r3, [sp, #16]
 80163ce:	f1b8 0f00 	cmp.w	r8, #0
 80163d2:	dd05      	ble.n	80163e0 <_dtoa_r+0x838>
 80163d4:	4659      	mov	r1, fp
 80163d6:	4642      	mov	r2, r8
 80163d8:	4620      	mov	r0, r4
 80163da:	f001 f9d9 	bl	8017790 <__lshift>
 80163de:	4683      	mov	fp, r0
 80163e0:	9b04      	ldr	r3, [sp, #16]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	dd05      	ble.n	80163f2 <_dtoa_r+0x84a>
 80163e6:	4631      	mov	r1, r6
 80163e8:	461a      	mov	r2, r3
 80163ea:	4620      	mov	r0, r4
 80163ec:	f001 f9d0 	bl	8017790 <__lshift>
 80163f0:	4606      	mov	r6, r0
 80163f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d069      	beq.n	80164cc <_dtoa_r+0x924>
 80163f8:	4631      	mov	r1, r6
 80163fa:	4658      	mov	r0, fp
 80163fc:	f001 fa34 	bl	8017868 <__mcmp>
 8016400:	2800      	cmp	r0, #0
 8016402:	da63      	bge.n	80164cc <_dtoa_r+0x924>
 8016404:	2300      	movs	r3, #0
 8016406:	4659      	mov	r1, fp
 8016408:	220a      	movs	r2, #10
 801640a:	4620      	mov	r0, r4
 801640c:	f000 ffc6 	bl	801739c <__multadd>
 8016410:	9b08      	ldr	r3, [sp, #32]
 8016412:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016416:	4683      	mov	fp, r0
 8016418:	2b00      	cmp	r3, #0
 801641a:	f000 818f 	beq.w	801673c <_dtoa_r+0xb94>
 801641e:	4639      	mov	r1, r7
 8016420:	2300      	movs	r3, #0
 8016422:	220a      	movs	r2, #10
 8016424:	4620      	mov	r0, r4
 8016426:	f000 ffb9 	bl	801739c <__multadd>
 801642a:	f1b9 0f00 	cmp.w	r9, #0
 801642e:	4607      	mov	r7, r0
 8016430:	f300 808e 	bgt.w	8016550 <_dtoa_r+0x9a8>
 8016434:	9b05      	ldr	r3, [sp, #20]
 8016436:	2b02      	cmp	r3, #2
 8016438:	dc50      	bgt.n	80164dc <_dtoa_r+0x934>
 801643a:	e089      	b.n	8016550 <_dtoa_r+0x9a8>
 801643c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801643e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016442:	e75d      	b.n	8016300 <_dtoa_r+0x758>
 8016444:	9b01      	ldr	r3, [sp, #4]
 8016446:	1e5e      	subs	r6, r3, #1
 8016448:	9b06      	ldr	r3, [sp, #24]
 801644a:	42b3      	cmp	r3, r6
 801644c:	bfbf      	itttt	lt
 801644e:	9b06      	ldrlt	r3, [sp, #24]
 8016450:	9606      	strlt	r6, [sp, #24]
 8016452:	1af2      	sublt	r2, r6, r3
 8016454:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8016456:	bfb6      	itet	lt
 8016458:	189b      	addlt	r3, r3, r2
 801645a:	1b9e      	subge	r6, r3, r6
 801645c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801645e:	9b01      	ldr	r3, [sp, #4]
 8016460:	bfb8      	it	lt
 8016462:	2600      	movlt	r6, #0
 8016464:	2b00      	cmp	r3, #0
 8016466:	bfb5      	itete	lt
 8016468:	eba8 0503 	sublt.w	r5, r8, r3
 801646c:	9b01      	ldrge	r3, [sp, #4]
 801646e:	2300      	movlt	r3, #0
 8016470:	4645      	movge	r5, r8
 8016472:	e747      	b.n	8016304 <_dtoa_r+0x75c>
 8016474:	9e06      	ldr	r6, [sp, #24]
 8016476:	9f08      	ldr	r7, [sp, #32]
 8016478:	4645      	mov	r5, r8
 801647a:	e74c      	b.n	8016316 <_dtoa_r+0x76e>
 801647c:	9a06      	ldr	r2, [sp, #24]
 801647e:	e775      	b.n	801636c <_dtoa_r+0x7c4>
 8016480:	9b05      	ldr	r3, [sp, #20]
 8016482:	2b01      	cmp	r3, #1
 8016484:	dc18      	bgt.n	80164b8 <_dtoa_r+0x910>
 8016486:	9b02      	ldr	r3, [sp, #8]
 8016488:	b9b3      	cbnz	r3, 80164b8 <_dtoa_r+0x910>
 801648a:	9b03      	ldr	r3, [sp, #12]
 801648c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016490:	b9a3      	cbnz	r3, 80164bc <_dtoa_r+0x914>
 8016492:	9b03      	ldr	r3, [sp, #12]
 8016494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016498:	0d1b      	lsrs	r3, r3, #20
 801649a:	051b      	lsls	r3, r3, #20
 801649c:	b12b      	cbz	r3, 80164aa <_dtoa_r+0x902>
 801649e:	9b04      	ldr	r3, [sp, #16]
 80164a0:	3301      	adds	r3, #1
 80164a2:	9304      	str	r3, [sp, #16]
 80164a4:	f108 0801 	add.w	r8, r8, #1
 80164a8:	2301      	movs	r3, #1
 80164aa:	9306      	str	r3, [sp, #24]
 80164ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	f47f af74 	bne.w	801639c <_dtoa_r+0x7f4>
 80164b4:	2001      	movs	r0, #1
 80164b6:	e779      	b.n	80163ac <_dtoa_r+0x804>
 80164b8:	2300      	movs	r3, #0
 80164ba:	e7f6      	b.n	80164aa <_dtoa_r+0x902>
 80164bc:	9b02      	ldr	r3, [sp, #8]
 80164be:	e7f4      	b.n	80164aa <_dtoa_r+0x902>
 80164c0:	d085      	beq.n	80163ce <_dtoa_r+0x826>
 80164c2:	4618      	mov	r0, r3
 80164c4:	301c      	adds	r0, #28
 80164c6:	e77d      	b.n	80163c4 <_dtoa_r+0x81c>
 80164c8:	40240000 	.word	0x40240000
 80164cc:	9b01      	ldr	r3, [sp, #4]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	dc38      	bgt.n	8016544 <_dtoa_r+0x99c>
 80164d2:	9b05      	ldr	r3, [sp, #20]
 80164d4:	2b02      	cmp	r3, #2
 80164d6:	dd35      	ble.n	8016544 <_dtoa_r+0x99c>
 80164d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80164dc:	f1b9 0f00 	cmp.w	r9, #0
 80164e0:	d10d      	bne.n	80164fe <_dtoa_r+0x956>
 80164e2:	4631      	mov	r1, r6
 80164e4:	464b      	mov	r3, r9
 80164e6:	2205      	movs	r2, #5
 80164e8:	4620      	mov	r0, r4
 80164ea:	f000 ff57 	bl	801739c <__multadd>
 80164ee:	4601      	mov	r1, r0
 80164f0:	4606      	mov	r6, r0
 80164f2:	4658      	mov	r0, fp
 80164f4:	f001 f9b8 	bl	8017868 <__mcmp>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	f73f adbd 	bgt.w	8016078 <_dtoa_r+0x4d0>
 80164fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016500:	9d00      	ldr	r5, [sp, #0]
 8016502:	ea6f 0a03 	mvn.w	sl, r3
 8016506:	f04f 0800 	mov.w	r8, #0
 801650a:	4631      	mov	r1, r6
 801650c:	4620      	mov	r0, r4
 801650e:	f000 ff23 	bl	8017358 <_Bfree>
 8016512:	2f00      	cmp	r7, #0
 8016514:	f43f aeb4 	beq.w	8016280 <_dtoa_r+0x6d8>
 8016518:	f1b8 0f00 	cmp.w	r8, #0
 801651c:	d005      	beq.n	801652a <_dtoa_r+0x982>
 801651e:	45b8      	cmp	r8, r7
 8016520:	d003      	beq.n	801652a <_dtoa_r+0x982>
 8016522:	4641      	mov	r1, r8
 8016524:	4620      	mov	r0, r4
 8016526:	f000 ff17 	bl	8017358 <_Bfree>
 801652a:	4639      	mov	r1, r7
 801652c:	4620      	mov	r0, r4
 801652e:	f000 ff13 	bl	8017358 <_Bfree>
 8016532:	e6a5      	b.n	8016280 <_dtoa_r+0x6d8>
 8016534:	2600      	movs	r6, #0
 8016536:	4637      	mov	r7, r6
 8016538:	e7e1      	b.n	80164fe <_dtoa_r+0x956>
 801653a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801653c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016540:	4637      	mov	r7, r6
 8016542:	e599      	b.n	8016078 <_dtoa_r+0x4d0>
 8016544:	9b08      	ldr	r3, [sp, #32]
 8016546:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	f000 80fd 	beq.w	801674a <_dtoa_r+0xba2>
 8016550:	2d00      	cmp	r5, #0
 8016552:	dd05      	ble.n	8016560 <_dtoa_r+0x9b8>
 8016554:	4639      	mov	r1, r7
 8016556:	462a      	mov	r2, r5
 8016558:	4620      	mov	r0, r4
 801655a:	f001 f919 	bl	8017790 <__lshift>
 801655e:	4607      	mov	r7, r0
 8016560:	9b06      	ldr	r3, [sp, #24]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d05c      	beq.n	8016620 <_dtoa_r+0xa78>
 8016566:	6879      	ldr	r1, [r7, #4]
 8016568:	4620      	mov	r0, r4
 801656a:	f000 feb5 	bl	80172d8 <_Balloc>
 801656e:	4605      	mov	r5, r0
 8016570:	b928      	cbnz	r0, 801657e <_dtoa_r+0x9d6>
 8016572:	4b80      	ldr	r3, [pc, #512]	; (8016774 <_dtoa_r+0xbcc>)
 8016574:	4602      	mov	r2, r0
 8016576:	f240 21ea 	movw	r1, #746	; 0x2ea
 801657a:	f7ff bb2e 	b.w	8015bda <_dtoa_r+0x32>
 801657e:	693a      	ldr	r2, [r7, #16]
 8016580:	3202      	adds	r2, #2
 8016582:	0092      	lsls	r2, r2, #2
 8016584:	f107 010c 	add.w	r1, r7, #12
 8016588:	300c      	adds	r0, #12
 801658a:	f7fd faff 	bl	8013b8c <memcpy>
 801658e:	2201      	movs	r2, #1
 8016590:	4629      	mov	r1, r5
 8016592:	4620      	mov	r0, r4
 8016594:	f001 f8fc 	bl	8017790 <__lshift>
 8016598:	9b00      	ldr	r3, [sp, #0]
 801659a:	3301      	adds	r3, #1
 801659c:	9301      	str	r3, [sp, #4]
 801659e:	9b00      	ldr	r3, [sp, #0]
 80165a0:	444b      	add	r3, r9
 80165a2:	9307      	str	r3, [sp, #28]
 80165a4:	9b02      	ldr	r3, [sp, #8]
 80165a6:	f003 0301 	and.w	r3, r3, #1
 80165aa:	46b8      	mov	r8, r7
 80165ac:	9306      	str	r3, [sp, #24]
 80165ae:	4607      	mov	r7, r0
 80165b0:	9b01      	ldr	r3, [sp, #4]
 80165b2:	4631      	mov	r1, r6
 80165b4:	3b01      	subs	r3, #1
 80165b6:	4658      	mov	r0, fp
 80165b8:	9302      	str	r3, [sp, #8]
 80165ba:	f7ff fa67 	bl	8015a8c <quorem>
 80165be:	4603      	mov	r3, r0
 80165c0:	3330      	adds	r3, #48	; 0x30
 80165c2:	9004      	str	r0, [sp, #16]
 80165c4:	4641      	mov	r1, r8
 80165c6:	4658      	mov	r0, fp
 80165c8:	9308      	str	r3, [sp, #32]
 80165ca:	f001 f94d 	bl	8017868 <__mcmp>
 80165ce:	463a      	mov	r2, r7
 80165d0:	4681      	mov	r9, r0
 80165d2:	4631      	mov	r1, r6
 80165d4:	4620      	mov	r0, r4
 80165d6:	f001 f963 	bl	80178a0 <__mdiff>
 80165da:	68c2      	ldr	r2, [r0, #12]
 80165dc:	9b08      	ldr	r3, [sp, #32]
 80165de:	4605      	mov	r5, r0
 80165e0:	bb02      	cbnz	r2, 8016624 <_dtoa_r+0xa7c>
 80165e2:	4601      	mov	r1, r0
 80165e4:	4658      	mov	r0, fp
 80165e6:	f001 f93f 	bl	8017868 <__mcmp>
 80165ea:	9b08      	ldr	r3, [sp, #32]
 80165ec:	4602      	mov	r2, r0
 80165ee:	4629      	mov	r1, r5
 80165f0:	4620      	mov	r0, r4
 80165f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80165f6:	f000 feaf 	bl	8017358 <_Bfree>
 80165fa:	9b05      	ldr	r3, [sp, #20]
 80165fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165fe:	9d01      	ldr	r5, [sp, #4]
 8016600:	ea43 0102 	orr.w	r1, r3, r2
 8016604:	9b06      	ldr	r3, [sp, #24]
 8016606:	430b      	orrs	r3, r1
 8016608:	9b08      	ldr	r3, [sp, #32]
 801660a:	d10d      	bne.n	8016628 <_dtoa_r+0xa80>
 801660c:	2b39      	cmp	r3, #57	; 0x39
 801660e:	d029      	beq.n	8016664 <_dtoa_r+0xabc>
 8016610:	f1b9 0f00 	cmp.w	r9, #0
 8016614:	dd01      	ble.n	801661a <_dtoa_r+0xa72>
 8016616:	9b04      	ldr	r3, [sp, #16]
 8016618:	3331      	adds	r3, #49	; 0x31
 801661a:	9a02      	ldr	r2, [sp, #8]
 801661c:	7013      	strb	r3, [r2, #0]
 801661e:	e774      	b.n	801650a <_dtoa_r+0x962>
 8016620:	4638      	mov	r0, r7
 8016622:	e7b9      	b.n	8016598 <_dtoa_r+0x9f0>
 8016624:	2201      	movs	r2, #1
 8016626:	e7e2      	b.n	80165ee <_dtoa_r+0xa46>
 8016628:	f1b9 0f00 	cmp.w	r9, #0
 801662c:	db06      	blt.n	801663c <_dtoa_r+0xa94>
 801662e:	9905      	ldr	r1, [sp, #20]
 8016630:	ea41 0909 	orr.w	r9, r1, r9
 8016634:	9906      	ldr	r1, [sp, #24]
 8016636:	ea59 0101 	orrs.w	r1, r9, r1
 801663a:	d120      	bne.n	801667e <_dtoa_r+0xad6>
 801663c:	2a00      	cmp	r2, #0
 801663e:	ddec      	ble.n	801661a <_dtoa_r+0xa72>
 8016640:	4659      	mov	r1, fp
 8016642:	2201      	movs	r2, #1
 8016644:	4620      	mov	r0, r4
 8016646:	9301      	str	r3, [sp, #4]
 8016648:	f001 f8a2 	bl	8017790 <__lshift>
 801664c:	4631      	mov	r1, r6
 801664e:	4683      	mov	fp, r0
 8016650:	f001 f90a 	bl	8017868 <__mcmp>
 8016654:	2800      	cmp	r0, #0
 8016656:	9b01      	ldr	r3, [sp, #4]
 8016658:	dc02      	bgt.n	8016660 <_dtoa_r+0xab8>
 801665a:	d1de      	bne.n	801661a <_dtoa_r+0xa72>
 801665c:	07da      	lsls	r2, r3, #31
 801665e:	d5dc      	bpl.n	801661a <_dtoa_r+0xa72>
 8016660:	2b39      	cmp	r3, #57	; 0x39
 8016662:	d1d8      	bne.n	8016616 <_dtoa_r+0xa6e>
 8016664:	9a02      	ldr	r2, [sp, #8]
 8016666:	2339      	movs	r3, #57	; 0x39
 8016668:	7013      	strb	r3, [r2, #0]
 801666a:	462b      	mov	r3, r5
 801666c:	461d      	mov	r5, r3
 801666e:	3b01      	subs	r3, #1
 8016670:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016674:	2a39      	cmp	r2, #57	; 0x39
 8016676:	d050      	beq.n	801671a <_dtoa_r+0xb72>
 8016678:	3201      	adds	r2, #1
 801667a:	701a      	strb	r2, [r3, #0]
 801667c:	e745      	b.n	801650a <_dtoa_r+0x962>
 801667e:	2a00      	cmp	r2, #0
 8016680:	dd03      	ble.n	801668a <_dtoa_r+0xae2>
 8016682:	2b39      	cmp	r3, #57	; 0x39
 8016684:	d0ee      	beq.n	8016664 <_dtoa_r+0xabc>
 8016686:	3301      	adds	r3, #1
 8016688:	e7c7      	b.n	801661a <_dtoa_r+0xa72>
 801668a:	9a01      	ldr	r2, [sp, #4]
 801668c:	9907      	ldr	r1, [sp, #28]
 801668e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016692:	428a      	cmp	r2, r1
 8016694:	d02a      	beq.n	80166ec <_dtoa_r+0xb44>
 8016696:	4659      	mov	r1, fp
 8016698:	2300      	movs	r3, #0
 801669a:	220a      	movs	r2, #10
 801669c:	4620      	mov	r0, r4
 801669e:	f000 fe7d 	bl	801739c <__multadd>
 80166a2:	45b8      	cmp	r8, r7
 80166a4:	4683      	mov	fp, r0
 80166a6:	f04f 0300 	mov.w	r3, #0
 80166aa:	f04f 020a 	mov.w	r2, #10
 80166ae:	4641      	mov	r1, r8
 80166b0:	4620      	mov	r0, r4
 80166b2:	d107      	bne.n	80166c4 <_dtoa_r+0xb1c>
 80166b4:	f000 fe72 	bl	801739c <__multadd>
 80166b8:	4680      	mov	r8, r0
 80166ba:	4607      	mov	r7, r0
 80166bc:	9b01      	ldr	r3, [sp, #4]
 80166be:	3301      	adds	r3, #1
 80166c0:	9301      	str	r3, [sp, #4]
 80166c2:	e775      	b.n	80165b0 <_dtoa_r+0xa08>
 80166c4:	f000 fe6a 	bl	801739c <__multadd>
 80166c8:	4639      	mov	r1, r7
 80166ca:	4680      	mov	r8, r0
 80166cc:	2300      	movs	r3, #0
 80166ce:	220a      	movs	r2, #10
 80166d0:	4620      	mov	r0, r4
 80166d2:	f000 fe63 	bl	801739c <__multadd>
 80166d6:	4607      	mov	r7, r0
 80166d8:	e7f0      	b.n	80166bc <_dtoa_r+0xb14>
 80166da:	f1b9 0f00 	cmp.w	r9, #0
 80166de:	9a00      	ldr	r2, [sp, #0]
 80166e0:	bfcc      	ite	gt
 80166e2:	464d      	movgt	r5, r9
 80166e4:	2501      	movle	r5, #1
 80166e6:	4415      	add	r5, r2
 80166e8:	f04f 0800 	mov.w	r8, #0
 80166ec:	4659      	mov	r1, fp
 80166ee:	2201      	movs	r2, #1
 80166f0:	4620      	mov	r0, r4
 80166f2:	9301      	str	r3, [sp, #4]
 80166f4:	f001 f84c 	bl	8017790 <__lshift>
 80166f8:	4631      	mov	r1, r6
 80166fa:	4683      	mov	fp, r0
 80166fc:	f001 f8b4 	bl	8017868 <__mcmp>
 8016700:	2800      	cmp	r0, #0
 8016702:	dcb2      	bgt.n	801666a <_dtoa_r+0xac2>
 8016704:	d102      	bne.n	801670c <_dtoa_r+0xb64>
 8016706:	9b01      	ldr	r3, [sp, #4]
 8016708:	07db      	lsls	r3, r3, #31
 801670a:	d4ae      	bmi.n	801666a <_dtoa_r+0xac2>
 801670c:	462b      	mov	r3, r5
 801670e:	461d      	mov	r5, r3
 8016710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016714:	2a30      	cmp	r2, #48	; 0x30
 8016716:	d0fa      	beq.n	801670e <_dtoa_r+0xb66>
 8016718:	e6f7      	b.n	801650a <_dtoa_r+0x962>
 801671a:	9a00      	ldr	r2, [sp, #0]
 801671c:	429a      	cmp	r2, r3
 801671e:	d1a5      	bne.n	801666c <_dtoa_r+0xac4>
 8016720:	f10a 0a01 	add.w	sl, sl, #1
 8016724:	2331      	movs	r3, #49	; 0x31
 8016726:	e779      	b.n	801661c <_dtoa_r+0xa74>
 8016728:	4b13      	ldr	r3, [pc, #76]	; (8016778 <_dtoa_r+0xbd0>)
 801672a:	f7ff baaf 	b.w	8015c8c <_dtoa_r+0xe4>
 801672e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016730:	2b00      	cmp	r3, #0
 8016732:	f47f aa86 	bne.w	8015c42 <_dtoa_r+0x9a>
 8016736:	4b11      	ldr	r3, [pc, #68]	; (801677c <_dtoa_r+0xbd4>)
 8016738:	f7ff baa8 	b.w	8015c8c <_dtoa_r+0xe4>
 801673c:	f1b9 0f00 	cmp.w	r9, #0
 8016740:	dc03      	bgt.n	801674a <_dtoa_r+0xba2>
 8016742:	9b05      	ldr	r3, [sp, #20]
 8016744:	2b02      	cmp	r3, #2
 8016746:	f73f aec9 	bgt.w	80164dc <_dtoa_r+0x934>
 801674a:	9d00      	ldr	r5, [sp, #0]
 801674c:	4631      	mov	r1, r6
 801674e:	4658      	mov	r0, fp
 8016750:	f7ff f99c 	bl	8015a8c <quorem>
 8016754:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016758:	f805 3b01 	strb.w	r3, [r5], #1
 801675c:	9a00      	ldr	r2, [sp, #0]
 801675e:	1aaa      	subs	r2, r5, r2
 8016760:	4591      	cmp	r9, r2
 8016762:	ddba      	ble.n	80166da <_dtoa_r+0xb32>
 8016764:	4659      	mov	r1, fp
 8016766:	2300      	movs	r3, #0
 8016768:	220a      	movs	r2, #10
 801676a:	4620      	mov	r0, r4
 801676c:	f000 fe16 	bl	801739c <__multadd>
 8016770:	4683      	mov	fp, r0
 8016772:	e7eb      	b.n	801674c <_dtoa_r+0xba4>
 8016774:	0801a3a4 	.word	0x0801a3a4
 8016778:	0801a1a4 	.word	0x0801a1a4
 801677c:	0801a321 	.word	0x0801a321

08016780 <__sflush_r>:
 8016780:	898a      	ldrh	r2, [r1, #12]
 8016782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016786:	4605      	mov	r5, r0
 8016788:	0710      	lsls	r0, r2, #28
 801678a:	460c      	mov	r4, r1
 801678c:	d458      	bmi.n	8016840 <__sflush_r+0xc0>
 801678e:	684b      	ldr	r3, [r1, #4]
 8016790:	2b00      	cmp	r3, #0
 8016792:	dc05      	bgt.n	80167a0 <__sflush_r+0x20>
 8016794:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016796:	2b00      	cmp	r3, #0
 8016798:	dc02      	bgt.n	80167a0 <__sflush_r+0x20>
 801679a:	2000      	movs	r0, #0
 801679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167a2:	2e00      	cmp	r6, #0
 80167a4:	d0f9      	beq.n	801679a <__sflush_r+0x1a>
 80167a6:	2300      	movs	r3, #0
 80167a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80167ac:	682f      	ldr	r7, [r5, #0]
 80167ae:	602b      	str	r3, [r5, #0]
 80167b0:	d032      	beq.n	8016818 <__sflush_r+0x98>
 80167b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80167b4:	89a3      	ldrh	r3, [r4, #12]
 80167b6:	075a      	lsls	r2, r3, #29
 80167b8:	d505      	bpl.n	80167c6 <__sflush_r+0x46>
 80167ba:	6863      	ldr	r3, [r4, #4]
 80167bc:	1ac0      	subs	r0, r0, r3
 80167be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80167c0:	b10b      	cbz	r3, 80167c6 <__sflush_r+0x46>
 80167c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80167c4:	1ac0      	subs	r0, r0, r3
 80167c6:	2300      	movs	r3, #0
 80167c8:	4602      	mov	r2, r0
 80167ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167cc:	6a21      	ldr	r1, [r4, #32]
 80167ce:	4628      	mov	r0, r5
 80167d0:	47b0      	blx	r6
 80167d2:	1c43      	adds	r3, r0, #1
 80167d4:	89a3      	ldrh	r3, [r4, #12]
 80167d6:	d106      	bne.n	80167e6 <__sflush_r+0x66>
 80167d8:	6829      	ldr	r1, [r5, #0]
 80167da:	291d      	cmp	r1, #29
 80167dc:	d82c      	bhi.n	8016838 <__sflush_r+0xb8>
 80167de:	4a2a      	ldr	r2, [pc, #168]	; (8016888 <__sflush_r+0x108>)
 80167e0:	40ca      	lsrs	r2, r1
 80167e2:	07d6      	lsls	r6, r2, #31
 80167e4:	d528      	bpl.n	8016838 <__sflush_r+0xb8>
 80167e6:	2200      	movs	r2, #0
 80167e8:	6062      	str	r2, [r4, #4]
 80167ea:	04d9      	lsls	r1, r3, #19
 80167ec:	6922      	ldr	r2, [r4, #16]
 80167ee:	6022      	str	r2, [r4, #0]
 80167f0:	d504      	bpl.n	80167fc <__sflush_r+0x7c>
 80167f2:	1c42      	adds	r2, r0, #1
 80167f4:	d101      	bne.n	80167fa <__sflush_r+0x7a>
 80167f6:	682b      	ldr	r3, [r5, #0]
 80167f8:	b903      	cbnz	r3, 80167fc <__sflush_r+0x7c>
 80167fa:	6560      	str	r0, [r4, #84]	; 0x54
 80167fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167fe:	602f      	str	r7, [r5, #0]
 8016800:	2900      	cmp	r1, #0
 8016802:	d0ca      	beq.n	801679a <__sflush_r+0x1a>
 8016804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016808:	4299      	cmp	r1, r3
 801680a:	d002      	beq.n	8016812 <__sflush_r+0x92>
 801680c:	4628      	mov	r0, r5
 801680e:	f001 fa2d 	bl	8017c6c <_free_r>
 8016812:	2000      	movs	r0, #0
 8016814:	6360      	str	r0, [r4, #52]	; 0x34
 8016816:	e7c1      	b.n	801679c <__sflush_r+0x1c>
 8016818:	6a21      	ldr	r1, [r4, #32]
 801681a:	2301      	movs	r3, #1
 801681c:	4628      	mov	r0, r5
 801681e:	47b0      	blx	r6
 8016820:	1c41      	adds	r1, r0, #1
 8016822:	d1c7      	bne.n	80167b4 <__sflush_r+0x34>
 8016824:	682b      	ldr	r3, [r5, #0]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d0c4      	beq.n	80167b4 <__sflush_r+0x34>
 801682a:	2b1d      	cmp	r3, #29
 801682c:	d001      	beq.n	8016832 <__sflush_r+0xb2>
 801682e:	2b16      	cmp	r3, #22
 8016830:	d101      	bne.n	8016836 <__sflush_r+0xb6>
 8016832:	602f      	str	r7, [r5, #0]
 8016834:	e7b1      	b.n	801679a <__sflush_r+0x1a>
 8016836:	89a3      	ldrh	r3, [r4, #12]
 8016838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801683c:	81a3      	strh	r3, [r4, #12]
 801683e:	e7ad      	b.n	801679c <__sflush_r+0x1c>
 8016840:	690f      	ldr	r7, [r1, #16]
 8016842:	2f00      	cmp	r7, #0
 8016844:	d0a9      	beq.n	801679a <__sflush_r+0x1a>
 8016846:	0793      	lsls	r3, r2, #30
 8016848:	680e      	ldr	r6, [r1, #0]
 801684a:	bf08      	it	eq
 801684c:	694b      	ldreq	r3, [r1, #20]
 801684e:	600f      	str	r7, [r1, #0]
 8016850:	bf18      	it	ne
 8016852:	2300      	movne	r3, #0
 8016854:	eba6 0807 	sub.w	r8, r6, r7
 8016858:	608b      	str	r3, [r1, #8]
 801685a:	f1b8 0f00 	cmp.w	r8, #0
 801685e:	dd9c      	ble.n	801679a <__sflush_r+0x1a>
 8016860:	6a21      	ldr	r1, [r4, #32]
 8016862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016864:	4643      	mov	r3, r8
 8016866:	463a      	mov	r2, r7
 8016868:	4628      	mov	r0, r5
 801686a:	47b0      	blx	r6
 801686c:	2800      	cmp	r0, #0
 801686e:	dc06      	bgt.n	801687e <__sflush_r+0xfe>
 8016870:	89a3      	ldrh	r3, [r4, #12]
 8016872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016876:	81a3      	strh	r3, [r4, #12]
 8016878:	f04f 30ff 	mov.w	r0, #4294967295
 801687c:	e78e      	b.n	801679c <__sflush_r+0x1c>
 801687e:	4407      	add	r7, r0
 8016880:	eba8 0800 	sub.w	r8, r8, r0
 8016884:	e7e9      	b.n	801685a <__sflush_r+0xda>
 8016886:	bf00      	nop
 8016888:	20400001 	.word	0x20400001

0801688c <_fflush_r>:
 801688c:	b538      	push	{r3, r4, r5, lr}
 801688e:	690b      	ldr	r3, [r1, #16]
 8016890:	4605      	mov	r5, r0
 8016892:	460c      	mov	r4, r1
 8016894:	b913      	cbnz	r3, 801689c <_fflush_r+0x10>
 8016896:	2500      	movs	r5, #0
 8016898:	4628      	mov	r0, r5
 801689a:	bd38      	pop	{r3, r4, r5, pc}
 801689c:	b118      	cbz	r0, 80168a6 <_fflush_r+0x1a>
 801689e:	6983      	ldr	r3, [r0, #24]
 80168a0:	b90b      	cbnz	r3, 80168a6 <_fflush_r+0x1a>
 80168a2:	f000 f887 	bl	80169b4 <__sinit>
 80168a6:	4b14      	ldr	r3, [pc, #80]	; (80168f8 <_fflush_r+0x6c>)
 80168a8:	429c      	cmp	r4, r3
 80168aa:	d11b      	bne.n	80168e4 <_fflush_r+0x58>
 80168ac:	686c      	ldr	r4, [r5, #4]
 80168ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d0ef      	beq.n	8016896 <_fflush_r+0xa>
 80168b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80168b8:	07d0      	lsls	r0, r2, #31
 80168ba:	d404      	bmi.n	80168c6 <_fflush_r+0x3a>
 80168bc:	0599      	lsls	r1, r3, #22
 80168be:	d402      	bmi.n	80168c6 <_fflush_r+0x3a>
 80168c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168c2:	f000 fc88 	bl	80171d6 <__retarget_lock_acquire_recursive>
 80168c6:	4628      	mov	r0, r5
 80168c8:	4621      	mov	r1, r4
 80168ca:	f7ff ff59 	bl	8016780 <__sflush_r>
 80168ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168d0:	07da      	lsls	r2, r3, #31
 80168d2:	4605      	mov	r5, r0
 80168d4:	d4e0      	bmi.n	8016898 <_fflush_r+0xc>
 80168d6:	89a3      	ldrh	r3, [r4, #12]
 80168d8:	059b      	lsls	r3, r3, #22
 80168da:	d4dd      	bmi.n	8016898 <_fflush_r+0xc>
 80168dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168de:	f000 fc7b 	bl	80171d8 <__retarget_lock_release_recursive>
 80168e2:	e7d9      	b.n	8016898 <_fflush_r+0xc>
 80168e4:	4b05      	ldr	r3, [pc, #20]	; (80168fc <_fflush_r+0x70>)
 80168e6:	429c      	cmp	r4, r3
 80168e8:	d101      	bne.n	80168ee <_fflush_r+0x62>
 80168ea:	68ac      	ldr	r4, [r5, #8]
 80168ec:	e7df      	b.n	80168ae <_fflush_r+0x22>
 80168ee:	4b04      	ldr	r3, [pc, #16]	; (8016900 <_fflush_r+0x74>)
 80168f0:	429c      	cmp	r4, r3
 80168f2:	bf08      	it	eq
 80168f4:	68ec      	ldreq	r4, [r5, #12]
 80168f6:	e7da      	b.n	80168ae <_fflush_r+0x22>
 80168f8:	0801a3d8 	.word	0x0801a3d8
 80168fc:	0801a3f8 	.word	0x0801a3f8
 8016900:	0801a3b8 	.word	0x0801a3b8

08016904 <std>:
 8016904:	2300      	movs	r3, #0
 8016906:	b510      	push	{r4, lr}
 8016908:	4604      	mov	r4, r0
 801690a:	e9c0 3300 	strd	r3, r3, [r0]
 801690e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016912:	6083      	str	r3, [r0, #8]
 8016914:	8181      	strh	r1, [r0, #12]
 8016916:	6643      	str	r3, [r0, #100]	; 0x64
 8016918:	81c2      	strh	r2, [r0, #14]
 801691a:	6183      	str	r3, [r0, #24]
 801691c:	4619      	mov	r1, r3
 801691e:	2208      	movs	r2, #8
 8016920:	305c      	adds	r0, #92	; 0x5c
 8016922:	f7fd f941 	bl	8013ba8 <memset>
 8016926:	4b05      	ldr	r3, [pc, #20]	; (801693c <std+0x38>)
 8016928:	6263      	str	r3, [r4, #36]	; 0x24
 801692a:	4b05      	ldr	r3, [pc, #20]	; (8016940 <std+0x3c>)
 801692c:	62a3      	str	r3, [r4, #40]	; 0x28
 801692e:	4b05      	ldr	r3, [pc, #20]	; (8016944 <std+0x40>)
 8016930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016932:	4b05      	ldr	r3, [pc, #20]	; (8016948 <std+0x44>)
 8016934:	6224      	str	r4, [r4, #32]
 8016936:	6323      	str	r3, [r4, #48]	; 0x30
 8016938:	bd10      	pop	{r4, pc}
 801693a:	bf00      	nop
 801693c:	08018361 	.word	0x08018361
 8016940:	08018383 	.word	0x08018383
 8016944:	080183bb 	.word	0x080183bb
 8016948:	080183df 	.word	0x080183df

0801694c <_cleanup_r>:
 801694c:	4901      	ldr	r1, [pc, #4]	; (8016954 <_cleanup_r+0x8>)
 801694e:	f000 b8af 	b.w	8016ab0 <_fwalk_reent>
 8016952:	bf00      	nop
 8016954:	0801688d 	.word	0x0801688d

08016958 <__sfmoreglue>:
 8016958:	b570      	push	{r4, r5, r6, lr}
 801695a:	1e4a      	subs	r2, r1, #1
 801695c:	2568      	movs	r5, #104	; 0x68
 801695e:	4355      	muls	r5, r2
 8016960:	460e      	mov	r6, r1
 8016962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016966:	f001 f9d1 	bl	8017d0c <_malloc_r>
 801696a:	4604      	mov	r4, r0
 801696c:	b140      	cbz	r0, 8016980 <__sfmoreglue+0x28>
 801696e:	2100      	movs	r1, #0
 8016970:	e9c0 1600 	strd	r1, r6, [r0]
 8016974:	300c      	adds	r0, #12
 8016976:	60a0      	str	r0, [r4, #8]
 8016978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801697c:	f7fd f914 	bl	8013ba8 <memset>
 8016980:	4620      	mov	r0, r4
 8016982:	bd70      	pop	{r4, r5, r6, pc}

08016984 <__sfp_lock_acquire>:
 8016984:	4801      	ldr	r0, [pc, #4]	; (801698c <__sfp_lock_acquire+0x8>)
 8016986:	f000 bc26 	b.w	80171d6 <__retarget_lock_acquire_recursive>
 801698a:	bf00      	nop
 801698c:	20003534 	.word	0x20003534

08016990 <__sfp_lock_release>:
 8016990:	4801      	ldr	r0, [pc, #4]	; (8016998 <__sfp_lock_release+0x8>)
 8016992:	f000 bc21 	b.w	80171d8 <__retarget_lock_release_recursive>
 8016996:	bf00      	nop
 8016998:	20003534 	.word	0x20003534

0801699c <__sinit_lock_acquire>:
 801699c:	4801      	ldr	r0, [pc, #4]	; (80169a4 <__sinit_lock_acquire+0x8>)
 801699e:	f000 bc1a 	b.w	80171d6 <__retarget_lock_acquire_recursive>
 80169a2:	bf00      	nop
 80169a4:	2000352f 	.word	0x2000352f

080169a8 <__sinit_lock_release>:
 80169a8:	4801      	ldr	r0, [pc, #4]	; (80169b0 <__sinit_lock_release+0x8>)
 80169aa:	f000 bc15 	b.w	80171d8 <__retarget_lock_release_recursive>
 80169ae:	bf00      	nop
 80169b0:	2000352f 	.word	0x2000352f

080169b4 <__sinit>:
 80169b4:	b510      	push	{r4, lr}
 80169b6:	4604      	mov	r4, r0
 80169b8:	f7ff fff0 	bl	801699c <__sinit_lock_acquire>
 80169bc:	69a3      	ldr	r3, [r4, #24]
 80169be:	b11b      	cbz	r3, 80169c8 <__sinit+0x14>
 80169c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169c4:	f7ff bff0 	b.w	80169a8 <__sinit_lock_release>
 80169c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80169cc:	6523      	str	r3, [r4, #80]	; 0x50
 80169ce:	4b13      	ldr	r3, [pc, #76]	; (8016a1c <__sinit+0x68>)
 80169d0:	4a13      	ldr	r2, [pc, #76]	; (8016a20 <__sinit+0x6c>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80169d6:	42a3      	cmp	r3, r4
 80169d8:	bf04      	itt	eq
 80169da:	2301      	moveq	r3, #1
 80169dc:	61a3      	streq	r3, [r4, #24]
 80169de:	4620      	mov	r0, r4
 80169e0:	f000 f820 	bl	8016a24 <__sfp>
 80169e4:	6060      	str	r0, [r4, #4]
 80169e6:	4620      	mov	r0, r4
 80169e8:	f000 f81c 	bl	8016a24 <__sfp>
 80169ec:	60a0      	str	r0, [r4, #8]
 80169ee:	4620      	mov	r0, r4
 80169f0:	f000 f818 	bl	8016a24 <__sfp>
 80169f4:	2200      	movs	r2, #0
 80169f6:	60e0      	str	r0, [r4, #12]
 80169f8:	2104      	movs	r1, #4
 80169fa:	6860      	ldr	r0, [r4, #4]
 80169fc:	f7ff ff82 	bl	8016904 <std>
 8016a00:	68a0      	ldr	r0, [r4, #8]
 8016a02:	2201      	movs	r2, #1
 8016a04:	2109      	movs	r1, #9
 8016a06:	f7ff ff7d 	bl	8016904 <std>
 8016a0a:	68e0      	ldr	r0, [r4, #12]
 8016a0c:	2202      	movs	r2, #2
 8016a0e:	2112      	movs	r1, #18
 8016a10:	f7ff ff78 	bl	8016904 <std>
 8016a14:	2301      	movs	r3, #1
 8016a16:	61a3      	str	r3, [r4, #24]
 8016a18:	e7d2      	b.n	80169c0 <__sinit+0xc>
 8016a1a:	bf00      	nop
 8016a1c:	0801a190 	.word	0x0801a190
 8016a20:	0801694d 	.word	0x0801694d

08016a24 <__sfp>:
 8016a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a26:	4607      	mov	r7, r0
 8016a28:	f7ff ffac 	bl	8016984 <__sfp_lock_acquire>
 8016a2c:	4b1e      	ldr	r3, [pc, #120]	; (8016aa8 <__sfp+0x84>)
 8016a2e:	681e      	ldr	r6, [r3, #0]
 8016a30:	69b3      	ldr	r3, [r6, #24]
 8016a32:	b913      	cbnz	r3, 8016a3a <__sfp+0x16>
 8016a34:	4630      	mov	r0, r6
 8016a36:	f7ff ffbd 	bl	80169b4 <__sinit>
 8016a3a:	3648      	adds	r6, #72	; 0x48
 8016a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016a40:	3b01      	subs	r3, #1
 8016a42:	d503      	bpl.n	8016a4c <__sfp+0x28>
 8016a44:	6833      	ldr	r3, [r6, #0]
 8016a46:	b30b      	cbz	r3, 8016a8c <__sfp+0x68>
 8016a48:	6836      	ldr	r6, [r6, #0]
 8016a4a:	e7f7      	b.n	8016a3c <__sfp+0x18>
 8016a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016a50:	b9d5      	cbnz	r5, 8016a88 <__sfp+0x64>
 8016a52:	4b16      	ldr	r3, [pc, #88]	; (8016aac <__sfp+0x88>)
 8016a54:	60e3      	str	r3, [r4, #12]
 8016a56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8016a5c:	f000 fbba 	bl	80171d4 <__retarget_lock_init_recursive>
 8016a60:	f7ff ff96 	bl	8016990 <__sfp_lock_release>
 8016a64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016a68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016a6c:	6025      	str	r5, [r4, #0]
 8016a6e:	61a5      	str	r5, [r4, #24]
 8016a70:	2208      	movs	r2, #8
 8016a72:	4629      	mov	r1, r5
 8016a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016a78:	f7fd f896 	bl	8013ba8 <memset>
 8016a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016a84:	4620      	mov	r0, r4
 8016a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a88:	3468      	adds	r4, #104	; 0x68
 8016a8a:	e7d9      	b.n	8016a40 <__sfp+0x1c>
 8016a8c:	2104      	movs	r1, #4
 8016a8e:	4638      	mov	r0, r7
 8016a90:	f7ff ff62 	bl	8016958 <__sfmoreglue>
 8016a94:	4604      	mov	r4, r0
 8016a96:	6030      	str	r0, [r6, #0]
 8016a98:	2800      	cmp	r0, #0
 8016a9a:	d1d5      	bne.n	8016a48 <__sfp+0x24>
 8016a9c:	f7ff ff78 	bl	8016990 <__sfp_lock_release>
 8016aa0:	230c      	movs	r3, #12
 8016aa2:	603b      	str	r3, [r7, #0]
 8016aa4:	e7ee      	b.n	8016a84 <__sfp+0x60>
 8016aa6:	bf00      	nop
 8016aa8:	0801a190 	.word	0x0801a190
 8016aac:	ffff0001 	.word	0xffff0001

08016ab0 <_fwalk_reent>:
 8016ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ab4:	4606      	mov	r6, r0
 8016ab6:	4688      	mov	r8, r1
 8016ab8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016abc:	2700      	movs	r7, #0
 8016abe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ac2:	f1b9 0901 	subs.w	r9, r9, #1
 8016ac6:	d505      	bpl.n	8016ad4 <_fwalk_reent+0x24>
 8016ac8:	6824      	ldr	r4, [r4, #0]
 8016aca:	2c00      	cmp	r4, #0
 8016acc:	d1f7      	bne.n	8016abe <_fwalk_reent+0xe>
 8016ace:	4638      	mov	r0, r7
 8016ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ad4:	89ab      	ldrh	r3, [r5, #12]
 8016ad6:	2b01      	cmp	r3, #1
 8016ad8:	d907      	bls.n	8016aea <_fwalk_reent+0x3a>
 8016ada:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ade:	3301      	adds	r3, #1
 8016ae0:	d003      	beq.n	8016aea <_fwalk_reent+0x3a>
 8016ae2:	4629      	mov	r1, r5
 8016ae4:	4630      	mov	r0, r6
 8016ae6:	47c0      	blx	r8
 8016ae8:	4307      	orrs	r7, r0
 8016aea:	3568      	adds	r5, #104	; 0x68
 8016aec:	e7e9      	b.n	8016ac2 <_fwalk_reent+0x12>

08016aee <rshift>:
 8016aee:	6903      	ldr	r3, [r0, #16]
 8016af0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016af8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016afc:	f100 0414 	add.w	r4, r0, #20
 8016b00:	dd45      	ble.n	8016b8e <rshift+0xa0>
 8016b02:	f011 011f 	ands.w	r1, r1, #31
 8016b06:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016b0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016b0e:	d10c      	bne.n	8016b2a <rshift+0x3c>
 8016b10:	f100 0710 	add.w	r7, r0, #16
 8016b14:	4629      	mov	r1, r5
 8016b16:	42b1      	cmp	r1, r6
 8016b18:	d334      	bcc.n	8016b84 <rshift+0x96>
 8016b1a:	1a9b      	subs	r3, r3, r2
 8016b1c:	009b      	lsls	r3, r3, #2
 8016b1e:	1eea      	subs	r2, r5, #3
 8016b20:	4296      	cmp	r6, r2
 8016b22:	bf38      	it	cc
 8016b24:	2300      	movcc	r3, #0
 8016b26:	4423      	add	r3, r4
 8016b28:	e015      	b.n	8016b56 <rshift+0x68>
 8016b2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016b2e:	f1c1 0820 	rsb	r8, r1, #32
 8016b32:	40cf      	lsrs	r7, r1
 8016b34:	f105 0e04 	add.w	lr, r5, #4
 8016b38:	46a1      	mov	r9, r4
 8016b3a:	4576      	cmp	r6, lr
 8016b3c:	46f4      	mov	ip, lr
 8016b3e:	d815      	bhi.n	8016b6c <rshift+0x7e>
 8016b40:	1a9b      	subs	r3, r3, r2
 8016b42:	009a      	lsls	r2, r3, #2
 8016b44:	3a04      	subs	r2, #4
 8016b46:	3501      	adds	r5, #1
 8016b48:	42ae      	cmp	r6, r5
 8016b4a:	bf38      	it	cc
 8016b4c:	2200      	movcc	r2, #0
 8016b4e:	18a3      	adds	r3, r4, r2
 8016b50:	50a7      	str	r7, [r4, r2]
 8016b52:	b107      	cbz	r7, 8016b56 <rshift+0x68>
 8016b54:	3304      	adds	r3, #4
 8016b56:	1b1a      	subs	r2, r3, r4
 8016b58:	42a3      	cmp	r3, r4
 8016b5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016b5e:	bf08      	it	eq
 8016b60:	2300      	moveq	r3, #0
 8016b62:	6102      	str	r2, [r0, #16]
 8016b64:	bf08      	it	eq
 8016b66:	6143      	streq	r3, [r0, #20]
 8016b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b6c:	f8dc c000 	ldr.w	ip, [ip]
 8016b70:	fa0c fc08 	lsl.w	ip, ip, r8
 8016b74:	ea4c 0707 	orr.w	r7, ip, r7
 8016b78:	f849 7b04 	str.w	r7, [r9], #4
 8016b7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016b80:	40cf      	lsrs	r7, r1
 8016b82:	e7da      	b.n	8016b3a <rshift+0x4c>
 8016b84:	f851 cb04 	ldr.w	ip, [r1], #4
 8016b88:	f847 cf04 	str.w	ip, [r7, #4]!
 8016b8c:	e7c3      	b.n	8016b16 <rshift+0x28>
 8016b8e:	4623      	mov	r3, r4
 8016b90:	e7e1      	b.n	8016b56 <rshift+0x68>

08016b92 <__hexdig_fun>:
 8016b92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016b96:	2b09      	cmp	r3, #9
 8016b98:	d802      	bhi.n	8016ba0 <__hexdig_fun+0xe>
 8016b9a:	3820      	subs	r0, #32
 8016b9c:	b2c0      	uxtb	r0, r0
 8016b9e:	4770      	bx	lr
 8016ba0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016ba4:	2b05      	cmp	r3, #5
 8016ba6:	d801      	bhi.n	8016bac <__hexdig_fun+0x1a>
 8016ba8:	3847      	subs	r0, #71	; 0x47
 8016baa:	e7f7      	b.n	8016b9c <__hexdig_fun+0xa>
 8016bac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016bb0:	2b05      	cmp	r3, #5
 8016bb2:	d801      	bhi.n	8016bb8 <__hexdig_fun+0x26>
 8016bb4:	3827      	subs	r0, #39	; 0x27
 8016bb6:	e7f1      	b.n	8016b9c <__hexdig_fun+0xa>
 8016bb8:	2000      	movs	r0, #0
 8016bba:	4770      	bx	lr

08016bbc <__gethex>:
 8016bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc0:	ed2d 8b02 	vpush	{d8}
 8016bc4:	b089      	sub	sp, #36	; 0x24
 8016bc6:	ee08 0a10 	vmov	s16, r0
 8016bca:	9304      	str	r3, [sp, #16]
 8016bcc:	4bbc      	ldr	r3, [pc, #752]	; (8016ec0 <__gethex+0x304>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	9301      	str	r3, [sp, #4]
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	468b      	mov	fp, r1
 8016bd6:	4690      	mov	r8, r2
 8016bd8:	f7e9 fb0a 	bl	80001f0 <strlen>
 8016bdc:	9b01      	ldr	r3, [sp, #4]
 8016bde:	f8db 2000 	ldr.w	r2, [fp]
 8016be2:	4403      	add	r3, r0
 8016be4:	4682      	mov	sl, r0
 8016be6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016bea:	9305      	str	r3, [sp, #20]
 8016bec:	1c93      	adds	r3, r2, #2
 8016bee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016bf2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016bf6:	32fe      	adds	r2, #254	; 0xfe
 8016bf8:	18d1      	adds	r1, r2, r3
 8016bfa:	461f      	mov	r7, r3
 8016bfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016c00:	9100      	str	r1, [sp, #0]
 8016c02:	2830      	cmp	r0, #48	; 0x30
 8016c04:	d0f8      	beq.n	8016bf8 <__gethex+0x3c>
 8016c06:	f7ff ffc4 	bl	8016b92 <__hexdig_fun>
 8016c0a:	4604      	mov	r4, r0
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	d13a      	bne.n	8016c86 <__gethex+0xca>
 8016c10:	9901      	ldr	r1, [sp, #4]
 8016c12:	4652      	mov	r2, sl
 8016c14:	4638      	mov	r0, r7
 8016c16:	f7fd ff3e 	bl	8014a96 <strncmp>
 8016c1a:	4605      	mov	r5, r0
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	d168      	bne.n	8016cf2 <__gethex+0x136>
 8016c20:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016c24:	eb07 060a 	add.w	r6, r7, sl
 8016c28:	f7ff ffb3 	bl	8016b92 <__hexdig_fun>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	d062      	beq.n	8016cf6 <__gethex+0x13a>
 8016c30:	4633      	mov	r3, r6
 8016c32:	7818      	ldrb	r0, [r3, #0]
 8016c34:	2830      	cmp	r0, #48	; 0x30
 8016c36:	461f      	mov	r7, r3
 8016c38:	f103 0301 	add.w	r3, r3, #1
 8016c3c:	d0f9      	beq.n	8016c32 <__gethex+0x76>
 8016c3e:	f7ff ffa8 	bl	8016b92 <__hexdig_fun>
 8016c42:	2301      	movs	r3, #1
 8016c44:	fab0 f480 	clz	r4, r0
 8016c48:	0964      	lsrs	r4, r4, #5
 8016c4a:	4635      	mov	r5, r6
 8016c4c:	9300      	str	r3, [sp, #0]
 8016c4e:	463a      	mov	r2, r7
 8016c50:	4616      	mov	r6, r2
 8016c52:	3201      	adds	r2, #1
 8016c54:	7830      	ldrb	r0, [r6, #0]
 8016c56:	f7ff ff9c 	bl	8016b92 <__hexdig_fun>
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	d1f8      	bne.n	8016c50 <__gethex+0x94>
 8016c5e:	9901      	ldr	r1, [sp, #4]
 8016c60:	4652      	mov	r2, sl
 8016c62:	4630      	mov	r0, r6
 8016c64:	f7fd ff17 	bl	8014a96 <strncmp>
 8016c68:	b980      	cbnz	r0, 8016c8c <__gethex+0xd0>
 8016c6a:	b94d      	cbnz	r5, 8016c80 <__gethex+0xc4>
 8016c6c:	eb06 050a 	add.w	r5, r6, sl
 8016c70:	462a      	mov	r2, r5
 8016c72:	4616      	mov	r6, r2
 8016c74:	3201      	adds	r2, #1
 8016c76:	7830      	ldrb	r0, [r6, #0]
 8016c78:	f7ff ff8b 	bl	8016b92 <__hexdig_fun>
 8016c7c:	2800      	cmp	r0, #0
 8016c7e:	d1f8      	bne.n	8016c72 <__gethex+0xb6>
 8016c80:	1bad      	subs	r5, r5, r6
 8016c82:	00ad      	lsls	r5, r5, #2
 8016c84:	e004      	b.n	8016c90 <__gethex+0xd4>
 8016c86:	2400      	movs	r4, #0
 8016c88:	4625      	mov	r5, r4
 8016c8a:	e7e0      	b.n	8016c4e <__gethex+0x92>
 8016c8c:	2d00      	cmp	r5, #0
 8016c8e:	d1f7      	bne.n	8016c80 <__gethex+0xc4>
 8016c90:	7833      	ldrb	r3, [r6, #0]
 8016c92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016c96:	2b50      	cmp	r3, #80	; 0x50
 8016c98:	d13b      	bne.n	8016d12 <__gethex+0x156>
 8016c9a:	7873      	ldrb	r3, [r6, #1]
 8016c9c:	2b2b      	cmp	r3, #43	; 0x2b
 8016c9e:	d02c      	beq.n	8016cfa <__gethex+0x13e>
 8016ca0:	2b2d      	cmp	r3, #45	; 0x2d
 8016ca2:	d02e      	beq.n	8016d02 <__gethex+0x146>
 8016ca4:	1c71      	adds	r1, r6, #1
 8016ca6:	f04f 0900 	mov.w	r9, #0
 8016caa:	7808      	ldrb	r0, [r1, #0]
 8016cac:	f7ff ff71 	bl	8016b92 <__hexdig_fun>
 8016cb0:	1e43      	subs	r3, r0, #1
 8016cb2:	b2db      	uxtb	r3, r3
 8016cb4:	2b18      	cmp	r3, #24
 8016cb6:	d82c      	bhi.n	8016d12 <__gethex+0x156>
 8016cb8:	f1a0 0210 	sub.w	r2, r0, #16
 8016cbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016cc0:	f7ff ff67 	bl	8016b92 <__hexdig_fun>
 8016cc4:	1e43      	subs	r3, r0, #1
 8016cc6:	b2db      	uxtb	r3, r3
 8016cc8:	2b18      	cmp	r3, #24
 8016cca:	d91d      	bls.n	8016d08 <__gethex+0x14c>
 8016ccc:	f1b9 0f00 	cmp.w	r9, #0
 8016cd0:	d000      	beq.n	8016cd4 <__gethex+0x118>
 8016cd2:	4252      	negs	r2, r2
 8016cd4:	4415      	add	r5, r2
 8016cd6:	f8cb 1000 	str.w	r1, [fp]
 8016cda:	b1e4      	cbz	r4, 8016d16 <__gethex+0x15a>
 8016cdc:	9b00      	ldr	r3, [sp, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	bf14      	ite	ne
 8016ce2:	2700      	movne	r7, #0
 8016ce4:	2706      	moveq	r7, #6
 8016ce6:	4638      	mov	r0, r7
 8016ce8:	b009      	add	sp, #36	; 0x24
 8016cea:	ecbd 8b02 	vpop	{d8}
 8016cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cf2:	463e      	mov	r6, r7
 8016cf4:	4625      	mov	r5, r4
 8016cf6:	2401      	movs	r4, #1
 8016cf8:	e7ca      	b.n	8016c90 <__gethex+0xd4>
 8016cfa:	f04f 0900 	mov.w	r9, #0
 8016cfe:	1cb1      	adds	r1, r6, #2
 8016d00:	e7d3      	b.n	8016caa <__gethex+0xee>
 8016d02:	f04f 0901 	mov.w	r9, #1
 8016d06:	e7fa      	b.n	8016cfe <__gethex+0x142>
 8016d08:	230a      	movs	r3, #10
 8016d0a:	fb03 0202 	mla	r2, r3, r2, r0
 8016d0e:	3a10      	subs	r2, #16
 8016d10:	e7d4      	b.n	8016cbc <__gethex+0x100>
 8016d12:	4631      	mov	r1, r6
 8016d14:	e7df      	b.n	8016cd6 <__gethex+0x11a>
 8016d16:	1bf3      	subs	r3, r6, r7
 8016d18:	3b01      	subs	r3, #1
 8016d1a:	4621      	mov	r1, r4
 8016d1c:	2b07      	cmp	r3, #7
 8016d1e:	dc0b      	bgt.n	8016d38 <__gethex+0x17c>
 8016d20:	ee18 0a10 	vmov	r0, s16
 8016d24:	f000 fad8 	bl	80172d8 <_Balloc>
 8016d28:	4604      	mov	r4, r0
 8016d2a:	b940      	cbnz	r0, 8016d3e <__gethex+0x182>
 8016d2c:	4b65      	ldr	r3, [pc, #404]	; (8016ec4 <__gethex+0x308>)
 8016d2e:	4602      	mov	r2, r0
 8016d30:	21de      	movs	r1, #222	; 0xde
 8016d32:	4865      	ldr	r0, [pc, #404]	; (8016ec8 <__gethex+0x30c>)
 8016d34:	f001 fb76 	bl	8018424 <__assert_func>
 8016d38:	3101      	adds	r1, #1
 8016d3a:	105b      	asrs	r3, r3, #1
 8016d3c:	e7ee      	b.n	8016d1c <__gethex+0x160>
 8016d3e:	f100 0914 	add.w	r9, r0, #20
 8016d42:	f04f 0b00 	mov.w	fp, #0
 8016d46:	f1ca 0301 	rsb	r3, sl, #1
 8016d4a:	f8cd 9008 	str.w	r9, [sp, #8]
 8016d4e:	f8cd b000 	str.w	fp, [sp]
 8016d52:	9306      	str	r3, [sp, #24]
 8016d54:	42b7      	cmp	r7, r6
 8016d56:	d340      	bcc.n	8016dda <__gethex+0x21e>
 8016d58:	9802      	ldr	r0, [sp, #8]
 8016d5a:	9b00      	ldr	r3, [sp, #0]
 8016d5c:	f840 3b04 	str.w	r3, [r0], #4
 8016d60:	eba0 0009 	sub.w	r0, r0, r9
 8016d64:	1080      	asrs	r0, r0, #2
 8016d66:	0146      	lsls	r6, r0, #5
 8016d68:	6120      	str	r0, [r4, #16]
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f000 fbaa 	bl	80174c4 <__hi0bits>
 8016d70:	1a30      	subs	r0, r6, r0
 8016d72:	f8d8 6000 	ldr.w	r6, [r8]
 8016d76:	42b0      	cmp	r0, r6
 8016d78:	dd63      	ble.n	8016e42 <__gethex+0x286>
 8016d7a:	1b87      	subs	r7, r0, r6
 8016d7c:	4639      	mov	r1, r7
 8016d7e:	4620      	mov	r0, r4
 8016d80:	f000 ff44 	bl	8017c0c <__any_on>
 8016d84:	4682      	mov	sl, r0
 8016d86:	b1a8      	cbz	r0, 8016db4 <__gethex+0x1f8>
 8016d88:	1e7b      	subs	r3, r7, #1
 8016d8a:	1159      	asrs	r1, r3, #5
 8016d8c:	f003 021f 	and.w	r2, r3, #31
 8016d90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016d94:	f04f 0a01 	mov.w	sl, #1
 8016d98:	fa0a f202 	lsl.w	r2, sl, r2
 8016d9c:	420a      	tst	r2, r1
 8016d9e:	d009      	beq.n	8016db4 <__gethex+0x1f8>
 8016da0:	4553      	cmp	r3, sl
 8016da2:	dd05      	ble.n	8016db0 <__gethex+0x1f4>
 8016da4:	1eb9      	subs	r1, r7, #2
 8016da6:	4620      	mov	r0, r4
 8016da8:	f000 ff30 	bl	8017c0c <__any_on>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d145      	bne.n	8016e3c <__gethex+0x280>
 8016db0:	f04f 0a02 	mov.w	sl, #2
 8016db4:	4639      	mov	r1, r7
 8016db6:	4620      	mov	r0, r4
 8016db8:	f7ff fe99 	bl	8016aee <rshift>
 8016dbc:	443d      	add	r5, r7
 8016dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016dc2:	42ab      	cmp	r3, r5
 8016dc4:	da4c      	bge.n	8016e60 <__gethex+0x2a4>
 8016dc6:	ee18 0a10 	vmov	r0, s16
 8016dca:	4621      	mov	r1, r4
 8016dcc:	f000 fac4 	bl	8017358 <_Bfree>
 8016dd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	6013      	str	r3, [r2, #0]
 8016dd6:	27a3      	movs	r7, #163	; 0xa3
 8016dd8:	e785      	b.n	8016ce6 <__gethex+0x12a>
 8016dda:	1e73      	subs	r3, r6, #1
 8016ddc:	9a05      	ldr	r2, [sp, #20]
 8016dde:	9303      	str	r3, [sp, #12]
 8016de0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016de4:	4293      	cmp	r3, r2
 8016de6:	d019      	beq.n	8016e1c <__gethex+0x260>
 8016de8:	f1bb 0f20 	cmp.w	fp, #32
 8016dec:	d107      	bne.n	8016dfe <__gethex+0x242>
 8016dee:	9b02      	ldr	r3, [sp, #8]
 8016df0:	9a00      	ldr	r2, [sp, #0]
 8016df2:	f843 2b04 	str.w	r2, [r3], #4
 8016df6:	9302      	str	r3, [sp, #8]
 8016df8:	2300      	movs	r3, #0
 8016dfa:	9300      	str	r3, [sp, #0]
 8016dfc:	469b      	mov	fp, r3
 8016dfe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016e02:	f7ff fec6 	bl	8016b92 <__hexdig_fun>
 8016e06:	9b00      	ldr	r3, [sp, #0]
 8016e08:	f000 000f 	and.w	r0, r0, #15
 8016e0c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016e10:	4303      	orrs	r3, r0
 8016e12:	9300      	str	r3, [sp, #0]
 8016e14:	f10b 0b04 	add.w	fp, fp, #4
 8016e18:	9b03      	ldr	r3, [sp, #12]
 8016e1a:	e00d      	b.n	8016e38 <__gethex+0x27c>
 8016e1c:	9b03      	ldr	r3, [sp, #12]
 8016e1e:	9a06      	ldr	r2, [sp, #24]
 8016e20:	4413      	add	r3, r2
 8016e22:	42bb      	cmp	r3, r7
 8016e24:	d3e0      	bcc.n	8016de8 <__gethex+0x22c>
 8016e26:	4618      	mov	r0, r3
 8016e28:	9901      	ldr	r1, [sp, #4]
 8016e2a:	9307      	str	r3, [sp, #28]
 8016e2c:	4652      	mov	r2, sl
 8016e2e:	f7fd fe32 	bl	8014a96 <strncmp>
 8016e32:	9b07      	ldr	r3, [sp, #28]
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d1d7      	bne.n	8016de8 <__gethex+0x22c>
 8016e38:	461e      	mov	r6, r3
 8016e3a:	e78b      	b.n	8016d54 <__gethex+0x198>
 8016e3c:	f04f 0a03 	mov.w	sl, #3
 8016e40:	e7b8      	b.n	8016db4 <__gethex+0x1f8>
 8016e42:	da0a      	bge.n	8016e5a <__gethex+0x29e>
 8016e44:	1a37      	subs	r7, r6, r0
 8016e46:	4621      	mov	r1, r4
 8016e48:	ee18 0a10 	vmov	r0, s16
 8016e4c:	463a      	mov	r2, r7
 8016e4e:	f000 fc9f 	bl	8017790 <__lshift>
 8016e52:	1bed      	subs	r5, r5, r7
 8016e54:	4604      	mov	r4, r0
 8016e56:	f100 0914 	add.w	r9, r0, #20
 8016e5a:	f04f 0a00 	mov.w	sl, #0
 8016e5e:	e7ae      	b.n	8016dbe <__gethex+0x202>
 8016e60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016e64:	42a8      	cmp	r0, r5
 8016e66:	dd72      	ble.n	8016f4e <__gethex+0x392>
 8016e68:	1b45      	subs	r5, r0, r5
 8016e6a:	42ae      	cmp	r6, r5
 8016e6c:	dc36      	bgt.n	8016edc <__gethex+0x320>
 8016e6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e72:	2b02      	cmp	r3, #2
 8016e74:	d02a      	beq.n	8016ecc <__gethex+0x310>
 8016e76:	2b03      	cmp	r3, #3
 8016e78:	d02c      	beq.n	8016ed4 <__gethex+0x318>
 8016e7a:	2b01      	cmp	r3, #1
 8016e7c:	d115      	bne.n	8016eaa <__gethex+0x2ee>
 8016e7e:	42ae      	cmp	r6, r5
 8016e80:	d113      	bne.n	8016eaa <__gethex+0x2ee>
 8016e82:	2e01      	cmp	r6, #1
 8016e84:	d10b      	bne.n	8016e9e <__gethex+0x2e2>
 8016e86:	9a04      	ldr	r2, [sp, #16]
 8016e88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016e8c:	6013      	str	r3, [r2, #0]
 8016e8e:	2301      	movs	r3, #1
 8016e90:	6123      	str	r3, [r4, #16]
 8016e92:	f8c9 3000 	str.w	r3, [r9]
 8016e96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e98:	2762      	movs	r7, #98	; 0x62
 8016e9a:	601c      	str	r4, [r3, #0]
 8016e9c:	e723      	b.n	8016ce6 <__gethex+0x12a>
 8016e9e:	1e71      	subs	r1, r6, #1
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	f000 feb3 	bl	8017c0c <__any_on>
 8016ea6:	2800      	cmp	r0, #0
 8016ea8:	d1ed      	bne.n	8016e86 <__gethex+0x2ca>
 8016eaa:	ee18 0a10 	vmov	r0, s16
 8016eae:	4621      	mov	r1, r4
 8016eb0:	f000 fa52 	bl	8017358 <_Bfree>
 8016eb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	6013      	str	r3, [r2, #0]
 8016eba:	2750      	movs	r7, #80	; 0x50
 8016ebc:	e713      	b.n	8016ce6 <__gethex+0x12a>
 8016ebe:	bf00      	nop
 8016ec0:	0801a484 	.word	0x0801a484
 8016ec4:	0801a3a4 	.word	0x0801a3a4
 8016ec8:	0801a418 	.word	0x0801a418
 8016ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d1eb      	bne.n	8016eaa <__gethex+0x2ee>
 8016ed2:	e7d8      	b.n	8016e86 <__gethex+0x2ca>
 8016ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d1d5      	bne.n	8016e86 <__gethex+0x2ca>
 8016eda:	e7e6      	b.n	8016eaa <__gethex+0x2ee>
 8016edc:	1e6f      	subs	r7, r5, #1
 8016ede:	f1ba 0f00 	cmp.w	sl, #0
 8016ee2:	d131      	bne.n	8016f48 <__gethex+0x38c>
 8016ee4:	b127      	cbz	r7, 8016ef0 <__gethex+0x334>
 8016ee6:	4639      	mov	r1, r7
 8016ee8:	4620      	mov	r0, r4
 8016eea:	f000 fe8f 	bl	8017c0c <__any_on>
 8016eee:	4682      	mov	sl, r0
 8016ef0:	117b      	asrs	r3, r7, #5
 8016ef2:	2101      	movs	r1, #1
 8016ef4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016ef8:	f007 071f 	and.w	r7, r7, #31
 8016efc:	fa01 f707 	lsl.w	r7, r1, r7
 8016f00:	421f      	tst	r7, r3
 8016f02:	4629      	mov	r1, r5
 8016f04:	4620      	mov	r0, r4
 8016f06:	bf18      	it	ne
 8016f08:	f04a 0a02 	orrne.w	sl, sl, #2
 8016f0c:	1b76      	subs	r6, r6, r5
 8016f0e:	f7ff fdee 	bl	8016aee <rshift>
 8016f12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016f16:	2702      	movs	r7, #2
 8016f18:	f1ba 0f00 	cmp.w	sl, #0
 8016f1c:	d048      	beq.n	8016fb0 <__gethex+0x3f4>
 8016f1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016f22:	2b02      	cmp	r3, #2
 8016f24:	d015      	beq.n	8016f52 <__gethex+0x396>
 8016f26:	2b03      	cmp	r3, #3
 8016f28:	d017      	beq.n	8016f5a <__gethex+0x39e>
 8016f2a:	2b01      	cmp	r3, #1
 8016f2c:	d109      	bne.n	8016f42 <__gethex+0x386>
 8016f2e:	f01a 0f02 	tst.w	sl, #2
 8016f32:	d006      	beq.n	8016f42 <__gethex+0x386>
 8016f34:	f8d9 0000 	ldr.w	r0, [r9]
 8016f38:	ea4a 0a00 	orr.w	sl, sl, r0
 8016f3c:	f01a 0f01 	tst.w	sl, #1
 8016f40:	d10e      	bne.n	8016f60 <__gethex+0x3a4>
 8016f42:	f047 0710 	orr.w	r7, r7, #16
 8016f46:	e033      	b.n	8016fb0 <__gethex+0x3f4>
 8016f48:	f04f 0a01 	mov.w	sl, #1
 8016f4c:	e7d0      	b.n	8016ef0 <__gethex+0x334>
 8016f4e:	2701      	movs	r7, #1
 8016f50:	e7e2      	b.n	8016f18 <__gethex+0x35c>
 8016f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f54:	f1c3 0301 	rsb	r3, r3, #1
 8016f58:	9315      	str	r3, [sp, #84]	; 0x54
 8016f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d0f0      	beq.n	8016f42 <__gethex+0x386>
 8016f60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016f64:	f104 0314 	add.w	r3, r4, #20
 8016f68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016f6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016f70:	f04f 0c00 	mov.w	ip, #0
 8016f74:	4618      	mov	r0, r3
 8016f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016f7e:	d01c      	beq.n	8016fba <__gethex+0x3fe>
 8016f80:	3201      	adds	r2, #1
 8016f82:	6002      	str	r2, [r0, #0]
 8016f84:	2f02      	cmp	r7, #2
 8016f86:	f104 0314 	add.w	r3, r4, #20
 8016f8a:	d13f      	bne.n	801700c <__gethex+0x450>
 8016f8c:	f8d8 2000 	ldr.w	r2, [r8]
 8016f90:	3a01      	subs	r2, #1
 8016f92:	42b2      	cmp	r2, r6
 8016f94:	d10a      	bne.n	8016fac <__gethex+0x3f0>
 8016f96:	1171      	asrs	r1, r6, #5
 8016f98:	2201      	movs	r2, #1
 8016f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016f9e:	f006 061f 	and.w	r6, r6, #31
 8016fa2:	fa02 f606 	lsl.w	r6, r2, r6
 8016fa6:	421e      	tst	r6, r3
 8016fa8:	bf18      	it	ne
 8016faa:	4617      	movne	r7, r2
 8016fac:	f047 0720 	orr.w	r7, r7, #32
 8016fb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016fb2:	601c      	str	r4, [r3, #0]
 8016fb4:	9b04      	ldr	r3, [sp, #16]
 8016fb6:	601d      	str	r5, [r3, #0]
 8016fb8:	e695      	b.n	8016ce6 <__gethex+0x12a>
 8016fba:	4299      	cmp	r1, r3
 8016fbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8016fc0:	d8d8      	bhi.n	8016f74 <__gethex+0x3b8>
 8016fc2:	68a3      	ldr	r3, [r4, #8]
 8016fc4:	459b      	cmp	fp, r3
 8016fc6:	db19      	blt.n	8016ffc <__gethex+0x440>
 8016fc8:	6861      	ldr	r1, [r4, #4]
 8016fca:	ee18 0a10 	vmov	r0, s16
 8016fce:	3101      	adds	r1, #1
 8016fd0:	f000 f982 	bl	80172d8 <_Balloc>
 8016fd4:	4681      	mov	r9, r0
 8016fd6:	b918      	cbnz	r0, 8016fe0 <__gethex+0x424>
 8016fd8:	4b1a      	ldr	r3, [pc, #104]	; (8017044 <__gethex+0x488>)
 8016fda:	4602      	mov	r2, r0
 8016fdc:	2184      	movs	r1, #132	; 0x84
 8016fde:	e6a8      	b.n	8016d32 <__gethex+0x176>
 8016fe0:	6922      	ldr	r2, [r4, #16]
 8016fe2:	3202      	adds	r2, #2
 8016fe4:	f104 010c 	add.w	r1, r4, #12
 8016fe8:	0092      	lsls	r2, r2, #2
 8016fea:	300c      	adds	r0, #12
 8016fec:	f7fc fdce 	bl	8013b8c <memcpy>
 8016ff0:	4621      	mov	r1, r4
 8016ff2:	ee18 0a10 	vmov	r0, s16
 8016ff6:	f000 f9af 	bl	8017358 <_Bfree>
 8016ffa:	464c      	mov	r4, r9
 8016ffc:	6923      	ldr	r3, [r4, #16]
 8016ffe:	1c5a      	adds	r2, r3, #1
 8017000:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017004:	6122      	str	r2, [r4, #16]
 8017006:	2201      	movs	r2, #1
 8017008:	615a      	str	r2, [r3, #20]
 801700a:	e7bb      	b.n	8016f84 <__gethex+0x3c8>
 801700c:	6922      	ldr	r2, [r4, #16]
 801700e:	455a      	cmp	r2, fp
 8017010:	dd0b      	ble.n	801702a <__gethex+0x46e>
 8017012:	2101      	movs	r1, #1
 8017014:	4620      	mov	r0, r4
 8017016:	f7ff fd6a 	bl	8016aee <rshift>
 801701a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801701e:	3501      	adds	r5, #1
 8017020:	42ab      	cmp	r3, r5
 8017022:	f6ff aed0 	blt.w	8016dc6 <__gethex+0x20a>
 8017026:	2701      	movs	r7, #1
 8017028:	e7c0      	b.n	8016fac <__gethex+0x3f0>
 801702a:	f016 061f 	ands.w	r6, r6, #31
 801702e:	d0fa      	beq.n	8017026 <__gethex+0x46a>
 8017030:	449a      	add	sl, r3
 8017032:	f1c6 0620 	rsb	r6, r6, #32
 8017036:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801703a:	f000 fa43 	bl	80174c4 <__hi0bits>
 801703e:	42b0      	cmp	r0, r6
 8017040:	dbe7      	blt.n	8017012 <__gethex+0x456>
 8017042:	e7f0      	b.n	8017026 <__gethex+0x46a>
 8017044:	0801a3a4 	.word	0x0801a3a4

08017048 <L_shift>:
 8017048:	f1c2 0208 	rsb	r2, r2, #8
 801704c:	0092      	lsls	r2, r2, #2
 801704e:	b570      	push	{r4, r5, r6, lr}
 8017050:	f1c2 0620 	rsb	r6, r2, #32
 8017054:	6843      	ldr	r3, [r0, #4]
 8017056:	6804      	ldr	r4, [r0, #0]
 8017058:	fa03 f506 	lsl.w	r5, r3, r6
 801705c:	432c      	orrs	r4, r5
 801705e:	40d3      	lsrs	r3, r2
 8017060:	6004      	str	r4, [r0, #0]
 8017062:	f840 3f04 	str.w	r3, [r0, #4]!
 8017066:	4288      	cmp	r0, r1
 8017068:	d3f4      	bcc.n	8017054 <L_shift+0xc>
 801706a:	bd70      	pop	{r4, r5, r6, pc}

0801706c <__match>:
 801706c:	b530      	push	{r4, r5, lr}
 801706e:	6803      	ldr	r3, [r0, #0]
 8017070:	3301      	adds	r3, #1
 8017072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017076:	b914      	cbnz	r4, 801707e <__match+0x12>
 8017078:	6003      	str	r3, [r0, #0]
 801707a:	2001      	movs	r0, #1
 801707c:	bd30      	pop	{r4, r5, pc}
 801707e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017082:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017086:	2d19      	cmp	r5, #25
 8017088:	bf98      	it	ls
 801708a:	3220      	addls	r2, #32
 801708c:	42a2      	cmp	r2, r4
 801708e:	d0f0      	beq.n	8017072 <__match+0x6>
 8017090:	2000      	movs	r0, #0
 8017092:	e7f3      	b.n	801707c <__match+0x10>

08017094 <__hexnan>:
 8017094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017098:	680b      	ldr	r3, [r1, #0]
 801709a:	6801      	ldr	r1, [r0, #0]
 801709c:	115e      	asrs	r6, r3, #5
 801709e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80170a2:	f013 031f 	ands.w	r3, r3, #31
 80170a6:	b087      	sub	sp, #28
 80170a8:	bf18      	it	ne
 80170aa:	3604      	addne	r6, #4
 80170ac:	2500      	movs	r5, #0
 80170ae:	1f37      	subs	r7, r6, #4
 80170b0:	4682      	mov	sl, r0
 80170b2:	4690      	mov	r8, r2
 80170b4:	9301      	str	r3, [sp, #4]
 80170b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80170ba:	46b9      	mov	r9, r7
 80170bc:	463c      	mov	r4, r7
 80170be:	9502      	str	r5, [sp, #8]
 80170c0:	46ab      	mov	fp, r5
 80170c2:	784a      	ldrb	r2, [r1, #1]
 80170c4:	1c4b      	adds	r3, r1, #1
 80170c6:	9303      	str	r3, [sp, #12]
 80170c8:	b342      	cbz	r2, 801711c <__hexnan+0x88>
 80170ca:	4610      	mov	r0, r2
 80170cc:	9105      	str	r1, [sp, #20]
 80170ce:	9204      	str	r2, [sp, #16]
 80170d0:	f7ff fd5f 	bl	8016b92 <__hexdig_fun>
 80170d4:	2800      	cmp	r0, #0
 80170d6:	d14f      	bne.n	8017178 <__hexnan+0xe4>
 80170d8:	9a04      	ldr	r2, [sp, #16]
 80170da:	9905      	ldr	r1, [sp, #20]
 80170dc:	2a20      	cmp	r2, #32
 80170de:	d818      	bhi.n	8017112 <__hexnan+0x7e>
 80170e0:	9b02      	ldr	r3, [sp, #8]
 80170e2:	459b      	cmp	fp, r3
 80170e4:	dd13      	ble.n	801710e <__hexnan+0x7a>
 80170e6:	454c      	cmp	r4, r9
 80170e8:	d206      	bcs.n	80170f8 <__hexnan+0x64>
 80170ea:	2d07      	cmp	r5, #7
 80170ec:	dc04      	bgt.n	80170f8 <__hexnan+0x64>
 80170ee:	462a      	mov	r2, r5
 80170f0:	4649      	mov	r1, r9
 80170f2:	4620      	mov	r0, r4
 80170f4:	f7ff ffa8 	bl	8017048 <L_shift>
 80170f8:	4544      	cmp	r4, r8
 80170fa:	d950      	bls.n	801719e <__hexnan+0x10a>
 80170fc:	2300      	movs	r3, #0
 80170fe:	f1a4 0904 	sub.w	r9, r4, #4
 8017102:	f844 3c04 	str.w	r3, [r4, #-4]
 8017106:	f8cd b008 	str.w	fp, [sp, #8]
 801710a:	464c      	mov	r4, r9
 801710c:	461d      	mov	r5, r3
 801710e:	9903      	ldr	r1, [sp, #12]
 8017110:	e7d7      	b.n	80170c2 <__hexnan+0x2e>
 8017112:	2a29      	cmp	r2, #41	; 0x29
 8017114:	d156      	bne.n	80171c4 <__hexnan+0x130>
 8017116:	3102      	adds	r1, #2
 8017118:	f8ca 1000 	str.w	r1, [sl]
 801711c:	f1bb 0f00 	cmp.w	fp, #0
 8017120:	d050      	beq.n	80171c4 <__hexnan+0x130>
 8017122:	454c      	cmp	r4, r9
 8017124:	d206      	bcs.n	8017134 <__hexnan+0xa0>
 8017126:	2d07      	cmp	r5, #7
 8017128:	dc04      	bgt.n	8017134 <__hexnan+0xa0>
 801712a:	462a      	mov	r2, r5
 801712c:	4649      	mov	r1, r9
 801712e:	4620      	mov	r0, r4
 8017130:	f7ff ff8a 	bl	8017048 <L_shift>
 8017134:	4544      	cmp	r4, r8
 8017136:	d934      	bls.n	80171a2 <__hexnan+0x10e>
 8017138:	f1a8 0204 	sub.w	r2, r8, #4
 801713c:	4623      	mov	r3, r4
 801713e:	f853 1b04 	ldr.w	r1, [r3], #4
 8017142:	f842 1f04 	str.w	r1, [r2, #4]!
 8017146:	429f      	cmp	r7, r3
 8017148:	d2f9      	bcs.n	801713e <__hexnan+0xaa>
 801714a:	1b3b      	subs	r3, r7, r4
 801714c:	f023 0303 	bic.w	r3, r3, #3
 8017150:	3304      	adds	r3, #4
 8017152:	3401      	adds	r4, #1
 8017154:	3e03      	subs	r6, #3
 8017156:	42b4      	cmp	r4, r6
 8017158:	bf88      	it	hi
 801715a:	2304      	movhi	r3, #4
 801715c:	4443      	add	r3, r8
 801715e:	2200      	movs	r2, #0
 8017160:	f843 2b04 	str.w	r2, [r3], #4
 8017164:	429f      	cmp	r7, r3
 8017166:	d2fb      	bcs.n	8017160 <__hexnan+0xcc>
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	b91b      	cbnz	r3, 8017174 <__hexnan+0xe0>
 801716c:	4547      	cmp	r7, r8
 801716e:	d127      	bne.n	80171c0 <__hexnan+0x12c>
 8017170:	2301      	movs	r3, #1
 8017172:	603b      	str	r3, [r7, #0]
 8017174:	2005      	movs	r0, #5
 8017176:	e026      	b.n	80171c6 <__hexnan+0x132>
 8017178:	3501      	adds	r5, #1
 801717a:	2d08      	cmp	r5, #8
 801717c:	f10b 0b01 	add.w	fp, fp, #1
 8017180:	dd06      	ble.n	8017190 <__hexnan+0xfc>
 8017182:	4544      	cmp	r4, r8
 8017184:	d9c3      	bls.n	801710e <__hexnan+0x7a>
 8017186:	2300      	movs	r3, #0
 8017188:	f844 3c04 	str.w	r3, [r4, #-4]
 801718c:	2501      	movs	r5, #1
 801718e:	3c04      	subs	r4, #4
 8017190:	6822      	ldr	r2, [r4, #0]
 8017192:	f000 000f 	and.w	r0, r0, #15
 8017196:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801719a:	6022      	str	r2, [r4, #0]
 801719c:	e7b7      	b.n	801710e <__hexnan+0x7a>
 801719e:	2508      	movs	r5, #8
 80171a0:	e7b5      	b.n	801710e <__hexnan+0x7a>
 80171a2:	9b01      	ldr	r3, [sp, #4]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d0df      	beq.n	8017168 <__hexnan+0xd4>
 80171a8:	f04f 32ff 	mov.w	r2, #4294967295
 80171ac:	f1c3 0320 	rsb	r3, r3, #32
 80171b0:	fa22 f303 	lsr.w	r3, r2, r3
 80171b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80171b8:	401a      	ands	r2, r3
 80171ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80171be:	e7d3      	b.n	8017168 <__hexnan+0xd4>
 80171c0:	3f04      	subs	r7, #4
 80171c2:	e7d1      	b.n	8017168 <__hexnan+0xd4>
 80171c4:	2004      	movs	r0, #4
 80171c6:	b007      	add	sp, #28
 80171c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171cc <_localeconv_r>:
 80171cc:	4800      	ldr	r0, [pc, #0]	; (80171d0 <_localeconv_r+0x4>)
 80171ce:	4770      	bx	lr
 80171d0:	200002d8 	.word	0x200002d8

080171d4 <__retarget_lock_init_recursive>:
 80171d4:	4770      	bx	lr

080171d6 <__retarget_lock_acquire_recursive>:
 80171d6:	4770      	bx	lr

080171d8 <__retarget_lock_release_recursive>:
 80171d8:	4770      	bx	lr

080171da <__swhatbuf_r>:
 80171da:	b570      	push	{r4, r5, r6, lr}
 80171dc:	460e      	mov	r6, r1
 80171de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171e2:	2900      	cmp	r1, #0
 80171e4:	b096      	sub	sp, #88	; 0x58
 80171e6:	4614      	mov	r4, r2
 80171e8:	461d      	mov	r5, r3
 80171ea:	da07      	bge.n	80171fc <__swhatbuf_r+0x22>
 80171ec:	2300      	movs	r3, #0
 80171ee:	602b      	str	r3, [r5, #0]
 80171f0:	89b3      	ldrh	r3, [r6, #12]
 80171f2:	061a      	lsls	r2, r3, #24
 80171f4:	d410      	bmi.n	8017218 <__swhatbuf_r+0x3e>
 80171f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171fa:	e00e      	b.n	801721a <__swhatbuf_r+0x40>
 80171fc:	466a      	mov	r2, sp
 80171fe:	f001 f951 	bl	80184a4 <_fstat_r>
 8017202:	2800      	cmp	r0, #0
 8017204:	dbf2      	blt.n	80171ec <__swhatbuf_r+0x12>
 8017206:	9a01      	ldr	r2, [sp, #4]
 8017208:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801720c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017210:	425a      	negs	r2, r3
 8017212:	415a      	adcs	r2, r3
 8017214:	602a      	str	r2, [r5, #0]
 8017216:	e7ee      	b.n	80171f6 <__swhatbuf_r+0x1c>
 8017218:	2340      	movs	r3, #64	; 0x40
 801721a:	2000      	movs	r0, #0
 801721c:	6023      	str	r3, [r4, #0]
 801721e:	b016      	add	sp, #88	; 0x58
 8017220:	bd70      	pop	{r4, r5, r6, pc}
	...

08017224 <__smakebuf_r>:
 8017224:	898b      	ldrh	r3, [r1, #12]
 8017226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017228:	079d      	lsls	r5, r3, #30
 801722a:	4606      	mov	r6, r0
 801722c:	460c      	mov	r4, r1
 801722e:	d507      	bpl.n	8017240 <__smakebuf_r+0x1c>
 8017230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017234:	6023      	str	r3, [r4, #0]
 8017236:	6123      	str	r3, [r4, #16]
 8017238:	2301      	movs	r3, #1
 801723a:	6163      	str	r3, [r4, #20]
 801723c:	b002      	add	sp, #8
 801723e:	bd70      	pop	{r4, r5, r6, pc}
 8017240:	ab01      	add	r3, sp, #4
 8017242:	466a      	mov	r2, sp
 8017244:	f7ff ffc9 	bl	80171da <__swhatbuf_r>
 8017248:	9900      	ldr	r1, [sp, #0]
 801724a:	4605      	mov	r5, r0
 801724c:	4630      	mov	r0, r6
 801724e:	f000 fd5d 	bl	8017d0c <_malloc_r>
 8017252:	b948      	cbnz	r0, 8017268 <__smakebuf_r+0x44>
 8017254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017258:	059a      	lsls	r2, r3, #22
 801725a:	d4ef      	bmi.n	801723c <__smakebuf_r+0x18>
 801725c:	f023 0303 	bic.w	r3, r3, #3
 8017260:	f043 0302 	orr.w	r3, r3, #2
 8017264:	81a3      	strh	r3, [r4, #12]
 8017266:	e7e3      	b.n	8017230 <__smakebuf_r+0xc>
 8017268:	4b0d      	ldr	r3, [pc, #52]	; (80172a0 <__smakebuf_r+0x7c>)
 801726a:	62b3      	str	r3, [r6, #40]	; 0x28
 801726c:	89a3      	ldrh	r3, [r4, #12]
 801726e:	6020      	str	r0, [r4, #0]
 8017270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017274:	81a3      	strh	r3, [r4, #12]
 8017276:	9b00      	ldr	r3, [sp, #0]
 8017278:	6163      	str	r3, [r4, #20]
 801727a:	9b01      	ldr	r3, [sp, #4]
 801727c:	6120      	str	r0, [r4, #16]
 801727e:	b15b      	cbz	r3, 8017298 <__smakebuf_r+0x74>
 8017280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017284:	4630      	mov	r0, r6
 8017286:	f001 f91f 	bl	80184c8 <_isatty_r>
 801728a:	b128      	cbz	r0, 8017298 <__smakebuf_r+0x74>
 801728c:	89a3      	ldrh	r3, [r4, #12]
 801728e:	f023 0303 	bic.w	r3, r3, #3
 8017292:	f043 0301 	orr.w	r3, r3, #1
 8017296:	81a3      	strh	r3, [r4, #12]
 8017298:	89a0      	ldrh	r0, [r4, #12]
 801729a:	4305      	orrs	r5, r0
 801729c:	81a5      	strh	r5, [r4, #12]
 801729e:	e7cd      	b.n	801723c <__smakebuf_r+0x18>
 80172a0:	0801694d 	.word	0x0801694d

080172a4 <malloc>:
 80172a4:	4b02      	ldr	r3, [pc, #8]	; (80172b0 <malloc+0xc>)
 80172a6:	4601      	mov	r1, r0
 80172a8:	6818      	ldr	r0, [r3, #0]
 80172aa:	f000 bd2f 	b.w	8017d0c <_malloc_r>
 80172ae:	bf00      	nop
 80172b0:	20000180 	.word	0x20000180

080172b4 <__ascii_mbtowc>:
 80172b4:	b082      	sub	sp, #8
 80172b6:	b901      	cbnz	r1, 80172ba <__ascii_mbtowc+0x6>
 80172b8:	a901      	add	r1, sp, #4
 80172ba:	b142      	cbz	r2, 80172ce <__ascii_mbtowc+0x1a>
 80172bc:	b14b      	cbz	r3, 80172d2 <__ascii_mbtowc+0x1e>
 80172be:	7813      	ldrb	r3, [r2, #0]
 80172c0:	600b      	str	r3, [r1, #0]
 80172c2:	7812      	ldrb	r2, [r2, #0]
 80172c4:	1e10      	subs	r0, r2, #0
 80172c6:	bf18      	it	ne
 80172c8:	2001      	movne	r0, #1
 80172ca:	b002      	add	sp, #8
 80172cc:	4770      	bx	lr
 80172ce:	4610      	mov	r0, r2
 80172d0:	e7fb      	b.n	80172ca <__ascii_mbtowc+0x16>
 80172d2:	f06f 0001 	mvn.w	r0, #1
 80172d6:	e7f8      	b.n	80172ca <__ascii_mbtowc+0x16>

080172d8 <_Balloc>:
 80172d8:	b570      	push	{r4, r5, r6, lr}
 80172da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80172dc:	4604      	mov	r4, r0
 80172de:	460d      	mov	r5, r1
 80172e0:	b976      	cbnz	r6, 8017300 <_Balloc+0x28>
 80172e2:	2010      	movs	r0, #16
 80172e4:	f7ff ffde 	bl	80172a4 <malloc>
 80172e8:	4602      	mov	r2, r0
 80172ea:	6260      	str	r0, [r4, #36]	; 0x24
 80172ec:	b920      	cbnz	r0, 80172f8 <_Balloc+0x20>
 80172ee:	4b18      	ldr	r3, [pc, #96]	; (8017350 <_Balloc+0x78>)
 80172f0:	4818      	ldr	r0, [pc, #96]	; (8017354 <_Balloc+0x7c>)
 80172f2:	2166      	movs	r1, #102	; 0x66
 80172f4:	f001 f896 	bl	8018424 <__assert_func>
 80172f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80172fc:	6006      	str	r6, [r0, #0]
 80172fe:	60c6      	str	r6, [r0, #12]
 8017300:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017302:	68f3      	ldr	r3, [r6, #12]
 8017304:	b183      	cbz	r3, 8017328 <_Balloc+0x50>
 8017306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017308:	68db      	ldr	r3, [r3, #12]
 801730a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801730e:	b9b8      	cbnz	r0, 8017340 <_Balloc+0x68>
 8017310:	2101      	movs	r1, #1
 8017312:	fa01 f605 	lsl.w	r6, r1, r5
 8017316:	1d72      	adds	r2, r6, #5
 8017318:	0092      	lsls	r2, r2, #2
 801731a:	4620      	mov	r0, r4
 801731c:	f000 fc97 	bl	8017c4e <_calloc_r>
 8017320:	b160      	cbz	r0, 801733c <_Balloc+0x64>
 8017322:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017326:	e00e      	b.n	8017346 <_Balloc+0x6e>
 8017328:	2221      	movs	r2, #33	; 0x21
 801732a:	2104      	movs	r1, #4
 801732c:	4620      	mov	r0, r4
 801732e:	f000 fc8e 	bl	8017c4e <_calloc_r>
 8017332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017334:	60f0      	str	r0, [r6, #12]
 8017336:	68db      	ldr	r3, [r3, #12]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d1e4      	bne.n	8017306 <_Balloc+0x2e>
 801733c:	2000      	movs	r0, #0
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	6802      	ldr	r2, [r0, #0]
 8017342:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017346:	2300      	movs	r3, #0
 8017348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801734c:	e7f7      	b.n	801733e <_Balloc+0x66>
 801734e:	bf00      	nop
 8017350:	0801a32e 	.word	0x0801a32e
 8017354:	0801a498 	.word	0x0801a498

08017358 <_Bfree>:
 8017358:	b570      	push	{r4, r5, r6, lr}
 801735a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801735c:	4605      	mov	r5, r0
 801735e:	460c      	mov	r4, r1
 8017360:	b976      	cbnz	r6, 8017380 <_Bfree+0x28>
 8017362:	2010      	movs	r0, #16
 8017364:	f7ff ff9e 	bl	80172a4 <malloc>
 8017368:	4602      	mov	r2, r0
 801736a:	6268      	str	r0, [r5, #36]	; 0x24
 801736c:	b920      	cbnz	r0, 8017378 <_Bfree+0x20>
 801736e:	4b09      	ldr	r3, [pc, #36]	; (8017394 <_Bfree+0x3c>)
 8017370:	4809      	ldr	r0, [pc, #36]	; (8017398 <_Bfree+0x40>)
 8017372:	218a      	movs	r1, #138	; 0x8a
 8017374:	f001 f856 	bl	8018424 <__assert_func>
 8017378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801737c:	6006      	str	r6, [r0, #0]
 801737e:	60c6      	str	r6, [r0, #12]
 8017380:	b13c      	cbz	r4, 8017392 <_Bfree+0x3a>
 8017382:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017384:	6862      	ldr	r2, [r4, #4]
 8017386:	68db      	ldr	r3, [r3, #12]
 8017388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801738c:	6021      	str	r1, [r4, #0]
 801738e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017392:	bd70      	pop	{r4, r5, r6, pc}
 8017394:	0801a32e 	.word	0x0801a32e
 8017398:	0801a498 	.word	0x0801a498

0801739c <__multadd>:
 801739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173a0:	690e      	ldr	r6, [r1, #16]
 80173a2:	4607      	mov	r7, r0
 80173a4:	4698      	mov	r8, r3
 80173a6:	460c      	mov	r4, r1
 80173a8:	f101 0014 	add.w	r0, r1, #20
 80173ac:	2300      	movs	r3, #0
 80173ae:	6805      	ldr	r5, [r0, #0]
 80173b0:	b2a9      	uxth	r1, r5
 80173b2:	fb02 8101 	mla	r1, r2, r1, r8
 80173b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80173ba:	0c2d      	lsrs	r5, r5, #16
 80173bc:	fb02 c505 	mla	r5, r2, r5, ip
 80173c0:	b289      	uxth	r1, r1
 80173c2:	3301      	adds	r3, #1
 80173c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80173c8:	429e      	cmp	r6, r3
 80173ca:	f840 1b04 	str.w	r1, [r0], #4
 80173ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80173d2:	dcec      	bgt.n	80173ae <__multadd+0x12>
 80173d4:	f1b8 0f00 	cmp.w	r8, #0
 80173d8:	d022      	beq.n	8017420 <__multadd+0x84>
 80173da:	68a3      	ldr	r3, [r4, #8]
 80173dc:	42b3      	cmp	r3, r6
 80173de:	dc19      	bgt.n	8017414 <__multadd+0x78>
 80173e0:	6861      	ldr	r1, [r4, #4]
 80173e2:	4638      	mov	r0, r7
 80173e4:	3101      	adds	r1, #1
 80173e6:	f7ff ff77 	bl	80172d8 <_Balloc>
 80173ea:	4605      	mov	r5, r0
 80173ec:	b928      	cbnz	r0, 80173fa <__multadd+0x5e>
 80173ee:	4602      	mov	r2, r0
 80173f0:	4b0d      	ldr	r3, [pc, #52]	; (8017428 <__multadd+0x8c>)
 80173f2:	480e      	ldr	r0, [pc, #56]	; (801742c <__multadd+0x90>)
 80173f4:	21b5      	movs	r1, #181	; 0xb5
 80173f6:	f001 f815 	bl	8018424 <__assert_func>
 80173fa:	6922      	ldr	r2, [r4, #16]
 80173fc:	3202      	adds	r2, #2
 80173fe:	f104 010c 	add.w	r1, r4, #12
 8017402:	0092      	lsls	r2, r2, #2
 8017404:	300c      	adds	r0, #12
 8017406:	f7fc fbc1 	bl	8013b8c <memcpy>
 801740a:	4621      	mov	r1, r4
 801740c:	4638      	mov	r0, r7
 801740e:	f7ff ffa3 	bl	8017358 <_Bfree>
 8017412:	462c      	mov	r4, r5
 8017414:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017418:	3601      	adds	r6, #1
 801741a:	f8c3 8014 	str.w	r8, [r3, #20]
 801741e:	6126      	str	r6, [r4, #16]
 8017420:	4620      	mov	r0, r4
 8017422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017426:	bf00      	nop
 8017428:	0801a3a4 	.word	0x0801a3a4
 801742c:	0801a498 	.word	0x0801a498

08017430 <__s2b>:
 8017430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017434:	460c      	mov	r4, r1
 8017436:	4615      	mov	r5, r2
 8017438:	461f      	mov	r7, r3
 801743a:	2209      	movs	r2, #9
 801743c:	3308      	adds	r3, #8
 801743e:	4606      	mov	r6, r0
 8017440:	fb93 f3f2 	sdiv	r3, r3, r2
 8017444:	2100      	movs	r1, #0
 8017446:	2201      	movs	r2, #1
 8017448:	429a      	cmp	r2, r3
 801744a:	db09      	blt.n	8017460 <__s2b+0x30>
 801744c:	4630      	mov	r0, r6
 801744e:	f7ff ff43 	bl	80172d8 <_Balloc>
 8017452:	b940      	cbnz	r0, 8017466 <__s2b+0x36>
 8017454:	4602      	mov	r2, r0
 8017456:	4b19      	ldr	r3, [pc, #100]	; (80174bc <__s2b+0x8c>)
 8017458:	4819      	ldr	r0, [pc, #100]	; (80174c0 <__s2b+0x90>)
 801745a:	21ce      	movs	r1, #206	; 0xce
 801745c:	f000 ffe2 	bl	8018424 <__assert_func>
 8017460:	0052      	lsls	r2, r2, #1
 8017462:	3101      	adds	r1, #1
 8017464:	e7f0      	b.n	8017448 <__s2b+0x18>
 8017466:	9b08      	ldr	r3, [sp, #32]
 8017468:	6143      	str	r3, [r0, #20]
 801746a:	2d09      	cmp	r5, #9
 801746c:	f04f 0301 	mov.w	r3, #1
 8017470:	6103      	str	r3, [r0, #16]
 8017472:	dd16      	ble.n	80174a2 <__s2b+0x72>
 8017474:	f104 0909 	add.w	r9, r4, #9
 8017478:	46c8      	mov	r8, r9
 801747a:	442c      	add	r4, r5
 801747c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017480:	4601      	mov	r1, r0
 8017482:	3b30      	subs	r3, #48	; 0x30
 8017484:	220a      	movs	r2, #10
 8017486:	4630      	mov	r0, r6
 8017488:	f7ff ff88 	bl	801739c <__multadd>
 801748c:	45a0      	cmp	r8, r4
 801748e:	d1f5      	bne.n	801747c <__s2b+0x4c>
 8017490:	f1a5 0408 	sub.w	r4, r5, #8
 8017494:	444c      	add	r4, r9
 8017496:	1b2d      	subs	r5, r5, r4
 8017498:	1963      	adds	r3, r4, r5
 801749a:	42bb      	cmp	r3, r7
 801749c:	db04      	blt.n	80174a8 <__s2b+0x78>
 801749e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174a2:	340a      	adds	r4, #10
 80174a4:	2509      	movs	r5, #9
 80174a6:	e7f6      	b.n	8017496 <__s2b+0x66>
 80174a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80174ac:	4601      	mov	r1, r0
 80174ae:	3b30      	subs	r3, #48	; 0x30
 80174b0:	220a      	movs	r2, #10
 80174b2:	4630      	mov	r0, r6
 80174b4:	f7ff ff72 	bl	801739c <__multadd>
 80174b8:	e7ee      	b.n	8017498 <__s2b+0x68>
 80174ba:	bf00      	nop
 80174bc:	0801a3a4 	.word	0x0801a3a4
 80174c0:	0801a498 	.word	0x0801a498

080174c4 <__hi0bits>:
 80174c4:	0c03      	lsrs	r3, r0, #16
 80174c6:	041b      	lsls	r3, r3, #16
 80174c8:	b9d3      	cbnz	r3, 8017500 <__hi0bits+0x3c>
 80174ca:	0400      	lsls	r0, r0, #16
 80174cc:	2310      	movs	r3, #16
 80174ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80174d2:	bf04      	itt	eq
 80174d4:	0200      	lsleq	r0, r0, #8
 80174d6:	3308      	addeq	r3, #8
 80174d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80174dc:	bf04      	itt	eq
 80174de:	0100      	lsleq	r0, r0, #4
 80174e0:	3304      	addeq	r3, #4
 80174e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80174e6:	bf04      	itt	eq
 80174e8:	0080      	lsleq	r0, r0, #2
 80174ea:	3302      	addeq	r3, #2
 80174ec:	2800      	cmp	r0, #0
 80174ee:	db05      	blt.n	80174fc <__hi0bits+0x38>
 80174f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80174f4:	f103 0301 	add.w	r3, r3, #1
 80174f8:	bf08      	it	eq
 80174fa:	2320      	moveq	r3, #32
 80174fc:	4618      	mov	r0, r3
 80174fe:	4770      	bx	lr
 8017500:	2300      	movs	r3, #0
 8017502:	e7e4      	b.n	80174ce <__hi0bits+0xa>

08017504 <__lo0bits>:
 8017504:	6803      	ldr	r3, [r0, #0]
 8017506:	f013 0207 	ands.w	r2, r3, #7
 801750a:	4601      	mov	r1, r0
 801750c:	d00b      	beq.n	8017526 <__lo0bits+0x22>
 801750e:	07da      	lsls	r2, r3, #31
 8017510:	d424      	bmi.n	801755c <__lo0bits+0x58>
 8017512:	0798      	lsls	r0, r3, #30
 8017514:	bf49      	itett	mi
 8017516:	085b      	lsrmi	r3, r3, #1
 8017518:	089b      	lsrpl	r3, r3, #2
 801751a:	2001      	movmi	r0, #1
 801751c:	600b      	strmi	r3, [r1, #0]
 801751e:	bf5c      	itt	pl
 8017520:	600b      	strpl	r3, [r1, #0]
 8017522:	2002      	movpl	r0, #2
 8017524:	4770      	bx	lr
 8017526:	b298      	uxth	r0, r3
 8017528:	b9b0      	cbnz	r0, 8017558 <__lo0bits+0x54>
 801752a:	0c1b      	lsrs	r3, r3, #16
 801752c:	2010      	movs	r0, #16
 801752e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017532:	bf04      	itt	eq
 8017534:	0a1b      	lsreq	r3, r3, #8
 8017536:	3008      	addeq	r0, #8
 8017538:	071a      	lsls	r2, r3, #28
 801753a:	bf04      	itt	eq
 801753c:	091b      	lsreq	r3, r3, #4
 801753e:	3004      	addeq	r0, #4
 8017540:	079a      	lsls	r2, r3, #30
 8017542:	bf04      	itt	eq
 8017544:	089b      	lsreq	r3, r3, #2
 8017546:	3002      	addeq	r0, #2
 8017548:	07da      	lsls	r2, r3, #31
 801754a:	d403      	bmi.n	8017554 <__lo0bits+0x50>
 801754c:	085b      	lsrs	r3, r3, #1
 801754e:	f100 0001 	add.w	r0, r0, #1
 8017552:	d005      	beq.n	8017560 <__lo0bits+0x5c>
 8017554:	600b      	str	r3, [r1, #0]
 8017556:	4770      	bx	lr
 8017558:	4610      	mov	r0, r2
 801755a:	e7e8      	b.n	801752e <__lo0bits+0x2a>
 801755c:	2000      	movs	r0, #0
 801755e:	4770      	bx	lr
 8017560:	2020      	movs	r0, #32
 8017562:	4770      	bx	lr

08017564 <__i2b>:
 8017564:	b510      	push	{r4, lr}
 8017566:	460c      	mov	r4, r1
 8017568:	2101      	movs	r1, #1
 801756a:	f7ff feb5 	bl	80172d8 <_Balloc>
 801756e:	4602      	mov	r2, r0
 8017570:	b928      	cbnz	r0, 801757e <__i2b+0x1a>
 8017572:	4b05      	ldr	r3, [pc, #20]	; (8017588 <__i2b+0x24>)
 8017574:	4805      	ldr	r0, [pc, #20]	; (801758c <__i2b+0x28>)
 8017576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801757a:	f000 ff53 	bl	8018424 <__assert_func>
 801757e:	2301      	movs	r3, #1
 8017580:	6144      	str	r4, [r0, #20]
 8017582:	6103      	str	r3, [r0, #16]
 8017584:	bd10      	pop	{r4, pc}
 8017586:	bf00      	nop
 8017588:	0801a3a4 	.word	0x0801a3a4
 801758c:	0801a498 	.word	0x0801a498

08017590 <__multiply>:
 8017590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017594:	4614      	mov	r4, r2
 8017596:	690a      	ldr	r2, [r1, #16]
 8017598:	6923      	ldr	r3, [r4, #16]
 801759a:	429a      	cmp	r2, r3
 801759c:	bfb8      	it	lt
 801759e:	460b      	movlt	r3, r1
 80175a0:	460d      	mov	r5, r1
 80175a2:	bfbc      	itt	lt
 80175a4:	4625      	movlt	r5, r4
 80175a6:	461c      	movlt	r4, r3
 80175a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80175ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80175b0:	68ab      	ldr	r3, [r5, #8]
 80175b2:	6869      	ldr	r1, [r5, #4]
 80175b4:	eb0a 0709 	add.w	r7, sl, r9
 80175b8:	42bb      	cmp	r3, r7
 80175ba:	b085      	sub	sp, #20
 80175bc:	bfb8      	it	lt
 80175be:	3101      	addlt	r1, #1
 80175c0:	f7ff fe8a 	bl	80172d8 <_Balloc>
 80175c4:	b930      	cbnz	r0, 80175d4 <__multiply+0x44>
 80175c6:	4602      	mov	r2, r0
 80175c8:	4b42      	ldr	r3, [pc, #264]	; (80176d4 <__multiply+0x144>)
 80175ca:	4843      	ldr	r0, [pc, #268]	; (80176d8 <__multiply+0x148>)
 80175cc:	f240 115d 	movw	r1, #349	; 0x15d
 80175d0:	f000 ff28 	bl	8018424 <__assert_func>
 80175d4:	f100 0614 	add.w	r6, r0, #20
 80175d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80175dc:	4633      	mov	r3, r6
 80175de:	2200      	movs	r2, #0
 80175e0:	4543      	cmp	r3, r8
 80175e2:	d31e      	bcc.n	8017622 <__multiply+0x92>
 80175e4:	f105 0c14 	add.w	ip, r5, #20
 80175e8:	f104 0314 	add.w	r3, r4, #20
 80175ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80175f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80175f4:	9202      	str	r2, [sp, #8]
 80175f6:	ebac 0205 	sub.w	r2, ip, r5
 80175fa:	3a15      	subs	r2, #21
 80175fc:	f022 0203 	bic.w	r2, r2, #3
 8017600:	3204      	adds	r2, #4
 8017602:	f105 0115 	add.w	r1, r5, #21
 8017606:	458c      	cmp	ip, r1
 8017608:	bf38      	it	cc
 801760a:	2204      	movcc	r2, #4
 801760c:	9201      	str	r2, [sp, #4]
 801760e:	9a02      	ldr	r2, [sp, #8]
 8017610:	9303      	str	r3, [sp, #12]
 8017612:	429a      	cmp	r2, r3
 8017614:	d808      	bhi.n	8017628 <__multiply+0x98>
 8017616:	2f00      	cmp	r7, #0
 8017618:	dc55      	bgt.n	80176c6 <__multiply+0x136>
 801761a:	6107      	str	r7, [r0, #16]
 801761c:	b005      	add	sp, #20
 801761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017622:	f843 2b04 	str.w	r2, [r3], #4
 8017626:	e7db      	b.n	80175e0 <__multiply+0x50>
 8017628:	f8b3 a000 	ldrh.w	sl, [r3]
 801762c:	f1ba 0f00 	cmp.w	sl, #0
 8017630:	d020      	beq.n	8017674 <__multiply+0xe4>
 8017632:	f105 0e14 	add.w	lr, r5, #20
 8017636:	46b1      	mov	r9, r6
 8017638:	2200      	movs	r2, #0
 801763a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801763e:	f8d9 b000 	ldr.w	fp, [r9]
 8017642:	b2a1      	uxth	r1, r4
 8017644:	fa1f fb8b 	uxth.w	fp, fp
 8017648:	fb0a b101 	mla	r1, sl, r1, fp
 801764c:	4411      	add	r1, r2
 801764e:	f8d9 2000 	ldr.w	r2, [r9]
 8017652:	0c24      	lsrs	r4, r4, #16
 8017654:	0c12      	lsrs	r2, r2, #16
 8017656:	fb0a 2404 	mla	r4, sl, r4, r2
 801765a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801765e:	b289      	uxth	r1, r1
 8017660:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017664:	45f4      	cmp	ip, lr
 8017666:	f849 1b04 	str.w	r1, [r9], #4
 801766a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801766e:	d8e4      	bhi.n	801763a <__multiply+0xaa>
 8017670:	9901      	ldr	r1, [sp, #4]
 8017672:	5072      	str	r2, [r6, r1]
 8017674:	9a03      	ldr	r2, [sp, #12]
 8017676:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801767a:	3304      	adds	r3, #4
 801767c:	f1b9 0f00 	cmp.w	r9, #0
 8017680:	d01f      	beq.n	80176c2 <__multiply+0x132>
 8017682:	6834      	ldr	r4, [r6, #0]
 8017684:	f105 0114 	add.w	r1, r5, #20
 8017688:	46b6      	mov	lr, r6
 801768a:	f04f 0a00 	mov.w	sl, #0
 801768e:	880a      	ldrh	r2, [r1, #0]
 8017690:	f8be b002 	ldrh.w	fp, [lr, #2]
 8017694:	fb09 b202 	mla	r2, r9, r2, fp
 8017698:	4492      	add	sl, r2
 801769a:	b2a4      	uxth	r4, r4
 801769c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80176a0:	f84e 4b04 	str.w	r4, [lr], #4
 80176a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80176a8:	f8be 2000 	ldrh.w	r2, [lr]
 80176ac:	0c24      	lsrs	r4, r4, #16
 80176ae:	fb09 2404 	mla	r4, r9, r4, r2
 80176b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80176b6:	458c      	cmp	ip, r1
 80176b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80176bc:	d8e7      	bhi.n	801768e <__multiply+0xfe>
 80176be:	9a01      	ldr	r2, [sp, #4]
 80176c0:	50b4      	str	r4, [r6, r2]
 80176c2:	3604      	adds	r6, #4
 80176c4:	e7a3      	b.n	801760e <__multiply+0x7e>
 80176c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d1a5      	bne.n	801761a <__multiply+0x8a>
 80176ce:	3f01      	subs	r7, #1
 80176d0:	e7a1      	b.n	8017616 <__multiply+0x86>
 80176d2:	bf00      	nop
 80176d4:	0801a3a4 	.word	0x0801a3a4
 80176d8:	0801a498 	.word	0x0801a498

080176dc <__pow5mult>:
 80176dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176e0:	4615      	mov	r5, r2
 80176e2:	f012 0203 	ands.w	r2, r2, #3
 80176e6:	4606      	mov	r6, r0
 80176e8:	460f      	mov	r7, r1
 80176ea:	d007      	beq.n	80176fc <__pow5mult+0x20>
 80176ec:	4c25      	ldr	r4, [pc, #148]	; (8017784 <__pow5mult+0xa8>)
 80176ee:	3a01      	subs	r2, #1
 80176f0:	2300      	movs	r3, #0
 80176f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80176f6:	f7ff fe51 	bl	801739c <__multadd>
 80176fa:	4607      	mov	r7, r0
 80176fc:	10ad      	asrs	r5, r5, #2
 80176fe:	d03d      	beq.n	801777c <__pow5mult+0xa0>
 8017700:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017702:	b97c      	cbnz	r4, 8017724 <__pow5mult+0x48>
 8017704:	2010      	movs	r0, #16
 8017706:	f7ff fdcd 	bl	80172a4 <malloc>
 801770a:	4602      	mov	r2, r0
 801770c:	6270      	str	r0, [r6, #36]	; 0x24
 801770e:	b928      	cbnz	r0, 801771c <__pow5mult+0x40>
 8017710:	4b1d      	ldr	r3, [pc, #116]	; (8017788 <__pow5mult+0xac>)
 8017712:	481e      	ldr	r0, [pc, #120]	; (801778c <__pow5mult+0xb0>)
 8017714:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017718:	f000 fe84 	bl	8018424 <__assert_func>
 801771c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017720:	6004      	str	r4, [r0, #0]
 8017722:	60c4      	str	r4, [r0, #12]
 8017724:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801772c:	b94c      	cbnz	r4, 8017742 <__pow5mult+0x66>
 801772e:	f240 2171 	movw	r1, #625	; 0x271
 8017732:	4630      	mov	r0, r6
 8017734:	f7ff ff16 	bl	8017564 <__i2b>
 8017738:	2300      	movs	r3, #0
 801773a:	f8c8 0008 	str.w	r0, [r8, #8]
 801773e:	4604      	mov	r4, r0
 8017740:	6003      	str	r3, [r0, #0]
 8017742:	f04f 0900 	mov.w	r9, #0
 8017746:	07eb      	lsls	r3, r5, #31
 8017748:	d50a      	bpl.n	8017760 <__pow5mult+0x84>
 801774a:	4639      	mov	r1, r7
 801774c:	4622      	mov	r2, r4
 801774e:	4630      	mov	r0, r6
 8017750:	f7ff ff1e 	bl	8017590 <__multiply>
 8017754:	4639      	mov	r1, r7
 8017756:	4680      	mov	r8, r0
 8017758:	4630      	mov	r0, r6
 801775a:	f7ff fdfd 	bl	8017358 <_Bfree>
 801775e:	4647      	mov	r7, r8
 8017760:	106d      	asrs	r5, r5, #1
 8017762:	d00b      	beq.n	801777c <__pow5mult+0xa0>
 8017764:	6820      	ldr	r0, [r4, #0]
 8017766:	b938      	cbnz	r0, 8017778 <__pow5mult+0x9c>
 8017768:	4622      	mov	r2, r4
 801776a:	4621      	mov	r1, r4
 801776c:	4630      	mov	r0, r6
 801776e:	f7ff ff0f 	bl	8017590 <__multiply>
 8017772:	6020      	str	r0, [r4, #0]
 8017774:	f8c0 9000 	str.w	r9, [r0]
 8017778:	4604      	mov	r4, r0
 801777a:	e7e4      	b.n	8017746 <__pow5mult+0x6a>
 801777c:	4638      	mov	r0, r7
 801777e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017782:	bf00      	nop
 8017784:	0801a5e8 	.word	0x0801a5e8
 8017788:	0801a32e 	.word	0x0801a32e
 801778c:	0801a498 	.word	0x0801a498

08017790 <__lshift>:
 8017790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017794:	460c      	mov	r4, r1
 8017796:	6849      	ldr	r1, [r1, #4]
 8017798:	6923      	ldr	r3, [r4, #16]
 801779a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801779e:	68a3      	ldr	r3, [r4, #8]
 80177a0:	4607      	mov	r7, r0
 80177a2:	4691      	mov	r9, r2
 80177a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80177a8:	f108 0601 	add.w	r6, r8, #1
 80177ac:	42b3      	cmp	r3, r6
 80177ae:	db0b      	blt.n	80177c8 <__lshift+0x38>
 80177b0:	4638      	mov	r0, r7
 80177b2:	f7ff fd91 	bl	80172d8 <_Balloc>
 80177b6:	4605      	mov	r5, r0
 80177b8:	b948      	cbnz	r0, 80177ce <__lshift+0x3e>
 80177ba:	4602      	mov	r2, r0
 80177bc:	4b28      	ldr	r3, [pc, #160]	; (8017860 <__lshift+0xd0>)
 80177be:	4829      	ldr	r0, [pc, #164]	; (8017864 <__lshift+0xd4>)
 80177c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80177c4:	f000 fe2e 	bl	8018424 <__assert_func>
 80177c8:	3101      	adds	r1, #1
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	e7ee      	b.n	80177ac <__lshift+0x1c>
 80177ce:	2300      	movs	r3, #0
 80177d0:	f100 0114 	add.w	r1, r0, #20
 80177d4:	f100 0210 	add.w	r2, r0, #16
 80177d8:	4618      	mov	r0, r3
 80177da:	4553      	cmp	r3, sl
 80177dc:	db33      	blt.n	8017846 <__lshift+0xb6>
 80177de:	6920      	ldr	r0, [r4, #16]
 80177e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80177e4:	f104 0314 	add.w	r3, r4, #20
 80177e8:	f019 091f 	ands.w	r9, r9, #31
 80177ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80177f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80177f4:	d02b      	beq.n	801784e <__lshift+0xbe>
 80177f6:	f1c9 0e20 	rsb	lr, r9, #32
 80177fa:	468a      	mov	sl, r1
 80177fc:	2200      	movs	r2, #0
 80177fe:	6818      	ldr	r0, [r3, #0]
 8017800:	fa00 f009 	lsl.w	r0, r0, r9
 8017804:	4302      	orrs	r2, r0
 8017806:	f84a 2b04 	str.w	r2, [sl], #4
 801780a:	f853 2b04 	ldr.w	r2, [r3], #4
 801780e:	459c      	cmp	ip, r3
 8017810:	fa22 f20e 	lsr.w	r2, r2, lr
 8017814:	d8f3      	bhi.n	80177fe <__lshift+0x6e>
 8017816:	ebac 0304 	sub.w	r3, ip, r4
 801781a:	3b15      	subs	r3, #21
 801781c:	f023 0303 	bic.w	r3, r3, #3
 8017820:	3304      	adds	r3, #4
 8017822:	f104 0015 	add.w	r0, r4, #21
 8017826:	4584      	cmp	ip, r0
 8017828:	bf38      	it	cc
 801782a:	2304      	movcc	r3, #4
 801782c:	50ca      	str	r2, [r1, r3]
 801782e:	b10a      	cbz	r2, 8017834 <__lshift+0xa4>
 8017830:	f108 0602 	add.w	r6, r8, #2
 8017834:	3e01      	subs	r6, #1
 8017836:	4638      	mov	r0, r7
 8017838:	612e      	str	r6, [r5, #16]
 801783a:	4621      	mov	r1, r4
 801783c:	f7ff fd8c 	bl	8017358 <_Bfree>
 8017840:	4628      	mov	r0, r5
 8017842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017846:	f842 0f04 	str.w	r0, [r2, #4]!
 801784a:	3301      	adds	r3, #1
 801784c:	e7c5      	b.n	80177da <__lshift+0x4a>
 801784e:	3904      	subs	r1, #4
 8017850:	f853 2b04 	ldr.w	r2, [r3], #4
 8017854:	f841 2f04 	str.w	r2, [r1, #4]!
 8017858:	459c      	cmp	ip, r3
 801785a:	d8f9      	bhi.n	8017850 <__lshift+0xc0>
 801785c:	e7ea      	b.n	8017834 <__lshift+0xa4>
 801785e:	bf00      	nop
 8017860:	0801a3a4 	.word	0x0801a3a4
 8017864:	0801a498 	.word	0x0801a498

08017868 <__mcmp>:
 8017868:	b530      	push	{r4, r5, lr}
 801786a:	6902      	ldr	r2, [r0, #16]
 801786c:	690c      	ldr	r4, [r1, #16]
 801786e:	1b12      	subs	r2, r2, r4
 8017870:	d10e      	bne.n	8017890 <__mcmp+0x28>
 8017872:	f100 0314 	add.w	r3, r0, #20
 8017876:	3114      	adds	r1, #20
 8017878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801787c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017888:	42a5      	cmp	r5, r4
 801788a:	d003      	beq.n	8017894 <__mcmp+0x2c>
 801788c:	d305      	bcc.n	801789a <__mcmp+0x32>
 801788e:	2201      	movs	r2, #1
 8017890:	4610      	mov	r0, r2
 8017892:	bd30      	pop	{r4, r5, pc}
 8017894:	4283      	cmp	r3, r0
 8017896:	d3f3      	bcc.n	8017880 <__mcmp+0x18>
 8017898:	e7fa      	b.n	8017890 <__mcmp+0x28>
 801789a:	f04f 32ff 	mov.w	r2, #4294967295
 801789e:	e7f7      	b.n	8017890 <__mcmp+0x28>

080178a0 <__mdiff>:
 80178a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178a4:	460c      	mov	r4, r1
 80178a6:	4606      	mov	r6, r0
 80178a8:	4611      	mov	r1, r2
 80178aa:	4620      	mov	r0, r4
 80178ac:	4617      	mov	r7, r2
 80178ae:	f7ff ffdb 	bl	8017868 <__mcmp>
 80178b2:	1e05      	subs	r5, r0, #0
 80178b4:	d110      	bne.n	80178d8 <__mdiff+0x38>
 80178b6:	4629      	mov	r1, r5
 80178b8:	4630      	mov	r0, r6
 80178ba:	f7ff fd0d 	bl	80172d8 <_Balloc>
 80178be:	b930      	cbnz	r0, 80178ce <__mdiff+0x2e>
 80178c0:	4b39      	ldr	r3, [pc, #228]	; (80179a8 <__mdiff+0x108>)
 80178c2:	4602      	mov	r2, r0
 80178c4:	f240 2132 	movw	r1, #562	; 0x232
 80178c8:	4838      	ldr	r0, [pc, #224]	; (80179ac <__mdiff+0x10c>)
 80178ca:	f000 fdab 	bl	8018424 <__assert_func>
 80178ce:	2301      	movs	r3, #1
 80178d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80178d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178d8:	bfa4      	itt	ge
 80178da:	463b      	movge	r3, r7
 80178dc:	4627      	movge	r7, r4
 80178de:	4630      	mov	r0, r6
 80178e0:	6879      	ldr	r1, [r7, #4]
 80178e2:	bfa6      	itte	ge
 80178e4:	461c      	movge	r4, r3
 80178e6:	2500      	movge	r5, #0
 80178e8:	2501      	movlt	r5, #1
 80178ea:	f7ff fcf5 	bl	80172d8 <_Balloc>
 80178ee:	b920      	cbnz	r0, 80178fa <__mdiff+0x5a>
 80178f0:	4b2d      	ldr	r3, [pc, #180]	; (80179a8 <__mdiff+0x108>)
 80178f2:	4602      	mov	r2, r0
 80178f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80178f8:	e7e6      	b.n	80178c8 <__mdiff+0x28>
 80178fa:	693e      	ldr	r6, [r7, #16]
 80178fc:	60c5      	str	r5, [r0, #12]
 80178fe:	6925      	ldr	r5, [r4, #16]
 8017900:	f107 0114 	add.w	r1, r7, #20
 8017904:	f104 0914 	add.w	r9, r4, #20
 8017908:	f100 0e14 	add.w	lr, r0, #20
 801790c:	f107 0210 	add.w	r2, r7, #16
 8017910:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8017914:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8017918:	46f2      	mov	sl, lr
 801791a:	2700      	movs	r7, #0
 801791c:	f859 3b04 	ldr.w	r3, [r9], #4
 8017920:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017924:	fa1f f883 	uxth.w	r8, r3
 8017928:	fa17 f78b 	uxtah	r7, r7, fp
 801792c:	0c1b      	lsrs	r3, r3, #16
 801792e:	eba7 0808 	sub.w	r8, r7, r8
 8017932:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017936:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801793a:	fa1f f888 	uxth.w	r8, r8
 801793e:	141f      	asrs	r7, r3, #16
 8017940:	454d      	cmp	r5, r9
 8017942:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017946:	f84a 3b04 	str.w	r3, [sl], #4
 801794a:	d8e7      	bhi.n	801791c <__mdiff+0x7c>
 801794c:	1b2b      	subs	r3, r5, r4
 801794e:	3b15      	subs	r3, #21
 8017950:	f023 0303 	bic.w	r3, r3, #3
 8017954:	3304      	adds	r3, #4
 8017956:	3415      	adds	r4, #21
 8017958:	42a5      	cmp	r5, r4
 801795a:	bf38      	it	cc
 801795c:	2304      	movcc	r3, #4
 801795e:	4419      	add	r1, r3
 8017960:	4473      	add	r3, lr
 8017962:	469e      	mov	lr, r3
 8017964:	460d      	mov	r5, r1
 8017966:	4565      	cmp	r5, ip
 8017968:	d30e      	bcc.n	8017988 <__mdiff+0xe8>
 801796a:	f10c 0203 	add.w	r2, ip, #3
 801796e:	1a52      	subs	r2, r2, r1
 8017970:	f022 0203 	bic.w	r2, r2, #3
 8017974:	3903      	subs	r1, #3
 8017976:	458c      	cmp	ip, r1
 8017978:	bf38      	it	cc
 801797a:	2200      	movcc	r2, #0
 801797c:	441a      	add	r2, r3
 801797e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017982:	b17b      	cbz	r3, 80179a4 <__mdiff+0x104>
 8017984:	6106      	str	r6, [r0, #16]
 8017986:	e7a5      	b.n	80178d4 <__mdiff+0x34>
 8017988:	f855 8b04 	ldr.w	r8, [r5], #4
 801798c:	fa17 f488 	uxtah	r4, r7, r8
 8017990:	1422      	asrs	r2, r4, #16
 8017992:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8017996:	b2a4      	uxth	r4, r4
 8017998:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801799c:	f84e 4b04 	str.w	r4, [lr], #4
 80179a0:	1417      	asrs	r7, r2, #16
 80179a2:	e7e0      	b.n	8017966 <__mdiff+0xc6>
 80179a4:	3e01      	subs	r6, #1
 80179a6:	e7ea      	b.n	801797e <__mdiff+0xde>
 80179a8:	0801a3a4 	.word	0x0801a3a4
 80179ac:	0801a498 	.word	0x0801a498

080179b0 <__ulp>:
 80179b0:	b082      	sub	sp, #8
 80179b2:	ed8d 0b00 	vstr	d0, [sp]
 80179b6:	9b01      	ldr	r3, [sp, #4]
 80179b8:	4912      	ldr	r1, [pc, #72]	; (8017a04 <__ulp+0x54>)
 80179ba:	4019      	ands	r1, r3
 80179bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80179c0:	2900      	cmp	r1, #0
 80179c2:	dd05      	ble.n	80179d0 <__ulp+0x20>
 80179c4:	2200      	movs	r2, #0
 80179c6:	460b      	mov	r3, r1
 80179c8:	ec43 2b10 	vmov	d0, r2, r3
 80179cc:	b002      	add	sp, #8
 80179ce:	4770      	bx	lr
 80179d0:	4249      	negs	r1, r1
 80179d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80179d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80179da:	f04f 0200 	mov.w	r2, #0
 80179de:	f04f 0300 	mov.w	r3, #0
 80179e2:	da04      	bge.n	80179ee <__ulp+0x3e>
 80179e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80179e8:	fa41 f300 	asr.w	r3, r1, r0
 80179ec:	e7ec      	b.n	80179c8 <__ulp+0x18>
 80179ee:	f1a0 0114 	sub.w	r1, r0, #20
 80179f2:	291e      	cmp	r1, #30
 80179f4:	bfda      	itte	le
 80179f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80179fa:	fa20 f101 	lsrle.w	r1, r0, r1
 80179fe:	2101      	movgt	r1, #1
 8017a00:	460a      	mov	r2, r1
 8017a02:	e7e1      	b.n	80179c8 <__ulp+0x18>
 8017a04:	7ff00000 	.word	0x7ff00000

08017a08 <__b2d>:
 8017a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a0a:	6905      	ldr	r5, [r0, #16]
 8017a0c:	f100 0714 	add.w	r7, r0, #20
 8017a10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017a14:	1f2e      	subs	r6, r5, #4
 8017a16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	f7ff fd52 	bl	80174c4 <__hi0bits>
 8017a20:	f1c0 0320 	rsb	r3, r0, #32
 8017a24:	280a      	cmp	r0, #10
 8017a26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017aa4 <__b2d+0x9c>
 8017a2a:	600b      	str	r3, [r1, #0]
 8017a2c:	dc14      	bgt.n	8017a58 <__b2d+0x50>
 8017a2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8017a32:	fa24 f10e 	lsr.w	r1, r4, lr
 8017a36:	42b7      	cmp	r7, r6
 8017a38:	ea41 030c 	orr.w	r3, r1, ip
 8017a3c:	bf34      	ite	cc
 8017a3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017a42:	2100      	movcs	r1, #0
 8017a44:	3015      	adds	r0, #21
 8017a46:	fa04 f000 	lsl.w	r0, r4, r0
 8017a4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8017a4e:	ea40 0201 	orr.w	r2, r0, r1
 8017a52:	ec43 2b10 	vmov	d0, r2, r3
 8017a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a58:	42b7      	cmp	r7, r6
 8017a5a:	bf3a      	itte	cc
 8017a5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017a60:	f1a5 0608 	subcc.w	r6, r5, #8
 8017a64:	2100      	movcs	r1, #0
 8017a66:	380b      	subs	r0, #11
 8017a68:	d017      	beq.n	8017a9a <__b2d+0x92>
 8017a6a:	f1c0 0c20 	rsb	ip, r0, #32
 8017a6e:	fa04 f500 	lsl.w	r5, r4, r0
 8017a72:	42be      	cmp	r6, r7
 8017a74:	fa21 f40c 	lsr.w	r4, r1, ip
 8017a78:	ea45 0504 	orr.w	r5, r5, r4
 8017a7c:	bf8c      	ite	hi
 8017a7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017a82:	2400      	movls	r4, #0
 8017a84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017a88:	fa01 f000 	lsl.w	r0, r1, r0
 8017a8c:	fa24 f40c 	lsr.w	r4, r4, ip
 8017a90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017a94:	ea40 0204 	orr.w	r2, r0, r4
 8017a98:	e7db      	b.n	8017a52 <__b2d+0x4a>
 8017a9a:	ea44 030c 	orr.w	r3, r4, ip
 8017a9e:	460a      	mov	r2, r1
 8017aa0:	e7d7      	b.n	8017a52 <__b2d+0x4a>
 8017aa2:	bf00      	nop
 8017aa4:	3ff00000 	.word	0x3ff00000

08017aa8 <__d2b>:
 8017aa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017aac:	4689      	mov	r9, r1
 8017aae:	2101      	movs	r1, #1
 8017ab0:	ec57 6b10 	vmov	r6, r7, d0
 8017ab4:	4690      	mov	r8, r2
 8017ab6:	f7ff fc0f 	bl	80172d8 <_Balloc>
 8017aba:	4604      	mov	r4, r0
 8017abc:	b930      	cbnz	r0, 8017acc <__d2b+0x24>
 8017abe:	4602      	mov	r2, r0
 8017ac0:	4b25      	ldr	r3, [pc, #148]	; (8017b58 <__d2b+0xb0>)
 8017ac2:	4826      	ldr	r0, [pc, #152]	; (8017b5c <__d2b+0xb4>)
 8017ac4:	f240 310a 	movw	r1, #778	; 0x30a
 8017ac8:	f000 fcac 	bl	8018424 <__assert_func>
 8017acc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017ad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017ad4:	bb35      	cbnz	r5, 8017b24 <__d2b+0x7c>
 8017ad6:	2e00      	cmp	r6, #0
 8017ad8:	9301      	str	r3, [sp, #4]
 8017ada:	d028      	beq.n	8017b2e <__d2b+0x86>
 8017adc:	4668      	mov	r0, sp
 8017ade:	9600      	str	r6, [sp, #0]
 8017ae0:	f7ff fd10 	bl	8017504 <__lo0bits>
 8017ae4:	9900      	ldr	r1, [sp, #0]
 8017ae6:	b300      	cbz	r0, 8017b2a <__d2b+0x82>
 8017ae8:	9a01      	ldr	r2, [sp, #4]
 8017aea:	f1c0 0320 	rsb	r3, r0, #32
 8017aee:	fa02 f303 	lsl.w	r3, r2, r3
 8017af2:	430b      	orrs	r3, r1
 8017af4:	40c2      	lsrs	r2, r0
 8017af6:	6163      	str	r3, [r4, #20]
 8017af8:	9201      	str	r2, [sp, #4]
 8017afa:	9b01      	ldr	r3, [sp, #4]
 8017afc:	61a3      	str	r3, [r4, #24]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	bf14      	ite	ne
 8017b02:	2202      	movne	r2, #2
 8017b04:	2201      	moveq	r2, #1
 8017b06:	6122      	str	r2, [r4, #16]
 8017b08:	b1d5      	cbz	r5, 8017b40 <__d2b+0x98>
 8017b0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017b0e:	4405      	add	r5, r0
 8017b10:	f8c9 5000 	str.w	r5, [r9]
 8017b14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017b18:	f8c8 0000 	str.w	r0, [r8]
 8017b1c:	4620      	mov	r0, r4
 8017b1e:	b003      	add	sp, #12
 8017b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017b28:	e7d5      	b.n	8017ad6 <__d2b+0x2e>
 8017b2a:	6161      	str	r1, [r4, #20]
 8017b2c:	e7e5      	b.n	8017afa <__d2b+0x52>
 8017b2e:	a801      	add	r0, sp, #4
 8017b30:	f7ff fce8 	bl	8017504 <__lo0bits>
 8017b34:	9b01      	ldr	r3, [sp, #4]
 8017b36:	6163      	str	r3, [r4, #20]
 8017b38:	2201      	movs	r2, #1
 8017b3a:	6122      	str	r2, [r4, #16]
 8017b3c:	3020      	adds	r0, #32
 8017b3e:	e7e3      	b.n	8017b08 <__d2b+0x60>
 8017b40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017b44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017b48:	f8c9 0000 	str.w	r0, [r9]
 8017b4c:	6918      	ldr	r0, [r3, #16]
 8017b4e:	f7ff fcb9 	bl	80174c4 <__hi0bits>
 8017b52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017b56:	e7df      	b.n	8017b18 <__d2b+0x70>
 8017b58:	0801a3a4 	.word	0x0801a3a4
 8017b5c:	0801a498 	.word	0x0801a498

08017b60 <__ratio>:
 8017b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b64:	4688      	mov	r8, r1
 8017b66:	4669      	mov	r1, sp
 8017b68:	4681      	mov	r9, r0
 8017b6a:	f7ff ff4d 	bl	8017a08 <__b2d>
 8017b6e:	a901      	add	r1, sp, #4
 8017b70:	4640      	mov	r0, r8
 8017b72:	ec55 4b10 	vmov	r4, r5, d0
 8017b76:	f7ff ff47 	bl	8017a08 <__b2d>
 8017b7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017b7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017b82:	eba3 0c02 	sub.w	ip, r3, r2
 8017b86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017b8a:	1a9b      	subs	r3, r3, r2
 8017b8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017b90:	ec51 0b10 	vmov	r0, r1, d0
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	bfd6      	itet	le
 8017b98:	460a      	movle	r2, r1
 8017b9a:	462a      	movgt	r2, r5
 8017b9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017ba0:	468b      	mov	fp, r1
 8017ba2:	462f      	mov	r7, r5
 8017ba4:	bfd4      	ite	le
 8017ba6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017baa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017bae:	4620      	mov	r0, r4
 8017bb0:	ee10 2a10 	vmov	r2, s0
 8017bb4:	465b      	mov	r3, fp
 8017bb6:	4639      	mov	r1, r7
 8017bb8:	f7e8 fe58 	bl	800086c <__aeabi_ddiv>
 8017bbc:	ec41 0b10 	vmov	d0, r0, r1
 8017bc0:	b003      	add	sp, #12
 8017bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017bc6 <__copybits>:
 8017bc6:	3901      	subs	r1, #1
 8017bc8:	b570      	push	{r4, r5, r6, lr}
 8017bca:	1149      	asrs	r1, r1, #5
 8017bcc:	6914      	ldr	r4, [r2, #16]
 8017bce:	3101      	adds	r1, #1
 8017bd0:	f102 0314 	add.w	r3, r2, #20
 8017bd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017bd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017bdc:	1f05      	subs	r5, r0, #4
 8017bde:	42a3      	cmp	r3, r4
 8017be0:	d30c      	bcc.n	8017bfc <__copybits+0x36>
 8017be2:	1aa3      	subs	r3, r4, r2
 8017be4:	3b11      	subs	r3, #17
 8017be6:	f023 0303 	bic.w	r3, r3, #3
 8017bea:	3211      	adds	r2, #17
 8017bec:	42a2      	cmp	r2, r4
 8017bee:	bf88      	it	hi
 8017bf0:	2300      	movhi	r3, #0
 8017bf2:	4418      	add	r0, r3
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	4288      	cmp	r0, r1
 8017bf8:	d305      	bcc.n	8017c06 <__copybits+0x40>
 8017bfa:	bd70      	pop	{r4, r5, r6, pc}
 8017bfc:	f853 6b04 	ldr.w	r6, [r3], #4
 8017c00:	f845 6f04 	str.w	r6, [r5, #4]!
 8017c04:	e7eb      	b.n	8017bde <__copybits+0x18>
 8017c06:	f840 3b04 	str.w	r3, [r0], #4
 8017c0a:	e7f4      	b.n	8017bf6 <__copybits+0x30>

08017c0c <__any_on>:
 8017c0c:	f100 0214 	add.w	r2, r0, #20
 8017c10:	6900      	ldr	r0, [r0, #16]
 8017c12:	114b      	asrs	r3, r1, #5
 8017c14:	4298      	cmp	r0, r3
 8017c16:	b510      	push	{r4, lr}
 8017c18:	db11      	blt.n	8017c3e <__any_on+0x32>
 8017c1a:	dd0a      	ble.n	8017c32 <__any_on+0x26>
 8017c1c:	f011 011f 	ands.w	r1, r1, #31
 8017c20:	d007      	beq.n	8017c32 <__any_on+0x26>
 8017c22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017c26:	fa24 f001 	lsr.w	r0, r4, r1
 8017c2a:	fa00 f101 	lsl.w	r1, r0, r1
 8017c2e:	428c      	cmp	r4, r1
 8017c30:	d10b      	bne.n	8017c4a <__any_on+0x3e>
 8017c32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017c36:	4293      	cmp	r3, r2
 8017c38:	d803      	bhi.n	8017c42 <__any_on+0x36>
 8017c3a:	2000      	movs	r0, #0
 8017c3c:	bd10      	pop	{r4, pc}
 8017c3e:	4603      	mov	r3, r0
 8017c40:	e7f7      	b.n	8017c32 <__any_on+0x26>
 8017c42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017c46:	2900      	cmp	r1, #0
 8017c48:	d0f5      	beq.n	8017c36 <__any_on+0x2a>
 8017c4a:	2001      	movs	r0, #1
 8017c4c:	e7f6      	b.n	8017c3c <__any_on+0x30>

08017c4e <_calloc_r>:
 8017c4e:	b513      	push	{r0, r1, r4, lr}
 8017c50:	434a      	muls	r2, r1
 8017c52:	4611      	mov	r1, r2
 8017c54:	9201      	str	r2, [sp, #4]
 8017c56:	f000 f859 	bl	8017d0c <_malloc_r>
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	b118      	cbz	r0, 8017c66 <_calloc_r+0x18>
 8017c5e:	9a01      	ldr	r2, [sp, #4]
 8017c60:	2100      	movs	r1, #0
 8017c62:	f7fb ffa1 	bl	8013ba8 <memset>
 8017c66:	4620      	mov	r0, r4
 8017c68:	b002      	add	sp, #8
 8017c6a:	bd10      	pop	{r4, pc}

08017c6c <_free_r>:
 8017c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c6e:	2900      	cmp	r1, #0
 8017c70:	d048      	beq.n	8017d04 <_free_r+0x98>
 8017c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c76:	9001      	str	r0, [sp, #4]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	f1a1 0404 	sub.w	r4, r1, #4
 8017c7e:	bfb8      	it	lt
 8017c80:	18e4      	addlt	r4, r4, r3
 8017c82:	f000 fc5d 	bl	8018540 <__malloc_lock>
 8017c86:	4a20      	ldr	r2, [pc, #128]	; (8017d08 <_free_r+0x9c>)
 8017c88:	9801      	ldr	r0, [sp, #4]
 8017c8a:	6813      	ldr	r3, [r2, #0]
 8017c8c:	4615      	mov	r5, r2
 8017c8e:	b933      	cbnz	r3, 8017c9e <_free_r+0x32>
 8017c90:	6063      	str	r3, [r4, #4]
 8017c92:	6014      	str	r4, [r2, #0]
 8017c94:	b003      	add	sp, #12
 8017c96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c9a:	f000 bc57 	b.w	801854c <__malloc_unlock>
 8017c9e:	42a3      	cmp	r3, r4
 8017ca0:	d90b      	bls.n	8017cba <_free_r+0x4e>
 8017ca2:	6821      	ldr	r1, [r4, #0]
 8017ca4:	1862      	adds	r2, r4, r1
 8017ca6:	4293      	cmp	r3, r2
 8017ca8:	bf04      	itt	eq
 8017caa:	681a      	ldreq	r2, [r3, #0]
 8017cac:	685b      	ldreq	r3, [r3, #4]
 8017cae:	6063      	str	r3, [r4, #4]
 8017cb0:	bf04      	itt	eq
 8017cb2:	1852      	addeq	r2, r2, r1
 8017cb4:	6022      	streq	r2, [r4, #0]
 8017cb6:	602c      	str	r4, [r5, #0]
 8017cb8:	e7ec      	b.n	8017c94 <_free_r+0x28>
 8017cba:	461a      	mov	r2, r3
 8017cbc:	685b      	ldr	r3, [r3, #4]
 8017cbe:	b10b      	cbz	r3, 8017cc4 <_free_r+0x58>
 8017cc0:	42a3      	cmp	r3, r4
 8017cc2:	d9fa      	bls.n	8017cba <_free_r+0x4e>
 8017cc4:	6811      	ldr	r1, [r2, #0]
 8017cc6:	1855      	adds	r5, r2, r1
 8017cc8:	42a5      	cmp	r5, r4
 8017cca:	d10b      	bne.n	8017ce4 <_free_r+0x78>
 8017ccc:	6824      	ldr	r4, [r4, #0]
 8017cce:	4421      	add	r1, r4
 8017cd0:	1854      	adds	r4, r2, r1
 8017cd2:	42a3      	cmp	r3, r4
 8017cd4:	6011      	str	r1, [r2, #0]
 8017cd6:	d1dd      	bne.n	8017c94 <_free_r+0x28>
 8017cd8:	681c      	ldr	r4, [r3, #0]
 8017cda:	685b      	ldr	r3, [r3, #4]
 8017cdc:	6053      	str	r3, [r2, #4]
 8017cde:	4421      	add	r1, r4
 8017ce0:	6011      	str	r1, [r2, #0]
 8017ce2:	e7d7      	b.n	8017c94 <_free_r+0x28>
 8017ce4:	d902      	bls.n	8017cec <_free_r+0x80>
 8017ce6:	230c      	movs	r3, #12
 8017ce8:	6003      	str	r3, [r0, #0]
 8017cea:	e7d3      	b.n	8017c94 <_free_r+0x28>
 8017cec:	6825      	ldr	r5, [r4, #0]
 8017cee:	1961      	adds	r1, r4, r5
 8017cf0:	428b      	cmp	r3, r1
 8017cf2:	bf04      	itt	eq
 8017cf4:	6819      	ldreq	r1, [r3, #0]
 8017cf6:	685b      	ldreq	r3, [r3, #4]
 8017cf8:	6063      	str	r3, [r4, #4]
 8017cfa:	bf04      	itt	eq
 8017cfc:	1949      	addeq	r1, r1, r5
 8017cfe:	6021      	streq	r1, [r4, #0]
 8017d00:	6054      	str	r4, [r2, #4]
 8017d02:	e7c7      	b.n	8017c94 <_free_r+0x28>
 8017d04:	b003      	add	sp, #12
 8017d06:	bd30      	pop	{r4, r5, pc}
 8017d08:	20000a04 	.word	0x20000a04

08017d0c <_malloc_r>:
 8017d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d0e:	1ccd      	adds	r5, r1, #3
 8017d10:	f025 0503 	bic.w	r5, r5, #3
 8017d14:	3508      	adds	r5, #8
 8017d16:	2d0c      	cmp	r5, #12
 8017d18:	bf38      	it	cc
 8017d1a:	250c      	movcc	r5, #12
 8017d1c:	2d00      	cmp	r5, #0
 8017d1e:	4606      	mov	r6, r0
 8017d20:	db01      	blt.n	8017d26 <_malloc_r+0x1a>
 8017d22:	42a9      	cmp	r1, r5
 8017d24:	d903      	bls.n	8017d2e <_malloc_r+0x22>
 8017d26:	230c      	movs	r3, #12
 8017d28:	6033      	str	r3, [r6, #0]
 8017d2a:	2000      	movs	r0, #0
 8017d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d2e:	f000 fc07 	bl	8018540 <__malloc_lock>
 8017d32:	4921      	ldr	r1, [pc, #132]	; (8017db8 <_malloc_r+0xac>)
 8017d34:	680a      	ldr	r2, [r1, #0]
 8017d36:	4614      	mov	r4, r2
 8017d38:	b99c      	cbnz	r4, 8017d62 <_malloc_r+0x56>
 8017d3a:	4f20      	ldr	r7, [pc, #128]	; (8017dbc <_malloc_r+0xb0>)
 8017d3c:	683b      	ldr	r3, [r7, #0]
 8017d3e:	b923      	cbnz	r3, 8017d4a <_malloc_r+0x3e>
 8017d40:	4621      	mov	r1, r4
 8017d42:	4630      	mov	r0, r6
 8017d44:	f000 fafc 	bl	8018340 <_sbrk_r>
 8017d48:	6038      	str	r0, [r7, #0]
 8017d4a:	4629      	mov	r1, r5
 8017d4c:	4630      	mov	r0, r6
 8017d4e:	f000 faf7 	bl	8018340 <_sbrk_r>
 8017d52:	1c43      	adds	r3, r0, #1
 8017d54:	d123      	bne.n	8017d9e <_malloc_r+0x92>
 8017d56:	230c      	movs	r3, #12
 8017d58:	6033      	str	r3, [r6, #0]
 8017d5a:	4630      	mov	r0, r6
 8017d5c:	f000 fbf6 	bl	801854c <__malloc_unlock>
 8017d60:	e7e3      	b.n	8017d2a <_malloc_r+0x1e>
 8017d62:	6823      	ldr	r3, [r4, #0]
 8017d64:	1b5b      	subs	r3, r3, r5
 8017d66:	d417      	bmi.n	8017d98 <_malloc_r+0x8c>
 8017d68:	2b0b      	cmp	r3, #11
 8017d6a:	d903      	bls.n	8017d74 <_malloc_r+0x68>
 8017d6c:	6023      	str	r3, [r4, #0]
 8017d6e:	441c      	add	r4, r3
 8017d70:	6025      	str	r5, [r4, #0]
 8017d72:	e004      	b.n	8017d7e <_malloc_r+0x72>
 8017d74:	6863      	ldr	r3, [r4, #4]
 8017d76:	42a2      	cmp	r2, r4
 8017d78:	bf0c      	ite	eq
 8017d7a:	600b      	streq	r3, [r1, #0]
 8017d7c:	6053      	strne	r3, [r2, #4]
 8017d7e:	4630      	mov	r0, r6
 8017d80:	f000 fbe4 	bl	801854c <__malloc_unlock>
 8017d84:	f104 000b 	add.w	r0, r4, #11
 8017d88:	1d23      	adds	r3, r4, #4
 8017d8a:	f020 0007 	bic.w	r0, r0, #7
 8017d8e:	1ac2      	subs	r2, r0, r3
 8017d90:	d0cc      	beq.n	8017d2c <_malloc_r+0x20>
 8017d92:	1a1b      	subs	r3, r3, r0
 8017d94:	50a3      	str	r3, [r4, r2]
 8017d96:	e7c9      	b.n	8017d2c <_malloc_r+0x20>
 8017d98:	4622      	mov	r2, r4
 8017d9a:	6864      	ldr	r4, [r4, #4]
 8017d9c:	e7cc      	b.n	8017d38 <_malloc_r+0x2c>
 8017d9e:	1cc4      	adds	r4, r0, #3
 8017da0:	f024 0403 	bic.w	r4, r4, #3
 8017da4:	42a0      	cmp	r0, r4
 8017da6:	d0e3      	beq.n	8017d70 <_malloc_r+0x64>
 8017da8:	1a21      	subs	r1, r4, r0
 8017daa:	4630      	mov	r0, r6
 8017dac:	f000 fac8 	bl	8018340 <_sbrk_r>
 8017db0:	3001      	adds	r0, #1
 8017db2:	d1dd      	bne.n	8017d70 <_malloc_r+0x64>
 8017db4:	e7cf      	b.n	8017d56 <_malloc_r+0x4a>
 8017db6:	bf00      	nop
 8017db8:	20000a04 	.word	0x20000a04
 8017dbc:	20000a08 	.word	0x20000a08

08017dc0 <__ssputs_r>:
 8017dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dc4:	688e      	ldr	r6, [r1, #8]
 8017dc6:	429e      	cmp	r6, r3
 8017dc8:	4682      	mov	sl, r0
 8017dca:	460c      	mov	r4, r1
 8017dcc:	4690      	mov	r8, r2
 8017dce:	461f      	mov	r7, r3
 8017dd0:	d838      	bhi.n	8017e44 <__ssputs_r+0x84>
 8017dd2:	898a      	ldrh	r2, [r1, #12]
 8017dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017dd8:	d032      	beq.n	8017e40 <__ssputs_r+0x80>
 8017dda:	6825      	ldr	r5, [r4, #0]
 8017ddc:	6909      	ldr	r1, [r1, #16]
 8017dde:	eba5 0901 	sub.w	r9, r5, r1
 8017de2:	6965      	ldr	r5, [r4, #20]
 8017de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017de8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017dec:	3301      	adds	r3, #1
 8017dee:	444b      	add	r3, r9
 8017df0:	106d      	asrs	r5, r5, #1
 8017df2:	429d      	cmp	r5, r3
 8017df4:	bf38      	it	cc
 8017df6:	461d      	movcc	r5, r3
 8017df8:	0553      	lsls	r3, r2, #21
 8017dfa:	d531      	bpl.n	8017e60 <__ssputs_r+0xa0>
 8017dfc:	4629      	mov	r1, r5
 8017dfe:	f7ff ff85 	bl	8017d0c <_malloc_r>
 8017e02:	4606      	mov	r6, r0
 8017e04:	b950      	cbnz	r0, 8017e1c <__ssputs_r+0x5c>
 8017e06:	230c      	movs	r3, #12
 8017e08:	f8ca 3000 	str.w	r3, [sl]
 8017e0c:	89a3      	ldrh	r3, [r4, #12]
 8017e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e12:	81a3      	strh	r3, [r4, #12]
 8017e14:	f04f 30ff 	mov.w	r0, #4294967295
 8017e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e1c:	6921      	ldr	r1, [r4, #16]
 8017e1e:	464a      	mov	r2, r9
 8017e20:	f7fb feb4 	bl	8013b8c <memcpy>
 8017e24:	89a3      	ldrh	r3, [r4, #12]
 8017e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e2e:	81a3      	strh	r3, [r4, #12]
 8017e30:	6126      	str	r6, [r4, #16]
 8017e32:	6165      	str	r5, [r4, #20]
 8017e34:	444e      	add	r6, r9
 8017e36:	eba5 0509 	sub.w	r5, r5, r9
 8017e3a:	6026      	str	r6, [r4, #0]
 8017e3c:	60a5      	str	r5, [r4, #8]
 8017e3e:	463e      	mov	r6, r7
 8017e40:	42be      	cmp	r6, r7
 8017e42:	d900      	bls.n	8017e46 <__ssputs_r+0x86>
 8017e44:	463e      	mov	r6, r7
 8017e46:	4632      	mov	r2, r6
 8017e48:	6820      	ldr	r0, [r4, #0]
 8017e4a:	4641      	mov	r1, r8
 8017e4c:	f000 fb5e 	bl	801850c <memmove>
 8017e50:	68a3      	ldr	r3, [r4, #8]
 8017e52:	6822      	ldr	r2, [r4, #0]
 8017e54:	1b9b      	subs	r3, r3, r6
 8017e56:	4432      	add	r2, r6
 8017e58:	60a3      	str	r3, [r4, #8]
 8017e5a:	6022      	str	r2, [r4, #0]
 8017e5c:	2000      	movs	r0, #0
 8017e5e:	e7db      	b.n	8017e18 <__ssputs_r+0x58>
 8017e60:	462a      	mov	r2, r5
 8017e62:	f000 fb79 	bl	8018558 <_realloc_r>
 8017e66:	4606      	mov	r6, r0
 8017e68:	2800      	cmp	r0, #0
 8017e6a:	d1e1      	bne.n	8017e30 <__ssputs_r+0x70>
 8017e6c:	6921      	ldr	r1, [r4, #16]
 8017e6e:	4650      	mov	r0, sl
 8017e70:	f7ff fefc 	bl	8017c6c <_free_r>
 8017e74:	e7c7      	b.n	8017e06 <__ssputs_r+0x46>
	...

08017e78 <_svfiprintf_r>:
 8017e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e7c:	4698      	mov	r8, r3
 8017e7e:	898b      	ldrh	r3, [r1, #12]
 8017e80:	061b      	lsls	r3, r3, #24
 8017e82:	b09d      	sub	sp, #116	; 0x74
 8017e84:	4607      	mov	r7, r0
 8017e86:	460d      	mov	r5, r1
 8017e88:	4614      	mov	r4, r2
 8017e8a:	d50e      	bpl.n	8017eaa <_svfiprintf_r+0x32>
 8017e8c:	690b      	ldr	r3, [r1, #16]
 8017e8e:	b963      	cbnz	r3, 8017eaa <_svfiprintf_r+0x32>
 8017e90:	2140      	movs	r1, #64	; 0x40
 8017e92:	f7ff ff3b 	bl	8017d0c <_malloc_r>
 8017e96:	6028      	str	r0, [r5, #0]
 8017e98:	6128      	str	r0, [r5, #16]
 8017e9a:	b920      	cbnz	r0, 8017ea6 <_svfiprintf_r+0x2e>
 8017e9c:	230c      	movs	r3, #12
 8017e9e:	603b      	str	r3, [r7, #0]
 8017ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ea4:	e0d1      	b.n	801804a <_svfiprintf_r+0x1d2>
 8017ea6:	2340      	movs	r3, #64	; 0x40
 8017ea8:	616b      	str	r3, [r5, #20]
 8017eaa:	2300      	movs	r3, #0
 8017eac:	9309      	str	r3, [sp, #36]	; 0x24
 8017eae:	2320      	movs	r3, #32
 8017eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8017eb8:	2330      	movs	r3, #48	; 0x30
 8017eba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018064 <_svfiprintf_r+0x1ec>
 8017ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ec2:	f04f 0901 	mov.w	r9, #1
 8017ec6:	4623      	mov	r3, r4
 8017ec8:	469a      	mov	sl, r3
 8017eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ece:	b10a      	cbz	r2, 8017ed4 <_svfiprintf_r+0x5c>
 8017ed0:	2a25      	cmp	r2, #37	; 0x25
 8017ed2:	d1f9      	bne.n	8017ec8 <_svfiprintf_r+0x50>
 8017ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8017ed8:	d00b      	beq.n	8017ef2 <_svfiprintf_r+0x7a>
 8017eda:	465b      	mov	r3, fp
 8017edc:	4622      	mov	r2, r4
 8017ede:	4629      	mov	r1, r5
 8017ee0:	4638      	mov	r0, r7
 8017ee2:	f7ff ff6d 	bl	8017dc0 <__ssputs_r>
 8017ee6:	3001      	adds	r0, #1
 8017ee8:	f000 80aa 	beq.w	8018040 <_svfiprintf_r+0x1c8>
 8017eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017eee:	445a      	add	r2, fp
 8017ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8017ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	f000 80a2 	beq.w	8018040 <_svfiprintf_r+0x1c8>
 8017efc:	2300      	movs	r3, #0
 8017efe:	f04f 32ff 	mov.w	r2, #4294967295
 8017f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f06:	f10a 0a01 	add.w	sl, sl, #1
 8017f0a:	9304      	str	r3, [sp, #16]
 8017f0c:	9307      	str	r3, [sp, #28]
 8017f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f12:	931a      	str	r3, [sp, #104]	; 0x68
 8017f14:	4654      	mov	r4, sl
 8017f16:	2205      	movs	r2, #5
 8017f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f1c:	4851      	ldr	r0, [pc, #324]	; (8018064 <_svfiprintf_r+0x1ec>)
 8017f1e:	f7e8 f96f 	bl	8000200 <memchr>
 8017f22:	9a04      	ldr	r2, [sp, #16]
 8017f24:	b9d8      	cbnz	r0, 8017f5e <_svfiprintf_r+0xe6>
 8017f26:	06d0      	lsls	r0, r2, #27
 8017f28:	bf44      	itt	mi
 8017f2a:	2320      	movmi	r3, #32
 8017f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f30:	0711      	lsls	r1, r2, #28
 8017f32:	bf44      	itt	mi
 8017f34:	232b      	movmi	r3, #43	; 0x2b
 8017f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8017f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8017f40:	d015      	beq.n	8017f6e <_svfiprintf_r+0xf6>
 8017f42:	9a07      	ldr	r2, [sp, #28]
 8017f44:	4654      	mov	r4, sl
 8017f46:	2000      	movs	r0, #0
 8017f48:	f04f 0c0a 	mov.w	ip, #10
 8017f4c:	4621      	mov	r1, r4
 8017f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f52:	3b30      	subs	r3, #48	; 0x30
 8017f54:	2b09      	cmp	r3, #9
 8017f56:	d94e      	bls.n	8017ff6 <_svfiprintf_r+0x17e>
 8017f58:	b1b0      	cbz	r0, 8017f88 <_svfiprintf_r+0x110>
 8017f5a:	9207      	str	r2, [sp, #28]
 8017f5c:	e014      	b.n	8017f88 <_svfiprintf_r+0x110>
 8017f5e:	eba0 0308 	sub.w	r3, r0, r8
 8017f62:	fa09 f303 	lsl.w	r3, r9, r3
 8017f66:	4313      	orrs	r3, r2
 8017f68:	9304      	str	r3, [sp, #16]
 8017f6a:	46a2      	mov	sl, r4
 8017f6c:	e7d2      	b.n	8017f14 <_svfiprintf_r+0x9c>
 8017f6e:	9b03      	ldr	r3, [sp, #12]
 8017f70:	1d19      	adds	r1, r3, #4
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	9103      	str	r1, [sp, #12]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	bfbb      	ittet	lt
 8017f7a:	425b      	neglt	r3, r3
 8017f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8017f80:	9307      	strge	r3, [sp, #28]
 8017f82:	9307      	strlt	r3, [sp, #28]
 8017f84:	bfb8      	it	lt
 8017f86:	9204      	strlt	r2, [sp, #16]
 8017f88:	7823      	ldrb	r3, [r4, #0]
 8017f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8017f8c:	d10c      	bne.n	8017fa8 <_svfiprintf_r+0x130>
 8017f8e:	7863      	ldrb	r3, [r4, #1]
 8017f90:	2b2a      	cmp	r3, #42	; 0x2a
 8017f92:	d135      	bne.n	8018000 <_svfiprintf_r+0x188>
 8017f94:	9b03      	ldr	r3, [sp, #12]
 8017f96:	1d1a      	adds	r2, r3, #4
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	9203      	str	r2, [sp, #12]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	bfb8      	it	lt
 8017fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8017fa4:	3402      	adds	r4, #2
 8017fa6:	9305      	str	r3, [sp, #20]
 8017fa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018074 <_svfiprintf_r+0x1fc>
 8017fac:	7821      	ldrb	r1, [r4, #0]
 8017fae:	2203      	movs	r2, #3
 8017fb0:	4650      	mov	r0, sl
 8017fb2:	f7e8 f925 	bl	8000200 <memchr>
 8017fb6:	b140      	cbz	r0, 8017fca <_svfiprintf_r+0x152>
 8017fb8:	2340      	movs	r3, #64	; 0x40
 8017fba:	eba0 000a 	sub.w	r0, r0, sl
 8017fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8017fc2:	9b04      	ldr	r3, [sp, #16]
 8017fc4:	4303      	orrs	r3, r0
 8017fc6:	3401      	adds	r4, #1
 8017fc8:	9304      	str	r3, [sp, #16]
 8017fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fce:	4826      	ldr	r0, [pc, #152]	; (8018068 <_svfiprintf_r+0x1f0>)
 8017fd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017fd4:	2206      	movs	r2, #6
 8017fd6:	f7e8 f913 	bl	8000200 <memchr>
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	d038      	beq.n	8018050 <_svfiprintf_r+0x1d8>
 8017fde:	4b23      	ldr	r3, [pc, #140]	; (801806c <_svfiprintf_r+0x1f4>)
 8017fe0:	bb1b      	cbnz	r3, 801802a <_svfiprintf_r+0x1b2>
 8017fe2:	9b03      	ldr	r3, [sp, #12]
 8017fe4:	3307      	adds	r3, #7
 8017fe6:	f023 0307 	bic.w	r3, r3, #7
 8017fea:	3308      	adds	r3, #8
 8017fec:	9303      	str	r3, [sp, #12]
 8017fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ff0:	4433      	add	r3, r6
 8017ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ff4:	e767      	b.n	8017ec6 <_svfiprintf_r+0x4e>
 8017ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ffa:	460c      	mov	r4, r1
 8017ffc:	2001      	movs	r0, #1
 8017ffe:	e7a5      	b.n	8017f4c <_svfiprintf_r+0xd4>
 8018000:	2300      	movs	r3, #0
 8018002:	3401      	adds	r4, #1
 8018004:	9305      	str	r3, [sp, #20]
 8018006:	4619      	mov	r1, r3
 8018008:	f04f 0c0a 	mov.w	ip, #10
 801800c:	4620      	mov	r0, r4
 801800e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018012:	3a30      	subs	r2, #48	; 0x30
 8018014:	2a09      	cmp	r2, #9
 8018016:	d903      	bls.n	8018020 <_svfiprintf_r+0x1a8>
 8018018:	2b00      	cmp	r3, #0
 801801a:	d0c5      	beq.n	8017fa8 <_svfiprintf_r+0x130>
 801801c:	9105      	str	r1, [sp, #20]
 801801e:	e7c3      	b.n	8017fa8 <_svfiprintf_r+0x130>
 8018020:	fb0c 2101 	mla	r1, ip, r1, r2
 8018024:	4604      	mov	r4, r0
 8018026:	2301      	movs	r3, #1
 8018028:	e7f0      	b.n	801800c <_svfiprintf_r+0x194>
 801802a:	ab03      	add	r3, sp, #12
 801802c:	9300      	str	r3, [sp, #0]
 801802e:	462a      	mov	r2, r5
 8018030:	4b0f      	ldr	r3, [pc, #60]	; (8018070 <_svfiprintf_r+0x1f8>)
 8018032:	a904      	add	r1, sp, #16
 8018034:	4638      	mov	r0, r7
 8018036:	f7fb fe5f 	bl	8013cf8 <_printf_float>
 801803a:	1c42      	adds	r2, r0, #1
 801803c:	4606      	mov	r6, r0
 801803e:	d1d6      	bne.n	8017fee <_svfiprintf_r+0x176>
 8018040:	89ab      	ldrh	r3, [r5, #12]
 8018042:	065b      	lsls	r3, r3, #25
 8018044:	f53f af2c 	bmi.w	8017ea0 <_svfiprintf_r+0x28>
 8018048:	9809      	ldr	r0, [sp, #36]	; 0x24
 801804a:	b01d      	add	sp, #116	; 0x74
 801804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018050:	ab03      	add	r3, sp, #12
 8018052:	9300      	str	r3, [sp, #0]
 8018054:	462a      	mov	r2, r5
 8018056:	4b06      	ldr	r3, [pc, #24]	; (8018070 <_svfiprintf_r+0x1f8>)
 8018058:	a904      	add	r1, sp, #16
 801805a:	4638      	mov	r0, r7
 801805c:	f7fc f8f0 	bl	8014240 <_printf_i>
 8018060:	e7eb      	b.n	801803a <_svfiprintf_r+0x1c2>
 8018062:	bf00      	nop
 8018064:	0801a5f4 	.word	0x0801a5f4
 8018068:	0801a5fe 	.word	0x0801a5fe
 801806c:	08013cf9 	.word	0x08013cf9
 8018070:	08017dc1 	.word	0x08017dc1
 8018074:	0801a5fa 	.word	0x0801a5fa

08018078 <__sfputc_r>:
 8018078:	6893      	ldr	r3, [r2, #8]
 801807a:	3b01      	subs	r3, #1
 801807c:	2b00      	cmp	r3, #0
 801807e:	b410      	push	{r4}
 8018080:	6093      	str	r3, [r2, #8]
 8018082:	da08      	bge.n	8018096 <__sfputc_r+0x1e>
 8018084:	6994      	ldr	r4, [r2, #24]
 8018086:	42a3      	cmp	r3, r4
 8018088:	db01      	blt.n	801808e <__sfputc_r+0x16>
 801808a:	290a      	cmp	r1, #10
 801808c:	d103      	bne.n	8018096 <__sfputc_r+0x1e>
 801808e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018092:	f7fd bc3b 	b.w	801590c <__swbuf_r>
 8018096:	6813      	ldr	r3, [r2, #0]
 8018098:	1c58      	adds	r0, r3, #1
 801809a:	6010      	str	r0, [r2, #0]
 801809c:	7019      	strb	r1, [r3, #0]
 801809e:	4608      	mov	r0, r1
 80180a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180a4:	4770      	bx	lr

080180a6 <__sfputs_r>:
 80180a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180a8:	4606      	mov	r6, r0
 80180aa:	460f      	mov	r7, r1
 80180ac:	4614      	mov	r4, r2
 80180ae:	18d5      	adds	r5, r2, r3
 80180b0:	42ac      	cmp	r4, r5
 80180b2:	d101      	bne.n	80180b8 <__sfputs_r+0x12>
 80180b4:	2000      	movs	r0, #0
 80180b6:	e007      	b.n	80180c8 <__sfputs_r+0x22>
 80180b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180bc:	463a      	mov	r2, r7
 80180be:	4630      	mov	r0, r6
 80180c0:	f7ff ffda 	bl	8018078 <__sfputc_r>
 80180c4:	1c43      	adds	r3, r0, #1
 80180c6:	d1f3      	bne.n	80180b0 <__sfputs_r+0xa>
 80180c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080180cc <_vfiprintf_r>:
 80180cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d0:	460d      	mov	r5, r1
 80180d2:	b09d      	sub	sp, #116	; 0x74
 80180d4:	4614      	mov	r4, r2
 80180d6:	4698      	mov	r8, r3
 80180d8:	4606      	mov	r6, r0
 80180da:	b118      	cbz	r0, 80180e4 <_vfiprintf_r+0x18>
 80180dc:	6983      	ldr	r3, [r0, #24]
 80180de:	b90b      	cbnz	r3, 80180e4 <_vfiprintf_r+0x18>
 80180e0:	f7fe fc68 	bl	80169b4 <__sinit>
 80180e4:	4b89      	ldr	r3, [pc, #548]	; (801830c <_vfiprintf_r+0x240>)
 80180e6:	429d      	cmp	r5, r3
 80180e8:	d11b      	bne.n	8018122 <_vfiprintf_r+0x56>
 80180ea:	6875      	ldr	r5, [r6, #4]
 80180ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80180ee:	07d9      	lsls	r1, r3, #31
 80180f0:	d405      	bmi.n	80180fe <_vfiprintf_r+0x32>
 80180f2:	89ab      	ldrh	r3, [r5, #12]
 80180f4:	059a      	lsls	r2, r3, #22
 80180f6:	d402      	bmi.n	80180fe <_vfiprintf_r+0x32>
 80180f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80180fa:	f7ff f86c 	bl	80171d6 <__retarget_lock_acquire_recursive>
 80180fe:	89ab      	ldrh	r3, [r5, #12]
 8018100:	071b      	lsls	r3, r3, #28
 8018102:	d501      	bpl.n	8018108 <_vfiprintf_r+0x3c>
 8018104:	692b      	ldr	r3, [r5, #16]
 8018106:	b9eb      	cbnz	r3, 8018144 <_vfiprintf_r+0x78>
 8018108:	4629      	mov	r1, r5
 801810a:	4630      	mov	r0, r6
 801810c:	f7fd fc50 	bl	80159b0 <__swsetup_r>
 8018110:	b1c0      	cbz	r0, 8018144 <_vfiprintf_r+0x78>
 8018112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018114:	07dc      	lsls	r4, r3, #31
 8018116:	d50e      	bpl.n	8018136 <_vfiprintf_r+0x6a>
 8018118:	f04f 30ff 	mov.w	r0, #4294967295
 801811c:	b01d      	add	sp, #116	; 0x74
 801811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018122:	4b7b      	ldr	r3, [pc, #492]	; (8018310 <_vfiprintf_r+0x244>)
 8018124:	429d      	cmp	r5, r3
 8018126:	d101      	bne.n	801812c <_vfiprintf_r+0x60>
 8018128:	68b5      	ldr	r5, [r6, #8]
 801812a:	e7df      	b.n	80180ec <_vfiprintf_r+0x20>
 801812c:	4b79      	ldr	r3, [pc, #484]	; (8018314 <_vfiprintf_r+0x248>)
 801812e:	429d      	cmp	r5, r3
 8018130:	bf08      	it	eq
 8018132:	68f5      	ldreq	r5, [r6, #12]
 8018134:	e7da      	b.n	80180ec <_vfiprintf_r+0x20>
 8018136:	89ab      	ldrh	r3, [r5, #12]
 8018138:	0598      	lsls	r0, r3, #22
 801813a:	d4ed      	bmi.n	8018118 <_vfiprintf_r+0x4c>
 801813c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801813e:	f7ff f84b 	bl	80171d8 <__retarget_lock_release_recursive>
 8018142:	e7e9      	b.n	8018118 <_vfiprintf_r+0x4c>
 8018144:	2300      	movs	r3, #0
 8018146:	9309      	str	r3, [sp, #36]	; 0x24
 8018148:	2320      	movs	r3, #32
 801814a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801814e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018152:	2330      	movs	r3, #48	; 0x30
 8018154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018318 <_vfiprintf_r+0x24c>
 8018158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801815c:	f04f 0901 	mov.w	r9, #1
 8018160:	4623      	mov	r3, r4
 8018162:	469a      	mov	sl, r3
 8018164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018168:	b10a      	cbz	r2, 801816e <_vfiprintf_r+0xa2>
 801816a:	2a25      	cmp	r2, #37	; 0x25
 801816c:	d1f9      	bne.n	8018162 <_vfiprintf_r+0x96>
 801816e:	ebba 0b04 	subs.w	fp, sl, r4
 8018172:	d00b      	beq.n	801818c <_vfiprintf_r+0xc0>
 8018174:	465b      	mov	r3, fp
 8018176:	4622      	mov	r2, r4
 8018178:	4629      	mov	r1, r5
 801817a:	4630      	mov	r0, r6
 801817c:	f7ff ff93 	bl	80180a6 <__sfputs_r>
 8018180:	3001      	adds	r0, #1
 8018182:	f000 80aa 	beq.w	80182da <_vfiprintf_r+0x20e>
 8018186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018188:	445a      	add	r2, fp
 801818a:	9209      	str	r2, [sp, #36]	; 0x24
 801818c:	f89a 3000 	ldrb.w	r3, [sl]
 8018190:	2b00      	cmp	r3, #0
 8018192:	f000 80a2 	beq.w	80182da <_vfiprintf_r+0x20e>
 8018196:	2300      	movs	r3, #0
 8018198:	f04f 32ff 	mov.w	r2, #4294967295
 801819c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181a0:	f10a 0a01 	add.w	sl, sl, #1
 80181a4:	9304      	str	r3, [sp, #16]
 80181a6:	9307      	str	r3, [sp, #28]
 80181a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80181ac:	931a      	str	r3, [sp, #104]	; 0x68
 80181ae:	4654      	mov	r4, sl
 80181b0:	2205      	movs	r2, #5
 80181b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181b6:	4858      	ldr	r0, [pc, #352]	; (8018318 <_vfiprintf_r+0x24c>)
 80181b8:	f7e8 f822 	bl	8000200 <memchr>
 80181bc:	9a04      	ldr	r2, [sp, #16]
 80181be:	b9d8      	cbnz	r0, 80181f8 <_vfiprintf_r+0x12c>
 80181c0:	06d1      	lsls	r1, r2, #27
 80181c2:	bf44      	itt	mi
 80181c4:	2320      	movmi	r3, #32
 80181c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181ca:	0713      	lsls	r3, r2, #28
 80181cc:	bf44      	itt	mi
 80181ce:	232b      	movmi	r3, #43	; 0x2b
 80181d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181d4:	f89a 3000 	ldrb.w	r3, [sl]
 80181d8:	2b2a      	cmp	r3, #42	; 0x2a
 80181da:	d015      	beq.n	8018208 <_vfiprintf_r+0x13c>
 80181dc:	9a07      	ldr	r2, [sp, #28]
 80181de:	4654      	mov	r4, sl
 80181e0:	2000      	movs	r0, #0
 80181e2:	f04f 0c0a 	mov.w	ip, #10
 80181e6:	4621      	mov	r1, r4
 80181e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80181ec:	3b30      	subs	r3, #48	; 0x30
 80181ee:	2b09      	cmp	r3, #9
 80181f0:	d94e      	bls.n	8018290 <_vfiprintf_r+0x1c4>
 80181f2:	b1b0      	cbz	r0, 8018222 <_vfiprintf_r+0x156>
 80181f4:	9207      	str	r2, [sp, #28]
 80181f6:	e014      	b.n	8018222 <_vfiprintf_r+0x156>
 80181f8:	eba0 0308 	sub.w	r3, r0, r8
 80181fc:	fa09 f303 	lsl.w	r3, r9, r3
 8018200:	4313      	orrs	r3, r2
 8018202:	9304      	str	r3, [sp, #16]
 8018204:	46a2      	mov	sl, r4
 8018206:	e7d2      	b.n	80181ae <_vfiprintf_r+0xe2>
 8018208:	9b03      	ldr	r3, [sp, #12]
 801820a:	1d19      	adds	r1, r3, #4
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	9103      	str	r1, [sp, #12]
 8018210:	2b00      	cmp	r3, #0
 8018212:	bfbb      	ittet	lt
 8018214:	425b      	neglt	r3, r3
 8018216:	f042 0202 	orrlt.w	r2, r2, #2
 801821a:	9307      	strge	r3, [sp, #28]
 801821c:	9307      	strlt	r3, [sp, #28]
 801821e:	bfb8      	it	lt
 8018220:	9204      	strlt	r2, [sp, #16]
 8018222:	7823      	ldrb	r3, [r4, #0]
 8018224:	2b2e      	cmp	r3, #46	; 0x2e
 8018226:	d10c      	bne.n	8018242 <_vfiprintf_r+0x176>
 8018228:	7863      	ldrb	r3, [r4, #1]
 801822a:	2b2a      	cmp	r3, #42	; 0x2a
 801822c:	d135      	bne.n	801829a <_vfiprintf_r+0x1ce>
 801822e:	9b03      	ldr	r3, [sp, #12]
 8018230:	1d1a      	adds	r2, r3, #4
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	9203      	str	r2, [sp, #12]
 8018236:	2b00      	cmp	r3, #0
 8018238:	bfb8      	it	lt
 801823a:	f04f 33ff 	movlt.w	r3, #4294967295
 801823e:	3402      	adds	r4, #2
 8018240:	9305      	str	r3, [sp, #20]
 8018242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018328 <_vfiprintf_r+0x25c>
 8018246:	7821      	ldrb	r1, [r4, #0]
 8018248:	2203      	movs	r2, #3
 801824a:	4650      	mov	r0, sl
 801824c:	f7e7 ffd8 	bl	8000200 <memchr>
 8018250:	b140      	cbz	r0, 8018264 <_vfiprintf_r+0x198>
 8018252:	2340      	movs	r3, #64	; 0x40
 8018254:	eba0 000a 	sub.w	r0, r0, sl
 8018258:	fa03 f000 	lsl.w	r0, r3, r0
 801825c:	9b04      	ldr	r3, [sp, #16]
 801825e:	4303      	orrs	r3, r0
 8018260:	3401      	adds	r4, #1
 8018262:	9304      	str	r3, [sp, #16]
 8018264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018268:	482c      	ldr	r0, [pc, #176]	; (801831c <_vfiprintf_r+0x250>)
 801826a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801826e:	2206      	movs	r2, #6
 8018270:	f7e7 ffc6 	bl	8000200 <memchr>
 8018274:	2800      	cmp	r0, #0
 8018276:	d03f      	beq.n	80182f8 <_vfiprintf_r+0x22c>
 8018278:	4b29      	ldr	r3, [pc, #164]	; (8018320 <_vfiprintf_r+0x254>)
 801827a:	bb1b      	cbnz	r3, 80182c4 <_vfiprintf_r+0x1f8>
 801827c:	9b03      	ldr	r3, [sp, #12]
 801827e:	3307      	adds	r3, #7
 8018280:	f023 0307 	bic.w	r3, r3, #7
 8018284:	3308      	adds	r3, #8
 8018286:	9303      	str	r3, [sp, #12]
 8018288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801828a:	443b      	add	r3, r7
 801828c:	9309      	str	r3, [sp, #36]	; 0x24
 801828e:	e767      	b.n	8018160 <_vfiprintf_r+0x94>
 8018290:	fb0c 3202 	mla	r2, ip, r2, r3
 8018294:	460c      	mov	r4, r1
 8018296:	2001      	movs	r0, #1
 8018298:	e7a5      	b.n	80181e6 <_vfiprintf_r+0x11a>
 801829a:	2300      	movs	r3, #0
 801829c:	3401      	adds	r4, #1
 801829e:	9305      	str	r3, [sp, #20]
 80182a0:	4619      	mov	r1, r3
 80182a2:	f04f 0c0a 	mov.w	ip, #10
 80182a6:	4620      	mov	r0, r4
 80182a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182ac:	3a30      	subs	r2, #48	; 0x30
 80182ae:	2a09      	cmp	r2, #9
 80182b0:	d903      	bls.n	80182ba <_vfiprintf_r+0x1ee>
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d0c5      	beq.n	8018242 <_vfiprintf_r+0x176>
 80182b6:	9105      	str	r1, [sp, #20]
 80182b8:	e7c3      	b.n	8018242 <_vfiprintf_r+0x176>
 80182ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80182be:	4604      	mov	r4, r0
 80182c0:	2301      	movs	r3, #1
 80182c2:	e7f0      	b.n	80182a6 <_vfiprintf_r+0x1da>
 80182c4:	ab03      	add	r3, sp, #12
 80182c6:	9300      	str	r3, [sp, #0]
 80182c8:	462a      	mov	r2, r5
 80182ca:	4b16      	ldr	r3, [pc, #88]	; (8018324 <_vfiprintf_r+0x258>)
 80182cc:	a904      	add	r1, sp, #16
 80182ce:	4630      	mov	r0, r6
 80182d0:	f7fb fd12 	bl	8013cf8 <_printf_float>
 80182d4:	4607      	mov	r7, r0
 80182d6:	1c78      	adds	r0, r7, #1
 80182d8:	d1d6      	bne.n	8018288 <_vfiprintf_r+0x1bc>
 80182da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80182dc:	07d9      	lsls	r1, r3, #31
 80182de:	d405      	bmi.n	80182ec <_vfiprintf_r+0x220>
 80182e0:	89ab      	ldrh	r3, [r5, #12]
 80182e2:	059a      	lsls	r2, r3, #22
 80182e4:	d402      	bmi.n	80182ec <_vfiprintf_r+0x220>
 80182e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80182e8:	f7fe ff76 	bl	80171d8 <__retarget_lock_release_recursive>
 80182ec:	89ab      	ldrh	r3, [r5, #12]
 80182ee:	065b      	lsls	r3, r3, #25
 80182f0:	f53f af12 	bmi.w	8018118 <_vfiprintf_r+0x4c>
 80182f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80182f6:	e711      	b.n	801811c <_vfiprintf_r+0x50>
 80182f8:	ab03      	add	r3, sp, #12
 80182fa:	9300      	str	r3, [sp, #0]
 80182fc:	462a      	mov	r2, r5
 80182fe:	4b09      	ldr	r3, [pc, #36]	; (8018324 <_vfiprintf_r+0x258>)
 8018300:	a904      	add	r1, sp, #16
 8018302:	4630      	mov	r0, r6
 8018304:	f7fb ff9c 	bl	8014240 <_printf_i>
 8018308:	e7e4      	b.n	80182d4 <_vfiprintf_r+0x208>
 801830a:	bf00      	nop
 801830c:	0801a3d8 	.word	0x0801a3d8
 8018310:	0801a3f8 	.word	0x0801a3f8
 8018314:	0801a3b8 	.word	0x0801a3b8
 8018318:	0801a5f4 	.word	0x0801a5f4
 801831c:	0801a5fe 	.word	0x0801a5fe
 8018320:	08013cf9 	.word	0x08013cf9
 8018324:	080180a7 	.word	0x080180a7
 8018328:	0801a5fa 	.word	0x0801a5fa
 801832c:	00000000 	.word	0x00000000

08018330 <nan>:
 8018330:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018338 <nan+0x8>
 8018334:	4770      	bx	lr
 8018336:	bf00      	nop
 8018338:	00000000 	.word	0x00000000
 801833c:	7ff80000 	.word	0x7ff80000

08018340 <_sbrk_r>:
 8018340:	b538      	push	{r3, r4, r5, lr}
 8018342:	4d06      	ldr	r5, [pc, #24]	; (801835c <_sbrk_r+0x1c>)
 8018344:	2300      	movs	r3, #0
 8018346:	4604      	mov	r4, r0
 8018348:	4608      	mov	r0, r1
 801834a:	602b      	str	r3, [r5, #0]
 801834c:	f7ec fc14 	bl	8004b78 <_sbrk>
 8018350:	1c43      	adds	r3, r0, #1
 8018352:	d102      	bne.n	801835a <_sbrk_r+0x1a>
 8018354:	682b      	ldr	r3, [r5, #0]
 8018356:	b103      	cbz	r3, 801835a <_sbrk_r+0x1a>
 8018358:	6023      	str	r3, [r4, #0]
 801835a:	bd38      	pop	{r3, r4, r5, pc}
 801835c:	20003538 	.word	0x20003538

08018360 <__sread>:
 8018360:	b510      	push	{r4, lr}
 8018362:	460c      	mov	r4, r1
 8018364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018368:	f000 f91c 	bl	80185a4 <_read_r>
 801836c:	2800      	cmp	r0, #0
 801836e:	bfab      	itete	ge
 8018370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018372:	89a3      	ldrhlt	r3, [r4, #12]
 8018374:	181b      	addge	r3, r3, r0
 8018376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801837a:	bfac      	ite	ge
 801837c:	6563      	strge	r3, [r4, #84]	; 0x54
 801837e:	81a3      	strhlt	r3, [r4, #12]
 8018380:	bd10      	pop	{r4, pc}

08018382 <__swrite>:
 8018382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018386:	461f      	mov	r7, r3
 8018388:	898b      	ldrh	r3, [r1, #12]
 801838a:	05db      	lsls	r3, r3, #23
 801838c:	4605      	mov	r5, r0
 801838e:	460c      	mov	r4, r1
 8018390:	4616      	mov	r6, r2
 8018392:	d505      	bpl.n	80183a0 <__swrite+0x1e>
 8018394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018398:	2302      	movs	r3, #2
 801839a:	2200      	movs	r2, #0
 801839c:	f000 f8a4 	bl	80184e8 <_lseek_r>
 80183a0:	89a3      	ldrh	r3, [r4, #12]
 80183a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80183aa:	81a3      	strh	r3, [r4, #12]
 80183ac:	4632      	mov	r2, r6
 80183ae:	463b      	mov	r3, r7
 80183b0:	4628      	mov	r0, r5
 80183b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183b6:	f000 b823 	b.w	8018400 <_write_r>

080183ba <__sseek>:
 80183ba:	b510      	push	{r4, lr}
 80183bc:	460c      	mov	r4, r1
 80183be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183c2:	f000 f891 	bl	80184e8 <_lseek_r>
 80183c6:	1c43      	adds	r3, r0, #1
 80183c8:	89a3      	ldrh	r3, [r4, #12]
 80183ca:	bf15      	itete	ne
 80183cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80183ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80183d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80183d6:	81a3      	strheq	r3, [r4, #12]
 80183d8:	bf18      	it	ne
 80183da:	81a3      	strhne	r3, [r4, #12]
 80183dc:	bd10      	pop	{r4, pc}

080183de <__sclose>:
 80183de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183e2:	f000 b83d 	b.w	8018460 <_close_r>

080183e6 <__ascii_wctomb>:
 80183e6:	b149      	cbz	r1, 80183fc <__ascii_wctomb+0x16>
 80183e8:	2aff      	cmp	r2, #255	; 0xff
 80183ea:	bf85      	ittet	hi
 80183ec:	238a      	movhi	r3, #138	; 0x8a
 80183ee:	6003      	strhi	r3, [r0, #0]
 80183f0:	700a      	strbls	r2, [r1, #0]
 80183f2:	f04f 30ff 	movhi.w	r0, #4294967295
 80183f6:	bf98      	it	ls
 80183f8:	2001      	movls	r0, #1
 80183fa:	4770      	bx	lr
 80183fc:	4608      	mov	r0, r1
 80183fe:	4770      	bx	lr

08018400 <_write_r>:
 8018400:	b538      	push	{r3, r4, r5, lr}
 8018402:	4d07      	ldr	r5, [pc, #28]	; (8018420 <_write_r+0x20>)
 8018404:	4604      	mov	r4, r0
 8018406:	4608      	mov	r0, r1
 8018408:	4611      	mov	r1, r2
 801840a:	2200      	movs	r2, #0
 801840c:	602a      	str	r2, [r5, #0]
 801840e:	461a      	mov	r2, r3
 8018410:	f7eb fafa 	bl	8003a08 <_write>
 8018414:	1c43      	adds	r3, r0, #1
 8018416:	d102      	bne.n	801841e <_write_r+0x1e>
 8018418:	682b      	ldr	r3, [r5, #0]
 801841a:	b103      	cbz	r3, 801841e <_write_r+0x1e>
 801841c:	6023      	str	r3, [r4, #0]
 801841e:	bd38      	pop	{r3, r4, r5, pc}
 8018420:	20003538 	.word	0x20003538

08018424 <__assert_func>:
 8018424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018426:	4614      	mov	r4, r2
 8018428:	461a      	mov	r2, r3
 801842a:	4b09      	ldr	r3, [pc, #36]	; (8018450 <__assert_func+0x2c>)
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	4605      	mov	r5, r0
 8018430:	68d8      	ldr	r0, [r3, #12]
 8018432:	b14c      	cbz	r4, 8018448 <__assert_func+0x24>
 8018434:	4b07      	ldr	r3, [pc, #28]	; (8018454 <__assert_func+0x30>)
 8018436:	9100      	str	r1, [sp, #0]
 8018438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801843c:	4906      	ldr	r1, [pc, #24]	; (8018458 <__assert_func+0x34>)
 801843e:	462b      	mov	r3, r5
 8018440:	f000 f81e 	bl	8018480 <fiprintf>
 8018444:	f000 f8c0 	bl	80185c8 <abort>
 8018448:	4b04      	ldr	r3, [pc, #16]	; (801845c <__assert_func+0x38>)
 801844a:	461c      	mov	r4, r3
 801844c:	e7f3      	b.n	8018436 <__assert_func+0x12>
 801844e:	bf00      	nop
 8018450:	20000180 	.word	0x20000180
 8018454:	0801a605 	.word	0x0801a605
 8018458:	0801a612 	.word	0x0801a612
 801845c:	0801a640 	.word	0x0801a640

08018460 <_close_r>:
 8018460:	b538      	push	{r3, r4, r5, lr}
 8018462:	4d06      	ldr	r5, [pc, #24]	; (801847c <_close_r+0x1c>)
 8018464:	2300      	movs	r3, #0
 8018466:	4604      	mov	r4, r0
 8018468:	4608      	mov	r0, r1
 801846a:	602b      	str	r3, [r5, #0]
 801846c:	f7ec fb4f 	bl	8004b0e <_close>
 8018470:	1c43      	adds	r3, r0, #1
 8018472:	d102      	bne.n	801847a <_close_r+0x1a>
 8018474:	682b      	ldr	r3, [r5, #0]
 8018476:	b103      	cbz	r3, 801847a <_close_r+0x1a>
 8018478:	6023      	str	r3, [r4, #0]
 801847a:	bd38      	pop	{r3, r4, r5, pc}
 801847c:	20003538 	.word	0x20003538

08018480 <fiprintf>:
 8018480:	b40e      	push	{r1, r2, r3}
 8018482:	b503      	push	{r0, r1, lr}
 8018484:	4601      	mov	r1, r0
 8018486:	ab03      	add	r3, sp, #12
 8018488:	4805      	ldr	r0, [pc, #20]	; (80184a0 <fiprintf+0x20>)
 801848a:	f853 2b04 	ldr.w	r2, [r3], #4
 801848e:	6800      	ldr	r0, [r0, #0]
 8018490:	9301      	str	r3, [sp, #4]
 8018492:	f7ff fe1b 	bl	80180cc <_vfiprintf_r>
 8018496:	b002      	add	sp, #8
 8018498:	f85d eb04 	ldr.w	lr, [sp], #4
 801849c:	b003      	add	sp, #12
 801849e:	4770      	bx	lr
 80184a0:	20000180 	.word	0x20000180

080184a4 <_fstat_r>:
 80184a4:	b538      	push	{r3, r4, r5, lr}
 80184a6:	4d07      	ldr	r5, [pc, #28]	; (80184c4 <_fstat_r+0x20>)
 80184a8:	2300      	movs	r3, #0
 80184aa:	4604      	mov	r4, r0
 80184ac:	4608      	mov	r0, r1
 80184ae:	4611      	mov	r1, r2
 80184b0:	602b      	str	r3, [r5, #0]
 80184b2:	f7ec fb38 	bl	8004b26 <_fstat>
 80184b6:	1c43      	adds	r3, r0, #1
 80184b8:	d102      	bne.n	80184c0 <_fstat_r+0x1c>
 80184ba:	682b      	ldr	r3, [r5, #0]
 80184bc:	b103      	cbz	r3, 80184c0 <_fstat_r+0x1c>
 80184be:	6023      	str	r3, [r4, #0]
 80184c0:	bd38      	pop	{r3, r4, r5, pc}
 80184c2:	bf00      	nop
 80184c4:	20003538 	.word	0x20003538

080184c8 <_isatty_r>:
 80184c8:	b538      	push	{r3, r4, r5, lr}
 80184ca:	4d06      	ldr	r5, [pc, #24]	; (80184e4 <_isatty_r+0x1c>)
 80184cc:	2300      	movs	r3, #0
 80184ce:	4604      	mov	r4, r0
 80184d0:	4608      	mov	r0, r1
 80184d2:	602b      	str	r3, [r5, #0]
 80184d4:	f7ec fb37 	bl	8004b46 <_isatty>
 80184d8:	1c43      	adds	r3, r0, #1
 80184da:	d102      	bne.n	80184e2 <_isatty_r+0x1a>
 80184dc:	682b      	ldr	r3, [r5, #0]
 80184de:	b103      	cbz	r3, 80184e2 <_isatty_r+0x1a>
 80184e0:	6023      	str	r3, [r4, #0]
 80184e2:	bd38      	pop	{r3, r4, r5, pc}
 80184e4:	20003538 	.word	0x20003538

080184e8 <_lseek_r>:
 80184e8:	b538      	push	{r3, r4, r5, lr}
 80184ea:	4d07      	ldr	r5, [pc, #28]	; (8018508 <_lseek_r+0x20>)
 80184ec:	4604      	mov	r4, r0
 80184ee:	4608      	mov	r0, r1
 80184f0:	4611      	mov	r1, r2
 80184f2:	2200      	movs	r2, #0
 80184f4:	602a      	str	r2, [r5, #0]
 80184f6:	461a      	mov	r2, r3
 80184f8:	f7ec fb30 	bl	8004b5c <_lseek>
 80184fc:	1c43      	adds	r3, r0, #1
 80184fe:	d102      	bne.n	8018506 <_lseek_r+0x1e>
 8018500:	682b      	ldr	r3, [r5, #0]
 8018502:	b103      	cbz	r3, 8018506 <_lseek_r+0x1e>
 8018504:	6023      	str	r3, [r4, #0]
 8018506:	bd38      	pop	{r3, r4, r5, pc}
 8018508:	20003538 	.word	0x20003538

0801850c <memmove>:
 801850c:	4288      	cmp	r0, r1
 801850e:	b510      	push	{r4, lr}
 8018510:	eb01 0402 	add.w	r4, r1, r2
 8018514:	d902      	bls.n	801851c <memmove+0x10>
 8018516:	4284      	cmp	r4, r0
 8018518:	4623      	mov	r3, r4
 801851a:	d807      	bhi.n	801852c <memmove+0x20>
 801851c:	1e43      	subs	r3, r0, #1
 801851e:	42a1      	cmp	r1, r4
 8018520:	d008      	beq.n	8018534 <memmove+0x28>
 8018522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018526:	f803 2f01 	strb.w	r2, [r3, #1]!
 801852a:	e7f8      	b.n	801851e <memmove+0x12>
 801852c:	4402      	add	r2, r0
 801852e:	4601      	mov	r1, r0
 8018530:	428a      	cmp	r2, r1
 8018532:	d100      	bne.n	8018536 <memmove+0x2a>
 8018534:	bd10      	pop	{r4, pc}
 8018536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801853a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801853e:	e7f7      	b.n	8018530 <memmove+0x24>

08018540 <__malloc_lock>:
 8018540:	4801      	ldr	r0, [pc, #4]	; (8018548 <__malloc_lock+0x8>)
 8018542:	f7fe be48 	b.w	80171d6 <__retarget_lock_acquire_recursive>
 8018546:	bf00      	nop
 8018548:	20003530 	.word	0x20003530

0801854c <__malloc_unlock>:
 801854c:	4801      	ldr	r0, [pc, #4]	; (8018554 <__malloc_unlock+0x8>)
 801854e:	f7fe be43 	b.w	80171d8 <__retarget_lock_release_recursive>
 8018552:	bf00      	nop
 8018554:	20003530 	.word	0x20003530

08018558 <_realloc_r>:
 8018558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801855a:	4607      	mov	r7, r0
 801855c:	4614      	mov	r4, r2
 801855e:	460e      	mov	r6, r1
 8018560:	b921      	cbnz	r1, 801856c <_realloc_r+0x14>
 8018562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018566:	4611      	mov	r1, r2
 8018568:	f7ff bbd0 	b.w	8017d0c <_malloc_r>
 801856c:	b922      	cbnz	r2, 8018578 <_realloc_r+0x20>
 801856e:	f7ff fb7d 	bl	8017c6c <_free_r>
 8018572:	4625      	mov	r5, r4
 8018574:	4628      	mov	r0, r5
 8018576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018578:	f000 f82d 	bl	80185d6 <_malloc_usable_size_r>
 801857c:	42a0      	cmp	r0, r4
 801857e:	d20f      	bcs.n	80185a0 <_realloc_r+0x48>
 8018580:	4621      	mov	r1, r4
 8018582:	4638      	mov	r0, r7
 8018584:	f7ff fbc2 	bl	8017d0c <_malloc_r>
 8018588:	4605      	mov	r5, r0
 801858a:	2800      	cmp	r0, #0
 801858c:	d0f2      	beq.n	8018574 <_realloc_r+0x1c>
 801858e:	4631      	mov	r1, r6
 8018590:	4622      	mov	r2, r4
 8018592:	f7fb fafb 	bl	8013b8c <memcpy>
 8018596:	4631      	mov	r1, r6
 8018598:	4638      	mov	r0, r7
 801859a:	f7ff fb67 	bl	8017c6c <_free_r>
 801859e:	e7e9      	b.n	8018574 <_realloc_r+0x1c>
 80185a0:	4635      	mov	r5, r6
 80185a2:	e7e7      	b.n	8018574 <_realloc_r+0x1c>

080185a4 <_read_r>:
 80185a4:	b538      	push	{r3, r4, r5, lr}
 80185a6:	4d07      	ldr	r5, [pc, #28]	; (80185c4 <_read_r+0x20>)
 80185a8:	4604      	mov	r4, r0
 80185aa:	4608      	mov	r0, r1
 80185ac:	4611      	mov	r1, r2
 80185ae:	2200      	movs	r2, #0
 80185b0:	602a      	str	r2, [r5, #0]
 80185b2:	461a      	mov	r2, r3
 80185b4:	f7ec fa8e 	bl	8004ad4 <_read>
 80185b8:	1c43      	adds	r3, r0, #1
 80185ba:	d102      	bne.n	80185c2 <_read_r+0x1e>
 80185bc:	682b      	ldr	r3, [r5, #0]
 80185be:	b103      	cbz	r3, 80185c2 <_read_r+0x1e>
 80185c0:	6023      	str	r3, [r4, #0]
 80185c2:	bd38      	pop	{r3, r4, r5, pc}
 80185c4:	20003538 	.word	0x20003538

080185c8 <abort>:
 80185c8:	b508      	push	{r3, lr}
 80185ca:	2006      	movs	r0, #6
 80185cc:	f000 f834 	bl	8018638 <raise>
 80185d0:	2001      	movs	r0, #1
 80185d2:	f7ec fa75 	bl	8004ac0 <_exit>

080185d6 <_malloc_usable_size_r>:
 80185d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185da:	1f18      	subs	r0, r3, #4
 80185dc:	2b00      	cmp	r3, #0
 80185de:	bfbc      	itt	lt
 80185e0:	580b      	ldrlt	r3, [r1, r0]
 80185e2:	18c0      	addlt	r0, r0, r3
 80185e4:	4770      	bx	lr

080185e6 <_raise_r>:
 80185e6:	291f      	cmp	r1, #31
 80185e8:	b538      	push	{r3, r4, r5, lr}
 80185ea:	4604      	mov	r4, r0
 80185ec:	460d      	mov	r5, r1
 80185ee:	d904      	bls.n	80185fa <_raise_r+0x14>
 80185f0:	2316      	movs	r3, #22
 80185f2:	6003      	str	r3, [r0, #0]
 80185f4:	f04f 30ff 	mov.w	r0, #4294967295
 80185f8:	bd38      	pop	{r3, r4, r5, pc}
 80185fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80185fc:	b112      	cbz	r2, 8018604 <_raise_r+0x1e>
 80185fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018602:	b94b      	cbnz	r3, 8018618 <_raise_r+0x32>
 8018604:	4620      	mov	r0, r4
 8018606:	f000 f831 	bl	801866c <_getpid_r>
 801860a:	462a      	mov	r2, r5
 801860c:	4601      	mov	r1, r0
 801860e:	4620      	mov	r0, r4
 8018610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018614:	f000 b818 	b.w	8018648 <_kill_r>
 8018618:	2b01      	cmp	r3, #1
 801861a:	d00a      	beq.n	8018632 <_raise_r+0x4c>
 801861c:	1c59      	adds	r1, r3, #1
 801861e:	d103      	bne.n	8018628 <_raise_r+0x42>
 8018620:	2316      	movs	r3, #22
 8018622:	6003      	str	r3, [r0, #0]
 8018624:	2001      	movs	r0, #1
 8018626:	e7e7      	b.n	80185f8 <_raise_r+0x12>
 8018628:	2400      	movs	r4, #0
 801862a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801862e:	4628      	mov	r0, r5
 8018630:	4798      	blx	r3
 8018632:	2000      	movs	r0, #0
 8018634:	e7e0      	b.n	80185f8 <_raise_r+0x12>
	...

08018638 <raise>:
 8018638:	4b02      	ldr	r3, [pc, #8]	; (8018644 <raise+0xc>)
 801863a:	4601      	mov	r1, r0
 801863c:	6818      	ldr	r0, [r3, #0]
 801863e:	f7ff bfd2 	b.w	80185e6 <_raise_r>
 8018642:	bf00      	nop
 8018644:	20000180 	.word	0x20000180

08018648 <_kill_r>:
 8018648:	b538      	push	{r3, r4, r5, lr}
 801864a:	4d07      	ldr	r5, [pc, #28]	; (8018668 <_kill_r+0x20>)
 801864c:	2300      	movs	r3, #0
 801864e:	4604      	mov	r4, r0
 8018650:	4608      	mov	r0, r1
 8018652:	4611      	mov	r1, r2
 8018654:	602b      	str	r3, [r5, #0]
 8018656:	f7ec fa23 	bl	8004aa0 <_kill>
 801865a:	1c43      	adds	r3, r0, #1
 801865c:	d102      	bne.n	8018664 <_kill_r+0x1c>
 801865e:	682b      	ldr	r3, [r5, #0]
 8018660:	b103      	cbz	r3, 8018664 <_kill_r+0x1c>
 8018662:	6023      	str	r3, [r4, #0]
 8018664:	bd38      	pop	{r3, r4, r5, pc}
 8018666:	bf00      	nop
 8018668:	20003538 	.word	0x20003538

0801866c <_getpid_r>:
 801866c:	f7ec ba10 	b.w	8004a90 <_getpid>

08018670 <floor>:
 8018670:	ec51 0b10 	vmov	r0, r1, d0
 8018674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018678:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801867c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018680:	2e13      	cmp	r6, #19
 8018682:	ee10 5a10 	vmov	r5, s0
 8018686:	ee10 8a10 	vmov	r8, s0
 801868a:	460c      	mov	r4, r1
 801868c:	dc32      	bgt.n	80186f4 <floor+0x84>
 801868e:	2e00      	cmp	r6, #0
 8018690:	da14      	bge.n	80186bc <floor+0x4c>
 8018692:	a333      	add	r3, pc, #204	; (adr r3, 8018760 <floor+0xf0>)
 8018694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018698:	f7e7 fe08 	bl	80002ac <__adddf3>
 801869c:	2200      	movs	r2, #0
 801869e:	2300      	movs	r3, #0
 80186a0:	f7e8 fa4a 	bl	8000b38 <__aeabi_dcmpgt>
 80186a4:	b138      	cbz	r0, 80186b6 <floor+0x46>
 80186a6:	2c00      	cmp	r4, #0
 80186a8:	da57      	bge.n	801875a <floor+0xea>
 80186aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80186ae:	431d      	orrs	r5, r3
 80186b0:	d001      	beq.n	80186b6 <floor+0x46>
 80186b2:	4c2d      	ldr	r4, [pc, #180]	; (8018768 <floor+0xf8>)
 80186b4:	2500      	movs	r5, #0
 80186b6:	4621      	mov	r1, r4
 80186b8:	4628      	mov	r0, r5
 80186ba:	e025      	b.n	8018708 <floor+0x98>
 80186bc:	4f2b      	ldr	r7, [pc, #172]	; (801876c <floor+0xfc>)
 80186be:	4137      	asrs	r7, r6
 80186c0:	ea01 0307 	and.w	r3, r1, r7
 80186c4:	4303      	orrs	r3, r0
 80186c6:	d01f      	beq.n	8018708 <floor+0x98>
 80186c8:	a325      	add	r3, pc, #148	; (adr r3, 8018760 <floor+0xf0>)
 80186ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186ce:	f7e7 fded 	bl	80002ac <__adddf3>
 80186d2:	2200      	movs	r2, #0
 80186d4:	2300      	movs	r3, #0
 80186d6:	f7e8 fa2f 	bl	8000b38 <__aeabi_dcmpgt>
 80186da:	2800      	cmp	r0, #0
 80186dc:	d0eb      	beq.n	80186b6 <floor+0x46>
 80186de:	2c00      	cmp	r4, #0
 80186e0:	bfbe      	ittt	lt
 80186e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80186e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80186ea:	19a4      	addlt	r4, r4, r6
 80186ec:	ea24 0407 	bic.w	r4, r4, r7
 80186f0:	2500      	movs	r5, #0
 80186f2:	e7e0      	b.n	80186b6 <floor+0x46>
 80186f4:	2e33      	cmp	r6, #51	; 0x33
 80186f6:	dd0b      	ble.n	8018710 <floor+0xa0>
 80186f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80186fc:	d104      	bne.n	8018708 <floor+0x98>
 80186fe:	ee10 2a10 	vmov	r2, s0
 8018702:	460b      	mov	r3, r1
 8018704:	f7e7 fdd2 	bl	80002ac <__adddf3>
 8018708:	ec41 0b10 	vmov	d0, r0, r1
 801870c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018710:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018714:	f04f 33ff 	mov.w	r3, #4294967295
 8018718:	fa23 f707 	lsr.w	r7, r3, r7
 801871c:	4207      	tst	r7, r0
 801871e:	d0f3      	beq.n	8018708 <floor+0x98>
 8018720:	a30f      	add	r3, pc, #60	; (adr r3, 8018760 <floor+0xf0>)
 8018722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018726:	f7e7 fdc1 	bl	80002ac <__adddf3>
 801872a:	2200      	movs	r2, #0
 801872c:	2300      	movs	r3, #0
 801872e:	f7e8 fa03 	bl	8000b38 <__aeabi_dcmpgt>
 8018732:	2800      	cmp	r0, #0
 8018734:	d0bf      	beq.n	80186b6 <floor+0x46>
 8018736:	2c00      	cmp	r4, #0
 8018738:	da02      	bge.n	8018740 <floor+0xd0>
 801873a:	2e14      	cmp	r6, #20
 801873c:	d103      	bne.n	8018746 <floor+0xd6>
 801873e:	3401      	adds	r4, #1
 8018740:	ea25 0507 	bic.w	r5, r5, r7
 8018744:	e7b7      	b.n	80186b6 <floor+0x46>
 8018746:	2301      	movs	r3, #1
 8018748:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801874c:	fa03 f606 	lsl.w	r6, r3, r6
 8018750:	4435      	add	r5, r6
 8018752:	4545      	cmp	r5, r8
 8018754:	bf38      	it	cc
 8018756:	18e4      	addcc	r4, r4, r3
 8018758:	e7f2      	b.n	8018740 <floor+0xd0>
 801875a:	2500      	movs	r5, #0
 801875c:	462c      	mov	r4, r5
 801875e:	e7aa      	b.n	80186b6 <floor+0x46>
 8018760:	8800759c 	.word	0x8800759c
 8018764:	7e37e43c 	.word	0x7e37e43c
 8018768:	bff00000 	.word	0xbff00000
 801876c:	000fffff 	.word	0x000fffff

08018770 <pow>:
 8018770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018774:	ec59 8b10 	vmov	r8, r9, d0
 8018778:	ec57 6b11 	vmov	r6, r7, d1
 801877c:	f000 f8a8 	bl	80188d0 <__ieee754_pow>
 8018780:	4b4e      	ldr	r3, [pc, #312]	; (80188bc <pow+0x14c>)
 8018782:	f993 3000 	ldrsb.w	r3, [r3]
 8018786:	3301      	adds	r3, #1
 8018788:	ec55 4b10 	vmov	r4, r5, d0
 801878c:	d015      	beq.n	80187ba <pow+0x4a>
 801878e:	4632      	mov	r2, r6
 8018790:	463b      	mov	r3, r7
 8018792:	4630      	mov	r0, r6
 8018794:	4639      	mov	r1, r7
 8018796:	f7e8 f9d9 	bl	8000b4c <__aeabi_dcmpun>
 801879a:	b970      	cbnz	r0, 80187ba <pow+0x4a>
 801879c:	4642      	mov	r2, r8
 801879e:	464b      	mov	r3, r9
 80187a0:	4640      	mov	r0, r8
 80187a2:	4649      	mov	r1, r9
 80187a4:	f7e8 f9d2 	bl	8000b4c <__aeabi_dcmpun>
 80187a8:	2200      	movs	r2, #0
 80187aa:	2300      	movs	r3, #0
 80187ac:	b148      	cbz	r0, 80187c2 <pow+0x52>
 80187ae:	4630      	mov	r0, r6
 80187b0:	4639      	mov	r1, r7
 80187b2:	f7e8 f999 	bl	8000ae8 <__aeabi_dcmpeq>
 80187b6:	2800      	cmp	r0, #0
 80187b8:	d17d      	bne.n	80188b6 <pow+0x146>
 80187ba:	ec45 4b10 	vmov	d0, r4, r5
 80187be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187c2:	4640      	mov	r0, r8
 80187c4:	4649      	mov	r1, r9
 80187c6:	f7e8 f98f 	bl	8000ae8 <__aeabi_dcmpeq>
 80187ca:	b1e0      	cbz	r0, 8018806 <pow+0x96>
 80187cc:	2200      	movs	r2, #0
 80187ce:	2300      	movs	r3, #0
 80187d0:	4630      	mov	r0, r6
 80187d2:	4639      	mov	r1, r7
 80187d4:	f7e8 f988 	bl	8000ae8 <__aeabi_dcmpeq>
 80187d8:	2800      	cmp	r0, #0
 80187da:	d16c      	bne.n	80188b6 <pow+0x146>
 80187dc:	ec47 6b10 	vmov	d0, r6, r7
 80187e0:	f000 fe55 	bl	801948e <finite>
 80187e4:	2800      	cmp	r0, #0
 80187e6:	d0e8      	beq.n	80187ba <pow+0x4a>
 80187e8:	2200      	movs	r2, #0
 80187ea:	2300      	movs	r3, #0
 80187ec:	4630      	mov	r0, r6
 80187ee:	4639      	mov	r1, r7
 80187f0:	f7e8 f984 	bl	8000afc <__aeabi_dcmplt>
 80187f4:	2800      	cmp	r0, #0
 80187f6:	d0e0      	beq.n	80187ba <pow+0x4a>
 80187f8:	f7fb f99e 	bl	8013b38 <__errno>
 80187fc:	2321      	movs	r3, #33	; 0x21
 80187fe:	6003      	str	r3, [r0, #0]
 8018800:	2400      	movs	r4, #0
 8018802:	4d2f      	ldr	r5, [pc, #188]	; (80188c0 <pow+0x150>)
 8018804:	e7d9      	b.n	80187ba <pow+0x4a>
 8018806:	ec45 4b10 	vmov	d0, r4, r5
 801880a:	f000 fe40 	bl	801948e <finite>
 801880e:	bbb8      	cbnz	r0, 8018880 <pow+0x110>
 8018810:	ec49 8b10 	vmov	d0, r8, r9
 8018814:	f000 fe3b 	bl	801948e <finite>
 8018818:	b390      	cbz	r0, 8018880 <pow+0x110>
 801881a:	ec47 6b10 	vmov	d0, r6, r7
 801881e:	f000 fe36 	bl	801948e <finite>
 8018822:	b368      	cbz	r0, 8018880 <pow+0x110>
 8018824:	4622      	mov	r2, r4
 8018826:	462b      	mov	r3, r5
 8018828:	4620      	mov	r0, r4
 801882a:	4629      	mov	r1, r5
 801882c:	f7e8 f98e 	bl	8000b4c <__aeabi_dcmpun>
 8018830:	b160      	cbz	r0, 801884c <pow+0xdc>
 8018832:	f7fb f981 	bl	8013b38 <__errno>
 8018836:	2321      	movs	r3, #33	; 0x21
 8018838:	6003      	str	r3, [r0, #0]
 801883a:	2200      	movs	r2, #0
 801883c:	2300      	movs	r3, #0
 801883e:	4610      	mov	r0, r2
 8018840:	4619      	mov	r1, r3
 8018842:	f7e8 f813 	bl	800086c <__aeabi_ddiv>
 8018846:	4604      	mov	r4, r0
 8018848:	460d      	mov	r5, r1
 801884a:	e7b6      	b.n	80187ba <pow+0x4a>
 801884c:	f7fb f974 	bl	8013b38 <__errno>
 8018850:	2322      	movs	r3, #34	; 0x22
 8018852:	6003      	str	r3, [r0, #0]
 8018854:	2200      	movs	r2, #0
 8018856:	2300      	movs	r3, #0
 8018858:	4640      	mov	r0, r8
 801885a:	4649      	mov	r1, r9
 801885c:	f7e8 f94e 	bl	8000afc <__aeabi_dcmplt>
 8018860:	2400      	movs	r4, #0
 8018862:	b158      	cbz	r0, 801887c <pow+0x10c>
 8018864:	ec47 6b10 	vmov	d0, r6, r7
 8018868:	f000 fe1c 	bl	80194a4 <rint>
 801886c:	4632      	mov	r2, r6
 801886e:	ec51 0b10 	vmov	r0, r1, d0
 8018872:	463b      	mov	r3, r7
 8018874:	f7e8 f938 	bl	8000ae8 <__aeabi_dcmpeq>
 8018878:	2800      	cmp	r0, #0
 801887a:	d0c2      	beq.n	8018802 <pow+0x92>
 801887c:	4d11      	ldr	r5, [pc, #68]	; (80188c4 <pow+0x154>)
 801887e:	e79c      	b.n	80187ba <pow+0x4a>
 8018880:	2200      	movs	r2, #0
 8018882:	2300      	movs	r3, #0
 8018884:	4620      	mov	r0, r4
 8018886:	4629      	mov	r1, r5
 8018888:	f7e8 f92e 	bl	8000ae8 <__aeabi_dcmpeq>
 801888c:	2800      	cmp	r0, #0
 801888e:	d094      	beq.n	80187ba <pow+0x4a>
 8018890:	ec49 8b10 	vmov	d0, r8, r9
 8018894:	f000 fdfb 	bl	801948e <finite>
 8018898:	2800      	cmp	r0, #0
 801889a:	d08e      	beq.n	80187ba <pow+0x4a>
 801889c:	ec47 6b10 	vmov	d0, r6, r7
 80188a0:	f000 fdf5 	bl	801948e <finite>
 80188a4:	2800      	cmp	r0, #0
 80188a6:	d088      	beq.n	80187ba <pow+0x4a>
 80188a8:	f7fb f946 	bl	8013b38 <__errno>
 80188ac:	2322      	movs	r3, #34	; 0x22
 80188ae:	6003      	str	r3, [r0, #0]
 80188b0:	2400      	movs	r4, #0
 80188b2:	2500      	movs	r5, #0
 80188b4:	e781      	b.n	80187ba <pow+0x4a>
 80188b6:	4d04      	ldr	r5, [pc, #16]	; (80188c8 <pow+0x158>)
 80188b8:	2400      	movs	r4, #0
 80188ba:	e77e      	b.n	80187ba <pow+0x4a>
 80188bc:	20000354 	.word	0x20000354
 80188c0:	fff00000 	.word	0xfff00000
 80188c4:	7ff00000 	.word	0x7ff00000
 80188c8:	3ff00000 	.word	0x3ff00000
 80188cc:	00000000 	.word	0x00000000

080188d0 <__ieee754_pow>:
 80188d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d4:	ed2d 8b06 	vpush	{d8-d10}
 80188d8:	b08d      	sub	sp, #52	; 0x34
 80188da:	ed8d 1b02 	vstr	d1, [sp, #8]
 80188de:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80188e2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80188e6:	ea56 0100 	orrs.w	r1, r6, r0
 80188ea:	ec53 2b10 	vmov	r2, r3, d0
 80188ee:	f000 84d1 	beq.w	8019294 <__ieee754_pow+0x9c4>
 80188f2:	497f      	ldr	r1, [pc, #508]	; (8018af0 <__ieee754_pow+0x220>)
 80188f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80188f8:	428c      	cmp	r4, r1
 80188fa:	ee10 8a10 	vmov	r8, s0
 80188fe:	4699      	mov	r9, r3
 8018900:	dc09      	bgt.n	8018916 <__ieee754_pow+0x46>
 8018902:	d103      	bne.n	801890c <__ieee754_pow+0x3c>
 8018904:	b97a      	cbnz	r2, 8018926 <__ieee754_pow+0x56>
 8018906:	42a6      	cmp	r6, r4
 8018908:	dd02      	ble.n	8018910 <__ieee754_pow+0x40>
 801890a:	e00c      	b.n	8018926 <__ieee754_pow+0x56>
 801890c:	428e      	cmp	r6, r1
 801890e:	dc02      	bgt.n	8018916 <__ieee754_pow+0x46>
 8018910:	428e      	cmp	r6, r1
 8018912:	d110      	bne.n	8018936 <__ieee754_pow+0x66>
 8018914:	b178      	cbz	r0, 8018936 <__ieee754_pow+0x66>
 8018916:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801891a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801891e:	ea54 0308 	orrs.w	r3, r4, r8
 8018922:	f000 84b7 	beq.w	8019294 <__ieee754_pow+0x9c4>
 8018926:	4873      	ldr	r0, [pc, #460]	; (8018af4 <__ieee754_pow+0x224>)
 8018928:	b00d      	add	sp, #52	; 0x34
 801892a:	ecbd 8b06 	vpop	{d8-d10}
 801892e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018932:	f7ff bcfd 	b.w	8018330 <nan>
 8018936:	f1b9 0f00 	cmp.w	r9, #0
 801893a:	da36      	bge.n	80189aa <__ieee754_pow+0xda>
 801893c:	496e      	ldr	r1, [pc, #440]	; (8018af8 <__ieee754_pow+0x228>)
 801893e:	428e      	cmp	r6, r1
 8018940:	dc51      	bgt.n	80189e6 <__ieee754_pow+0x116>
 8018942:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8018946:	428e      	cmp	r6, r1
 8018948:	f340 84af 	ble.w	80192aa <__ieee754_pow+0x9da>
 801894c:	1531      	asrs	r1, r6, #20
 801894e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018952:	2914      	cmp	r1, #20
 8018954:	dd0f      	ble.n	8018976 <__ieee754_pow+0xa6>
 8018956:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801895a:	fa20 fc01 	lsr.w	ip, r0, r1
 801895e:	fa0c f101 	lsl.w	r1, ip, r1
 8018962:	4281      	cmp	r1, r0
 8018964:	f040 84a1 	bne.w	80192aa <__ieee754_pow+0x9da>
 8018968:	f00c 0c01 	and.w	ip, ip, #1
 801896c:	f1cc 0102 	rsb	r1, ip, #2
 8018970:	9100      	str	r1, [sp, #0]
 8018972:	b180      	cbz	r0, 8018996 <__ieee754_pow+0xc6>
 8018974:	e059      	b.n	8018a2a <__ieee754_pow+0x15a>
 8018976:	2800      	cmp	r0, #0
 8018978:	d155      	bne.n	8018a26 <__ieee754_pow+0x156>
 801897a:	f1c1 0114 	rsb	r1, r1, #20
 801897e:	fa46 fc01 	asr.w	ip, r6, r1
 8018982:	fa0c f101 	lsl.w	r1, ip, r1
 8018986:	42b1      	cmp	r1, r6
 8018988:	f040 848c 	bne.w	80192a4 <__ieee754_pow+0x9d4>
 801898c:	f00c 0c01 	and.w	ip, ip, #1
 8018990:	f1cc 0102 	rsb	r1, ip, #2
 8018994:	9100      	str	r1, [sp, #0]
 8018996:	4959      	ldr	r1, [pc, #356]	; (8018afc <__ieee754_pow+0x22c>)
 8018998:	428e      	cmp	r6, r1
 801899a:	d12d      	bne.n	80189f8 <__ieee754_pow+0x128>
 801899c:	2f00      	cmp	r7, #0
 801899e:	da79      	bge.n	8018a94 <__ieee754_pow+0x1c4>
 80189a0:	4956      	ldr	r1, [pc, #344]	; (8018afc <__ieee754_pow+0x22c>)
 80189a2:	2000      	movs	r0, #0
 80189a4:	f7e7 ff62 	bl	800086c <__aeabi_ddiv>
 80189a8:	e016      	b.n	80189d8 <__ieee754_pow+0x108>
 80189aa:	2100      	movs	r1, #0
 80189ac:	9100      	str	r1, [sp, #0]
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d13b      	bne.n	8018a2a <__ieee754_pow+0x15a>
 80189b2:	494f      	ldr	r1, [pc, #316]	; (8018af0 <__ieee754_pow+0x220>)
 80189b4:	428e      	cmp	r6, r1
 80189b6:	d1ee      	bne.n	8018996 <__ieee754_pow+0xc6>
 80189b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80189bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80189c0:	ea53 0308 	orrs.w	r3, r3, r8
 80189c4:	f000 8466 	beq.w	8019294 <__ieee754_pow+0x9c4>
 80189c8:	4b4d      	ldr	r3, [pc, #308]	; (8018b00 <__ieee754_pow+0x230>)
 80189ca:	429c      	cmp	r4, r3
 80189cc:	dd0d      	ble.n	80189ea <__ieee754_pow+0x11a>
 80189ce:	2f00      	cmp	r7, #0
 80189d0:	f280 8464 	bge.w	801929c <__ieee754_pow+0x9cc>
 80189d4:	2000      	movs	r0, #0
 80189d6:	2100      	movs	r1, #0
 80189d8:	ec41 0b10 	vmov	d0, r0, r1
 80189dc:	b00d      	add	sp, #52	; 0x34
 80189de:	ecbd 8b06 	vpop	{d8-d10}
 80189e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e6:	2102      	movs	r1, #2
 80189e8:	e7e0      	b.n	80189ac <__ieee754_pow+0xdc>
 80189ea:	2f00      	cmp	r7, #0
 80189ec:	daf2      	bge.n	80189d4 <__ieee754_pow+0x104>
 80189ee:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80189f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80189f6:	e7ef      	b.n	80189d8 <__ieee754_pow+0x108>
 80189f8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80189fc:	d104      	bne.n	8018a08 <__ieee754_pow+0x138>
 80189fe:	4610      	mov	r0, r2
 8018a00:	4619      	mov	r1, r3
 8018a02:	f7e7 fe09 	bl	8000618 <__aeabi_dmul>
 8018a06:	e7e7      	b.n	80189d8 <__ieee754_pow+0x108>
 8018a08:	493e      	ldr	r1, [pc, #248]	; (8018b04 <__ieee754_pow+0x234>)
 8018a0a:	428f      	cmp	r7, r1
 8018a0c:	d10d      	bne.n	8018a2a <__ieee754_pow+0x15a>
 8018a0e:	f1b9 0f00 	cmp.w	r9, #0
 8018a12:	db0a      	blt.n	8018a2a <__ieee754_pow+0x15a>
 8018a14:	ec43 2b10 	vmov	d0, r2, r3
 8018a18:	b00d      	add	sp, #52	; 0x34
 8018a1a:	ecbd 8b06 	vpop	{d8-d10}
 8018a1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a22:	f000 bc77 	b.w	8019314 <__ieee754_sqrt>
 8018a26:	2100      	movs	r1, #0
 8018a28:	9100      	str	r1, [sp, #0]
 8018a2a:	ec43 2b10 	vmov	d0, r2, r3
 8018a2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018a32:	f000 fd23 	bl	801947c <fabs>
 8018a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018a3a:	ec51 0b10 	vmov	r0, r1, d0
 8018a3e:	f1b8 0f00 	cmp.w	r8, #0
 8018a42:	d12a      	bne.n	8018a9a <__ieee754_pow+0x1ca>
 8018a44:	b12c      	cbz	r4, 8018a52 <__ieee754_pow+0x182>
 8018a46:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8018afc <__ieee754_pow+0x22c>
 8018a4a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8018a4e:	45e6      	cmp	lr, ip
 8018a50:	d123      	bne.n	8018a9a <__ieee754_pow+0x1ca>
 8018a52:	2f00      	cmp	r7, #0
 8018a54:	da05      	bge.n	8018a62 <__ieee754_pow+0x192>
 8018a56:	4602      	mov	r2, r0
 8018a58:	460b      	mov	r3, r1
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	4927      	ldr	r1, [pc, #156]	; (8018afc <__ieee754_pow+0x22c>)
 8018a5e:	f7e7 ff05 	bl	800086c <__aeabi_ddiv>
 8018a62:	f1b9 0f00 	cmp.w	r9, #0
 8018a66:	dab7      	bge.n	80189d8 <__ieee754_pow+0x108>
 8018a68:	9b00      	ldr	r3, [sp, #0]
 8018a6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018a6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018a72:	4323      	orrs	r3, r4
 8018a74:	d108      	bne.n	8018a88 <__ieee754_pow+0x1b8>
 8018a76:	4602      	mov	r2, r0
 8018a78:	460b      	mov	r3, r1
 8018a7a:	4610      	mov	r0, r2
 8018a7c:	4619      	mov	r1, r3
 8018a7e:	f7e7 fc13 	bl	80002a8 <__aeabi_dsub>
 8018a82:	4602      	mov	r2, r0
 8018a84:	460b      	mov	r3, r1
 8018a86:	e78d      	b.n	80189a4 <__ieee754_pow+0xd4>
 8018a88:	9b00      	ldr	r3, [sp, #0]
 8018a8a:	2b01      	cmp	r3, #1
 8018a8c:	d1a4      	bne.n	80189d8 <__ieee754_pow+0x108>
 8018a8e:	4602      	mov	r2, r0
 8018a90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a94:	4610      	mov	r0, r2
 8018a96:	4619      	mov	r1, r3
 8018a98:	e79e      	b.n	80189d8 <__ieee754_pow+0x108>
 8018a9a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8018a9e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8018aa2:	950a      	str	r5, [sp, #40]	; 0x28
 8018aa4:	9d00      	ldr	r5, [sp, #0]
 8018aa6:	46ac      	mov	ip, r5
 8018aa8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018aaa:	ea5c 0505 	orrs.w	r5, ip, r5
 8018aae:	d0e4      	beq.n	8018a7a <__ieee754_pow+0x1aa>
 8018ab0:	4b15      	ldr	r3, [pc, #84]	; (8018b08 <__ieee754_pow+0x238>)
 8018ab2:	429e      	cmp	r6, r3
 8018ab4:	f340 80fc 	ble.w	8018cb0 <__ieee754_pow+0x3e0>
 8018ab8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018abc:	429e      	cmp	r6, r3
 8018abe:	4b10      	ldr	r3, [pc, #64]	; (8018b00 <__ieee754_pow+0x230>)
 8018ac0:	dd07      	ble.n	8018ad2 <__ieee754_pow+0x202>
 8018ac2:	429c      	cmp	r4, r3
 8018ac4:	dc0a      	bgt.n	8018adc <__ieee754_pow+0x20c>
 8018ac6:	2f00      	cmp	r7, #0
 8018ac8:	da84      	bge.n	80189d4 <__ieee754_pow+0x104>
 8018aca:	a307      	add	r3, pc, #28	; (adr r3, 8018ae8 <__ieee754_pow+0x218>)
 8018acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ad0:	e795      	b.n	80189fe <__ieee754_pow+0x12e>
 8018ad2:	429c      	cmp	r4, r3
 8018ad4:	dbf7      	blt.n	8018ac6 <__ieee754_pow+0x1f6>
 8018ad6:	4b09      	ldr	r3, [pc, #36]	; (8018afc <__ieee754_pow+0x22c>)
 8018ad8:	429c      	cmp	r4, r3
 8018ada:	dd17      	ble.n	8018b0c <__ieee754_pow+0x23c>
 8018adc:	2f00      	cmp	r7, #0
 8018ade:	dcf4      	bgt.n	8018aca <__ieee754_pow+0x1fa>
 8018ae0:	e778      	b.n	80189d4 <__ieee754_pow+0x104>
 8018ae2:	bf00      	nop
 8018ae4:	f3af 8000 	nop.w
 8018ae8:	8800759c 	.word	0x8800759c
 8018aec:	7e37e43c 	.word	0x7e37e43c
 8018af0:	7ff00000 	.word	0x7ff00000
 8018af4:	0801a640 	.word	0x0801a640
 8018af8:	433fffff 	.word	0x433fffff
 8018afc:	3ff00000 	.word	0x3ff00000
 8018b00:	3fefffff 	.word	0x3fefffff
 8018b04:	3fe00000 	.word	0x3fe00000
 8018b08:	41e00000 	.word	0x41e00000
 8018b0c:	4b64      	ldr	r3, [pc, #400]	; (8018ca0 <__ieee754_pow+0x3d0>)
 8018b0e:	2200      	movs	r2, #0
 8018b10:	f7e7 fbca 	bl	80002a8 <__aeabi_dsub>
 8018b14:	a356      	add	r3, pc, #344	; (adr r3, 8018c70 <__ieee754_pow+0x3a0>)
 8018b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b1a:	4604      	mov	r4, r0
 8018b1c:	460d      	mov	r5, r1
 8018b1e:	f7e7 fd7b 	bl	8000618 <__aeabi_dmul>
 8018b22:	a355      	add	r3, pc, #340	; (adr r3, 8018c78 <__ieee754_pow+0x3a8>)
 8018b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b28:	4606      	mov	r6, r0
 8018b2a:	460f      	mov	r7, r1
 8018b2c:	4620      	mov	r0, r4
 8018b2e:	4629      	mov	r1, r5
 8018b30:	f7e7 fd72 	bl	8000618 <__aeabi_dmul>
 8018b34:	4b5b      	ldr	r3, [pc, #364]	; (8018ca4 <__ieee754_pow+0x3d4>)
 8018b36:	4682      	mov	sl, r0
 8018b38:	468b      	mov	fp, r1
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	4629      	mov	r1, r5
 8018b40:	f7e7 fd6a 	bl	8000618 <__aeabi_dmul>
 8018b44:	4602      	mov	r2, r0
 8018b46:	460b      	mov	r3, r1
 8018b48:	a14d      	add	r1, pc, #308	; (adr r1, 8018c80 <__ieee754_pow+0x3b0>)
 8018b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b4e:	f7e7 fbab 	bl	80002a8 <__aeabi_dsub>
 8018b52:	4622      	mov	r2, r4
 8018b54:	462b      	mov	r3, r5
 8018b56:	f7e7 fd5f 	bl	8000618 <__aeabi_dmul>
 8018b5a:	4602      	mov	r2, r0
 8018b5c:	460b      	mov	r3, r1
 8018b5e:	2000      	movs	r0, #0
 8018b60:	4951      	ldr	r1, [pc, #324]	; (8018ca8 <__ieee754_pow+0x3d8>)
 8018b62:	f7e7 fba1 	bl	80002a8 <__aeabi_dsub>
 8018b66:	4622      	mov	r2, r4
 8018b68:	4680      	mov	r8, r0
 8018b6a:	4689      	mov	r9, r1
 8018b6c:	462b      	mov	r3, r5
 8018b6e:	4620      	mov	r0, r4
 8018b70:	4629      	mov	r1, r5
 8018b72:	f7e7 fd51 	bl	8000618 <__aeabi_dmul>
 8018b76:	4602      	mov	r2, r0
 8018b78:	460b      	mov	r3, r1
 8018b7a:	4640      	mov	r0, r8
 8018b7c:	4649      	mov	r1, r9
 8018b7e:	f7e7 fd4b 	bl	8000618 <__aeabi_dmul>
 8018b82:	a341      	add	r3, pc, #260	; (adr r3, 8018c88 <__ieee754_pow+0x3b8>)
 8018b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b88:	f7e7 fd46 	bl	8000618 <__aeabi_dmul>
 8018b8c:	4602      	mov	r2, r0
 8018b8e:	460b      	mov	r3, r1
 8018b90:	4650      	mov	r0, sl
 8018b92:	4659      	mov	r1, fp
 8018b94:	f7e7 fb88 	bl	80002a8 <__aeabi_dsub>
 8018b98:	4602      	mov	r2, r0
 8018b9a:	460b      	mov	r3, r1
 8018b9c:	4680      	mov	r8, r0
 8018b9e:	4689      	mov	r9, r1
 8018ba0:	4630      	mov	r0, r6
 8018ba2:	4639      	mov	r1, r7
 8018ba4:	f7e7 fb82 	bl	80002ac <__adddf3>
 8018ba8:	2400      	movs	r4, #0
 8018baa:	4632      	mov	r2, r6
 8018bac:	463b      	mov	r3, r7
 8018bae:	4620      	mov	r0, r4
 8018bb0:	460d      	mov	r5, r1
 8018bb2:	f7e7 fb79 	bl	80002a8 <__aeabi_dsub>
 8018bb6:	4602      	mov	r2, r0
 8018bb8:	460b      	mov	r3, r1
 8018bba:	4640      	mov	r0, r8
 8018bbc:	4649      	mov	r1, r9
 8018bbe:	f7e7 fb73 	bl	80002a8 <__aeabi_dsub>
 8018bc2:	9b00      	ldr	r3, [sp, #0]
 8018bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018bc6:	3b01      	subs	r3, #1
 8018bc8:	4313      	orrs	r3, r2
 8018bca:	4682      	mov	sl, r0
 8018bcc:	468b      	mov	fp, r1
 8018bce:	f040 81f1 	bne.w	8018fb4 <__ieee754_pow+0x6e4>
 8018bd2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8018c90 <__ieee754_pow+0x3c0>
 8018bd6:	eeb0 8a47 	vmov.f32	s16, s14
 8018bda:	eef0 8a67 	vmov.f32	s17, s15
 8018bde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018be2:	2600      	movs	r6, #0
 8018be4:	4632      	mov	r2, r6
 8018be6:	463b      	mov	r3, r7
 8018be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018bec:	f7e7 fb5c 	bl	80002a8 <__aeabi_dsub>
 8018bf0:	4622      	mov	r2, r4
 8018bf2:	462b      	mov	r3, r5
 8018bf4:	f7e7 fd10 	bl	8000618 <__aeabi_dmul>
 8018bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018bfc:	4680      	mov	r8, r0
 8018bfe:	4689      	mov	r9, r1
 8018c00:	4650      	mov	r0, sl
 8018c02:	4659      	mov	r1, fp
 8018c04:	f7e7 fd08 	bl	8000618 <__aeabi_dmul>
 8018c08:	4602      	mov	r2, r0
 8018c0a:	460b      	mov	r3, r1
 8018c0c:	4640      	mov	r0, r8
 8018c0e:	4649      	mov	r1, r9
 8018c10:	f7e7 fb4c 	bl	80002ac <__adddf3>
 8018c14:	4632      	mov	r2, r6
 8018c16:	463b      	mov	r3, r7
 8018c18:	4680      	mov	r8, r0
 8018c1a:	4689      	mov	r9, r1
 8018c1c:	4620      	mov	r0, r4
 8018c1e:	4629      	mov	r1, r5
 8018c20:	f7e7 fcfa 	bl	8000618 <__aeabi_dmul>
 8018c24:	460b      	mov	r3, r1
 8018c26:	4604      	mov	r4, r0
 8018c28:	460d      	mov	r5, r1
 8018c2a:	4602      	mov	r2, r0
 8018c2c:	4649      	mov	r1, r9
 8018c2e:	4640      	mov	r0, r8
 8018c30:	f7e7 fb3c 	bl	80002ac <__adddf3>
 8018c34:	4b1d      	ldr	r3, [pc, #116]	; (8018cac <__ieee754_pow+0x3dc>)
 8018c36:	4299      	cmp	r1, r3
 8018c38:	ec45 4b19 	vmov	d9, r4, r5
 8018c3c:	4606      	mov	r6, r0
 8018c3e:	460f      	mov	r7, r1
 8018c40:	468b      	mov	fp, r1
 8018c42:	f340 82fe 	ble.w	8019242 <__ieee754_pow+0x972>
 8018c46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018c4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018c4e:	4303      	orrs	r3, r0
 8018c50:	f000 81f0 	beq.w	8019034 <__ieee754_pow+0x764>
 8018c54:	a310      	add	r3, pc, #64	; (adr r3, 8018c98 <__ieee754_pow+0x3c8>)
 8018c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c5a:	ec51 0b18 	vmov	r0, r1, d8
 8018c5e:	f7e7 fcdb 	bl	8000618 <__aeabi_dmul>
 8018c62:	a30d      	add	r3, pc, #52	; (adr r3, 8018c98 <__ieee754_pow+0x3c8>)
 8018c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c68:	e6cb      	b.n	8018a02 <__ieee754_pow+0x132>
 8018c6a:	bf00      	nop
 8018c6c:	f3af 8000 	nop.w
 8018c70:	60000000 	.word	0x60000000
 8018c74:	3ff71547 	.word	0x3ff71547
 8018c78:	f85ddf44 	.word	0xf85ddf44
 8018c7c:	3e54ae0b 	.word	0x3e54ae0b
 8018c80:	55555555 	.word	0x55555555
 8018c84:	3fd55555 	.word	0x3fd55555
 8018c88:	652b82fe 	.word	0x652b82fe
 8018c8c:	3ff71547 	.word	0x3ff71547
 8018c90:	00000000 	.word	0x00000000
 8018c94:	bff00000 	.word	0xbff00000
 8018c98:	8800759c 	.word	0x8800759c
 8018c9c:	7e37e43c 	.word	0x7e37e43c
 8018ca0:	3ff00000 	.word	0x3ff00000
 8018ca4:	3fd00000 	.word	0x3fd00000
 8018ca8:	3fe00000 	.word	0x3fe00000
 8018cac:	408fffff 	.word	0x408fffff
 8018cb0:	4bd7      	ldr	r3, [pc, #860]	; (8019010 <__ieee754_pow+0x740>)
 8018cb2:	ea03 0309 	and.w	r3, r3, r9
 8018cb6:	2200      	movs	r2, #0
 8018cb8:	b92b      	cbnz	r3, 8018cc6 <__ieee754_pow+0x3f6>
 8018cba:	4bd6      	ldr	r3, [pc, #856]	; (8019014 <__ieee754_pow+0x744>)
 8018cbc:	f7e7 fcac 	bl	8000618 <__aeabi_dmul>
 8018cc0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018cc4:	460c      	mov	r4, r1
 8018cc6:	1523      	asrs	r3, r4, #20
 8018cc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018ccc:	4413      	add	r3, r2
 8018cce:	9309      	str	r3, [sp, #36]	; 0x24
 8018cd0:	4bd1      	ldr	r3, [pc, #836]	; (8019018 <__ieee754_pow+0x748>)
 8018cd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018cd6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018cda:	429c      	cmp	r4, r3
 8018cdc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018ce0:	dd08      	ble.n	8018cf4 <__ieee754_pow+0x424>
 8018ce2:	4bce      	ldr	r3, [pc, #824]	; (801901c <__ieee754_pow+0x74c>)
 8018ce4:	429c      	cmp	r4, r3
 8018ce6:	f340 8163 	ble.w	8018fb0 <__ieee754_pow+0x6e0>
 8018cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cec:	3301      	adds	r3, #1
 8018cee:	9309      	str	r3, [sp, #36]	; 0x24
 8018cf0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018cf4:	2400      	movs	r4, #0
 8018cf6:	00e3      	lsls	r3, r4, #3
 8018cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8018cfa:	4bc9      	ldr	r3, [pc, #804]	; (8019020 <__ieee754_pow+0x750>)
 8018cfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018d00:	ed93 7b00 	vldr	d7, [r3]
 8018d04:	4629      	mov	r1, r5
 8018d06:	ec53 2b17 	vmov	r2, r3, d7
 8018d0a:	eeb0 8a47 	vmov.f32	s16, s14
 8018d0e:	eef0 8a67 	vmov.f32	s17, s15
 8018d12:	4682      	mov	sl, r0
 8018d14:	f7e7 fac8 	bl	80002a8 <__aeabi_dsub>
 8018d18:	4652      	mov	r2, sl
 8018d1a:	4606      	mov	r6, r0
 8018d1c:	460f      	mov	r7, r1
 8018d1e:	462b      	mov	r3, r5
 8018d20:	ec51 0b18 	vmov	r0, r1, d8
 8018d24:	f7e7 fac2 	bl	80002ac <__adddf3>
 8018d28:	4602      	mov	r2, r0
 8018d2a:	460b      	mov	r3, r1
 8018d2c:	2000      	movs	r0, #0
 8018d2e:	49bd      	ldr	r1, [pc, #756]	; (8019024 <__ieee754_pow+0x754>)
 8018d30:	f7e7 fd9c 	bl	800086c <__aeabi_ddiv>
 8018d34:	ec41 0b19 	vmov	d9, r0, r1
 8018d38:	4602      	mov	r2, r0
 8018d3a:	460b      	mov	r3, r1
 8018d3c:	4630      	mov	r0, r6
 8018d3e:	4639      	mov	r1, r7
 8018d40:	f7e7 fc6a 	bl	8000618 <__aeabi_dmul>
 8018d44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018d48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018d4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018d50:	2300      	movs	r3, #0
 8018d52:	9304      	str	r3, [sp, #16]
 8018d54:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018d58:	46ab      	mov	fp, r5
 8018d5a:	106d      	asrs	r5, r5, #1
 8018d5c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018d60:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018d64:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018d68:	2200      	movs	r2, #0
 8018d6a:	4640      	mov	r0, r8
 8018d6c:	4649      	mov	r1, r9
 8018d6e:	4614      	mov	r4, r2
 8018d70:	461d      	mov	r5, r3
 8018d72:	f7e7 fc51 	bl	8000618 <__aeabi_dmul>
 8018d76:	4602      	mov	r2, r0
 8018d78:	460b      	mov	r3, r1
 8018d7a:	4630      	mov	r0, r6
 8018d7c:	4639      	mov	r1, r7
 8018d7e:	f7e7 fa93 	bl	80002a8 <__aeabi_dsub>
 8018d82:	ec53 2b18 	vmov	r2, r3, d8
 8018d86:	4606      	mov	r6, r0
 8018d88:	460f      	mov	r7, r1
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	4629      	mov	r1, r5
 8018d8e:	f7e7 fa8b 	bl	80002a8 <__aeabi_dsub>
 8018d92:	4602      	mov	r2, r0
 8018d94:	460b      	mov	r3, r1
 8018d96:	4650      	mov	r0, sl
 8018d98:	4659      	mov	r1, fp
 8018d9a:	f7e7 fa85 	bl	80002a8 <__aeabi_dsub>
 8018d9e:	4642      	mov	r2, r8
 8018da0:	464b      	mov	r3, r9
 8018da2:	f7e7 fc39 	bl	8000618 <__aeabi_dmul>
 8018da6:	4602      	mov	r2, r0
 8018da8:	460b      	mov	r3, r1
 8018daa:	4630      	mov	r0, r6
 8018dac:	4639      	mov	r1, r7
 8018dae:	f7e7 fa7b 	bl	80002a8 <__aeabi_dsub>
 8018db2:	ec53 2b19 	vmov	r2, r3, d9
 8018db6:	f7e7 fc2f 	bl	8000618 <__aeabi_dmul>
 8018dba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018dbe:	ec41 0b18 	vmov	d8, r0, r1
 8018dc2:	4610      	mov	r0, r2
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	f7e7 fc27 	bl	8000618 <__aeabi_dmul>
 8018dca:	a37d      	add	r3, pc, #500	; (adr r3, 8018fc0 <__ieee754_pow+0x6f0>)
 8018dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd0:	4604      	mov	r4, r0
 8018dd2:	460d      	mov	r5, r1
 8018dd4:	f7e7 fc20 	bl	8000618 <__aeabi_dmul>
 8018dd8:	a37b      	add	r3, pc, #492	; (adr r3, 8018fc8 <__ieee754_pow+0x6f8>)
 8018dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dde:	f7e7 fa65 	bl	80002ac <__adddf3>
 8018de2:	4622      	mov	r2, r4
 8018de4:	462b      	mov	r3, r5
 8018de6:	f7e7 fc17 	bl	8000618 <__aeabi_dmul>
 8018dea:	a379      	add	r3, pc, #484	; (adr r3, 8018fd0 <__ieee754_pow+0x700>)
 8018dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018df0:	f7e7 fa5c 	bl	80002ac <__adddf3>
 8018df4:	4622      	mov	r2, r4
 8018df6:	462b      	mov	r3, r5
 8018df8:	f7e7 fc0e 	bl	8000618 <__aeabi_dmul>
 8018dfc:	a376      	add	r3, pc, #472	; (adr r3, 8018fd8 <__ieee754_pow+0x708>)
 8018dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e02:	f7e7 fa53 	bl	80002ac <__adddf3>
 8018e06:	4622      	mov	r2, r4
 8018e08:	462b      	mov	r3, r5
 8018e0a:	f7e7 fc05 	bl	8000618 <__aeabi_dmul>
 8018e0e:	a374      	add	r3, pc, #464	; (adr r3, 8018fe0 <__ieee754_pow+0x710>)
 8018e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e14:	f7e7 fa4a 	bl	80002ac <__adddf3>
 8018e18:	4622      	mov	r2, r4
 8018e1a:	462b      	mov	r3, r5
 8018e1c:	f7e7 fbfc 	bl	8000618 <__aeabi_dmul>
 8018e20:	a371      	add	r3, pc, #452	; (adr r3, 8018fe8 <__ieee754_pow+0x718>)
 8018e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e26:	f7e7 fa41 	bl	80002ac <__adddf3>
 8018e2a:	4622      	mov	r2, r4
 8018e2c:	4606      	mov	r6, r0
 8018e2e:	460f      	mov	r7, r1
 8018e30:	462b      	mov	r3, r5
 8018e32:	4620      	mov	r0, r4
 8018e34:	4629      	mov	r1, r5
 8018e36:	f7e7 fbef 	bl	8000618 <__aeabi_dmul>
 8018e3a:	4602      	mov	r2, r0
 8018e3c:	460b      	mov	r3, r1
 8018e3e:	4630      	mov	r0, r6
 8018e40:	4639      	mov	r1, r7
 8018e42:	f7e7 fbe9 	bl	8000618 <__aeabi_dmul>
 8018e46:	4642      	mov	r2, r8
 8018e48:	4604      	mov	r4, r0
 8018e4a:	460d      	mov	r5, r1
 8018e4c:	464b      	mov	r3, r9
 8018e4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018e52:	f7e7 fa2b 	bl	80002ac <__adddf3>
 8018e56:	ec53 2b18 	vmov	r2, r3, d8
 8018e5a:	f7e7 fbdd 	bl	8000618 <__aeabi_dmul>
 8018e5e:	4622      	mov	r2, r4
 8018e60:	462b      	mov	r3, r5
 8018e62:	f7e7 fa23 	bl	80002ac <__adddf3>
 8018e66:	4642      	mov	r2, r8
 8018e68:	4682      	mov	sl, r0
 8018e6a:	468b      	mov	fp, r1
 8018e6c:	464b      	mov	r3, r9
 8018e6e:	4640      	mov	r0, r8
 8018e70:	4649      	mov	r1, r9
 8018e72:	f7e7 fbd1 	bl	8000618 <__aeabi_dmul>
 8018e76:	4b6c      	ldr	r3, [pc, #432]	; (8019028 <__ieee754_pow+0x758>)
 8018e78:	2200      	movs	r2, #0
 8018e7a:	4606      	mov	r6, r0
 8018e7c:	460f      	mov	r7, r1
 8018e7e:	f7e7 fa15 	bl	80002ac <__adddf3>
 8018e82:	4652      	mov	r2, sl
 8018e84:	465b      	mov	r3, fp
 8018e86:	f7e7 fa11 	bl	80002ac <__adddf3>
 8018e8a:	9c04      	ldr	r4, [sp, #16]
 8018e8c:	460d      	mov	r5, r1
 8018e8e:	4622      	mov	r2, r4
 8018e90:	460b      	mov	r3, r1
 8018e92:	4640      	mov	r0, r8
 8018e94:	4649      	mov	r1, r9
 8018e96:	f7e7 fbbf 	bl	8000618 <__aeabi_dmul>
 8018e9a:	4b63      	ldr	r3, [pc, #396]	; (8019028 <__ieee754_pow+0x758>)
 8018e9c:	4680      	mov	r8, r0
 8018e9e:	4689      	mov	r9, r1
 8018ea0:	2200      	movs	r2, #0
 8018ea2:	4620      	mov	r0, r4
 8018ea4:	4629      	mov	r1, r5
 8018ea6:	f7e7 f9ff 	bl	80002a8 <__aeabi_dsub>
 8018eaa:	4632      	mov	r2, r6
 8018eac:	463b      	mov	r3, r7
 8018eae:	f7e7 f9fb 	bl	80002a8 <__aeabi_dsub>
 8018eb2:	4602      	mov	r2, r0
 8018eb4:	460b      	mov	r3, r1
 8018eb6:	4650      	mov	r0, sl
 8018eb8:	4659      	mov	r1, fp
 8018eba:	f7e7 f9f5 	bl	80002a8 <__aeabi_dsub>
 8018ebe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018ec2:	f7e7 fba9 	bl	8000618 <__aeabi_dmul>
 8018ec6:	4622      	mov	r2, r4
 8018ec8:	4606      	mov	r6, r0
 8018eca:	460f      	mov	r7, r1
 8018ecc:	462b      	mov	r3, r5
 8018ece:	ec51 0b18 	vmov	r0, r1, d8
 8018ed2:	f7e7 fba1 	bl	8000618 <__aeabi_dmul>
 8018ed6:	4602      	mov	r2, r0
 8018ed8:	460b      	mov	r3, r1
 8018eda:	4630      	mov	r0, r6
 8018edc:	4639      	mov	r1, r7
 8018ede:	f7e7 f9e5 	bl	80002ac <__adddf3>
 8018ee2:	4606      	mov	r6, r0
 8018ee4:	460f      	mov	r7, r1
 8018ee6:	4602      	mov	r2, r0
 8018ee8:	460b      	mov	r3, r1
 8018eea:	4640      	mov	r0, r8
 8018eec:	4649      	mov	r1, r9
 8018eee:	f7e7 f9dd 	bl	80002ac <__adddf3>
 8018ef2:	9c04      	ldr	r4, [sp, #16]
 8018ef4:	a33e      	add	r3, pc, #248	; (adr r3, 8018ff0 <__ieee754_pow+0x720>)
 8018ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018efa:	4620      	mov	r0, r4
 8018efc:	460d      	mov	r5, r1
 8018efe:	f7e7 fb8b 	bl	8000618 <__aeabi_dmul>
 8018f02:	4642      	mov	r2, r8
 8018f04:	ec41 0b18 	vmov	d8, r0, r1
 8018f08:	464b      	mov	r3, r9
 8018f0a:	4620      	mov	r0, r4
 8018f0c:	4629      	mov	r1, r5
 8018f0e:	f7e7 f9cb 	bl	80002a8 <__aeabi_dsub>
 8018f12:	4602      	mov	r2, r0
 8018f14:	460b      	mov	r3, r1
 8018f16:	4630      	mov	r0, r6
 8018f18:	4639      	mov	r1, r7
 8018f1a:	f7e7 f9c5 	bl	80002a8 <__aeabi_dsub>
 8018f1e:	a336      	add	r3, pc, #216	; (adr r3, 8018ff8 <__ieee754_pow+0x728>)
 8018f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f24:	f7e7 fb78 	bl	8000618 <__aeabi_dmul>
 8018f28:	a335      	add	r3, pc, #212	; (adr r3, 8019000 <__ieee754_pow+0x730>)
 8018f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f2e:	4606      	mov	r6, r0
 8018f30:	460f      	mov	r7, r1
 8018f32:	4620      	mov	r0, r4
 8018f34:	4629      	mov	r1, r5
 8018f36:	f7e7 fb6f 	bl	8000618 <__aeabi_dmul>
 8018f3a:	4602      	mov	r2, r0
 8018f3c:	460b      	mov	r3, r1
 8018f3e:	4630      	mov	r0, r6
 8018f40:	4639      	mov	r1, r7
 8018f42:	f7e7 f9b3 	bl	80002ac <__adddf3>
 8018f46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f48:	4b38      	ldr	r3, [pc, #224]	; (801902c <__ieee754_pow+0x75c>)
 8018f4a:	4413      	add	r3, r2
 8018f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f50:	f7e7 f9ac 	bl	80002ac <__adddf3>
 8018f54:	4682      	mov	sl, r0
 8018f56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f58:	468b      	mov	fp, r1
 8018f5a:	f7e7 faf3 	bl	8000544 <__aeabi_i2d>
 8018f5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f60:	4b33      	ldr	r3, [pc, #204]	; (8019030 <__ieee754_pow+0x760>)
 8018f62:	4413      	add	r3, r2
 8018f64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f68:	4606      	mov	r6, r0
 8018f6a:	460f      	mov	r7, r1
 8018f6c:	4652      	mov	r2, sl
 8018f6e:	465b      	mov	r3, fp
 8018f70:	ec51 0b18 	vmov	r0, r1, d8
 8018f74:	f7e7 f99a 	bl	80002ac <__adddf3>
 8018f78:	4642      	mov	r2, r8
 8018f7a:	464b      	mov	r3, r9
 8018f7c:	f7e7 f996 	bl	80002ac <__adddf3>
 8018f80:	4632      	mov	r2, r6
 8018f82:	463b      	mov	r3, r7
 8018f84:	f7e7 f992 	bl	80002ac <__adddf3>
 8018f88:	9c04      	ldr	r4, [sp, #16]
 8018f8a:	4632      	mov	r2, r6
 8018f8c:	463b      	mov	r3, r7
 8018f8e:	4620      	mov	r0, r4
 8018f90:	460d      	mov	r5, r1
 8018f92:	f7e7 f989 	bl	80002a8 <__aeabi_dsub>
 8018f96:	4642      	mov	r2, r8
 8018f98:	464b      	mov	r3, r9
 8018f9a:	f7e7 f985 	bl	80002a8 <__aeabi_dsub>
 8018f9e:	ec53 2b18 	vmov	r2, r3, d8
 8018fa2:	f7e7 f981 	bl	80002a8 <__aeabi_dsub>
 8018fa6:	4602      	mov	r2, r0
 8018fa8:	460b      	mov	r3, r1
 8018faa:	4650      	mov	r0, sl
 8018fac:	4659      	mov	r1, fp
 8018fae:	e606      	b.n	8018bbe <__ieee754_pow+0x2ee>
 8018fb0:	2401      	movs	r4, #1
 8018fb2:	e6a0      	b.n	8018cf6 <__ieee754_pow+0x426>
 8018fb4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019008 <__ieee754_pow+0x738>
 8018fb8:	e60d      	b.n	8018bd6 <__ieee754_pow+0x306>
 8018fba:	bf00      	nop
 8018fbc:	f3af 8000 	nop.w
 8018fc0:	4a454eef 	.word	0x4a454eef
 8018fc4:	3fca7e28 	.word	0x3fca7e28
 8018fc8:	93c9db65 	.word	0x93c9db65
 8018fcc:	3fcd864a 	.word	0x3fcd864a
 8018fd0:	a91d4101 	.word	0xa91d4101
 8018fd4:	3fd17460 	.word	0x3fd17460
 8018fd8:	518f264d 	.word	0x518f264d
 8018fdc:	3fd55555 	.word	0x3fd55555
 8018fe0:	db6fabff 	.word	0xdb6fabff
 8018fe4:	3fdb6db6 	.word	0x3fdb6db6
 8018fe8:	33333303 	.word	0x33333303
 8018fec:	3fe33333 	.word	0x3fe33333
 8018ff0:	e0000000 	.word	0xe0000000
 8018ff4:	3feec709 	.word	0x3feec709
 8018ff8:	dc3a03fd 	.word	0xdc3a03fd
 8018ffc:	3feec709 	.word	0x3feec709
 8019000:	145b01f5 	.word	0x145b01f5
 8019004:	be3e2fe0 	.word	0xbe3e2fe0
 8019008:	00000000 	.word	0x00000000
 801900c:	3ff00000 	.word	0x3ff00000
 8019010:	7ff00000 	.word	0x7ff00000
 8019014:	43400000 	.word	0x43400000
 8019018:	0003988e 	.word	0x0003988e
 801901c:	000bb679 	.word	0x000bb679
 8019020:	0801a648 	.word	0x0801a648
 8019024:	3ff00000 	.word	0x3ff00000
 8019028:	40080000 	.word	0x40080000
 801902c:	0801a668 	.word	0x0801a668
 8019030:	0801a658 	.word	0x0801a658
 8019034:	a3b5      	add	r3, pc, #724	; (adr r3, 801930c <__ieee754_pow+0xa3c>)
 8019036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801903a:	4640      	mov	r0, r8
 801903c:	4649      	mov	r1, r9
 801903e:	f7e7 f935 	bl	80002ac <__adddf3>
 8019042:	4622      	mov	r2, r4
 8019044:	ec41 0b1a 	vmov	d10, r0, r1
 8019048:	462b      	mov	r3, r5
 801904a:	4630      	mov	r0, r6
 801904c:	4639      	mov	r1, r7
 801904e:	f7e7 f92b 	bl	80002a8 <__aeabi_dsub>
 8019052:	4602      	mov	r2, r0
 8019054:	460b      	mov	r3, r1
 8019056:	ec51 0b1a 	vmov	r0, r1, d10
 801905a:	f7e7 fd6d 	bl	8000b38 <__aeabi_dcmpgt>
 801905e:	2800      	cmp	r0, #0
 8019060:	f47f adf8 	bne.w	8018c54 <__ieee754_pow+0x384>
 8019064:	4aa4      	ldr	r2, [pc, #656]	; (80192f8 <__ieee754_pow+0xa28>)
 8019066:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801906a:	4293      	cmp	r3, r2
 801906c:	f340 810b 	ble.w	8019286 <__ieee754_pow+0x9b6>
 8019070:	151b      	asrs	r3, r3, #20
 8019072:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019076:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801907a:	fa4a f303 	asr.w	r3, sl, r3
 801907e:	445b      	add	r3, fp
 8019080:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019084:	4e9d      	ldr	r6, [pc, #628]	; (80192fc <__ieee754_pow+0xa2c>)
 8019086:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801908a:	4116      	asrs	r6, r2
 801908c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019090:	2000      	movs	r0, #0
 8019092:	ea23 0106 	bic.w	r1, r3, r6
 8019096:	f1c2 0214 	rsb	r2, r2, #20
 801909a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801909e:	fa4a fa02 	asr.w	sl, sl, r2
 80190a2:	f1bb 0f00 	cmp.w	fp, #0
 80190a6:	4602      	mov	r2, r0
 80190a8:	460b      	mov	r3, r1
 80190aa:	4620      	mov	r0, r4
 80190ac:	4629      	mov	r1, r5
 80190ae:	bfb8      	it	lt
 80190b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80190b4:	f7e7 f8f8 	bl	80002a8 <__aeabi_dsub>
 80190b8:	ec41 0b19 	vmov	d9, r0, r1
 80190bc:	4642      	mov	r2, r8
 80190be:	464b      	mov	r3, r9
 80190c0:	ec51 0b19 	vmov	r0, r1, d9
 80190c4:	f7e7 f8f2 	bl	80002ac <__adddf3>
 80190c8:	2400      	movs	r4, #0
 80190ca:	a379      	add	r3, pc, #484	; (adr r3, 80192b0 <__ieee754_pow+0x9e0>)
 80190cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190d0:	4620      	mov	r0, r4
 80190d2:	460d      	mov	r5, r1
 80190d4:	f7e7 faa0 	bl	8000618 <__aeabi_dmul>
 80190d8:	ec53 2b19 	vmov	r2, r3, d9
 80190dc:	4606      	mov	r6, r0
 80190de:	460f      	mov	r7, r1
 80190e0:	4620      	mov	r0, r4
 80190e2:	4629      	mov	r1, r5
 80190e4:	f7e7 f8e0 	bl	80002a8 <__aeabi_dsub>
 80190e8:	4602      	mov	r2, r0
 80190ea:	460b      	mov	r3, r1
 80190ec:	4640      	mov	r0, r8
 80190ee:	4649      	mov	r1, r9
 80190f0:	f7e7 f8da 	bl	80002a8 <__aeabi_dsub>
 80190f4:	a370      	add	r3, pc, #448	; (adr r3, 80192b8 <__ieee754_pow+0x9e8>)
 80190f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190fa:	f7e7 fa8d 	bl	8000618 <__aeabi_dmul>
 80190fe:	a370      	add	r3, pc, #448	; (adr r3, 80192c0 <__ieee754_pow+0x9f0>)
 8019100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019104:	4680      	mov	r8, r0
 8019106:	4689      	mov	r9, r1
 8019108:	4620      	mov	r0, r4
 801910a:	4629      	mov	r1, r5
 801910c:	f7e7 fa84 	bl	8000618 <__aeabi_dmul>
 8019110:	4602      	mov	r2, r0
 8019112:	460b      	mov	r3, r1
 8019114:	4640      	mov	r0, r8
 8019116:	4649      	mov	r1, r9
 8019118:	f7e7 f8c8 	bl	80002ac <__adddf3>
 801911c:	4604      	mov	r4, r0
 801911e:	460d      	mov	r5, r1
 8019120:	4602      	mov	r2, r0
 8019122:	460b      	mov	r3, r1
 8019124:	4630      	mov	r0, r6
 8019126:	4639      	mov	r1, r7
 8019128:	f7e7 f8c0 	bl	80002ac <__adddf3>
 801912c:	4632      	mov	r2, r6
 801912e:	463b      	mov	r3, r7
 8019130:	4680      	mov	r8, r0
 8019132:	4689      	mov	r9, r1
 8019134:	f7e7 f8b8 	bl	80002a8 <__aeabi_dsub>
 8019138:	4602      	mov	r2, r0
 801913a:	460b      	mov	r3, r1
 801913c:	4620      	mov	r0, r4
 801913e:	4629      	mov	r1, r5
 8019140:	f7e7 f8b2 	bl	80002a8 <__aeabi_dsub>
 8019144:	4642      	mov	r2, r8
 8019146:	4606      	mov	r6, r0
 8019148:	460f      	mov	r7, r1
 801914a:	464b      	mov	r3, r9
 801914c:	4640      	mov	r0, r8
 801914e:	4649      	mov	r1, r9
 8019150:	f7e7 fa62 	bl	8000618 <__aeabi_dmul>
 8019154:	a35c      	add	r3, pc, #368	; (adr r3, 80192c8 <__ieee754_pow+0x9f8>)
 8019156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801915a:	4604      	mov	r4, r0
 801915c:	460d      	mov	r5, r1
 801915e:	f7e7 fa5b 	bl	8000618 <__aeabi_dmul>
 8019162:	a35b      	add	r3, pc, #364	; (adr r3, 80192d0 <__ieee754_pow+0xa00>)
 8019164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019168:	f7e7 f89e 	bl	80002a8 <__aeabi_dsub>
 801916c:	4622      	mov	r2, r4
 801916e:	462b      	mov	r3, r5
 8019170:	f7e7 fa52 	bl	8000618 <__aeabi_dmul>
 8019174:	a358      	add	r3, pc, #352	; (adr r3, 80192d8 <__ieee754_pow+0xa08>)
 8019176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801917a:	f7e7 f897 	bl	80002ac <__adddf3>
 801917e:	4622      	mov	r2, r4
 8019180:	462b      	mov	r3, r5
 8019182:	f7e7 fa49 	bl	8000618 <__aeabi_dmul>
 8019186:	a356      	add	r3, pc, #344	; (adr r3, 80192e0 <__ieee754_pow+0xa10>)
 8019188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801918c:	f7e7 f88c 	bl	80002a8 <__aeabi_dsub>
 8019190:	4622      	mov	r2, r4
 8019192:	462b      	mov	r3, r5
 8019194:	f7e7 fa40 	bl	8000618 <__aeabi_dmul>
 8019198:	a353      	add	r3, pc, #332	; (adr r3, 80192e8 <__ieee754_pow+0xa18>)
 801919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801919e:	f7e7 f885 	bl	80002ac <__adddf3>
 80191a2:	4622      	mov	r2, r4
 80191a4:	462b      	mov	r3, r5
 80191a6:	f7e7 fa37 	bl	8000618 <__aeabi_dmul>
 80191aa:	4602      	mov	r2, r0
 80191ac:	460b      	mov	r3, r1
 80191ae:	4640      	mov	r0, r8
 80191b0:	4649      	mov	r1, r9
 80191b2:	f7e7 f879 	bl	80002a8 <__aeabi_dsub>
 80191b6:	4604      	mov	r4, r0
 80191b8:	460d      	mov	r5, r1
 80191ba:	4602      	mov	r2, r0
 80191bc:	460b      	mov	r3, r1
 80191be:	4640      	mov	r0, r8
 80191c0:	4649      	mov	r1, r9
 80191c2:	f7e7 fa29 	bl	8000618 <__aeabi_dmul>
 80191c6:	2200      	movs	r2, #0
 80191c8:	ec41 0b19 	vmov	d9, r0, r1
 80191cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80191d0:	4620      	mov	r0, r4
 80191d2:	4629      	mov	r1, r5
 80191d4:	f7e7 f868 	bl	80002a8 <__aeabi_dsub>
 80191d8:	4602      	mov	r2, r0
 80191da:	460b      	mov	r3, r1
 80191dc:	ec51 0b19 	vmov	r0, r1, d9
 80191e0:	f7e7 fb44 	bl	800086c <__aeabi_ddiv>
 80191e4:	4632      	mov	r2, r6
 80191e6:	4604      	mov	r4, r0
 80191e8:	460d      	mov	r5, r1
 80191ea:	463b      	mov	r3, r7
 80191ec:	4640      	mov	r0, r8
 80191ee:	4649      	mov	r1, r9
 80191f0:	f7e7 fa12 	bl	8000618 <__aeabi_dmul>
 80191f4:	4632      	mov	r2, r6
 80191f6:	463b      	mov	r3, r7
 80191f8:	f7e7 f858 	bl	80002ac <__adddf3>
 80191fc:	4602      	mov	r2, r0
 80191fe:	460b      	mov	r3, r1
 8019200:	4620      	mov	r0, r4
 8019202:	4629      	mov	r1, r5
 8019204:	f7e7 f850 	bl	80002a8 <__aeabi_dsub>
 8019208:	4642      	mov	r2, r8
 801920a:	464b      	mov	r3, r9
 801920c:	f7e7 f84c 	bl	80002a8 <__aeabi_dsub>
 8019210:	460b      	mov	r3, r1
 8019212:	4602      	mov	r2, r0
 8019214:	493a      	ldr	r1, [pc, #232]	; (8019300 <__ieee754_pow+0xa30>)
 8019216:	2000      	movs	r0, #0
 8019218:	f7e7 f846 	bl	80002a8 <__aeabi_dsub>
 801921c:	e9cd 0100 	strd	r0, r1, [sp]
 8019220:	9b01      	ldr	r3, [sp, #4]
 8019222:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801922a:	da2f      	bge.n	801928c <__ieee754_pow+0x9bc>
 801922c:	4650      	mov	r0, sl
 801922e:	ed9d 0b00 	vldr	d0, [sp]
 8019232:	f000 f9c1 	bl	80195b8 <scalbn>
 8019236:	ec51 0b10 	vmov	r0, r1, d0
 801923a:	ec53 2b18 	vmov	r2, r3, d8
 801923e:	f7ff bbe0 	b.w	8018a02 <__ieee754_pow+0x132>
 8019242:	4b30      	ldr	r3, [pc, #192]	; (8019304 <__ieee754_pow+0xa34>)
 8019244:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019248:	429e      	cmp	r6, r3
 801924a:	f77f af0b 	ble.w	8019064 <__ieee754_pow+0x794>
 801924e:	4b2e      	ldr	r3, [pc, #184]	; (8019308 <__ieee754_pow+0xa38>)
 8019250:	440b      	add	r3, r1
 8019252:	4303      	orrs	r3, r0
 8019254:	d00b      	beq.n	801926e <__ieee754_pow+0x99e>
 8019256:	a326      	add	r3, pc, #152	; (adr r3, 80192f0 <__ieee754_pow+0xa20>)
 8019258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801925c:	ec51 0b18 	vmov	r0, r1, d8
 8019260:	f7e7 f9da 	bl	8000618 <__aeabi_dmul>
 8019264:	a322      	add	r3, pc, #136	; (adr r3, 80192f0 <__ieee754_pow+0xa20>)
 8019266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801926a:	f7ff bbca 	b.w	8018a02 <__ieee754_pow+0x132>
 801926e:	4622      	mov	r2, r4
 8019270:	462b      	mov	r3, r5
 8019272:	f7e7 f819 	bl	80002a8 <__aeabi_dsub>
 8019276:	4642      	mov	r2, r8
 8019278:	464b      	mov	r3, r9
 801927a:	f7e7 fc53 	bl	8000b24 <__aeabi_dcmpge>
 801927e:	2800      	cmp	r0, #0
 8019280:	f43f aef0 	beq.w	8019064 <__ieee754_pow+0x794>
 8019284:	e7e7      	b.n	8019256 <__ieee754_pow+0x986>
 8019286:	f04f 0a00 	mov.w	sl, #0
 801928a:	e717      	b.n	80190bc <__ieee754_pow+0x7ec>
 801928c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019290:	4619      	mov	r1, r3
 8019292:	e7d2      	b.n	801923a <__ieee754_pow+0x96a>
 8019294:	491a      	ldr	r1, [pc, #104]	; (8019300 <__ieee754_pow+0xa30>)
 8019296:	2000      	movs	r0, #0
 8019298:	f7ff bb9e 	b.w	80189d8 <__ieee754_pow+0x108>
 801929c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192a0:	f7ff bb9a 	b.w	80189d8 <__ieee754_pow+0x108>
 80192a4:	9000      	str	r0, [sp, #0]
 80192a6:	f7ff bb76 	b.w	8018996 <__ieee754_pow+0xc6>
 80192aa:	2100      	movs	r1, #0
 80192ac:	f7ff bb60 	b.w	8018970 <__ieee754_pow+0xa0>
 80192b0:	00000000 	.word	0x00000000
 80192b4:	3fe62e43 	.word	0x3fe62e43
 80192b8:	fefa39ef 	.word	0xfefa39ef
 80192bc:	3fe62e42 	.word	0x3fe62e42
 80192c0:	0ca86c39 	.word	0x0ca86c39
 80192c4:	be205c61 	.word	0xbe205c61
 80192c8:	72bea4d0 	.word	0x72bea4d0
 80192cc:	3e663769 	.word	0x3e663769
 80192d0:	c5d26bf1 	.word	0xc5d26bf1
 80192d4:	3ebbbd41 	.word	0x3ebbbd41
 80192d8:	af25de2c 	.word	0xaf25de2c
 80192dc:	3f11566a 	.word	0x3f11566a
 80192e0:	16bebd93 	.word	0x16bebd93
 80192e4:	3f66c16c 	.word	0x3f66c16c
 80192e8:	5555553e 	.word	0x5555553e
 80192ec:	3fc55555 	.word	0x3fc55555
 80192f0:	c2f8f359 	.word	0xc2f8f359
 80192f4:	01a56e1f 	.word	0x01a56e1f
 80192f8:	3fe00000 	.word	0x3fe00000
 80192fc:	000fffff 	.word	0x000fffff
 8019300:	3ff00000 	.word	0x3ff00000
 8019304:	4090cbff 	.word	0x4090cbff
 8019308:	3f6f3400 	.word	0x3f6f3400
 801930c:	652b82fe 	.word	0x652b82fe
 8019310:	3c971547 	.word	0x3c971547

08019314 <__ieee754_sqrt>:
 8019314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019318:	ec55 4b10 	vmov	r4, r5, d0
 801931c:	4e56      	ldr	r6, [pc, #344]	; (8019478 <__ieee754_sqrt+0x164>)
 801931e:	43ae      	bics	r6, r5
 8019320:	ee10 0a10 	vmov	r0, s0
 8019324:	ee10 3a10 	vmov	r3, s0
 8019328:	4629      	mov	r1, r5
 801932a:	462a      	mov	r2, r5
 801932c:	d110      	bne.n	8019350 <__ieee754_sqrt+0x3c>
 801932e:	ee10 2a10 	vmov	r2, s0
 8019332:	462b      	mov	r3, r5
 8019334:	f7e7 f970 	bl	8000618 <__aeabi_dmul>
 8019338:	4602      	mov	r2, r0
 801933a:	460b      	mov	r3, r1
 801933c:	4620      	mov	r0, r4
 801933e:	4629      	mov	r1, r5
 8019340:	f7e6 ffb4 	bl	80002ac <__adddf3>
 8019344:	4604      	mov	r4, r0
 8019346:	460d      	mov	r5, r1
 8019348:	ec45 4b10 	vmov	d0, r4, r5
 801934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019350:	2d00      	cmp	r5, #0
 8019352:	dc10      	bgt.n	8019376 <__ieee754_sqrt+0x62>
 8019354:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019358:	4330      	orrs	r0, r6
 801935a:	d0f5      	beq.n	8019348 <__ieee754_sqrt+0x34>
 801935c:	b15d      	cbz	r5, 8019376 <__ieee754_sqrt+0x62>
 801935e:	ee10 2a10 	vmov	r2, s0
 8019362:	462b      	mov	r3, r5
 8019364:	ee10 0a10 	vmov	r0, s0
 8019368:	f7e6 ff9e 	bl	80002a8 <__aeabi_dsub>
 801936c:	4602      	mov	r2, r0
 801936e:	460b      	mov	r3, r1
 8019370:	f7e7 fa7c 	bl	800086c <__aeabi_ddiv>
 8019374:	e7e6      	b.n	8019344 <__ieee754_sqrt+0x30>
 8019376:	1509      	asrs	r1, r1, #20
 8019378:	d076      	beq.n	8019468 <__ieee754_sqrt+0x154>
 801937a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801937e:	07ce      	lsls	r6, r1, #31
 8019380:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8019384:	bf5e      	ittt	pl
 8019386:	0fda      	lsrpl	r2, r3, #31
 8019388:	005b      	lslpl	r3, r3, #1
 801938a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801938e:	0fda      	lsrs	r2, r3, #31
 8019390:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8019394:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019398:	2000      	movs	r0, #0
 801939a:	106d      	asrs	r5, r5, #1
 801939c:	005b      	lsls	r3, r3, #1
 801939e:	f04f 0e16 	mov.w	lr, #22
 80193a2:	4684      	mov	ip, r0
 80193a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80193a8:	eb0c 0401 	add.w	r4, ip, r1
 80193ac:	4294      	cmp	r4, r2
 80193ae:	bfde      	ittt	le
 80193b0:	1b12      	suble	r2, r2, r4
 80193b2:	eb04 0c01 	addle.w	ip, r4, r1
 80193b6:	1840      	addle	r0, r0, r1
 80193b8:	0052      	lsls	r2, r2, #1
 80193ba:	f1be 0e01 	subs.w	lr, lr, #1
 80193be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80193c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80193c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80193ca:	d1ed      	bne.n	80193a8 <__ieee754_sqrt+0x94>
 80193cc:	4671      	mov	r1, lr
 80193ce:	2720      	movs	r7, #32
 80193d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80193d4:	4562      	cmp	r2, ip
 80193d6:	eb04 060e 	add.w	r6, r4, lr
 80193da:	dc02      	bgt.n	80193e2 <__ieee754_sqrt+0xce>
 80193dc:	d113      	bne.n	8019406 <__ieee754_sqrt+0xf2>
 80193de:	429e      	cmp	r6, r3
 80193e0:	d811      	bhi.n	8019406 <__ieee754_sqrt+0xf2>
 80193e2:	2e00      	cmp	r6, #0
 80193e4:	eb06 0e04 	add.w	lr, r6, r4
 80193e8:	da43      	bge.n	8019472 <__ieee754_sqrt+0x15e>
 80193ea:	f1be 0f00 	cmp.w	lr, #0
 80193ee:	db40      	blt.n	8019472 <__ieee754_sqrt+0x15e>
 80193f0:	f10c 0801 	add.w	r8, ip, #1
 80193f4:	eba2 020c 	sub.w	r2, r2, ip
 80193f8:	429e      	cmp	r6, r3
 80193fa:	bf88      	it	hi
 80193fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019400:	1b9b      	subs	r3, r3, r6
 8019402:	4421      	add	r1, r4
 8019404:	46c4      	mov	ip, r8
 8019406:	0052      	lsls	r2, r2, #1
 8019408:	3f01      	subs	r7, #1
 801940a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801940e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019412:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019416:	d1dd      	bne.n	80193d4 <__ieee754_sqrt+0xc0>
 8019418:	4313      	orrs	r3, r2
 801941a:	d006      	beq.n	801942a <__ieee754_sqrt+0x116>
 801941c:	1c4c      	adds	r4, r1, #1
 801941e:	bf13      	iteet	ne
 8019420:	3101      	addne	r1, #1
 8019422:	3001      	addeq	r0, #1
 8019424:	4639      	moveq	r1, r7
 8019426:	f021 0101 	bicne.w	r1, r1, #1
 801942a:	1043      	asrs	r3, r0, #1
 801942c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019430:	0849      	lsrs	r1, r1, #1
 8019432:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019436:	07c2      	lsls	r2, r0, #31
 8019438:	bf48      	it	mi
 801943a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801943e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8019442:	460c      	mov	r4, r1
 8019444:	463d      	mov	r5, r7
 8019446:	e77f      	b.n	8019348 <__ieee754_sqrt+0x34>
 8019448:	0ada      	lsrs	r2, r3, #11
 801944a:	3815      	subs	r0, #21
 801944c:	055b      	lsls	r3, r3, #21
 801944e:	2a00      	cmp	r2, #0
 8019450:	d0fa      	beq.n	8019448 <__ieee754_sqrt+0x134>
 8019452:	02d7      	lsls	r7, r2, #11
 8019454:	d50a      	bpl.n	801946c <__ieee754_sqrt+0x158>
 8019456:	f1c1 0420 	rsb	r4, r1, #32
 801945a:	fa23 f404 	lsr.w	r4, r3, r4
 801945e:	1e4d      	subs	r5, r1, #1
 8019460:	408b      	lsls	r3, r1
 8019462:	4322      	orrs	r2, r4
 8019464:	1b41      	subs	r1, r0, r5
 8019466:	e788      	b.n	801937a <__ieee754_sqrt+0x66>
 8019468:	4608      	mov	r0, r1
 801946a:	e7f0      	b.n	801944e <__ieee754_sqrt+0x13a>
 801946c:	0052      	lsls	r2, r2, #1
 801946e:	3101      	adds	r1, #1
 8019470:	e7ef      	b.n	8019452 <__ieee754_sqrt+0x13e>
 8019472:	46e0      	mov	r8, ip
 8019474:	e7be      	b.n	80193f4 <__ieee754_sqrt+0xe0>
 8019476:	bf00      	nop
 8019478:	7ff00000 	.word	0x7ff00000

0801947c <fabs>:
 801947c:	ec51 0b10 	vmov	r0, r1, d0
 8019480:	ee10 2a10 	vmov	r2, s0
 8019484:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019488:	ec43 2b10 	vmov	d0, r2, r3
 801948c:	4770      	bx	lr

0801948e <finite>:
 801948e:	b082      	sub	sp, #8
 8019490:	ed8d 0b00 	vstr	d0, [sp]
 8019494:	9801      	ldr	r0, [sp, #4]
 8019496:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801949a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801949e:	0fc0      	lsrs	r0, r0, #31
 80194a0:	b002      	add	sp, #8
 80194a2:	4770      	bx	lr

080194a4 <rint>:
 80194a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80194a6:	ec51 0b10 	vmov	r0, r1, d0
 80194aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80194ae:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80194b2:	2e13      	cmp	r6, #19
 80194b4:	ee10 4a10 	vmov	r4, s0
 80194b8:	460b      	mov	r3, r1
 80194ba:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80194be:	dc58      	bgt.n	8019572 <rint+0xce>
 80194c0:	2e00      	cmp	r6, #0
 80194c2:	da2b      	bge.n	801951c <rint+0x78>
 80194c4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80194c8:	4302      	orrs	r2, r0
 80194ca:	d023      	beq.n	8019514 <rint+0x70>
 80194cc:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80194d0:	4302      	orrs	r2, r0
 80194d2:	4254      	negs	r4, r2
 80194d4:	4314      	orrs	r4, r2
 80194d6:	0c4b      	lsrs	r3, r1, #17
 80194d8:	0b24      	lsrs	r4, r4, #12
 80194da:	045b      	lsls	r3, r3, #17
 80194dc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80194e0:	ea44 0103 	orr.w	r1, r4, r3
 80194e4:	4b32      	ldr	r3, [pc, #200]	; (80195b0 <rint+0x10c>)
 80194e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80194ea:	e9d3 6700 	ldrd	r6, r7, [r3]
 80194ee:	4602      	mov	r2, r0
 80194f0:	460b      	mov	r3, r1
 80194f2:	4630      	mov	r0, r6
 80194f4:	4639      	mov	r1, r7
 80194f6:	f7e6 fed9 	bl	80002ac <__adddf3>
 80194fa:	e9cd 0100 	strd	r0, r1, [sp]
 80194fe:	463b      	mov	r3, r7
 8019500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019504:	4632      	mov	r2, r6
 8019506:	f7e6 fecf 	bl	80002a8 <__aeabi_dsub>
 801950a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801950e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019512:	4639      	mov	r1, r7
 8019514:	ec41 0b10 	vmov	d0, r0, r1
 8019518:	b003      	add	sp, #12
 801951a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801951c:	4a25      	ldr	r2, [pc, #148]	; (80195b4 <rint+0x110>)
 801951e:	4132      	asrs	r2, r6
 8019520:	ea01 0702 	and.w	r7, r1, r2
 8019524:	4307      	orrs	r7, r0
 8019526:	d0f5      	beq.n	8019514 <rint+0x70>
 8019528:	0851      	lsrs	r1, r2, #1
 801952a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801952e:	4314      	orrs	r4, r2
 8019530:	d00c      	beq.n	801954c <rint+0xa8>
 8019532:	ea23 0201 	bic.w	r2, r3, r1
 8019536:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801953a:	2e13      	cmp	r6, #19
 801953c:	fa43 f606 	asr.w	r6, r3, r6
 8019540:	bf0c      	ite	eq
 8019542:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019546:	2400      	movne	r4, #0
 8019548:	ea42 0306 	orr.w	r3, r2, r6
 801954c:	4918      	ldr	r1, [pc, #96]	; (80195b0 <rint+0x10c>)
 801954e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019552:	4622      	mov	r2, r4
 8019554:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019558:	4620      	mov	r0, r4
 801955a:	4629      	mov	r1, r5
 801955c:	f7e6 fea6 	bl	80002ac <__adddf3>
 8019560:	e9cd 0100 	strd	r0, r1, [sp]
 8019564:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019568:	4622      	mov	r2, r4
 801956a:	462b      	mov	r3, r5
 801956c:	f7e6 fe9c 	bl	80002a8 <__aeabi_dsub>
 8019570:	e7d0      	b.n	8019514 <rint+0x70>
 8019572:	2e33      	cmp	r6, #51	; 0x33
 8019574:	dd07      	ble.n	8019586 <rint+0xe2>
 8019576:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801957a:	d1cb      	bne.n	8019514 <rint+0x70>
 801957c:	ee10 2a10 	vmov	r2, s0
 8019580:	f7e6 fe94 	bl	80002ac <__adddf3>
 8019584:	e7c6      	b.n	8019514 <rint+0x70>
 8019586:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801958a:	f04f 36ff 	mov.w	r6, #4294967295
 801958e:	40d6      	lsrs	r6, r2
 8019590:	4230      	tst	r0, r6
 8019592:	d0bf      	beq.n	8019514 <rint+0x70>
 8019594:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8019598:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801959c:	bf1f      	itttt	ne
 801959e:	ea24 0101 	bicne.w	r1, r4, r1
 80195a2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80195a6:	fa44 f202 	asrne.w	r2, r4, r2
 80195aa:	ea41 0402 	orrne.w	r4, r1, r2
 80195ae:	e7cd      	b.n	801954c <rint+0xa8>
 80195b0:	0801a678 	.word	0x0801a678
 80195b4:	000fffff 	.word	0x000fffff

080195b8 <scalbn>:
 80195b8:	b570      	push	{r4, r5, r6, lr}
 80195ba:	ec55 4b10 	vmov	r4, r5, d0
 80195be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80195c2:	4606      	mov	r6, r0
 80195c4:	462b      	mov	r3, r5
 80195c6:	b99a      	cbnz	r2, 80195f0 <scalbn+0x38>
 80195c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80195cc:	4323      	orrs	r3, r4
 80195ce:	d036      	beq.n	801963e <scalbn+0x86>
 80195d0:	4b39      	ldr	r3, [pc, #228]	; (80196b8 <scalbn+0x100>)
 80195d2:	4629      	mov	r1, r5
 80195d4:	ee10 0a10 	vmov	r0, s0
 80195d8:	2200      	movs	r2, #0
 80195da:	f7e7 f81d 	bl	8000618 <__aeabi_dmul>
 80195de:	4b37      	ldr	r3, [pc, #220]	; (80196bc <scalbn+0x104>)
 80195e0:	429e      	cmp	r6, r3
 80195e2:	4604      	mov	r4, r0
 80195e4:	460d      	mov	r5, r1
 80195e6:	da10      	bge.n	801960a <scalbn+0x52>
 80195e8:	a32b      	add	r3, pc, #172	; (adr r3, 8019698 <scalbn+0xe0>)
 80195ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ee:	e03a      	b.n	8019666 <scalbn+0xae>
 80195f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80195f4:	428a      	cmp	r2, r1
 80195f6:	d10c      	bne.n	8019612 <scalbn+0x5a>
 80195f8:	ee10 2a10 	vmov	r2, s0
 80195fc:	4620      	mov	r0, r4
 80195fe:	4629      	mov	r1, r5
 8019600:	f7e6 fe54 	bl	80002ac <__adddf3>
 8019604:	4604      	mov	r4, r0
 8019606:	460d      	mov	r5, r1
 8019608:	e019      	b.n	801963e <scalbn+0x86>
 801960a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801960e:	460b      	mov	r3, r1
 8019610:	3a36      	subs	r2, #54	; 0x36
 8019612:	4432      	add	r2, r6
 8019614:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019618:	428a      	cmp	r2, r1
 801961a:	dd08      	ble.n	801962e <scalbn+0x76>
 801961c:	2d00      	cmp	r5, #0
 801961e:	a120      	add	r1, pc, #128	; (adr r1, 80196a0 <scalbn+0xe8>)
 8019620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019624:	da1c      	bge.n	8019660 <scalbn+0xa8>
 8019626:	a120      	add	r1, pc, #128	; (adr r1, 80196a8 <scalbn+0xf0>)
 8019628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801962c:	e018      	b.n	8019660 <scalbn+0xa8>
 801962e:	2a00      	cmp	r2, #0
 8019630:	dd08      	ble.n	8019644 <scalbn+0x8c>
 8019632:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019636:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801963a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801963e:	ec45 4b10 	vmov	d0, r4, r5
 8019642:	bd70      	pop	{r4, r5, r6, pc}
 8019644:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019648:	da19      	bge.n	801967e <scalbn+0xc6>
 801964a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801964e:	429e      	cmp	r6, r3
 8019650:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019654:	dd0a      	ble.n	801966c <scalbn+0xb4>
 8019656:	a112      	add	r1, pc, #72	; (adr r1, 80196a0 <scalbn+0xe8>)
 8019658:	e9d1 0100 	ldrd	r0, r1, [r1]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d1e2      	bne.n	8019626 <scalbn+0x6e>
 8019660:	a30f      	add	r3, pc, #60	; (adr r3, 80196a0 <scalbn+0xe8>)
 8019662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019666:	f7e6 ffd7 	bl	8000618 <__aeabi_dmul>
 801966a:	e7cb      	b.n	8019604 <scalbn+0x4c>
 801966c:	a10a      	add	r1, pc, #40	; (adr r1, 8019698 <scalbn+0xe0>)
 801966e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d0b8      	beq.n	80195e8 <scalbn+0x30>
 8019676:	a10e      	add	r1, pc, #56	; (adr r1, 80196b0 <scalbn+0xf8>)
 8019678:	e9d1 0100 	ldrd	r0, r1, [r1]
 801967c:	e7b4      	b.n	80195e8 <scalbn+0x30>
 801967e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019682:	3236      	adds	r2, #54	; 0x36
 8019684:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019688:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801968c:	4620      	mov	r0, r4
 801968e:	4b0c      	ldr	r3, [pc, #48]	; (80196c0 <scalbn+0x108>)
 8019690:	2200      	movs	r2, #0
 8019692:	e7e8      	b.n	8019666 <scalbn+0xae>
 8019694:	f3af 8000 	nop.w
 8019698:	c2f8f359 	.word	0xc2f8f359
 801969c:	01a56e1f 	.word	0x01a56e1f
 80196a0:	8800759c 	.word	0x8800759c
 80196a4:	7e37e43c 	.word	0x7e37e43c
 80196a8:	8800759c 	.word	0x8800759c
 80196ac:	fe37e43c 	.word	0xfe37e43c
 80196b0:	c2f8f359 	.word	0xc2f8f359
 80196b4:	81a56e1f 	.word	0x81a56e1f
 80196b8:	43500000 	.word	0x43500000
 80196bc:	ffff3cb0 	.word	0xffff3cb0
 80196c0:	3c900000 	.word	0x3c900000

080196c4 <_init>:
 80196c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196c6:	bf00      	nop
 80196c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196ca:	bc08      	pop	{r3}
 80196cc:	469e      	mov	lr, r3
 80196ce:	4770      	bx	lr

080196d0 <_fini>:
 80196d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196d2:	bf00      	nop
 80196d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196d6:	bc08      	pop	{r3}
 80196d8:	469e      	mov	lr, r3
 80196da:	4770      	bx	lr
